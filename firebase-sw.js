/*! For license information please see firebase-sw.js.LICENSE.txt */
(()=>{var t={926:t=>{function e(t,e,n,r,i,o,s){try{var a=t[o](s),h=a.value}catch(t){return void n(t)}a.done?e(h):Promise.resolve(h).then(r,i)}t.exports=function(t){return function(){var n=this,r=arguments;return new Promise((function(i,o){var s=t.apply(n,r);function a(t){e(s,i,o,a,h,"next",t)}function h(t){e(s,i,o,a,h,"throw",t)}a(void 0)}))}}},757:(t,e,n)=>{t.exports=n(666)},99:(t,e,n)=>{"use strict";n.d(e,{Z:()=>E});var r,i,o=n(655),s=n(589),a=n(909),h=n(594),u=((r={})["no-app"]="No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()",r["bad-app-name"]="Illegal App name: '{$appName}",r["duplicate-app"]="Firebase App named '{$appName}' already exists",r["app-deleted"]="Firebase App named '{$appName}' already deleted",r["invalid-app-argument"]="firebase.{$appName}() takes either no argument or a Firebase App instance.",r["invalid-log-argument"]="First argument to `onLog` must be null or a function.",r),l=new s.LL("app","Firebase",u),c="@firebase/app",p="[DEFAULT]",d=((i={})[c]="fire-core",i["@firebase/analytics"]="fire-analytics",i["@firebase/auth"]="fire-auth",i["@firebase/database"]="fire-rtdb",i["@firebase/functions"]="fire-fn",i["@firebase/installations"]="fire-iid",i["@firebase/messaging"]="fire-fcm",i["@firebase/performance"]="fire-perf",i["@firebase/remote-config"]="fire-rc",i["@firebase/storage"]="fire-gcs",i["@firebase/firestore"]="fire-fst",i["fire-js"]="fire-js",i["firebase-wrapper"]="fire-js-all",i),f=new h.Yd("@firebase/app"),y=function(){function t(t,e,n){var r,i,h=this;this.firebase_=n,this.isDeleted_=!1,this.name_=e.name,this.automaticDataCollectionEnabled_=e.automaticDataCollectionEnabled||!1,this.options_=(0,s.p$)(t),this.container=new a.H0(e.name),this._addComponent(new a.wA("app",(function(){return h}),"PUBLIC"));try{for(var u=(0,o.XA)(this.firebase_.INTERNAL.components.values()),l=u.next();!l.done;l=u.next()){var c=l.value;this._addComponent(c)}}catch(t){r={error:t}}finally{try{l&&!l.done&&(i=u.return)&&i.call(u)}finally{if(r)throw r.error}}}return Object.defineProperty(t.prototype,"automaticDataCollectionEnabled",{get:function(){return this.checkDestroyed_(),this.automaticDataCollectionEnabled_},set:function(t){this.checkDestroyed_(),this.automaticDataCollectionEnabled_=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"name",{get:function(){return this.checkDestroyed_(),this.name_},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"options",{get:function(){return this.checkDestroyed_(),this.options_},enumerable:!1,configurable:!0}),t.prototype.delete=function(){var t=this;return new Promise((function(e){t.checkDestroyed_(),e()})).then((function(){return t.firebase_.INTERNAL.removeApp(t.name_),Promise.all(t.container.getProviders().map((function(t){return t.delete()})))})).then((function(){t.isDeleted_=!0}))},t.prototype._getService=function(t,e){return void 0===e&&(e=p),this.checkDestroyed_(),this.container.getProvider(t).getImmediate({identifier:e})},t.prototype._removeServiceInstance=function(t,e){void 0===e&&(e=p),this.container.getProvider(t).clearInstance(e)},t.prototype._addComponent=function(t){try{this.container.addComponent(t)}catch(e){f.debug("Component "+t.name+" failed to register with FirebaseApp "+this.name,e)}},t.prototype._addOrOverwriteComponent=function(t){this.container.addOrOverwriteComponent(t)},t.prototype.checkDestroyed_=function(){if(this.isDeleted_)throw l.create("app-deleted",{appName:this.name_})},t}();y.prototype.name&&y.prototype.options||y.prototype.delete||console.log("dc");var _=function t(){var e=function(t){var e={},n=new Map,r={__esModule:!0,initializeApp:function(n,i){void 0===i&&(i={}),"object"==typeof i&&null!==i||(i={name:i});var o=i;void 0===o.name&&(o.name=p);var a=o.name;if("string"!=typeof a||!a)throw l.create("bad-app-name",{appName:String(a)});if((0,s.r3)(e,a))throw l.create("duplicate-app",{appName:a});var h=new t(n,o,r);return e[a]=h,h},app:i,registerVersion:function(t,e,n){var r,i=null!==(r=d[t])&&void 0!==r?r:t;n&&(i+="-"+n);var o=i.match(/\s|\//),s=e.match(/\s|\//);if(o||s){var h=['Unable to register library "'+i+'" with version "'+e+'":'];return o&&h.push('library name "'+i+'" contains illegal characters (whitespace or "/")'),o&&s&&h.push("and"),s&&h.push('version name "'+e+'" contains illegal characters (whitespace or "/")'),void f.warn(h.join(" "))}u(new a.wA(i+"-version",(function(){return{library:i,version:e}}),"VERSION"))},setLogLevel:h.Ub,onLog:function(t,e){if(null!==t&&"function"!=typeof t)throw l.create("invalid-log-argument",{appName:name});(0,h.Am)(t,e)},apps:null,SDK_VERSION:"8.0.1",INTERNAL:{registerComponent:u,removeApp:function(t){delete e[t]},components:n,useAsService:function(t,e){return"serverAuth"===e?null:e}}};function i(t){if(t=t||p,!(0,s.r3)(e,t))throw l.create("no-app",{appName:t});return e[t]}function u(a){var h,u,c=a.name;if(n.has(c))return f.debug("There were multiple attempts to register component "+c+"."),"PUBLIC"===a.type?r[c]:null;if(n.set(c,a),"PUBLIC"===a.type){var p=function(t){if(void 0===t&&(t=i()),"function"!=typeof t[c])throw l.create("invalid-app-argument",{appName:c});return t[c]()};void 0!==a.serviceProps&&(0,s.ZB)(p,a.serviceProps),r[c]=p,t.prototype[c]=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return this._getService.bind(this,c).apply(this,a.multipleInstances?t:[])}}try{for(var d=(0,o.XA)(Object.keys(e)),y=d.next();!y.done;y=d.next()){var _=y.value;e[_]._addComponent(a)}}catch(t){h={error:t}}finally{try{y&&!y.done&&(u=d.return)&&u.call(d)}finally{if(h)throw h.error}}return"PUBLIC"===a.type?r[c]:null}return r.default=r,Object.defineProperty(r,"apps",{get:function(){return Object.keys(e).map((function(t){return e[t]}))}}),i.App=t,r}(y);return e.INTERNAL=(0,o.pi)((0,o.pi)({},e.INTERNAL),{createFirebaseNamespace:t,extendNamespace:function(t){(0,s.ZB)(e,t)},createSubscribe:s.ne,ErrorFactory:s.LL,deepExtend:s.ZB}),e}(),v=function(){function t(t){this.container=t}return t.prototype.getPlatformInfoString=function(){return this.container.getProviders().map((function(t){if(function(t){var e=t.getComponent();return"VERSION"===(null==e?void 0:e.type)}(t)){var e=t.getImmediate();return e.library+"/"+e.version}return null})).filter((function(t){return t})).join(" ")},t}();if((0,s.jU)()&&void 0!==self.firebase){f.warn("\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  ");var g=self.firebase.SDK_VERSION;g&&g.indexOf("LITE")>=0&&f.warn("\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    ")}var m=_.initializeApp;_.initializeApp=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return(0,s.UG)()&&f.warn('\n      Warning: This is a browser-targeted Firebase bundle but it appears it is being\n      run in a Node environment.  If running in a Node environment, make sure you\n      are using the bundle specified by the "main" field in package.json.\n      \n      If you are using Webpack, you can specify "main" as the first item in\n      "resolve.mainFields":\n      https://webpack.js.org/configuration/resolve/#resolvemainfields\n      \n      If using Rollup, use the @rollup/plugin-node-resolve plugin and specify "main"\n      as the first item in "mainFields", e.g. [\'main\', \'module\'].\n      https://github.com/rollup/@rollup/plugin-node-resolve\n      '),m.apply(void 0,t)};var C=_;!function(t,e){t.INTERNAL.registerComponent(new a.wA("platform-logger",(function(t){return new v(t)}),"PRIVATE")),t.registerVersion(c,"0.6.13",void 0),t.registerVersion("fire-js","")}(C);const E=C},909:(t,e,n)=>{"use strict";n.d(e,{wA:()=>o,H0:()=>h,zt:()=>a});var r=n(655),i=n(589),o=function(){function t(t,e,n){this.name=t,this.instanceFactory=e,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY"}return t.prototype.setInstantiationMode=function(t){return this.instantiationMode=t,this},t.prototype.setMultipleInstances=function(t){return this.multipleInstances=t,this},t.prototype.setServiceProps=function(t){return this.serviceProps=t,this},t}(),s="[DEFAULT]",a=function(){function t(t,e){this.name=t,this.container=e,this.component=null,this.instances=new Map,this.instancesDeferred=new Map}return t.prototype.get=function(t){void 0===t&&(t=s);var e=this.normalizeInstanceIdentifier(t);if(!this.instancesDeferred.has(e)){var n=new i.BH;this.instancesDeferred.set(e,n);try{var r=this.getOrInitializeService(e);r&&n.resolve(r)}catch(t){}}return this.instancesDeferred.get(e).promise},t.prototype.getImmediate=function(t){var e=(0,r.pi)({identifier:s,optional:!1},t),n=e.identifier,i=e.optional,o=this.normalizeInstanceIdentifier(n);try{var a=this.getOrInitializeService(o);if(!a){if(i)return null;throw Error("Service "+this.name+" is not available")}return a}catch(t){if(i)return null;throw t}},t.prototype.getComponent=function(){return this.component},t.prototype.setComponent=function(t){var e,n;if(t.name!==this.name)throw Error("Mismatching Component "+t.name+" for Provider "+this.name+".");if(this.component)throw Error("Component for "+this.name+" has already been provided");if(this.component=t,function(t){return"EAGER"===t.instantiationMode}(t))try{this.getOrInitializeService(s)}catch(t){}try{for(var i=(0,r.XA)(this.instancesDeferred.entries()),o=i.next();!o.done;o=i.next()){var a=(0,r.CR)(o.value,2),h=a[0],u=a[1],l=this.normalizeInstanceIdentifier(h);try{var c=this.getOrInitializeService(l);u.resolve(c)}catch(t){}}}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(e)throw e.error}}},t.prototype.clearInstance=function(t){void 0===t&&(t=s),this.instancesDeferred.delete(t),this.instances.delete(t)},t.prototype.delete=function(){return(0,r.mG)(this,void 0,void 0,(function(){var t;return(0,r.Jh)(this,(function(e){switch(e.label){case 0:return t=Array.from(this.instances.values()),[4,Promise.all((0,r.fl)(t.filter((function(t){return"INTERNAL"in t})).map((function(t){return t.INTERNAL.delete()})),t.filter((function(t){return"_delete"in t})).map((function(t){return t._delete()}))))];case 1:return e.sent(),[2]}}))}))},t.prototype.isComponentSet=function(){return null!=this.component},t.prototype.getOrInitializeService=function(t){var e=this.instances.get(t);return!e&&this.component&&(e=this.component.instanceFactory(this.container,function(t){return t===s?void 0:t}(t)),this.instances.set(t,e)),e||null},t.prototype.normalizeInstanceIdentifier=function(t){return this.component?this.component.multipleInstances?t:s:t},t}(),h=function(){function t(t){this.name=t,this.providers=new Map}return t.prototype.addComponent=function(t){var e=this.getProvider(t.name);if(e.isComponentSet())throw new Error("Component "+t.name+" has already been registered with "+this.name);e.setComponent(t)},t.prototype.addOrOverwriteComponent=function(t){this.getProvider(t.name).isComponentSet()&&this.providers.delete(t.name),this.addComponent(t)},t.prototype.getProvider=function(t){if(this.providers.has(t))return this.providers.get(t);var e=new a(t,this);return this.providers.set(t,e),e},t.prototype.getProviders=function(){return Array.from(this.providers.values())},t}()},446:(t,e,n)=>{"use strict";var r=n(99),i=n(655),o=n(589),s=n(594),a=n(909);t=n.hmd(t);var h,u=function(){function t(t){this.domStorage_=t,this.prefix_="firebase:"}return t.prototype.set=function(t,e){null==e?this.domStorage_.removeItem(this.prefixedName_(t)):this.domStorage_.setItem(this.prefixedName_(t),(0,o.Pz)(e))},t.prototype.get=function(t){var e=this.domStorage_.getItem(this.prefixedName_(t));return null==e?null:(0,o.cI)(e)},t.prototype.remove=function(t){this.domStorage_.removeItem(this.prefixedName_(t))},t.prototype.prefixedName_=function(t){return this.prefix_+t},t.prototype.toString=function(){return this.domStorage_.toString()},t}(),l=function(){function t(){this.cache_={},this.isInMemoryStorage=!0}return t.prototype.set=function(t,e){null==e?delete this.cache_[t]:this.cache_[t]=e},t.prototype.get=function(t){return(0,o.r3)(this.cache_,t)?this.cache_[t]:null},t.prototype.remove=function(t){delete this.cache_[t]},t}(),c=function(t){try{if("undefined"!=typeof window&&void 0!==window[t]){var e=window[t];return e.setItem("firebase:sentinel","cache"),e.removeItem("firebase:sentinel"),new u(e)}}catch(t){}return new l},p=c("localStorage"),d=c("sessionStorage"),f=new s.Yd("@firebase/database"),y=(h=1,function(){return h++}),_=function(t){var e=(0,o.dS)(t),n=new o.gQ;n.update(e);var r=n.digest();return o.US.encodeByteArray(r)},v=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];for(var n="",r=0;r<t.length;r++){var i=t[r];Array.isArray(i)||i&&"object"==typeof i&&"number"==typeof i.length?n+=v.apply(null,i):n+="object"==typeof i?(0,o.Pz)(i):i,n+=" "}return n},g=null,m=!0,C=function(t,e){(0,o.hu)(!e||!0===t||!1===t,"Can't turn on custom loggers persistently."),!0===t?(f.logLevel=s.in.VERBOSE,g=f.log.bind(f),e&&d.set("logging_enabled",!0)):"function"==typeof t?g=t:(g=null,d.remove("logging_enabled"))},E=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(!0===m&&(m=!1,null===g&&!0===d.get("logging_enabled")&&C(!0)),g){var n=v.apply(null,t);g(n)}},w=function(t){return function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];E.apply(void 0,(0,i.fl)([t],e))}},b=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n="FIREBASE INTERNAL ERROR: "+v.apply(void 0,(0,i.fl)(t));f.error(n)},S=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n="FIREBASE FATAL ERROR: "+v.apply(void 0,(0,i.fl)(t));throw f.error(n),new Error(n)},T=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n="FIREBASE WARNING: "+v.apply(void 0,(0,i.fl)(t));f.warn(n)},I=function(t){return"number"==typeof t&&(t!=t||t===Number.POSITIVE_INFINITY||t===Number.NEGATIVE_INFINITY)},N="[MIN_NAME]",P="[MAX_NAME]",R=function(t,e){if(t===e)return 0;if(t===N||e===P)return-1;if(e===N||t===P)return 1;var n=Y(t),r=Y(e);return null!==n?null!==r?n-r==0?t.length-e.length:n-r:-1:null!==r?1:t<e?-1:1},D=function(t,e){return t===e?0:t<e?-1:1},O=function(t,e){if(e&&t in e)return e[t];throw new Error("Missing required key ("+t+") in object: "+(0,o.Pz)(e))},x=function(t){if("object"!=typeof t||null===t)return(0,o.Pz)(t);var e=[];for(var n in t)e.push(n);e.sort();for(var r="{",i=0;i<e.length;i++)0!==i&&(r+=","),r+=(0,o.Pz)(e[i]),r+=":",r+=x(t[e[i]]);return r+"}"},A=function(t,e){var n=t.length;if(n<=e)return[t];for(var r=[],i=0;i<n;i+=e)i+e>n?r.push(t.substring(i,n)):r.push(t.substring(i,i+e));return r};function k(t,e){for(var n in t)t.hasOwnProperty(n)&&e(n,t[n])}var F,L,M,W,U,Q,q,j,V,H,B=function(t){(0,o.hu)(!I(t),"Invalid JSON number");var e,n,r,i,s;0===t?(n=0,r=0,e=1/t==-1/0?1:0):(e=t<0,(t=Math.abs(t))>=Math.pow(2,-1022)?(n=(i=Math.min(Math.floor(Math.log(t)/Math.LN2),1023))+1023,r=Math.round(t*Math.pow(2,52-i)-Math.pow(2,52))):(n=0,r=Math.round(t/Math.pow(2,-1074))));var a=[];for(s=52;s;s-=1)a.push(r%2?1:0),r=Math.floor(r/2);for(s=11;s;s-=1)a.push(n%2?1:0),n=Math.floor(n/2);a.push(e?1:0),a.reverse();var h=a.join(""),u="";for(s=0;s<64;s+=8){var l=parseInt(h.substr(s,8),2).toString(16);1===l.length&&(l="0"+l),u+=l}return u.toLowerCase()},z=new RegExp("^-?(0*)\\d{1,10}$"),Y=function(t){if(z.test(t)){var e=Number(t);if(e>=-2147483648&&e<=2147483647)return e}return null},K=function(t){try{t()}catch(t){setTimeout((function(){var e=t.stack||"";throw T("Exception was thrown by user callback.",e),t}),Math.floor(0))}},G=function(t,e){var n=setTimeout(t,e);return"object"==typeof n&&n.unref&&n.unref(),n},X=function(){function t(t,e){if(void 0===e){this.pieces_=t.split("/");for(var n=0,r=0;r<this.pieces_.length;r++)this.pieces_[r].length>0&&(this.pieces_[n]=this.pieces_[r],n++);this.pieces_.length=n,this.pieceNum_=0}else this.pieces_=t,this.pieceNum_=e}return Object.defineProperty(t,"Empty",{get:function(){return new t("")},enumerable:!1,configurable:!0}),t.prototype.getFront=function(){return this.pieceNum_>=this.pieces_.length?null:this.pieces_[this.pieceNum_]},t.prototype.getLength=function(){return this.pieces_.length-this.pieceNum_},t.prototype.popFront=function(){var e=this.pieceNum_;return e<this.pieces_.length&&e++,new t(this.pieces_,e)},t.prototype.getBack=function(){return this.pieceNum_<this.pieces_.length?this.pieces_[this.pieces_.length-1]:null},t.prototype.toString=function(){for(var t="",e=this.pieceNum_;e<this.pieces_.length;e++)""!==this.pieces_[e]&&(t+="/"+this.pieces_[e]);return t||"/"},t.prototype.toUrlEncodedString=function(){for(var t="",e=this.pieceNum_;e<this.pieces_.length;e++)""!==this.pieces_[e]&&(t+="/"+encodeURIComponent(String(this.pieces_[e])));return t||"/"},t.prototype.slice=function(t){return void 0===t&&(t=0),this.pieces_.slice(this.pieceNum_+t)},t.prototype.parent=function(){if(this.pieceNum_>=this.pieces_.length)return null;for(var e=[],n=this.pieceNum_;n<this.pieces_.length-1;n++)e.push(this.pieces_[n]);return new t(e,0)},t.prototype.child=function(e){for(var n=[],r=this.pieceNum_;r<this.pieces_.length;r++)n.push(this.pieces_[r]);if(e instanceof t)for(r=e.pieceNum_;r<e.pieces_.length;r++)n.push(e.pieces_[r]);else{var i=e.split("/");for(r=0;r<i.length;r++)i[r].length>0&&n.push(i[r])}return new t(n,0)},t.prototype.isEmpty=function(){return this.pieceNum_>=this.pieces_.length},t.relativePath=function(e,n){var r=e.getFront(),i=n.getFront();if(null===r)return n;if(r===i)return t.relativePath(e.popFront(),n.popFront());throw new Error("INTERNAL ERROR: innerPath ("+n+") is not within outerPath ("+e+")")},t.comparePaths=function(t,e){for(var n=t.slice(),r=e.slice(),i=0;i<n.length&&i<r.length;i++){var o=R(n[i],r[i]);if(0!==o)return o}return n.length===r.length?0:n.length<r.length?-1:1},t.prototype.equals=function(t){if(this.getLength()!==t.getLength())return!1;for(var e=this.pieceNum_,n=t.pieceNum_;e<=this.pieces_.length;e++,n++)if(this.pieces_[e]!==t.pieces_[n])return!1;return!0},t.prototype.contains=function(t){var e=this.pieceNum_,n=t.pieceNum_;if(this.getLength()>t.getLength())return!1;for(;e<this.pieces_.length;){if(this.pieces_[e]!==t.pieces_[n])return!1;++e,++n}return!0},t}(),$=function(){function t(t,e){this.errorPrefix_=e,this.parts_=t.slice(),this.byteLength_=Math.max(1,this.parts_.length);for(var n=0;n<this.parts_.length;n++)this.byteLength_+=(0,o.ug)(this.parts_[n]);this.checkValid_()}return Object.defineProperty(t,"MAX_PATH_DEPTH",{get:function(){return 32},enumerable:!1,configurable:!0}),Object.defineProperty(t,"MAX_PATH_LENGTH_BYTES",{get:function(){return 768},enumerable:!1,configurable:!0}),t.prototype.push=function(t){this.parts_.length>0&&(this.byteLength_+=1),this.parts_.push(t),this.byteLength_+=(0,o.ug)(t),this.checkValid_()},t.prototype.pop=function(){var t=this.parts_.pop();this.byteLength_-=(0,o.ug)(t),this.parts_.length>0&&(this.byteLength_-=1)},t.prototype.checkValid_=function(){if(this.byteLength_>t.MAX_PATH_LENGTH_BYTES)throw new Error(this.errorPrefix_+"has a key path longer than "+t.MAX_PATH_LENGTH_BYTES+" bytes ("+this.byteLength_+").");if(this.parts_.length>t.MAX_PATH_DEPTH)throw new Error(this.errorPrefix_+"path specified exceeds the maximum depth that can be written ("+t.MAX_PATH_DEPTH+") or object contains a cycle "+this.toErrorString())},t.prototype.toErrorString=function(){return 0===this.parts_.length?"":"in property '"+this.parts_.join(".")+"'"},t}(),Z="firebaseio.com",J="websocket",tt="long_polling",et=function(){function t(t,e,n,r,i,o,s){void 0===i&&(i=!1),void 0===o&&(o=""),void 0===s&&(s=!1),this.secure=e,this.namespace=n,this.webSocketOnly=r,this.nodeAdmin=i,this.persistenceKey=o,this.includeNamespaceInQueryParams=s,this.host=t.toLowerCase(),this.domain=this.host.substr(this.host.indexOf(".")+1),this.internalHost=p.get("host:"+t)||this.host}return t.prototype.needsQueryParam=function(){return this.host!==this.internalHost||this.isCustomHost()||this.includeNamespaceInQueryParams},t.prototype.isCacheableHost=function(){return"s-"===this.internalHost.substr(0,2)},t.prototype.isDemoHost=function(){return"firebaseio-demo.com"===this.domain},t.prototype.isCustomHost=function(){return"firebaseio.com"!==this.domain&&"firebaseio-demo.com"!==this.domain},t.prototype.updateHost=function(t){t!==this.internalHost&&(this.internalHost=t,this.isCacheableHost()&&p.set("host:"+this.host,this.internalHost))},t.prototype.connectionURL=function(t,e){var n;if((0,o.hu)("string"==typeof t,"typeof type must == string"),(0,o.hu)("object"==typeof e,"typeof params must == object"),t===J)n=(this.secure?"wss://":"ws://")+this.internalHost+"/.ws?";else{if(t!==tt)throw new Error("Unknown connection type: "+t);n=(this.secure?"https://":"http://")+this.internalHost+"/.lp?"}this.needsQueryParam()&&(e.ns=this.namespace);var r=[];return k(e,(function(t,e){r.push(t+"="+e)})),n+r.join("&")},t.prototype.toString=function(){var t=this.toURLString();return this.persistenceKey&&(t+="<"+this.persistenceKey+">"),t},t.prototype.toURLString=function(){return(this.secure?"https://":"http://")+this.host},t}(),nt=function(t,e){var n=rt(t),r=n.namespace;"firebase.com"===n.domain&&S(n.host+" is no longer supported. Please use <YOUR FIREBASE>.firebaseio.com instead"),r&&"undefined"!==r||"localhost"===n.domain||S("Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com"),n.secure||"undefined"!=typeof window&&window.location&&window.location.protocol&&-1!==window.location.protocol.indexOf("https:")&&T("Insecure Firebase access from a secure page. Please use https in calls to new Firebase().");var i="ws"===n.scheme||"wss"===n.scheme;return{repoInfo:new et(n.host,n.secure,r,e,i,"",r!==n.subdomain),path:new X(n.pathString)}},rt=function(t){var e="",n="",r="",o="",s="",a=!0,h="https",u=443;if("string"==typeof t){var l=t.indexOf("//");l>=0&&(h=t.substring(0,l-1),t=t.substring(l+2));var c=t.indexOf("/");-1===c&&(c=t.length);var p=t.indexOf("?");-1===p&&(p=t.length),e=t.substring(0,Math.min(c,p)),c<p&&(o=function(t){for(var e="",n=t.split("/"),r=0;r<n.length;r++)if(n[r].length>0){var i=n[r];try{i=decodeURIComponent(i.replace(/\+/g," "))}catch(t){}e+="/"+i}return e}(t.substring(c,p)));var d=function(t){var e,n,r={};"?"===t.charAt(0)&&(t=t.substring(1));try{for(var o=(0,i.XA)(t.split("&")),s=o.next();!s.done;s=o.next()){var a=s.value;if(0!==a.length){var h=a.split("=");2===h.length?r[decodeURIComponent(h[0])]=decodeURIComponent(h[1]):T("Invalid query segment '"+a+"' in query '"+t+"'")}}}catch(t){e={error:t}}finally{try{s&&!s.done&&(n=o.return)&&n.call(o)}finally{if(e)throw e.error}}return r}(t.substring(Math.min(t.length,p)));(l=e.indexOf(":"))>=0?(a="https"===h||"wss"===h,u=parseInt(e.substring(l+1),10)):l=e.length;var f=e.slice(0,l);if("localhost"===f.toLowerCase())n="localhost";else if(f.split(".").length<=2)n=f;else{var y=e.indexOf(".");r=e.substring(0,y).toLowerCase(),n=e.substring(y+1),s=r}"ns"in d&&(s=d.ns)}return{host:e,port:u,domain:n,subdomain:r,secure:a,scheme:h,pathString:o,namespace:s}},it=/[\[\].#$\/\u0000-\u001F\u007F]/,ot=/[\[\].#$\u0000-\u001F\u007F]/,st=10485760,at=function(t){return"string"==typeof t&&0!==t.length&&!it.test(t)},ht=function(t){return"string"==typeof t&&0!==t.length&&!ot.test(t)},ut=function(t){return null===t||"string"==typeof t||"number"==typeof t&&!I(t)||t&&"object"==typeof t&&(0,o.r3)(t,".sv")},lt=function(t,e,n,r,i){i&&void 0===n||ct((0,o.gK)(t,e,i),n,r)},ct=function(t,e,n){var r=n instanceof X?new $(n,t):n;if(void 0===e)throw new Error(t+"contains undefined "+r.toErrorString());if("function"==typeof e)throw new Error(t+"contains a function "+r.toErrorString()+" with contents = "+e.toString());if(I(e))throw new Error(t+"contains "+e.toString()+" "+r.toErrorString());if("string"==typeof e&&e.length>st/3&&(0,o.ug)(e)>st)throw new Error(t+"contains a string greater than 10485760 utf8 bytes "+r.toErrorString()+" ('"+e.substring(0,50)+"...')");if(e&&"object"==typeof e){var i=!1,s=!1;if(k(e,(function(e,n){if(".value"===e)i=!0;else if(".priority"!==e&&".sv"!==e&&(s=!0,!at(e)))throw new Error(t+" contains an invalid key ("+e+") "+r.toErrorString()+'.  Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');r.push(e),ct(t,n,r),r.pop()})),i&&s)throw new Error(t+' contains ".value" child '+r.toErrorString()+" in addition to actual children.")}},pt=function(t,e,n,r,i){if(!i||void 0!==n){var s=(0,o.gK)(t,e,i);if(!n||"object"!=typeof n||Array.isArray(n))throw new Error(s+" must be an object containing the children to replace.");var a=[];k(n,(function(t,e){var n=new X(t);if(ct(s,e,r.child(n)),".priority"===n.getBack()&&!ut(e))throw new Error(s+"contains an invalid value for '"+n.toString()+"', which must be a valid Firebase priority (a string, finite number, server value, or null).");a.push(n)})),function(t,e){var n,r;for(n=0;n<e.length;n++)for(var i=(r=e[n]).slice(),o=0;o<i.length;o++)if(".priority"===i[o]&&o===i.length-1);else if(!at(i[o]))throw new Error(t+"contains an invalid key ("+i[o]+") in path "+r.toString()+'. Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');e.sort(X.comparePaths);var s=null;for(n=0;n<e.length;n++){if(r=e[n],null!==s&&s.contains(r))throw new Error(t+"contains a path "+s.toString()+" that is ancestor of another path "+r.toString());s=r}}(s,a)}},dt=function(t,e,n,r){if(!r||void 0!==n){if(I(n))throw new Error((0,o.gK)(t,e,r)+"is "+n.toString()+", but must be a valid Firebase priority (a string, finite number, server value, or null).");if(!ut(n))throw new Error((0,o.gK)(t,e,r)+"must be a valid Firebase priority (a string, finite number, server value, or null).")}},ft=function(t,e,n,r){if(!r||void 0!==n)switch(n){case"value":case"child_added":case"child_removed":case"child_changed":case"child_moved":break;default:throw new Error((0,o.gK)(t,e,r)+'must be a valid event type = "value", "child_added", "child_removed", "child_changed", or "child_moved".')}},yt=function(t,e,n,r){if(!(r&&void 0===n||at(n)))throw new Error((0,o.gK)(t,e,r)+'was an invalid key = "'+n+'".  Firebase keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]").')},_t=function(t,e,n,r){if(!(r&&void 0===n||ht(n)))throw new Error((0,o.gK)(t,e,r)+'was an invalid path = "'+n+'". Paths must be non-empty strings and can\'t contain ".", "#", "$", "[", or "]"')},vt=function(t,e,n,r){n&&(n=n.replace(/^\/*\.info(\/|$)/,"/")),_t(t,e,n,r)},gt=function(t,e){if(".info"===e.getFront())throw new Error(t+" failed = Can't modify data under /.info/")},mt=function(t,e,n){var r=n.path.toString();if("string"!=typeof n.repoInfo.host||0===n.repoInfo.host.length||!at(n.repoInfo.namespace)&&"localhost"!==n.repoInfo.host.split(":")[0]||0!==r.length&&!function(t){return t&&(t=t.replace(/^\/*\.info(\/|$)/,"/")),ht(t)}(r))throw new Error((0,o.gK)(t,e,!1)+'must be a valid firebase URL and the path can\'t contain ".", "#", "$", "[", or "]".')},Ct=function(t,e,n,r){if((!r||void 0!==n)&&"boolean"!=typeof n)throw new Error((0,o.gK)(t,e,r)+"must be a boolean.")},Et=function(){function t(t,e){this.repo_=t,this.path_=e}return t.prototype.cancel=function(t){(0,o.Dv)("OnDisconnect.cancel",0,1,arguments.length),(0,o.Wj)("OnDisconnect.cancel",1,t,!0);var e=new o.BH;return this.repo_.onDisconnectCancel(this.path_,e.wrapCallback(t)),e.promise},t.prototype.remove=function(t){(0,o.Dv)("OnDisconnect.remove",0,1,arguments.length),gt("OnDisconnect.remove",this.path_),(0,o.Wj)("OnDisconnect.remove",1,t,!0);var e=new o.BH;return this.repo_.onDisconnectSet(this.path_,null,e.wrapCallback(t)),e.promise},t.prototype.set=function(t,e){(0,o.Dv)("OnDisconnect.set",1,2,arguments.length),gt("OnDisconnect.set",this.path_),lt("OnDisconnect.set",1,t,this.path_,!1),(0,o.Wj)("OnDisconnect.set",2,e,!0);var n=new o.BH;return this.repo_.onDisconnectSet(this.path_,t,n.wrapCallback(e)),n.promise},t.prototype.setWithPriority=function(t,e,n){(0,o.Dv)("OnDisconnect.setWithPriority",2,3,arguments.length),gt("OnDisconnect.setWithPriority",this.path_),lt("OnDisconnect.setWithPriority",1,t,this.path_,!1),dt("OnDisconnect.setWithPriority",2,e,!1),(0,o.Wj)("OnDisconnect.setWithPriority",3,n,!0);var r=new o.BH;return this.repo_.onDisconnectSetWithPriority(this.path_,t,e,r.wrapCallback(n)),r.promise},t.prototype.update=function(t,e){if((0,o.Dv)("OnDisconnect.update",1,2,arguments.length),gt("OnDisconnect.update",this.path_),Array.isArray(t)){for(var n={},r=0;r<t.length;++r)n[""+r]=t[r];t=n,T("Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.")}pt("OnDisconnect.update",1,t,this.path_,!1),(0,o.Wj)("OnDisconnect.update",2,e,!0);var i=new o.BH;return this.repo_.onDisconnectUpdate(this.path_,t,i.wrapCallback(e)),i.promise},t}(),wt=function(){function t(t,e){this.committed=t,this.snapshot=e}return t.prototype.toJSON=function(){return(0,o.Dv)("TransactionResult.toJSON",0,1,arguments.length),{committed:this.committed,snapshot:this.snapshot.toJSON()}},t}(),bt=(F="-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz",L=0,M=[],function(t){var e,n=t===L;L=t;var r=new Array(8);for(e=7;e>=0;e--)r[e]=F.charAt(t%64),t=Math.floor(t/64);(0,o.hu)(0===t,"Cannot push at time == 0");var i=r.join("");if(n){for(e=11;e>=0&&63===M[e];e--)M[e]=0;M[e]++}else for(e=0;e<12;e++)M[e]=Math.floor(64*Math.random());for(e=0;e<12;e++)i+=F.charAt(M[e]);return(0,o.hu)(20===i.length,"nextPushId: Length should be 20."),i}),St=function(){function t(t,e){this.name=t,this.node=e}return t.Wrap=function(e,n){return new t(e,n)},t}(),Tt=function(){function t(){}return t.prototype.getCompare=function(){return this.compare.bind(this)},t.prototype.indexedValueChanged=function(t,e){var n=new St(N,t),r=new St(N,e);return 0!==this.compare(n,r)},t.prototype.minPost=function(){return St.MIN},t}(),It=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,i.ZT)(e,t),Object.defineProperty(e,"__EMPTY_NODE",{get:function(){return W},set:function(t){W=t},enumerable:!1,configurable:!0}),e.prototype.compare=function(t,e){return R(t.name,e.name)},e.prototype.isDefinedOn=function(t){throw(0,o.g5)("KeyIndex.isDefinedOn not expected to be called.")},e.prototype.indexedValueChanged=function(t,e){return!1},e.prototype.minPost=function(){return St.MIN},e.prototype.maxPost=function(){return new St(P,W)},e.prototype.makePost=function(t,e){return(0,o.hu)("string"==typeof t,"KeyIndex indexValue must always be a string."),new St(t,W)},e.prototype.toString=function(){return".key"},e}(Tt),Nt=new It,Pt=function(t){return"number"==typeof t?"number:"+B(t):"string:"+t},Rt=function(t){if(t.isLeafNode()){var e=t.val();(0,o.hu)("string"==typeof e||"number"==typeof e||"object"==typeof e&&(0,o.r3)(e,".sv"),"Priority must be a string or number.")}else(0,o.hu)(t===U||t.isEmpty(),"priority of unexpected type.");(0,o.hu)(t===U||t.getPriority().isEmpty(),"Priority nodes can't have a priority of their own.")},Dt=function(){function t(e,n){void 0===n&&(n=t.__childrenNodeConstructor.EMPTY_NODE),this.value_=e,this.priorityNode_=n,this.lazyHash_=null,(0,o.hu)(void 0!==this.value_&&null!==this.value_,"LeafNode shouldn't be created with null/undefined value."),Rt(this.priorityNode_)}return Object.defineProperty(t,"__childrenNodeConstructor",{get:function(){return Q},set:function(t){Q=t},enumerable:!1,configurable:!0}),t.prototype.isLeafNode=function(){return!0},t.prototype.getPriority=function(){return this.priorityNode_},t.prototype.updatePriority=function(e){return new t(this.value_,e)},t.prototype.getImmediateChild=function(e){return".priority"===e?this.priorityNode_:t.__childrenNodeConstructor.EMPTY_NODE},t.prototype.getChild=function(e){return e.isEmpty()?this:".priority"===e.getFront()?this.priorityNode_:t.__childrenNodeConstructor.EMPTY_NODE},t.prototype.hasChild=function(){return!1},t.prototype.getPredecessorChildName=function(t,e){return null},t.prototype.updateImmediateChild=function(e,n){return".priority"===e?this.updatePriority(n):n.isEmpty()&&".priority"!==e?this:t.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(e,n).updatePriority(this.priorityNode_)},t.prototype.updateChild=function(e,n){var r=e.getFront();return null===r?n:n.isEmpty()&&".priority"!==r?this:((0,o.hu)(".priority"!==r||1===e.getLength(),".priority must be the last token in a path"),this.updateImmediateChild(r,t.__childrenNodeConstructor.EMPTY_NODE.updateChild(e.popFront(),n)))},t.prototype.isEmpty=function(){return!1},t.prototype.numChildren=function(){return 0},t.prototype.forEachChild=function(t,e){return!1},t.prototype.val=function(t){return t&&!this.getPriority().isEmpty()?{".value":this.getValue(),".priority":this.getPriority().val()}:this.getValue()},t.prototype.hash=function(){if(null===this.lazyHash_){var t="";this.priorityNode_.isEmpty()||(t+="priority:"+Pt(this.priorityNode_.val())+":");var e=typeof this.value_;t+=e+":",t+="number"===e?B(this.value_):this.value_,this.lazyHash_=_(t)}return this.lazyHash_},t.prototype.getValue=function(){return this.value_},t.prototype.compareTo=function(e){return e===t.__childrenNodeConstructor.EMPTY_NODE?1:e instanceof t.__childrenNodeConstructor?-1:((0,o.hu)(e.isLeafNode(),"Unknown node type"),this.compareToLeafNode_(e))},t.prototype.compareToLeafNode_=function(e){var n=typeof e.value_,r=typeof this.value_,i=t.VALUE_TYPE_ORDER.indexOf(n),s=t.VALUE_TYPE_ORDER.indexOf(r);return(0,o.hu)(i>=0,"Unknown leaf type: "+n),(0,o.hu)(s>=0,"Unknown leaf type: "+r),i===s?"object"===r?0:this.value_<e.value_?-1:this.value_===e.value_?0:1:s-i},t.prototype.withIndex=function(){return this},t.prototype.isIndexed=function(){return!0},t.prototype.equals=function(t){if(t===this)return!0;if(t.isLeafNode()){var e=t;return this.value_===e.value_&&this.priorityNode_.equals(e.priorityNode_)}return!1},t.VALUE_TYPE_ORDER=["object","boolean","number","string"],t}(),Ot=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,i.ZT)(e,t),e.prototype.compare=function(t,e){var n=t.node.getPriority(),r=e.node.getPriority(),i=n.compareTo(r);return 0===i?R(t.name,e.name):i},e.prototype.isDefinedOn=function(t){return!t.getPriority().isEmpty()},e.prototype.indexedValueChanged=function(t,e){return!t.getPriority().equals(e.getPriority())},e.prototype.minPost=function(){return St.MIN},e.prototype.maxPost=function(){return new St(P,new Dt("[PRIORITY-POST]",j))},e.prototype.makePost=function(t,e){var n=q(t);return new St(e,new Dt("[PRIORITY-POST]",n))},e.prototype.toString=function(){return".priority"},e}(Tt)),xt=function(){function t(t,e,n,r,i){void 0===i&&(i=null),this.isReverse_=r,this.resultGenerator_=i,this.nodeStack_=[];for(var o=1;!t.isEmpty();)if(t=t,o=e?n(t.key,e):1,r&&(o*=-1),o<0)t=this.isReverse_?t.left:t.right;else{if(0===o){this.nodeStack_.push(t);break}this.nodeStack_.push(t),t=this.isReverse_?t.right:t.left}}return t.prototype.getNext=function(){if(0===this.nodeStack_.length)return null;var t,e=this.nodeStack_.pop();if(t=this.resultGenerator_?this.resultGenerator_(e.key,e.value):{key:e.key,value:e.value},this.isReverse_)for(e=e.left;!e.isEmpty();)this.nodeStack_.push(e),e=e.right;else for(e=e.right;!e.isEmpty();)this.nodeStack_.push(e),e=e.left;return t},t.prototype.hasNext=function(){return this.nodeStack_.length>0},t.prototype.peek=function(){if(0===this.nodeStack_.length)return null;var t=this.nodeStack_[this.nodeStack_.length-1];return this.resultGenerator_?this.resultGenerator_(t.key,t.value):{key:t.key,value:t.value}},t}(),At=function(){function t(e,n,r,i,o){this.key=e,this.value=n,this.color=null!=r?r:t.RED,this.left=null!=i?i:Ft.EMPTY_NODE,this.right=null!=o?o:Ft.EMPTY_NODE}return t.prototype.copy=function(e,n,r,i,o){return new t(null!=e?e:this.key,null!=n?n:this.value,null!=r?r:this.color,null!=i?i:this.left,null!=o?o:this.right)},t.prototype.count=function(){return this.left.count()+1+this.right.count()},t.prototype.isEmpty=function(){return!1},t.prototype.inorderTraversal=function(t){return this.left.inorderTraversal(t)||!!t(this.key,this.value)||this.right.inorderTraversal(t)},t.prototype.reverseTraversal=function(t){return this.right.reverseTraversal(t)||t(this.key,this.value)||this.left.reverseTraversal(t)},t.prototype.min_=function(){return this.left.isEmpty()?this:this.left.min_()},t.prototype.minKey=function(){return this.min_().key},t.prototype.maxKey=function(){return this.right.isEmpty()?this.key:this.right.maxKey()},t.prototype.insert=function(t,e,n){var r=this,i=n(t,r.key);return(r=i<0?r.copy(null,null,null,r.left.insert(t,e,n),null):0===i?r.copy(null,e,null,null,null):r.copy(null,null,null,null,r.right.insert(t,e,n))).fixUp_()},t.prototype.removeMin_=function(){if(this.left.isEmpty())return Ft.EMPTY_NODE;var t=this;return t.left.isRed_()||t.left.left.isRed_()||(t=t.moveRedLeft_()),(t=t.copy(null,null,null,t.left.removeMin_(),null)).fixUp_()},t.prototype.remove=function(t,e){var n,r;if(e(t,(n=this).key)<0)n.left.isEmpty()||n.left.isRed_()||n.left.left.isRed_()||(n=n.moveRedLeft_()),n=n.copy(null,null,null,n.left.remove(t,e),null);else{if(n.left.isRed_()&&(n=n.rotateRight_()),n.right.isEmpty()||n.right.isRed_()||n.right.left.isRed_()||(n=n.moveRedRight_()),0===e(t,n.key)){if(n.right.isEmpty())return Ft.EMPTY_NODE;r=n.right.min_(),n=n.copy(r.key,r.value,null,null,n.right.removeMin_())}n=n.copy(null,null,null,null,n.right.remove(t,e))}return n.fixUp_()},t.prototype.isRed_=function(){return this.color},t.prototype.fixUp_=function(){var t=this;return t.right.isRed_()&&!t.left.isRed_()&&(t=t.rotateLeft_()),t.left.isRed_()&&t.left.left.isRed_()&&(t=t.rotateRight_()),t.left.isRed_()&&t.right.isRed_()&&(t=t.colorFlip_()),t},t.prototype.moveRedLeft_=function(){var t=this.colorFlip_();return t.right.left.isRed_()&&(t=(t=(t=t.copy(null,null,null,null,t.right.rotateRight_())).rotateLeft_()).colorFlip_()),t},t.prototype.moveRedRight_=function(){var t=this.colorFlip_();return t.left.left.isRed_()&&(t=(t=t.rotateRight_()).colorFlip_()),t},t.prototype.rotateLeft_=function(){var e=this.copy(null,null,t.RED,null,this.right.left);return this.right.copy(null,null,this.color,e,null)},t.prototype.rotateRight_=function(){var e=this.copy(null,null,t.RED,this.left.right,null);return this.left.copy(null,null,this.color,null,e)},t.prototype.colorFlip_=function(){var t=this.left.copy(null,null,!this.left.color,null,null),e=this.right.copy(null,null,!this.right.color,null,null);return this.copy(null,null,!this.color,t,e)},t.prototype.checkMaxDepth_=function(){var t=this.check_();return Math.pow(2,t)<=this.count()+1},t.prototype.check_=function(){if(this.isRed_()&&this.left.isRed_())throw new Error("Red node has red child("+this.key+","+this.value+")");if(this.right.isRed_())throw new Error("Right child of ("+this.key+","+this.value+") is red");var t=this.left.check_();if(t!==this.right.check_())throw new Error("Black depths differ");return t+(this.isRed_()?0:1)},t.RED=!0,t.BLACK=!1,t}(),kt=function(){function t(){}return t.prototype.copy=function(t,e,n,r,i){return this},t.prototype.insert=function(t,e,n){return new At(t,e,null)},t.prototype.remove=function(t,e){return this},t.prototype.count=function(){return 0},t.prototype.isEmpty=function(){return!0},t.prototype.inorderTraversal=function(t){return!1},t.prototype.reverseTraversal=function(t){return!1},t.prototype.minKey=function(){return null},t.prototype.maxKey=function(){return null},t.prototype.check_=function(){return 0},t.prototype.isRed_=function(){return!1},t}(),Ft=function(){function t(e,n){void 0===n&&(n=t.EMPTY_NODE),this.comparator_=e,this.root_=n}return t.prototype.insert=function(e,n){return new t(this.comparator_,this.root_.insert(e,n,this.comparator_).copy(null,null,At.BLACK,null,null))},t.prototype.remove=function(e){return new t(this.comparator_,this.root_.remove(e,this.comparator_).copy(null,null,At.BLACK,null,null))},t.prototype.get=function(t){for(var e,n=this.root_;!n.isEmpty();){if(0===(e=this.comparator_(t,n.key)))return n.value;e<0?n=n.left:e>0&&(n=n.right)}return null},t.prototype.getPredecessorKey=function(t){for(var e,n=this.root_,r=null;!n.isEmpty();){if(0===(e=this.comparator_(t,n.key))){if(n.left.isEmpty())return r?r.key:null;for(n=n.left;!n.right.isEmpty();)n=n.right;return n.key}e<0?n=n.left:e>0&&(r=n,n=n.right)}throw new Error("Attempted to find predecessor key for a nonexistent key.  What gives?")},t.prototype.isEmpty=function(){return this.root_.isEmpty()},t.prototype.count=function(){return this.root_.count()},t.prototype.minKey=function(){return this.root_.minKey()},t.prototype.maxKey=function(){return this.root_.maxKey()},t.prototype.inorderTraversal=function(t){return this.root_.inorderTraversal(t)},t.prototype.reverseTraversal=function(t){return this.root_.reverseTraversal(t)},t.prototype.getIterator=function(t){return new xt(this.root_,null,this.comparator_,!1,t)},t.prototype.getIteratorFrom=function(t,e){return new xt(this.root_,t,this.comparator_,!1,e)},t.prototype.getReverseIteratorFrom=function(t,e){return new xt(this.root_,t,this.comparator_,!0,e)},t.prototype.getReverseIterator=function(t){return new xt(this.root_,null,this.comparator_,!0,t)},t.EMPTY_NODE=new kt,t}(),Lt=Math.log(2),Mt=function(){function t(t){var e;this.count=(e=t+1,parseInt(Math.log(e)/Lt,10)),this.current_=this.count-1;var n,r=(n=this.count,parseInt(Array(n+1).join("1"),2));this.bits_=t+1&r}return t.prototype.nextBitIsOne=function(){var t=!(this.bits_&1<<this.current_);return this.current_--,t},t}(),Wt=function(t,e,n,r){t.sort(e);var i=function(e,r){var o,s,a=r-e;if(0===a)return null;if(1===a)return o=t[e],s=n?n(o):o,new At(s,o.node,At.BLACK,null,null);var h=parseInt(a/2,10)+e,u=i(e,h),l=i(h+1,r);return o=t[h],s=n?n(o):o,new At(s,o.node,At.BLACK,u,l)},o=function(e){for(var r=null,o=null,s=t.length,a=function(e,r){var o=s-e,a=s;s-=e;var u=i(o+1,a),l=t[o],c=n?n(l):l;h(new At(c,l.node,r,null,u))},h=function(t){r?(r.left=t,r=t):(o=t,r=t)},u=0;u<e.count;++u){var l=e.nextBitIsOne(),c=Math.pow(2,e.count-(u+1));l?a(c,At.BLACK):(a(c,At.BLACK),a(c,At.RED))}return o}(new Mt(t.length));return new Ft(r||e,o)},Ut={},Qt=function(){function t(t,e){this.indexes_=t,this.indexSet_=e}return Object.defineProperty(t,"Default",{get:function(){return(0,o.hu)(Ut&&Ot,"ChildrenNode.ts has not been loaded"),V=V||new t({".priority":Ut},{".priority":Ot})},enumerable:!1,configurable:!0}),t.prototype.get=function(t){var e=(0,o.DV)(this.indexes_,t);if(!e)throw new Error("No index defined for "+t);return e instanceof Ft?e:null},t.prototype.hasIndex=function(t){return(0,o.r3)(this.indexSet_,t.toString())},t.prototype.addIndex=function(e,n){(0,o.hu)(e!==Nt,"KeyIndex always exists and isn't meant to be added to the IndexMap.");for(var r,s=[],a=!1,h=n.getIterator(St.Wrap),u=h.getNext();u;)a=a||e.isDefinedOn(u.node),s.push(u),u=h.getNext();r=a?Wt(s,e.getCompare()):Ut;var l=e.toString(),c=(0,i.pi)({},this.indexSet_);c[l]=e;var p=(0,i.pi)({},this.indexes_);return p[l]=r,new t(p,c)},t.prototype.addToIndexes=function(e,n){var r=this;return new t((0,o.UI)(this.indexes_,(function(t,i){var s=(0,o.DV)(r.indexSet_,i);if((0,o.hu)(s,"Missing index implementation for "+i),t===Ut){if(s.isDefinedOn(e.node)){for(var a=[],h=n.getIterator(St.Wrap),u=h.getNext();u;)u.name!==e.name&&a.push(u),u=h.getNext();return a.push(e),Wt(a,s.getCompare())}return Ut}var l=n.get(e.name),c=t;return l&&(c=c.remove(new St(e.name,l))),c.insert(e,e.node)})),this.indexSet_)},t.prototype.removeFromIndexes=function(e,n){return new t((0,o.UI)(this.indexes_,(function(t){if(t===Ut)return t;var r=n.get(e.name);return r?t.remove(new St(e.name,r)):t})),this.indexSet_)},t}();function qt(t,e){return R(t.name,e.name)}function jt(t,e){return R(t,e)}var Vt=function(){function t(t,e,n){this.children_=t,this.priorityNode_=e,this.indexMap_=n,this.lazyHash_=null,this.priorityNode_&&Rt(this.priorityNode_),this.children_.isEmpty()&&(0,o.hu)(!this.priorityNode_||this.priorityNode_.isEmpty(),"An empty node cannot have a priority")}return Object.defineProperty(t,"EMPTY_NODE",{get:function(){return H||(H=new t(new Ft(jt),null,Qt.Default))},enumerable:!1,configurable:!0}),t.prototype.isLeafNode=function(){return!1},t.prototype.getPriority=function(){return this.priorityNode_||H},t.prototype.updatePriority=function(e){return this.children_.isEmpty()?this:new t(this.children_,e,this.indexMap_)},t.prototype.getImmediateChild=function(t){if(".priority"===t)return this.getPriority();var e=this.children_.get(t);return null===e?H:e},t.prototype.getChild=function(t){var e=t.getFront();return null===e?this:this.getImmediateChild(e).getChild(t.popFront())},t.prototype.hasChild=function(t){return null!==this.children_.get(t)},t.prototype.updateImmediateChild=function(e,n){if((0,o.hu)(n,"We should always be passing snapshot nodes"),".priority"===e)return this.updatePriority(n);var r=new St(e,n),i=void 0,s=void 0;n.isEmpty()?(i=this.children_.remove(e),s=this.indexMap_.removeFromIndexes(r,this.children_)):(i=this.children_.insert(e,n),s=this.indexMap_.addToIndexes(r,this.children_));var a=i.isEmpty()?H:this.priorityNode_;return new t(i,a,s)},t.prototype.updateChild=function(t,e){var n=t.getFront();if(null===n)return e;(0,o.hu)(".priority"!==t.getFront()||1===t.getLength(),".priority must be the last token in a path");var r=this.getImmediateChild(n).updateChild(t.popFront(),e);return this.updateImmediateChild(n,r)},t.prototype.isEmpty=function(){return this.children_.isEmpty()},t.prototype.numChildren=function(){return this.children_.count()},t.prototype.val=function(e){if(this.isEmpty())return null;var n={},r=0,i=0,o=!0;if(this.forEachChild(Ot,(function(s,a){n[s]=a.val(e),r++,o&&t.INTEGER_REGEXP_.test(s)?i=Math.max(i,Number(s)):o=!1})),!e&&o&&i<2*r){var s=[];for(var a in n)s[a]=n[a];return s}return e&&!this.getPriority().isEmpty()&&(n[".priority"]=this.getPriority().val()),n},t.prototype.hash=function(){if(null===this.lazyHash_){var t="";this.getPriority().isEmpty()||(t+="priority:"+Pt(this.getPriority().val())+":"),this.forEachChild(Ot,(function(e,n){var r=n.hash();""!==r&&(t+=":"+e+":"+r)})),this.lazyHash_=""===t?"":_(t)}return this.lazyHash_},t.prototype.getPredecessorChildName=function(t,e,n){var r=this.resolveIndex_(n);if(r){var i=r.getPredecessorKey(new St(t,e));return i?i.name:null}return this.children_.getPredecessorKey(t)},t.prototype.getFirstChildName=function(t){var e=this.resolveIndex_(t);if(e){var n=e.minKey();return n&&n.name}return this.children_.minKey()},t.prototype.getFirstChild=function(t){var e=this.getFirstChildName(t);return e?new St(e,this.children_.get(e)):null},t.prototype.getLastChildName=function(t){var e=this.resolveIndex_(t);if(e){var n=e.maxKey();return n&&n.name}return this.children_.maxKey()},t.prototype.getLastChild=function(t){var e=this.getLastChildName(t);return e?new St(e,this.children_.get(e)):null},t.prototype.forEachChild=function(t,e){var n=this.resolveIndex_(t);return n?n.inorderTraversal((function(t){return e(t.name,t.node)})):this.children_.inorderTraversal(e)},t.prototype.getIterator=function(t){return this.getIteratorFrom(t.minPost(),t)},t.prototype.getIteratorFrom=function(t,e){var n=this.resolveIndex_(e);if(n)return n.getIteratorFrom(t,(function(t){return t}));for(var r=this.children_.getIteratorFrom(t.name,St.Wrap),i=r.peek();null!=i&&e.compare(i,t)<0;)r.getNext(),i=r.peek();return r},t.prototype.getReverseIterator=function(t){return this.getReverseIteratorFrom(t.maxPost(),t)},t.prototype.getReverseIteratorFrom=function(t,e){var n=this.resolveIndex_(e);if(n)return n.getReverseIteratorFrom(t,(function(t){return t}));for(var r=this.children_.getReverseIteratorFrom(t.name,St.Wrap),i=r.peek();null!=i&&e.compare(i,t)>0;)r.getNext(),i=r.peek();return r},t.prototype.compareTo=function(t){return this.isEmpty()?t.isEmpty()?0:-1:t.isLeafNode()||t.isEmpty()?1:t===Ht?-1:0},t.prototype.withIndex=function(e){if(e===Nt||this.indexMap_.hasIndex(e))return this;var n=this.indexMap_.addIndex(e,this.children_);return new t(this.children_,this.priorityNode_,n)},t.prototype.isIndexed=function(t){return t===Nt||this.indexMap_.hasIndex(t)},t.prototype.equals=function(t){if(t===this)return!0;if(t.isLeafNode())return!1;var e=t;if(this.getPriority().equals(e.getPriority())){if(this.children_.count()===e.children_.count()){for(var n=this.getIterator(Ot),r=e.getIterator(Ot),i=n.getNext(),o=r.getNext();i&&o;){if(i.name!==o.name||!i.node.equals(o.node))return!1;i=n.getNext(),o=r.getNext()}return null===i&&null===o}return!1}return!1},t.prototype.resolveIndex_=function(t){return t===Nt?null:this.indexMap_.get(t.toString())},t.INTEGER_REGEXP_=/^(0|[1-9]\d*)$/,t}(),Ht=new(function(t){function e(){return t.call(this,new Ft(jt),Vt.EMPTY_NODE,Qt.Default)||this}return(0,i.ZT)(e,t),e.prototype.compareTo=function(t){return t===this?0:1},e.prototype.equals=function(t){return t===this},e.prototype.getPriority=function(){return this},e.prototype.getImmediateChild=function(t){return Vt.EMPTY_NODE},e.prototype.isEmpty=function(){return!1},e}(Vt));function Bt(t,e){if(void 0===e&&(e=null),null===t)return Vt.EMPTY_NODE;if("object"==typeof t&&".priority"in t&&(e=t[".priority"]),(0,o.hu)(null===e||"string"==typeof e||"number"==typeof e||"object"==typeof e&&".sv"in e,"Invalid priority type found: "+typeof e),"object"==typeof t&&".value"in t&&null!==t[".value"]&&(t=t[".value"]),"object"!=typeof t||".sv"in t)return new Dt(t,Bt(e));if(t instanceof Array){var n=Vt.EMPTY_NODE;return k(t,(function(e,r){if((0,o.r3)(t,e)&&"."!==e.substring(0,1)){var i=Bt(r);!i.isLeafNode()&&i.isEmpty()||(n=n.updateImmediateChild(e,i))}})),n.updatePriority(Bt(e))}var r=[],i=!1;if(k(t,(function(t,e){if("."!==t.substring(0,1)){var n=Bt(e);n.isEmpty()||(i=i||!n.getPriority().isEmpty(),r.push(new St(t,n)))}})),0===r.length)return Vt.EMPTY_NODE;var s=Wt(r,qt,(function(t){return t.name}),jt);if(i){var a=Wt(r,Ot.getCompare());return new Vt(s,Bt(e),new Qt({".priority":a},{".priority":Ot}))}return new Vt(s,Bt(e),Qt.Default)}Object.defineProperties(St,{MIN:{value:new St(N,Vt.EMPTY_NODE)},MAX:{value:new St(P,Ht)}}),It.__EMPTY_NODE=Vt.EMPTY_NODE,Dt.__childrenNodeConstructor=Vt,U=Ht,j=Ht,function(t){q=t}(Bt);var zt,Yt=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,i.ZT)(e,t),e.prototype.compare=function(t,e){var n=t.node.compareTo(e.node);return 0===n?R(t.name,e.name):n},e.prototype.isDefinedOn=function(t){return!0},e.prototype.indexedValueChanged=function(t,e){return!t.equals(e)},e.prototype.minPost=function(){return St.MIN},e.prototype.maxPost=function(){return St.MAX},e.prototype.makePost=function(t,e){var n=Bt(t);return new St(e,n)},e.prototype.toString=function(){return".value"},e}(Tt)),Kt=function(t){function e(e){var n=t.call(this)||this;return n.indexPath_=e,(0,o.hu)(!e.isEmpty()&&".priority"!==e.getFront(),"Can't create PathIndex with empty path or .priority key"),n}return(0,i.ZT)(e,t),e.prototype.extractChild=function(t){return t.getChild(this.indexPath_)},e.prototype.isDefinedOn=function(t){return!t.getChild(this.indexPath_).isEmpty()},e.prototype.compare=function(t,e){var n=this.extractChild(t.node),r=this.extractChild(e.node),i=n.compareTo(r);return 0===i?R(t.name,e.name):i},e.prototype.makePost=function(t,e){var n=Bt(t),r=Vt.EMPTY_NODE.updateChild(this.indexPath_,n);return new St(e,r)},e.prototype.maxPost=function(){var t=Vt.EMPTY_NODE.updateChild(this.indexPath_,Ht);return new St(P,t)},e.prototype.toString=function(){return this.indexPath_.slice().join("/")},e}(Tt),Gt=function(){function t(t,e,n){this.node_=t,this.ref_=e,this.index_=n}return t.prototype.val=function(){return(0,o.Dv)("DataSnapshot.val",0,0,arguments.length),this.node_.val()},t.prototype.exportVal=function(){return(0,o.Dv)("DataSnapshot.exportVal",0,0,arguments.length),this.node_.val(!0)},t.prototype.toJSON=function(){return(0,o.Dv)("DataSnapshot.toJSON",0,1,arguments.length),this.exportVal()},t.prototype.exists=function(){return(0,o.Dv)("DataSnapshot.exists",0,0,arguments.length),!this.node_.isEmpty()},t.prototype.child=function(e){(0,o.Dv)("DataSnapshot.child",0,1,arguments.length),e=String(e),_t("DataSnapshot.child",1,e,!1);var n=new X(e),r=this.ref_.child(n);return new t(this.node_.getChild(n),r,Ot)},t.prototype.hasChild=function(t){(0,o.Dv)("DataSnapshot.hasChild",1,1,arguments.length),_t("DataSnapshot.hasChild",1,t,!1);var e=new X(t);return!this.node_.getChild(e).isEmpty()},t.prototype.getPriority=function(){return(0,o.Dv)("DataSnapshot.getPriority",0,0,arguments.length),this.node_.getPriority().val()},t.prototype.forEach=function(e){var n=this;if((0,o.Dv)("DataSnapshot.forEach",1,1,arguments.length),(0,o.Wj)("DataSnapshot.forEach",1,e,!1),this.node_.isLeafNode())return!1;var r=this.node_;return!!r.forEachChild(this.index_,(function(r,i){return e(new t(i,n.ref_.child(r),Ot))}))},t.prototype.hasChildren=function(){return(0,o.Dv)("DataSnapshot.hasChildren",0,0,arguments.length),!this.node_.isLeafNode()&&!this.node_.isEmpty()},Object.defineProperty(t.prototype,"key",{get:function(){return this.ref_.getKey()},enumerable:!1,configurable:!0}),t.prototype.numChildren=function(){return(0,o.Dv)("DataSnapshot.numChildren",0,0,arguments.length),this.node_.numChildren()},t.prototype.getRef=function(){return(0,o.Dv)("DataSnapshot.ref",0,0,arguments.length),this.ref_},Object.defineProperty(t.prototype,"ref",{get:function(){return this.getRef()},enumerable:!1,configurable:!0}),t}(),Xt=function(){function t(t,e,n,r){this.eventType=t,this.eventRegistration=e,this.snapshot=n,this.prevName=r}return t.prototype.getPath=function(){var t=this.snapshot.getRef();return"value"===this.eventType?t.path:t.getParent().path},t.prototype.getEventType=function(){return this.eventType},t.prototype.getEventRunner=function(){return this.eventRegistration.getEventRunner(this)},t.prototype.toString=function(){return this.getPath().toString()+":"+this.eventType+":"+(0,o.Pz)(this.snapshot.exportVal())},t}(),$t=function(){function t(t,e,n){this.eventRegistration=t,this.error=e,this.path=n}return t.prototype.getPath=function(){return this.path},t.prototype.getEventType=function(){return"cancel"},t.prototype.getEventRunner=function(){return this.eventRegistration.getEventRunner(this)},t.prototype.toString=function(){return this.path.toString()+":cancel"},t}(),Zt=function(){function t(t,e,n){this.callback_=t,this.cancelCallback_=e,this.context_=n}return t.prototype.respondsTo=function(t){return"value"===t},t.prototype.createEvent=function(t,e){var n=e.getQueryParams().getIndex();return new Xt("value",this,new Gt(t.snapshotNode,e.getRef(),n))},t.prototype.getEventRunner=function(t){var e=this.context_;if("cancel"===t.getEventType()){(0,o.hu)(this.cancelCallback_,"Raising a cancel event on a listener with no cancel callback");var n=this.cancelCallback_;return function(){n.call(e,t.error)}}var r=this.callback_;return function(){r.call(e,t.snapshot)}},t.prototype.createCancelEvent=function(t,e){return this.cancelCallback_?new $t(this,t,e):null},t.prototype.matches=function(e){return e instanceof t&&(!e.callback_||!this.callback_||e.callback_===this.callback_&&e.context_===this.context_)},t.prototype.hasAnyCallback=function(){return null!==this.callback_},t}(),Jt=function(){function t(t,e,n){this.callbacks_=t,this.cancelCallback_=e,this.context_=n}return t.prototype.respondsTo=function(t){var e="children_added"===t?"child_added":t;return e="children_removed"===e?"child_removed":e,(0,o.r3)(this.callbacks_,e)},t.prototype.createCancelEvent=function(t,e){return this.cancelCallback_?new $t(this,t,e):null},t.prototype.createEvent=function(t,e){(0,o.hu)(null!=t.childName,"Child events should have a childName.");var n=e.getRef().child(t.childName),r=e.getQueryParams().getIndex();return new Xt(t.type,this,new Gt(t.snapshotNode,n,r),t.prevName)},t.prototype.getEventRunner=function(t){var e=this.context_;if("cancel"===t.getEventType()){(0,o.hu)(this.cancelCallback_,"Raising a cancel event on a listener with no cancel callback");var n=this.cancelCallback_;return function(){n.call(e,t.error)}}var r=this.callbacks_[t.eventType];return function(){r.call(e,t.snapshot,t.prevName)}},t.prototype.matches=function(e){var n=this;if(e instanceof t){if(!this.callbacks_||!e.callbacks_)return!0;if(this.context_===e.context_){var r=Object.keys(e.callbacks_),i=Object.keys(this.callbacks_),o=r.length;if(o===i.length){if(1===o){var s=r[0],a=i[0];return!(a!==s||e.callbacks_[s]&&this.callbacks_[a]&&e.callbacks_[s]!==this.callbacks_[a])}return i.every((function(t){return e.callbacks_[t]===n.callbacks_[t]}))}}}return!1},t.prototype.hasAnyCallback=function(){return null!==this.callbacks_},t}(),te=function(){function t(t,e,n,r){this.repo=t,this.path=e,this.queryParams_=n,this.orderByCalled_=r}return Object.defineProperty(t,"__referenceConstructor",{get:function(){return(0,o.hu)(zt,"Reference.ts has not been loaded"),zt},set:function(t){zt=t},enumerable:!1,configurable:!0}),t.validateQueryEndpoints_=function(t){var e=null,n=null;if(t.hasStart()&&(e=t.getIndexStartValue()),t.hasEnd()&&(n=t.getIndexEndValue()),t.getIndex()===Nt){var r="Query: When ordering by key, you may only pass one argument to startAt(), endAt(), or equalTo().",i="Query: When ordering by key, the argument passed to startAt(), endAt(),or equalTo() must be a string.";if(t.hasStart()){if(t.getIndexStartName()!==N)throw new Error(r);if("string"!=typeof e)throw new Error(i)}if(t.hasEnd()){if(t.getIndexEndName()!==P)throw new Error(r);if("string"!=typeof n)throw new Error(i)}}else if(t.getIndex()===Ot){if(null!=e&&!ut(e)||null!=n&&!ut(n))throw new Error("Query: When ordering by priority, the first argument passed to startAt(), endAt(), or equalTo() must be a valid priority value (null, a number, or a string).")}else if((0,o.hu)(t.getIndex()instanceof Kt||t.getIndex()===Yt,"unknown index type."),null!=e&&"object"==typeof e||null!=n&&"object"==typeof n)throw new Error("Query: First argument passed to startAt(), endAt(), or equalTo() cannot be an object.")},t.validateLimit_=function(t){if(t.hasStart()&&t.hasEnd()&&t.hasLimit()&&!t.hasAnchoredLimit())throw new Error("Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.")},t.prototype.validateNoPreviousOrderByCall_=function(t){if(!0===this.orderByCalled_)throw new Error(t+": You can't combine multiple orderBy calls.")},t.prototype.getQueryParams=function(){return this.queryParams_},t.prototype.getRef=function(){return(0,o.Dv)("Query.ref",0,0,arguments.length),new t.__referenceConstructor(this.repo,this.path)},t.prototype.on=function(e,n,r,i){(0,o.Dv)("Query.on",2,4,arguments.length),ft("Query.on",1,e,!1),(0,o.Wj)("Query.on",2,n,!1);var s=t.getCancelAndContextArgs_("Query.on",r,i);if("value"===e)this.onValueEvent(n,s.cancel,s.context);else{var a={};a[e]=n,this.onChildEvent(a,s.cancel,s.context)}return n},t.prototype.onValueEvent=function(t,e,n){var r=new Zt(t,e||null,n||null);this.repo.addEventCallbackForQuery(this,r)},t.prototype.onChildEvent=function(t,e,n){var r=new Jt(t,e,n);this.repo.addEventCallbackForQuery(this,r)},t.prototype.off=function(t,e,n){(0,o.Dv)("Query.off",0,3,arguments.length),ft("Query.off",1,t,!0),(0,o.Wj)("Query.off",2,e,!0),(0,o.lb)("Query.off",3,n,!0);var r=null,i=null;if("value"===t){var s=e||null;r=new Zt(s,null,n||null)}else t&&(e&&((i={})[t]=e),r=new Jt(i,null,n||null));this.repo.removeEventCallbackForQuery(this,r)},t.prototype.once=function(e,n,r,i){var s=this;(0,o.Dv)("Query.once",1,4,arguments.length),ft("Query.once",1,e,!1),(0,o.Wj)("Query.once",2,n,!0);var a=t.getCancelAndContextArgs_("Query.once",r,i),h=!0,u=new o.BH;u.promise.catch((function(){}));var l=function(t){h&&(h=!1,s.off(e,l),n&&n.bind(a.context)(t),u.resolve(t))};return this.on(e,l,(function(t){s.off(e,l),a.cancel&&a.cancel.bind(a.context)(t),u.reject(t)})),u.promise},t.prototype.limitToFirst=function(e){if((0,o.Dv)("Query.limitToFirst",1,1,arguments.length),"number"!=typeof e||Math.floor(e)!==e||e<=0)throw new Error("Query.limitToFirst: First argument must be a positive integer.");if(this.queryParams_.hasLimit())throw new Error("Query.limitToFirst: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");return new t(this.repo,this.path,this.queryParams_.limitToFirst(e),this.orderByCalled_)},t.prototype.limitToLast=function(e){if((0,o.Dv)("Query.limitToLast",1,1,arguments.length),"number"!=typeof e||Math.floor(e)!==e||e<=0)throw new Error("Query.limitToLast: First argument must be a positive integer.");if(this.queryParams_.hasLimit())throw new Error("Query.limitToLast: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");return new t(this.repo,this.path,this.queryParams_.limitToLast(e),this.orderByCalled_)},t.prototype.orderByChild=function(e){if((0,o.Dv)("Query.orderByChild",1,1,arguments.length),"$key"===e)throw new Error('Query.orderByChild: "$key" is invalid.  Use Query.orderByKey() instead.');if("$priority"===e)throw new Error('Query.orderByChild: "$priority" is invalid.  Use Query.orderByPriority() instead.');if("$value"===e)throw new Error('Query.orderByChild: "$value" is invalid.  Use Query.orderByValue() instead.');_t("Query.orderByChild",1,e,!1),this.validateNoPreviousOrderByCall_("Query.orderByChild");var n=new X(e);if(n.isEmpty())throw new Error("Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.");var r=new Kt(n),i=this.queryParams_.orderBy(r);return t.validateQueryEndpoints_(i),new t(this.repo,this.path,i,!0)},t.prototype.orderByKey=function(){(0,o.Dv)("Query.orderByKey",0,0,arguments.length),this.validateNoPreviousOrderByCall_("Query.orderByKey");var e=this.queryParams_.orderBy(Nt);return t.validateQueryEndpoints_(e),new t(this.repo,this.path,e,!0)},t.prototype.orderByPriority=function(){(0,o.Dv)("Query.orderByPriority",0,0,arguments.length),this.validateNoPreviousOrderByCall_("Query.orderByPriority");var e=this.queryParams_.orderBy(Ot);return t.validateQueryEndpoints_(e),new t(this.repo,this.path,e,!0)},t.prototype.orderByValue=function(){(0,o.Dv)("Query.orderByValue",0,0,arguments.length),this.validateNoPreviousOrderByCall_("Query.orderByValue");var e=this.queryParams_.orderBy(Yt);return t.validateQueryEndpoints_(e),new t(this.repo,this.path,e,!0)},t.prototype.startAt=function(e,n){void 0===e&&(e=null),(0,o.Dv)("Query.startAt",0,2,arguments.length),lt("Query.startAt",1,e,this.path,!0),yt("Query.startAt",2,n,!0);var r=this.queryParams_.startAt(e,n);if(t.validateLimit_(r),t.validateQueryEndpoints_(r),this.queryParams_.hasStart())throw new Error("Query.startAt: Starting point was already set (by another call to startAt or equalTo).");return void 0===e&&(e=null,n=null),new t(this.repo,this.path,r,this.orderByCalled_)},t.prototype.endAt=function(e,n){void 0===e&&(e=null),(0,o.Dv)("Query.endAt",0,2,arguments.length),lt("Query.endAt",1,e,this.path,!0),yt("Query.endAt",2,n,!0);var r=this.queryParams_.endAt(e,n);if(t.validateLimit_(r),t.validateQueryEndpoints_(r),this.queryParams_.hasEnd())throw new Error("Query.endAt: Ending point was already set (by another call to endAt or equalTo).");return new t(this.repo,this.path,r,this.orderByCalled_)},t.prototype.equalTo=function(t,e){if((0,o.Dv)("Query.equalTo",1,2,arguments.length),lt("Query.equalTo",1,t,this.path,!1),yt("Query.equalTo",2,e,!0),this.queryParams_.hasStart())throw new Error("Query.equalTo: Starting point was already set (by another call to startAt or equalTo).");if(this.queryParams_.hasEnd())throw new Error("Query.equalTo: Ending point was already set (by another call to endAt or equalTo).");return this.startAt(t,e).endAt(t,e)},t.prototype.toString=function(){return(0,o.Dv)("Query.toString",0,0,arguments.length),this.repo.toString()+this.path.toUrlEncodedString()},t.prototype.toJSON=function(){return(0,o.Dv)("Query.toJSON",0,1,arguments.length),this.toString()},t.prototype.queryObject=function(){return this.queryParams_.getQueryObject()},t.prototype.queryIdentifier=function(){var t=this.queryObject(),e=x(t);return"{}"===e?"default":e},t.prototype.isEqual=function(e){if((0,o.Dv)("Query.isEqual",1,1,arguments.length),!(e instanceof t)){var n="Query.isEqual failed: First argument must be an instance of firebase.database.Query.";throw new Error(n)}var r=this.repo===e.repo,i=this.path.equals(e.path),s=this.queryIdentifier()===e.queryIdentifier();return r&&i&&s},t.getCancelAndContextArgs_=function(t,e,n){var r={cancel:null,context:null};if(e&&n)r.cancel=e,(0,o.Wj)(t,3,r.cancel,!0),r.context=n,(0,o.lb)(t,4,r.context,!0);else if(e)if("object"==typeof e&&null!==e)r.context=e;else{if("function"!=typeof e)throw new Error((0,o.gK)(t,3,!0)+" must either be a cancel callback or a context object.");r.cancel=e}return r},Object.defineProperty(t.prototype,"ref",{get:function(){return this.getRef()},enumerable:!1,configurable:!0}),t}(),ee=function(){function t(t){this.node_=t}return t.prototype.getImmediateChild=function(e){return new t(this.node_.getImmediateChild(e))},t.prototype.node=function(){return this.node_},t}(),ne=function(){function t(t,e){this.syncTree_=t,this.path_=e}return t.prototype.getImmediateChild=function(e){var n=this.path_.child(e);return new t(this.syncTree_,n)},t.prototype.node=function(){return this.syncTree_.calcCompleteEventCache(this.path_)},t}(),re=function(t,e,n){return t&&"object"==typeof t?((0,o.hu)(".sv"in t,"Unexpected leaf node or priority contents"),"string"==typeof t[".sv"]?ie(t[".sv"],e,n):"object"==typeof t[".sv"]?oe(t[".sv"],e):void(0,o.hu)(!1,"Unexpected server value: "+JSON.stringify(t,null,2))):t},ie=function(t,e,n){switch(t){case"timestamp":return n.timestamp;default:(0,o.hu)(!1,"Unexpected server value: "+t)}},oe=function(t,e,n){t.hasOwnProperty("increment")||(0,o.hu)(!1,"Unexpected server value: "+JSON.stringify(t,null,2));var r=t.increment;"number"!=typeof r&&(0,o.hu)(!1,"Unexpected increment value: "+r);var i=e.node();if((0,o.hu)(null!=i,"Expected ChildrenNode.EMPTY_NODE for nulls"),!i.isLeafNode())return r;var s=i.getValue();return"number"!=typeof s?r:s+r},se=function(t,e,n,r){return he(e,new ne(n,t),r)},ae=function(t,e,n){return he(t,new ee(e),n)};function he(t,e,n){var r,i=t.getPriority().val(),o=re(i,e.getImmediateChild(".priority"),n);if(t.isLeafNode()){var s=t,a=re(s.getValue(),e,n);return a!==s.getValue()||o!==s.getPriority().val()?new Dt(a,Bt(o)):t}var h=t;return r=h,o!==h.getPriority().val()&&(r=r.updatePriority(new Dt(o))),h.forEachChild(Ot,(function(t,i){var o=he(i,e.getImmediateChild(t),n);o!==i&&(r=r.updateImmediateChild(t,o))})),r}var ue,le=function(){function t(){this.value=null,this.children=new Map}return t.prototype.find=function(t){if(null!=this.value)return this.value.getChild(t);if(!t.isEmpty()&&this.children.size>0){var e=t.getFront();return t=t.popFront(),this.children.has(e)?this.children.get(e).find(t):null}return null},t.prototype.remember=function(e,n){if(e.isEmpty())this.value=n,this.children.clear();else if(null!==this.value)this.value=this.value.updateChild(e,n);else{var r=e.getFront();this.children.has(r)||this.children.set(r,new t);var i=this.children.get(r);e=e.popFront(),i.remember(e,n)}},t.prototype.forget=function(t){if(t.isEmpty())return this.value=null,this.children.clear(),!0;if(null!==this.value){if(this.value.isLeafNode())return!1;var e=this.value;this.value=null;var n=this;return e.forEachChild(Ot,(function(t,e){n.remember(new X(t),e)})),this.forget(t)}if(this.children.size>0){var r=t.getFront();return t=t.popFront(),this.children.has(r)&&this.children.get(r).forget(t)&&this.children.delete(r),0===this.children.size}return!0},t.prototype.forEachTree=function(t,e){null!==this.value?e(t,this.value):this.forEachChild((function(n,r){var i=new X(t.toString()+"/"+n);r.forEachTree(i,e)}))},t.prototype.forEachChild=function(t){this.children.forEach((function(e,n){t(n,e)}))},t}();!function(t){t[t.OVERWRITE=0]="OVERWRITE",t[t.MERGE=1]="MERGE",t[t.ACK_USER_WRITE=2]="ACK_USER_WRITE",t[t.LISTEN_COMPLETE=3]="LISTEN_COMPLETE"}(ue||(ue={}));var ce,pe,de=function(){function t(t,e,n,r){this.fromUser=t,this.fromServer=e,this.queryId=n,this.tagged=r,(0,o.hu)(!r||e,"Tagged queries must be from server.")}return t.User=new t(!0,!1,null,!1),t.Server=new t(!1,!0,null,!1),t.forServerTaggedQuery=function(e){return new t(!1,!0,e,!0)},t}(),fe=function(){function t(t,e,n){this.path=t,this.affectedTree=e,this.revert=n,this.type=ue.ACK_USER_WRITE,this.source=de.User}return t.prototype.operationForChild=function(e){if(this.path.isEmpty()){if(null!=this.affectedTree.value)return(0,o.hu)(this.affectedTree.children.isEmpty(),"affectedTree should not have overlapping affected paths."),this;var n=this.affectedTree.subtree(new X(e));return new t(X.Empty,n,this.revert)}return(0,o.hu)(this.path.getFront()===e,"operationForChild called for unrelated child."),new t(this.path.popFront(),this.affectedTree,this.revert)},t}(),ye=function(){function t(t,e){void 0===e&&(ce||(ce=new Ft(D)),e=ce),this.value=t,this.children=e}return t.fromObject=function(e){var n=t.Empty;return k(e,(function(t,e){n=n.set(new X(t),e)})),n},t.prototype.isEmpty=function(){return null===this.value&&this.children.isEmpty()},t.prototype.findRootMostMatchingPathAndValue=function(t,e){if(null!=this.value&&e(this.value))return{path:X.Empty,value:this.value};if(t.isEmpty())return null;var n=t.getFront(),r=this.children.get(n);if(null!==r){var i=r.findRootMostMatchingPathAndValue(t.popFront(),e);return null!=i?{path:new X(n).child(i.path),value:i.value}:null}return null},t.prototype.findRootMostValueAndPath=function(t){return this.findRootMostMatchingPathAndValue(t,(function(){return!0}))},t.prototype.subtree=function(e){if(e.isEmpty())return this;var n=e.getFront(),r=this.children.get(n);return null!==r?r.subtree(e.popFront()):t.Empty},t.prototype.set=function(e,n){if(e.isEmpty())return new t(n,this.children);var r=e.getFront(),i=(this.children.get(r)||t.Empty).set(e.popFront(),n),o=this.children.insert(r,i);return new t(this.value,o)},t.prototype.remove=function(e){if(e.isEmpty())return this.children.isEmpty()?t.Empty:new t(null,this.children);var n=e.getFront(),r=this.children.get(n);if(r){var i=r.remove(e.popFront()),o=void 0;return o=i.isEmpty()?this.children.remove(n):this.children.insert(n,i),null===this.value&&o.isEmpty()?t.Empty:new t(this.value,o)}return this},t.prototype.get=function(t){if(t.isEmpty())return this.value;var e=t.getFront(),n=this.children.get(e);return n?n.get(t.popFront()):null},t.prototype.setTree=function(e,n){if(e.isEmpty())return n;var r,i=e.getFront(),o=(this.children.get(i)||t.Empty).setTree(e.popFront(),n);return r=o.isEmpty()?this.children.remove(i):this.children.insert(i,o),new t(this.value,r)},t.prototype.fold=function(t){return this.fold_(X.Empty,t)},t.prototype.fold_=function(t,e){var n={};return this.children.inorderTraversal((function(r,i){n[r]=i.fold_(t.child(r),e)})),e(t,this.value,n)},t.prototype.findOnPath=function(t,e){return this.findOnPath_(t,X.Empty,e)},t.prototype.findOnPath_=function(t,e,n){var r=!!this.value&&n(e,this.value);if(r)return r;if(t.isEmpty())return null;var i=t.getFront(),o=this.children.get(i);return o?o.findOnPath_(t.popFront(),e.child(i),n):null},t.prototype.foreachOnPath=function(t,e){return this.foreachOnPath_(t,X.Empty,e)},t.prototype.foreachOnPath_=function(e,n,r){if(e.isEmpty())return this;this.value&&r(n,this.value);var i=e.getFront(),o=this.children.get(i);return o?o.foreachOnPath_(e.popFront(),n.child(i),r):t.Empty},t.prototype.foreach=function(t){this.foreach_(X.Empty,t)},t.prototype.foreach_=function(t,e){this.children.inorderTraversal((function(n,r){r.foreach_(t.child(n),e)})),this.value&&e(t,this.value)},t.prototype.foreachChild=function(t){this.children.inorderTraversal((function(e,n){n.value&&t(e,n.value)}))},t.Empty=new t(null),t}(),_e=function(){function t(t,e){this.source=t,this.path=e,this.type=ue.LISTEN_COMPLETE}return t.prototype.operationForChild=function(e){return this.path.isEmpty()?new t(this.source,X.Empty):new t(this.source,this.path.popFront())},t}(),ve=function(){function t(t,e,n){this.source=t,this.path=e,this.snap=n,this.type=ue.OVERWRITE}return t.prototype.operationForChild=function(e){return this.path.isEmpty()?new t(this.source,X.Empty,this.snap.getImmediateChild(e)):new t(this.source,this.path.popFront(),this.snap)},t}(),ge=function(){function t(t,e,n){this.source=t,this.path=e,this.children=n,this.type=ue.MERGE}return t.prototype.operationForChild=function(e){if(this.path.isEmpty()){var n=this.children.subtree(new X(e));return n.isEmpty()?null:n.value?new ve(this.source,X.Empty,n.value):new t(this.source,X.Empty,n)}return(0,o.hu)(this.path.getFront()===e,"Can't get a merge for a child not on the path of the operation"),new t(this.source,this.path.popFront(),this.children)},t.prototype.toString=function(){return"Operation("+this.path+": "+this.source.toString()+" merge: "+this.children.toString()+")"},t}(),me=function(){function t(t,e,n){this.node_=t,this.fullyInitialized_=e,this.filtered_=n}return t.prototype.isFullyInitialized=function(){return this.fullyInitialized_},t.prototype.isFiltered=function(){return this.filtered_},t.prototype.isCompleteForPath=function(t){if(t.isEmpty())return this.isFullyInitialized()&&!this.filtered_;var e=t.getFront();return this.isCompleteForChild(e)},t.prototype.isCompleteForChild=function(t){return this.isFullyInitialized()&&!this.filtered_||this.node_.hasChild(t)},t.prototype.getNode=function(){return this.node_},t}(),Ce=function(){function t(t,e){this.eventCache_=t,this.serverCache_=e}return t.prototype.updateEventSnap=function(e,n,r){return new t(new me(e,n,r),this.serverCache_)},t.prototype.updateServerSnap=function(e,n,r){return new t(this.eventCache_,new me(e,n,r))},t.prototype.getEventCache=function(){return this.eventCache_},t.prototype.getCompleteEventSnap=function(){return this.eventCache_.isFullyInitialized()?this.eventCache_.getNode():null},t.prototype.getServerCache=function(){return this.serverCache_},t.prototype.getCompleteServerSnap=function(){return this.serverCache_.isFullyInitialized()?this.serverCache_.getNode():null},t.Empty=new t(new me(Vt.EMPTY_NODE,!1,!1),new me(Vt.EMPTY_NODE,!1,!1)),t}(),Ee=function(){function t(t,e,n,r,i){this.type=t,this.snapshotNode=e,this.childName=n,this.oldSnap=r,this.prevName=i}return t.valueChange=function(e){return new t(t.VALUE,e)},t.childAddedChange=function(e,n){return new t(t.CHILD_ADDED,n,e)},t.childRemovedChange=function(e,n){return new t(t.CHILD_REMOVED,n,e)},t.childChangedChange=function(e,n,r){return new t(t.CHILD_CHANGED,n,e,r)},t.childMovedChange=function(e,n){return new t(t.CHILD_MOVED,n,e)},t.CHILD_ADDED="child_added",t.CHILD_REMOVED="child_removed",t.CHILD_CHANGED="child_changed",t.CHILD_MOVED="child_moved",t.VALUE="value",t}(),we=function(){function t(t){this.index_=t}return t.prototype.updateChild=function(t,e,n,r,i,s){(0,o.hu)(t.isIndexed(this.index_),"A node must be indexed if only a child is updated");var a=t.getImmediateChild(e);return a.getChild(r).equals(n.getChild(r))&&a.isEmpty()===n.isEmpty()?t:(null!=s&&(n.isEmpty()?t.hasChild(e)?s.trackChildChange(Ee.childRemovedChange(e,a)):(0,o.hu)(t.isLeafNode(),"A child remove without an old child only makes sense on a leaf node"):a.isEmpty()?s.trackChildChange(Ee.childAddedChange(e,n)):s.trackChildChange(Ee.childChangedChange(e,n,a))),t.isLeafNode()&&n.isEmpty()?t:t.updateImmediateChild(e,n).withIndex(this.index_))},t.prototype.updateFullNode=function(t,e,n){return null!=n&&(t.isLeafNode()||t.forEachChild(Ot,(function(t,r){e.hasChild(t)||n.trackChildChange(Ee.childRemovedChange(t,r))})),e.isLeafNode()||e.forEachChild(Ot,(function(e,r){if(t.hasChild(e)){var i=t.getImmediateChild(e);i.equals(r)||n.trackChildChange(Ee.childChangedChange(e,r,i))}else n.trackChildChange(Ee.childAddedChange(e,r))}))),e.withIndex(this.index_)},t.prototype.updatePriority=function(t,e){return t.isEmpty()?Vt.EMPTY_NODE:t.updatePriority(e)},t.prototype.filtersNodes=function(){return!1},t.prototype.getIndexedFilter=function(){return this},t.prototype.getIndex=function(){return this.index_},t}(),be=function(){function t(){this.changeMap=new Map}return t.prototype.trackChildChange=function(t){var e=t.type,n=t.childName;(0,o.hu)(e===Ee.CHILD_ADDED||e===Ee.CHILD_CHANGED||e===Ee.CHILD_REMOVED,"Only child changes supported for tracking"),(0,o.hu)(".priority"!==n,"Only non-priority child changes can be tracked.");var r=this.changeMap.get(n);if(r){var i=r.type;if(e===Ee.CHILD_ADDED&&i===Ee.CHILD_REMOVED)this.changeMap.set(n,Ee.childChangedChange(n,t.snapshotNode,r.snapshotNode));else if(e===Ee.CHILD_REMOVED&&i===Ee.CHILD_ADDED)this.changeMap.delete(n);else if(e===Ee.CHILD_REMOVED&&i===Ee.CHILD_CHANGED)this.changeMap.set(n,Ee.childRemovedChange(n,r.oldSnap));else if(e===Ee.CHILD_CHANGED&&i===Ee.CHILD_ADDED)this.changeMap.set(n,Ee.childAddedChange(n,t.snapshotNode));else{if(e!==Ee.CHILD_CHANGED||i!==Ee.CHILD_CHANGED)throw(0,o.g5)("Illegal combination of changes: "+t+" occurred after "+r);this.changeMap.set(n,Ee.childChangedChange(n,t.snapshotNode,r.oldSnap))}}else this.changeMap.set(n,t)},t.prototype.getChanges=function(){return Array.from(this.changeMap.values())},t}(),Se=new(function(){function t(){}return t.prototype.getCompleteChild=function(t){return null},t.prototype.getChildAfterChild=function(t,e,n){return null},t}()),Te=function(){function t(t,e,n){void 0===n&&(n=null),this.writes_=t,this.viewCache_=e,this.optCompleteServerCache_=n}return t.prototype.getCompleteChild=function(t){var e=this.viewCache_.getEventCache();if(e.isCompleteForChild(t))return e.getNode().getImmediateChild(t);var n=null!=this.optCompleteServerCache_?new me(this.optCompleteServerCache_,!0,!1):this.viewCache_.getServerCache();return this.writes_.calcCompleteChild(t,n)},t.prototype.getChildAfterChild=function(t,e,n){var r=null!=this.optCompleteServerCache_?this.optCompleteServerCache_:this.viewCache_.getCompleteServerSnap(),i=this.writes_.calcIndexedSlice(r,e,1,n,t);return 0===i.length?null:i[0]},t}(),Ie=function(t,e){this.viewCache=t,this.changes=e},Ne=function(){function t(t){this.filter_=t}return t.prototype.assertIndexed=function(t){(0,o.hu)(t.getEventCache().getNode().isIndexed(this.filter_.getIndex()),"Event snap not indexed"),(0,o.hu)(t.getServerCache().getNode().isIndexed(this.filter_.getIndex()),"Server snap not indexed")},t.prototype.applyOperation=function(e,n,r,i){var s,a,h=new be;if(n.type===ue.OVERWRITE){var u=n;u.source.fromUser?s=this.applyUserOverwrite_(e,u.path,u.snap,r,i,h):((0,o.hu)(u.source.fromServer,"Unknown source."),a=u.source.tagged||e.getServerCache().isFiltered()&&!u.path.isEmpty(),s=this.applyServerOverwrite_(e,u.path,u.snap,r,i,a,h))}else if(n.type===ue.MERGE){var l=n;l.source.fromUser?s=this.applyUserMerge_(e,l.path,l.children,r,i,h):((0,o.hu)(l.source.fromServer,"Unknown source."),a=l.source.tagged||e.getServerCache().isFiltered(),s=this.applyServerMerge_(e,l.path,l.children,r,i,a,h))}else if(n.type===ue.ACK_USER_WRITE){var c=n;s=c.revert?this.revertUserWrite_(e,c.path,r,i,h):this.ackUserWrite_(e,c.path,c.affectedTree,r,i,h)}else{if(n.type!==ue.LISTEN_COMPLETE)throw(0,o.g5)("Unknown operation type: "+n.type);s=this.listenComplete_(e,n.path,r,h)}var p=h.getChanges();return t.maybeAddValueEvent_(e,s,p),new Ie(s,p)},t.maybeAddValueEvent_=function(t,e,n){var r=e.getEventCache();if(r.isFullyInitialized()){var i=r.getNode().isLeafNode()||r.getNode().isEmpty(),o=t.getCompleteEventSnap();(n.length>0||!t.getEventCache().isFullyInitialized()||i&&!r.getNode().equals(o)||!r.getNode().getPriority().equals(o.getPriority()))&&n.push(Ee.valueChange(e.getCompleteEventSnap()))}},t.prototype.generateEventCacheAfterServerEvent_=function(t,e,n,r,i){var s=t.getEventCache();if(null!=n.shadowingWrite(e))return t;var a=void 0,h=void 0;if(e.isEmpty())if((0,o.hu)(t.getServerCache().isFullyInitialized(),"If change path is empty, we must have complete server data"),t.getServerCache().isFiltered()){var u=t.getCompleteServerSnap(),l=u instanceof Vt?u:Vt.EMPTY_NODE,c=n.calcCompleteEventChildren(l);a=this.filter_.updateFullNode(t.getEventCache().getNode(),c,i)}else{var p=n.calcCompleteEventCache(t.getCompleteServerSnap());a=this.filter_.updateFullNode(t.getEventCache().getNode(),p,i)}else{var d=e.getFront();if(".priority"===d){(0,o.hu)(1===e.getLength(),"Can't have a priority with additional path components");var f=s.getNode();h=t.getServerCache().getNode();var y=n.calcEventCacheAfterServerOverwrite(e,f,h);a=null!=y?this.filter_.updatePriority(f,y):s.getNode()}else{var _=e.popFront(),v=void 0;if(s.isCompleteForChild(d)){h=t.getServerCache().getNode();var g=n.calcEventCacheAfterServerOverwrite(e,s.getNode(),h);v=null!=g?s.getNode().getImmediateChild(d).updateChild(_,g):s.getNode().getImmediateChild(d)}else v=n.calcCompleteChild(d,t.getServerCache());a=null!=v?this.filter_.updateChild(s.getNode(),d,v,_,r,i):s.getNode()}}return t.updateEventSnap(a,s.isFullyInitialized()||e.isEmpty(),this.filter_.filtersNodes())},t.prototype.applyServerOverwrite_=function(t,e,n,r,i,o,s){var a,h=t.getServerCache(),u=o?this.filter_:this.filter_.getIndexedFilter();if(e.isEmpty())a=u.updateFullNode(h.getNode(),n,null);else if(u.filtersNodes()&&!h.isFiltered()){var l=h.getNode().updateChild(e,n);a=u.updateFullNode(h.getNode(),l,null)}else{var c=e.getFront();if(!h.isCompleteForPath(e)&&e.getLength()>1)return t;var p=e.popFront(),d=h.getNode().getImmediateChild(c).updateChild(p,n);a=".priority"===c?u.updatePriority(h.getNode(),d):u.updateChild(h.getNode(),c,d,p,Se,null)}var f=t.updateServerSnap(a,h.isFullyInitialized()||e.isEmpty(),u.filtersNodes()),y=new Te(r,f,i);return this.generateEventCacheAfterServerEvent_(f,e,r,y,s)},t.prototype.applyUserOverwrite_=function(t,e,n,r,i,o){var s,a,h=t.getEventCache(),u=new Te(r,t,i);if(e.isEmpty())a=this.filter_.updateFullNode(t.getEventCache().getNode(),n,o),s=t.updateEventSnap(a,!0,this.filter_.filtersNodes());else{var l=e.getFront();if(".priority"===l)a=this.filter_.updatePriority(t.getEventCache().getNode(),n),s=t.updateEventSnap(a,h.isFullyInitialized(),h.isFiltered());else{var c=e.popFront(),p=h.getNode().getImmediateChild(l),d=void 0;if(c.isEmpty())d=n;else{var f=u.getCompleteChild(l);d=null!=f?".priority"===c.getBack()&&f.getChild(c.parent()).isEmpty()?f:f.updateChild(c,n):Vt.EMPTY_NODE}if(p.equals(d))s=t;else{var y=this.filter_.updateChild(h.getNode(),l,d,c,u,o);s=t.updateEventSnap(y,h.isFullyInitialized(),this.filter_.filtersNodes())}}}return s},t.cacheHasChild_=function(t,e){return t.getEventCache().isCompleteForChild(e)},t.prototype.applyUserMerge_=function(e,n,r,i,o,s){var a=this,h=e;return r.foreach((function(r,u){var l=n.child(r);t.cacheHasChild_(e,l.getFront())&&(h=a.applyUserOverwrite_(h,l,u,i,o,s))})),r.foreach((function(r,u){var l=n.child(r);t.cacheHasChild_(e,l.getFront())||(h=a.applyUserOverwrite_(h,l,u,i,o,s))})),h},t.prototype.applyMerge_=function(t,e){return e.foreach((function(e,n){t=t.updateChild(e,n)})),t},t.prototype.applyServerMerge_=function(t,e,n,r,i,o,s){var a=this;if(t.getServerCache().getNode().isEmpty()&&!t.getServerCache().isFullyInitialized())return t;var h,u=t;h=e.isEmpty()?n:ye.Empty.setTree(e,n);var l=t.getServerCache().getNode();return h.children.inorderTraversal((function(e,n){if(l.hasChild(e)){var h=t.getServerCache().getNode().getImmediateChild(e),c=a.applyMerge_(h,n);u=a.applyServerOverwrite_(u,new X(e),c,r,i,o,s)}})),h.children.inorderTraversal((function(e,n){var h=!t.getServerCache().isCompleteForChild(e)&&null==n.value;if(!l.hasChild(e)&&!h){var c=t.getServerCache().getNode().getImmediateChild(e),p=a.applyMerge_(c,n);u=a.applyServerOverwrite_(u,new X(e),p,r,i,o,s)}})),u},t.prototype.ackUserWrite_=function(t,e,n,r,i,o){if(null!=r.shadowingWrite(e))return t;var s=t.getServerCache().isFiltered(),a=t.getServerCache();if(null!=n.value){if(e.isEmpty()&&a.isFullyInitialized()||a.isCompleteForPath(e))return this.applyServerOverwrite_(t,e,a.getNode().getChild(e),r,i,s,o);if(e.isEmpty()){var h=ye.Empty;return a.getNode().forEachChild(Nt,(function(t,e){h=h.set(new X(t),e)})),this.applyServerMerge_(t,e,h,r,i,s,o)}return t}var u=ye.Empty;return n.foreach((function(t,n){var r=e.child(t);a.isCompleteForPath(r)&&(u=u.set(t,a.getNode().getChild(r)))})),this.applyServerMerge_(t,e,u,r,i,s,o)},t.prototype.listenComplete_=function(t,e,n,r){var i=t.getServerCache(),o=t.updateServerSnap(i.getNode(),i.isFullyInitialized()||e.isEmpty(),i.isFiltered());return this.generateEventCacheAfterServerEvent_(o,e,n,Se,r)},t.prototype.revertUserWrite_=function(t,e,n,r,i){var s;if(null!=n.shadowingWrite(e))return t;var a=new Te(n,t,r),h=t.getEventCache().getNode(),u=void 0;if(e.isEmpty()||".priority"===e.getFront()){var l=void 0;if(t.getServerCache().isFullyInitialized())l=n.calcCompleteEventCache(t.getCompleteServerSnap());else{var c=t.getServerCache().getNode();(0,o.hu)(c instanceof Vt,"serverChildren would be complete if leaf node"),l=n.calcCompleteEventChildren(c)}l=l,u=this.filter_.updateFullNode(h,l,i)}else{var p=e.getFront(),d=n.calcCompleteChild(p,t.getServerCache());null==d&&t.getServerCache().isCompleteForChild(p)&&(d=h.getImmediateChild(p)),(u=null!=d?this.filter_.updateChild(h,p,d,e.popFront(),a,i):t.getEventCache().getNode().hasChild(p)?this.filter_.updateChild(h,p,Vt.EMPTY_NODE,e.popFront(),a,i):h).isEmpty()&&t.getServerCache().isFullyInitialized()&&(s=n.calcCompleteEventCache(t.getCompleteServerSnap())).isLeafNode()&&(u=this.filter_.updateFullNode(u,s,i))}return s=t.getServerCache().isFullyInitialized()||null!=n.shadowingWrite(X.Empty),t.updateEventSnap(u,s,this.filter_.filtersNodes())},t}(),Pe=function(){function t(t){this.query_=t,this.index_=this.query_.getQueryParams().getIndex()}return t.prototype.generateEventsForChanges=function(t,e,n){var r=this,i=[],o=[];return t.forEach((function(t){t.type===Ee.CHILD_CHANGED&&r.index_.indexedValueChanged(t.oldSnap,t.snapshotNode)&&o.push(Ee.childMovedChange(t.childName,t.snapshotNode))})),this.generateEventsForType_(i,Ee.CHILD_REMOVED,t,n,e),this.generateEventsForType_(i,Ee.CHILD_ADDED,t,n,e),this.generateEventsForType_(i,Ee.CHILD_MOVED,o,n,e),this.generateEventsForType_(i,Ee.CHILD_CHANGED,t,n,e),this.generateEventsForType_(i,Ee.VALUE,t,n,e),i},t.prototype.generateEventsForType_=function(t,e,n,r,i){var o=this,s=n.filter((function(t){return t.type===e}));s.sort(this.compareChanges_.bind(this)),s.forEach((function(e){var n=o.materializeSingleChange_(e,i);r.forEach((function(r){r.respondsTo(e.type)&&t.push(r.createEvent(n,o.query_))}))}))},t.prototype.materializeSingleChange_=function(t,e){return"value"===t.type||"child_removed"===t.type||(t.prevName=e.getPredecessorChildName(t.childName,t.snapshotNode,this.index_)),t},t.prototype.compareChanges_=function(t,e){if(null==t.childName||null==e.childName)throw(0,o.g5)("Should only compare child_ events.");var n=new St(t.childName,t.snapshotNode),r=new St(e.childName,e.snapshotNode);return this.index_.compare(n,r)},t}(),Re=function(){function t(t,e){this.query_=t,this.eventRegistrations_=[];var n=this.query_.getQueryParams(),r=new we(n.getIndex()),i=n.getNodeFilter();this.processor_=new Ne(i);var o=e.getServerCache(),s=e.getEventCache(),a=r.updateFullNode(Vt.EMPTY_NODE,o.getNode(),null),h=i.updateFullNode(Vt.EMPTY_NODE,s.getNode(),null),u=new me(a,o.isFullyInitialized(),r.filtersNodes()),l=new me(h,s.isFullyInitialized(),i.filtersNodes());this.viewCache_=new Ce(l,u),this.eventGenerator_=new Pe(this.query_)}return t.prototype.getQuery=function(){return this.query_},t.prototype.getServerCache=function(){return this.viewCache_.getServerCache().getNode()},t.prototype.getCompleteServerCache=function(t){var e=this.viewCache_.getCompleteServerSnap();return e&&(this.query_.getQueryParams().loadsAllData()||!t.isEmpty()&&!e.getImmediateChild(t.getFront()).isEmpty())?e.getChild(t):null},t.prototype.isEmpty=function(){return 0===this.eventRegistrations_.length},t.prototype.addEventRegistration=function(t){this.eventRegistrations_.push(t)},t.prototype.removeEventRegistration=function(t,e){var n=[];if(e){(0,o.hu)(null==t,"A cancel should cancel all event registrations.");var r=this.query_.path;this.eventRegistrations_.forEach((function(t){e=e;var i=t.createCancelEvent(e,r);i&&n.push(i)}))}if(t){for(var i=[],s=0;s<this.eventRegistrations_.length;++s){var a=this.eventRegistrations_[s];if(a.matches(t)){if(t.hasAnyCallback()){i=i.concat(this.eventRegistrations_.slice(s+1));break}}else i.push(a)}this.eventRegistrations_=i}else this.eventRegistrations_=[];return n},t.prototype.applyOperation=function(t,e,n){t.type===ue.MERGE&&null!==t.source.queryId&&((0,o.hu)(this.viewCache_.getCompleteServerSnap(),"We should always have a full cache before handling merges"),(0,o.hu)(this.viewCache_.getCompleteEventSnap(),"Missing event cache, even though we have a server cache"));var r=this.viewCache_,i=this.processor_.applyOperation(r,t,e,n);return this.processor_.assertIndexed(i.viewCache),(0,o.hu)(i.viewCache.getServerCache().isFullyInitialized()||!r.getServerCache().isFullyInitialized(),"Once a server snap is complete, it should never go back"),this.viewCache_=i.viewCache,this.generateEventsForChanges_(i.changes,i.viewCache.getEventCache().getNode(),null)},t.prototype.getInitialEvents=function(t){var e=this.viewCache_.getEventCache(),n=[];return e.getNode().isLeafNode()||e.getNode().forEachChild(Ot,(function(t,e){n.push(Ee.childAddedChange(t,e))})),e.isFullyInitialized()&&n.push(Ee.valueChange(e.getNode())),this.generateEventsForChanges_(n,e.getNode(),t)},t.prototype.generateEventsForChanges_=function(t,e,n){var r=n?[n]:this.eventRegistrations_;return this.eventGenerator_.generateEventsForChanges(t,e,r)},t}(),De=function(){function t(){this.views=new Map}return Object.defineProperty(t,"__referenceConstructor",{get:function(){return(0,o.hu)(pe,"Reference.ts has not been loaded"),pe},set:function(t){(0,o.hu)(!pe,"__referenceConstructor has already been defined"),pe=t},enumerable:!1,configurable:!0}),t.prototype.isEmpty=function(){return 0===this.views.size},t.prototype.applyOperation=function(t,e,n){var r,s,a=t.source.queryId;if(null!==a){var h=this.views.get(a);return(0,o.hu)(null!=h,"SyncTree gave us an op for an invalid query."),h.applyOperation(t,e,n)}var u=[];try{for(var l=(0,i.XA)(this.views.values()),c=l.next();!c.done;c=l.next())h=c.value,u=u.concat(h.applyOperation(t,e,n))}catch(t){r={error:t}}finally{try{c&&!c.done&&(s=l.return)&&s.call(l)}finally{if(r)throw r.error}}return u},t.prototype.addEventRegistration=function(t,e,n,r,i){var o=t.queryIdentifier(),s=this.views.get(o);if(!s){var a=n.calcCompleteEventCache(i?r:null),h=!1;a?h=!0:r instanceof Vt?(a=n.calcCompleteEventChildren(r),h=!1):(a=Vt.EMPTY_NODE,h=!1);var u=new Ce(new me(a,h,!1),new me(r,i,!1));s=new Re(t,u),this.views.set(o,s)}return s.addEventRegistration(e),s.getInitialEvents(e)},t.prototype.removeEventRegistration=function(e,n,r){var o,s,a=e.queryIdentifier(),h=[],u=[],l=this.hasCompleteView();if("default"===a)try{for(var c=(0,i.XA)(this.views.entries()),p=c.next();!p.done;p=c.next()){var d=(0,i.CR)(p.value,2),f=d[0],y=d[1];u=u.concat(y.removeEventRegistration(n,r)),y.isEmpty()&&(this.views.delete(f),y.getQuery().getQueryParams().loadsAllData()||h.push(y.getQuery()))}}catch(t){o={error:t}}finally{try{p&&!p.done&&(s=c.return)&&s.call(c)}finally{if(o)throw o.error}}else(y=this.views.get(a))&&(u=u.concat(y.removeEventRegistration(n,r)),y.isEmpty()&&(this.views.delete(a),y.getQuery().getQueryParams().loadsAllData()||h.push(y.getQuery())));return l&&!this.hasCompleteView()&&h.push(new t.__referenceConstructor(e.repo,e.path)),{removed:h,events:u}},t.prototype.getQueryViews=function(){var t,e,n=[];try{for(var r=(0,i.XA)(this.views.values()),o=r.next();!o.done;o=r.next()){var s=o.value;s.getQuery().getQueryParams().loadsAllData()||n.push(s)}}catch(e){t={error:e}}finally{try{o&&!o.done&&(e=r.return)&&e.call(r)}finally{if(t)throw t.error}}return n},t.prototype.getCompleteServerCache=function(t){var e,n,r=null;try{for(var o=(0,i.XA)(this.views.values()),s=o.next();!s.done;s=o.next()){var a=s.value;r=r||a.getCompleteServerCache(t)}}catch(t){e={error:t}}finally{try{s&&!s.done&&(n=o.return)&&n.call(o)}finally{if(e)throw e.error}}return r},t.prototype.viewForQuery=function(t){if(t.getQueryParams().loadsAllData())return this.getCompleteView();var e=t.queryIdentifier();return this.views.get(e)},t.prototype.viewExistsForQuery=function(t){return null!=this.viewForQuery(t)},t.prototype.hasCompleteView=function(){return null!=this.getCompleteView()},t.prototype.getCompleteView=function(){var t,e;try{for(var n=(0,i.XA)(this.views.values()),r=n.next();!r.done;r=n.next()){var o=r.value;if(o.getQuery().getQueryParams().loadsAllData())return o}}catch(e){t={error:e}}finally{try{r&&!r.done&&(e=n.return)&&e.call(n)}finally{if(t)throw t.error}}return null},t}(),Oe=function(){function t(t){this.writeTree_=t}return t.prototype.addWrite=function(e,n){if(e.isEmpty())return new t(new ye(n));var r=this.writeTree_.findRootMostValueAndPath(e);if(null!=r){var i=r.path,o=r.value,s=X.relativePath(i,e);return o=o.updateChild(s,n),new t(this.writeTree_.set(i,o))}var a=new ye(n);return new t(this.writeTree_.setTree(e,a))},t.prototype.addWrites=function(t,e){var n=this;return k(e,(function(e,r){n=n.addWrite(t.child(e),r)})),n},t.prototype.removeWrite=function(e){return e.isEmpty()?t.Empty:new t(this.writeTree_.setTree(e,ye.Empty))},t.prototype.hasCompleteWrite=function(t){return null!=this.getCompleteNode(t)},t.prototype.getCompleteNode=function(t){var e=this.writeTree_.findRootMostValueAndPath(t);return null!=e?this.writeTree_.get(e.path).getChild(X.relativePath(e.path,t)):null},t.prototype.getCompleteChildren=function(){var t=[],e=this.writeTree_.value;return null!=e?e.isLeafNode()||e.forEachChild(Ot,(function(e,n){t.push(new St(e,n))})):this.writeTree_.children.inorderTraversal((function(e,n){null!=n.value&&t.push(new St(e,n.value))})),t},t.prototype.childCompoundWrite=function(e){if(e.isEmpty())return this;var n=this.getCompleteNode(e);return new t(null!=n?new ye(n):this.writeTree_.subtree(e))},t.prototype.isEmpty=function(){return this.writeTree_.isEmpty()},t.prototype.apply=function(t){return xe(X.Empty,this.writeTree_,t)},t.Empty=new t(new ye(null)),t}();function xe(t,e,n){if(null!=e.value)return n.updateChild(t,e.value);var r=null;return e.children.inorderTraversal((function(e,i){".priority"===e?((0,o.hu)(null!==i.value,"Priority writes must always be leaf nodes"),r=i.value):n=xe(t.child(e),i,n)})),n.getChild(t).isEmpty()||null===r||(n=n.updateChild(t.child(".priority"),r)),n}var Ae=function(){function t(){this.visibleWrites_=Oe.Empty,this.allWrites_=[],this.lastWriteId_=-1}return t.prototype.childWrites=function(t){return new ke(t,this)},t.prototype.addOverwrite=function(t,e,n,r){(0,o.hu)(n>this.lastWriteId_,"Stacking an older write on top of newer ones"),void 0===r&&(r=!0),this.allWrites_.push({path:t,snap:e,writeId:n,visible:r}),r&&(this.visibleWrites_=this.visibleWrites_.addWrite(t,e)),this.lastWriteId_=n},t.prototype.addMerge=function(t,e,n){(0,o.hu)(n>this.lastWriteId_,"Stacking an older merge on top of newer ones"),this.allWrites_.push({path:t,children:e,writeId:n,visible:!0}),this.visibleWrites_=this.visibleWrites_.addWrites(t,e),this.lastWriteId_=n},t.prototype.getWrite=function(t){for(var e=0;e<this.allWrites_.length;e++){var n=this.allWrites_[e];if(n.writeId===t)return n}return null},t.prototype.removeWrite=function(t){var e=this,n=this.allWrites_.findIndex((function(e){return e.writeId===t}));(0,o.hu)(n>=0,"removeWrite called with nonexistent writeId.");var r=this.allWrites_[n];this.allWrites_.splice(n,1);for(var i=r.visible,s=!1,a=this.allWrites_.length-1;i&&a>=0;){var h=this.allWrites_[a];h.visible&&(a>=n&&this.recordContainsPath_(h,r.path)?i=!1:r.path.contains(h.path)&&(s=!0)),a--}return!!i&&(s?(this.resetTree_(),!0):(r.snap?this.visibleWrites_=this.visibleWrites_.removeWrite(r.path):k(r.children,(function(t){e.visibleWrites_=e.visibleWrites_.removeWrite(r.path.child(t))})),!0))},t.prototype.getCompleteWriteData=function(t){return this.visibleWrites_.getCompleteNode(t)},t.prototype.calcCompleteEventCache=function(e,n,r,i){if(r||i){var o=this.visibleWrites_.childCompoundWrite(e);if(!i&&o.isEmpty())return n;if(i||null!=n||o.hasCompleteWrite(X.Empty)){var s=t.layerTree_(this.allWrites_,(function(t){return(t.visible||i)&&(!r||!~r.indexOf(t.writeId))&&(t.path.contains(e)||e.contains(t.path))}),e);return u=n||Vt.EMPTY_NODE,s.apply(u)}return null}var a=this.visibleWrites_.getCompleteNode(e);if(null!=a)return a;var h=this.visibleWrites_.childCompoundWrite(e);if(h.isEmpty())return n;if(null!=n||h.hasCompleteWrite(X.Empty)){var u=n||Vt.EMPTY_NODE;return h.apply(u)}return null},t.prototype.calcCompleteEventChildren=function(t,e){var n=Vt.EMPTY_NODE,r=this.visibleWrites_.getCompleteNode(t);if(r)return r.isLeafNode()||r.forEachChild(Ot,(function(t,e){n=n.updateImmediateChild(t,e)})),n;if(e){var i=this.visibleWrites_.childCompoundWrite(t);return e.forEachChild(Ot,(function(t,e){var r=i.childCompoundWrite(new X(t)).apply(e);n=n.updateImmediateChild(t,r)})),i.getCompleteChildren().forEach((function(t){n=n.updateImmediateChild(t.name,t.node)})),n}return this.visibleWrites_.childCompoundWrite(t).getCompleteChildren().forEach((function(t){n=n.updateImmediateChild(t.name,t.node)})),n},t.prototype.calcEventCacheAfterServerOverwrite=function(t,e,n,r){(0,o.hu)(n||r,"Either existingEventSnap or existingServerSnap must exist");var i=t.child(e);if(this.visibleWrites_.hasCompleteWrite(i))return null;var s=this.visibleWrites_.childCompoundWrite(i);return s.isEmpty()?r.getChild(e):s.apply(r.getChild(e))},t.prototype.calcCompleteChild=function(t,e,n){var r=t.child(e),i=this.visibleWrites_.getCompleteNode(r);return null!=i?i:n.isCompleteForChild(e)?this.visibleWrites_.childCompoundWrite(r).apply(n.getNode().getImmediateChild(e)):null},t.prototype.shadowingWrite=function(t){return this.visibleWrites_.getCompleteNode(t)},t.prototype.calcIndexedSlice=function(t,e,n,r,i,o){var s,a=this.visibleWrites_.childCompoundWrite(t),h=a.getCompleteNode(X.Empty);if(null!=h)s=h;else{if(null==e)return[];s=a.apply(e)}if((s=s.withIndex(o)).isEmpty()||s.isLeafNode())return[];for(var u=[],l=o.getCompare(),c=i?s.getReverseIteratorFrom(n,o):s.getIteratorFrom(n,o),p=c.getNext();p&&u.length<r;)0!==l(p,n)&&u.push(p),p=c.getNext();return u},t.prototype.recordContainsPath_=function(t,e){if(t.snap)return t.path.contains(e);for(var n in t.children)if(t.children.hasOwnProperty(n)&&t.path.child(n).contains(e))return!0;return!1},t.prototype.resetTree_=function(){this.visibleWrites_=t.layerTree_(this.allWrites_,t.DefaultFilter_,X.Empty),this.allWrites_.length>0?this.lastWriteId_=this.allWrites_[this.allWrites_.length-1].writeId:this.lastWriteId_=-1},t.DefaultFilter_=function(t){return t.visible},t.layerTree_=function(t,e,n){for(var r=Oe.Empty,i=0;i<t.length;++i){var s=t[i];if(e(s)){var a=s.path,h=void 0;if(s.snap)n.contains(a)?(h=X.relativePath(n,a),r=r.addWrite(h,s.snap)):a.contains(n)&&(h=X.relativePath(a,n),r=r.addWrite(X.Empty,s.snap.getChild(h)));else{if(!s.children)throw(0,o.g5)("WriteRecord should have .snap or .children");if(n.contains(a))h=X.relativePath(n,a),r=r.addWrites(h,s.children);else if(a.contains(n))if((h=X.relativePath(a,n)).isEmpty())r=r.addWrites(X.Empty,s.children);else{var u=(0,o.DV)(s.children,h.getFront());if(u){var l=u.getChild(h.popFront());r=r.addWrite(X.Empty,l)}}}}}return r},t}(),ke=function(){function t(t,e){this.treePath_=t,this.writeTree_=e}return t.prototype.calcCompleteEventCache=function(t,e,n){return this.writeTree_.calcCompleteEventCache(this.treePath_,t,e,n)},t.prototype.calcCompleteEventChildren=function(t){return this.writeTree_.calcCompleteEventChildren(this.treePath_,t)},t.prototype.calcEventCacheAfterServerOverwrite=function(t,e,n){return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_,t,e,n)},t.prototype.shadowingWrite=function(t){return this.writeTree_.shadowingWrite(this.treePath_.child(t))},t.prototype.calcIndexedSlice=function(t,e,n,r,i){return this.writeTree_.calcIndexedSlice(this.treePath_,t,e,n,r,i)},t.prototype.calcCompleteChild=function(t,e){return this.writeTree_.calcCompleteChild(this.treePath_,t,e)},t.prototype.child=function(e){return new t(this.treePath_.child(e),this.writeTree_)},t}(),Fe=function(){function t(t){this.listenProvider_=t,this.syncPointTree_=ye.Empty,this.pendingWriteTree_=new Ae,this.tagToQueryMap=new Map,this.queryToTagMap=new Map}return t.prototype.applyUserOverwrite=function(t,e,n,r){return this.pendingWriteTree_.addOverwrite(t,e,n,r),r?this.applyOperationToSyncPoints_(new ve(de.User,t,e)):[]},t.prototype.applyUserMerge=function(t,e,n){this.pendingWriteTree_.addMerge(t,e,n);var r=ye.fromObject(e);return this.applyOperationToSyncPoints_(new ge(de.User,t,r))},t.prototype.ackUserWrite=function(t,e){void 0===e&&(e=!1);var n=this.pendingWriteTree_.getWrite(t);if(this.pendingWriteTree_.removeWrite(t)){var r=ye.Empty;return null!=n.snap?r=r.set(X.Empty,!0):k(n.children,(function(t,e){r=r.set(new X(t),e)})),this.applyOperationToSyncPoints_(new fe(n.path,r,e))}return[]},t.prototype.applyServerOverwrite=function(t,e){return this.applyOperationToSyncPoints_(new ve(de.Server,t,e))},t.prototype.applyServerMerge=function(t,e){var n=ye.fromObject(e);return this.applyOperationToSyncPoints_(new ge(de.Server,t,n))},t.prototype.applyListenComplete=function(t){return this.applyOperationToSyncPoints_(new _e(de.Server,t))},t.prototype.applyTaggedQueryOverwrite=function(e,n,r){var i=this.queryKeyForTag_(r);if(null!=i){var o=t.parseQueryKey_(i),s=o.path,a=o.queryId,h=X.relativePath(s,e),u=new ve(de.forServerTaggedQuery(a),h,n);return this.applyTaggedOperation_(s,u)}return[]},t.prototype.applyTaggedQueryMerge=function(e,n,r){var i=this.queryKeyForTag_(r);if(i){var o=t.parseQueryKey_(i),s=o.path,a=o.queryId,h=X.relativePath(s,e),u=ye.fromObject(n),l=new ge(de.forServerTaggedQuery(a),h,u);return this.applyTaggedOperation_(s,l)}return[]},t.prototype.applyTaggedListenComplete=function(e,n){var r=this.queryKeyForTag_(n);if(r){var i=t.parseQueryKey_(r),o=i.path,s=i.queryId,a=X.relativePath(o,e),h=new _e(de.forServerTaggedQuery(s),a);return this.applyTaggedOperation_(o,h)}return[]},t.prototype.addEventRegistration=function(e,n){var r=e.path,i=null,s=!1;this.syncPointTree_.foreachOnPath(r,(function(t,e){var n=X.relativePath(t,r);i=i||e.getCompleteServerCache(n),s=s||e.hasCompleteView()}));var a,h=this.syncPointTree_.get(r);h?(s=s||h.hasCompleteView(),i=i||h.getCompleteServerCache(X.Empty)):(h=new De,this.syncPointTree_=this.syncPointTree_.set(r,h)),null!=i?a=!0:(a=!1,i=Vt.EMPTY_NODE,this.syncPointTree_.subtree(r).foreachChild((function(t,e){var n=e.getCompleteServerCache(X.Empty);n&&(i=i.updateImmediateChild(t,n))})));var u=h.viewExistsForQuery(e);if(!u&&!e.getQueryParams().loadsAllData()){var l=t.makeQueryKey_(e);(0,o.hu)(!this.queryToTagMap.has(l),"View does not exist, but we have a tag");var c=t.getNextQueryTag_();this.queryToTagMap.set(l,c),this.tagToQueryMap.set(c,l)}var p=this.pendingWriteTree_.childWrites(r),d=h.addEventRegistration(e,n,p,i,a);if(!u&&!s){var f=h.viewForQuery(e);d=d.concat(this.setupListener_(e,f))}return d},t.prototype.removeEventRegistration=function(e,n,r){var i=this,o=e.path,s=this.syncPointTree_.get(o),a=[];if(s&&("default"===e.queryIdentifier()||s.viewExistsForQuery(e))){var h=s.removeEventRegistration(e,n,r);s.isEmpty()&&(this.syncPointTree_=this.syncPointTree_.remove(o));var u=h.removed;a=h.events;var l=-1!==u.findIndex((function(t){return t.getQueryParams().loadsAllData()})),c=this.syncPointTree_.findOnPath(o,(function(t,e){return e.hasCompleteView()}));if(l&&!c){var p=this.syncPointTree_.subtree(o);if(!p.isEmpty())for(var d=this.collectDistinctViewsForSubTree_(p),f=0;f<d.length;++f){var y=d[f],_=y.getQuery(),v=this.createListenerForView_(y);this.listenProvider_.startListening(t.queryForListening_(_),this.tagForQuery_(_),v.hashFn,v.onComplete)}}!c&&u.length>0&&!r&&(l?this.listenProvider_.stopListening(t.queryForListening_(e),null):u.forEach((function(e){var n=i.queryToTagMap.get(t.makeQueryKey_(e));i.listenProvider_.stopListening(t.queryForListening_(e),n)}))),this.removeTags_(u)}return a},t.prototype.calcCompleteEventCache=function(t,e){var n=this.pendingWriteTree_,r=this.syncPointTree_.findOnPath(t,(function(e,n){var r=X.relativePath(e,t),i=n.getCompleteServerCache(r);if(i)return i}));return n.calcCompleteEventCache(t,r,e,!0)},t.prototype.collectDistinctViewsForSubTree_=function(t){return t.fold((function(t,e,n){if(e&&e.hasCompleteView())return[e.getCompleteView()];var r=[];return e&&(r=e.getQueryViews()),k(n,(function(t,e){r=r.concat(e)})),r}))},t.prototype.removeTags_=function(e){for(var n=0;n<e.length;++n){var r=e[n];if(!r.getQueryParams().loadsAllData()){var i=t.makeQueryKey_(r),o=this.queryToTagMap.get(i);this.queryToTagMap.delete(i),this.tagToQueryMap.delete(o)}}},t.queryForListening_=function(t){return t.getQueryParams().loadsAllData()&&!t.getQueryParams().isDefault()?t.getRef():t},t.prototype.setupListener_=function(e,n){var r=e.path,i=this.tagForQuery_(e),s=this.createListenerForView_(n),a=this.listenProvider_.startListening(t.queryForListening_(e),i,s.hashFn,s.onComplete),h=this.syncPointTree_.subtree(r);if(i)(0,o.hu)(!h.value.hasCompleteView(),"If we're adding a query, it shouldn't be shadowed");else for(var u=h.fold((function(t,e,n){if(!t.isEmpty()&&e&&e.hasCompleteView())return[e.getCompleteView().getQuery()];var r=[];return e&&(r=r.concat(e.getQueryViews().map((function(t){return t.getQuery()})))),k(n,(function(t,e){r=r.concat(e)})),r})),l=0;l<u.length;++l){var c=u[l];this.listenProvider_.stopListening(t.queryForListening_(c),this.tagForQuery_(c))}return a},t.prototype.createListenerForView_=function(t){var e=this,n=t.getQuery(),r=this.tagForQuery_(n);return{hashFn:function(){return(t.getServerCache()||Vt.EMPTY_NODE).hash()},onComplete:function(t){if("ok"===t)return r?e.applyTaggedListenComplete(n.path,r):e.applyListenComplete(n.path);var i=function(t,e){var n="Unknown Error";"too_big"===t?n="The data requested exceeds the maximum size that can be accessed with a single request.":"permission_denied"===t?n="Client doesn't have permission to access the desired data.":"unavailable"===t&&(n="The service is unavailable");var r=new Error(t+" at "+e.path.toString()+": "+n);return r.code=t.toUpperCase(),r}(t,n);return e.removeEventRegistration(n,null,i)}}},t.makeQueryKey_=function(t){return t.path.toString()+"$"+t.queryIdentifier()},t.parseQueryKey_=function(t){var e=t.indexOf("$");return(0,o.hu)(-1!==e&&e<t.length-1,"Bad queryKey."),{queryId:t.substr(e+1),path:new X(t.substr(0,e))}},t.prototype.queryKeyForTag_=function(t){return this.tagToQueryMap.get(t)},t.prototype.tagForQuery_=function(e){var n=t.makeQueryKey_(e);return this.queryToTagMap.get(n)},t.getNextQueryTag_=function(){return t.nextQueryTag_++},t.prototype.applyTaggedOperation_=function(t,e){var n=this.syncPointTree_.get(t);(0,o.hu)(n,"Missing sync point for query tag that we're tracking");var r=this.pendingWriteTree_.childWrites(t);return n.applyOperation(e,r,null)},t.prototype.applyOperationToSyncPoints_=function(t){return this.applyOperationHelper_(t,this.syncPointTree_,null,this.pendingWriteTree_.childWrites(X.Empty))},t.prototype.applyOperationHelper_=function(t,e,n,r){if(t.path.isEmpty())return this.applyOperationDescendantsHelper_(t,e,n,r);var i=e.get(X.Empty);null==n&&null!=i&&(n=i.getCompleteServerCache(X.Empty));var o=[],s=t.path.getFront(),a=t.operationForChild(s),h=e.children.get(s);if(h&&a){var u=n?n.getImmediateChild(s):null,l=r.child(s);o=o.concat(this.applyOperationHelper_(a,h,u,l))}return i&&(o=o.concat(i.applyOperation(t,r,n))),o},t.prototype.applyOperationDescendantsHelper_=function(t,e,n,r){var i=this,o=e.get(X.Empty);null==n&&null!=o&&(n=o.getCompleteServerCache(X.Empty));var s=[];return e.children.inorderTraversal((function(e,o){var a=n?n.getImmediateChild(e):null,h=r.child(e),u=t.operationForChild(e);u&&(s=s.concat(i.applyOperationDescendantsHelper_(u,o,a,h)))})),o&&(s=s.concat(o.applyOperation(t,r,n))),s},t.nextQueryTag_=1,t}(),Le=function(){function t(){this.rootNode_=Vt.EMPTY_NODE}return t.prototype.getNode=function(t){return this.rootNode_.getChild(t)},t.prototype.updateSnapshot=function(t,e){this.rootNode_=this.rootNode_.updateChild(t,e)},t}(),Me=function(){function t(){this.counters_={}}return t.prototype.incrementCounter=function(t,e){void 0===e&&(e=1),(0,o.r3)(this.counters_,t)||(this.counters_[t]=0),this.counters_[t]+=e},t.prototype.get=function(){return(0,o.p$)(this.counters_)},t}(),We=function(){function t(){}return t.getCollection=function(t){var e=t.toString();return this.collections_[e]||(this.collections_[e]=new Me),this.collections_[e]},t.getOrCreateReporter=function(t,e){var n=t.toString();return this.reporters_[n]||(this.reporters_[n]=e()),this.reporters_[n]},t.collections_={},t.reporters_={},t}(),Ue=function(){function t(t){this.collection_=t,this.last_=null}return t.prototype.get=function(){var t=this.collection_.get(),e=(0,i.pi)({},t);return this.last_&&k(this.last_,(function(t,n){e[t]=e[t]-n})),this.last_=t,e},t}(),Qe=function(){function t(t,e){this.server_=e,this.statsToReport_={},this.statsListener_=new Ue(t);var n=1e4+2e4*Math.random();G(this.reportStats_.bind(this),Math.floor(n))}return t.prototype.includeStat=function(t){this.statsToReport_[t]=!0},t.prototype.reportStats_=function(){var t=this,e=this.statsListener_.get(),n={},r=!1;k(e,(function(e,i){i>0&&(0,o.r3)(t.statsToReport_,e)&&(n[e]=i,r=!0)})),r&&this.server_.reportStats(n),G(this.reportStats_.bind(this),Math.floor(2*Math.random()*3e5))},t}(),qe=function(){function t(){this.eventLists_=[],this.recursionDepth_=0}return t.prototype.queueEvents=function(t){for(var e=null,n=0;n<t.length;n++){var r=t[n],i=r.getPath();null===e||i.equals(e.getPath())||(this.eventLists_.push(e),e=null),null===e&&(e=new je(i)),e.add(r)}e&&this.eventLists_.push(e)},t.prototype.raiseEventsAtPath=function(t,e){this.queueEvents(e),this.raiseQueuedEventsMatchingPredicate_((function(e){return e.equals(t)}))},t.prototype.raiseEventsForChangedPath=function(t,e){this.queueEvents(e),this.raiseQueuedEventsMatchingPredicate_((function(e){return e.contains(t)||t.contains(e)}))},t.prototype.raiseQueuedEventsMatchingPredicate_=function(t){this.recursionDepth_++;for(var e=!0,n=0;n<this.eventLists_.length;n++){var r=this.eventLists_[n];r&&(t(r.getPath())?(this.eventLists_[n].raise(),this.eventLists_[n]=null):e=!1)}e&&(this.eventLists_=[]),this.recursionDepth_--},t}(),je=function(){function t(t){this.path_=t,this.events_=[]}return t.prototype.add=function(t){this.events_.push(t)},t.prototype.raise=function(){for(var t=0;t<this.events_.length;t++){var e=this.events_[t];if(null!==e){this.events_[t]=null;var n=e.getEventRunner();g&&E("event: "+e.toString()),K(n)}}},t.prototype.getPath=function(){return this.path_},t}(),Ve=function(){function t(t){this.allowedEvents_=t,this.listeners_={},(0,o.hu)(Array.isArray(t)&&t.length>0,"Requires a non-empty array")}return t.prototype.trigger=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];if(Array.isArray(this.listeners_[t]))for(var r=(0,i.fl)(this.listeners_[t]),o=0;o<r.length;o++)r[o].callback.apply(r[o].context,e)},t.prototype.on=function(t,e,n){this.validateEventType_(t),this.listeners_[t]=this.listeners_[t]||[],this.listeners_[t].push({callback:e,context:n});var r=this.getInitialEvent(t);r&&e.apply(n,r)},t.prototype.off=function(t,e,n){this.validateEventType_(t);for(var r=this.listeners_[t]||[],i=0;i<r.length;i++)if(r[i].callback===e&&(!n||n===r[i].context))return void r.splice(i,1)},t.prototype.validateEventType_=function(t){(0,o.hu)(this.allowedEvents_.find((function(e){return e===t})),"Unknown event: "+t)},t}(),He=function(t){function e(){var e,n,r=t.call(this,["visible"])||this;return"undefined"!=typeof document&&void 0!==document.addEventListener&&(void 0!==document.hidden?(n="visibilitychange",e="hidden"):void 0!==document.mozHidden?(n="mozvisibilitychange",e="mozHidden"):void 0!==document.msHidden?(n="msvisibilitychange",e="msHidden"):void 0!==document.webkitHidden&&(n="webkitvisibilitychange",e="webkitHidden")),r.visible_=!0,n&&document.addEventListener(n,(function(){var t=!document[e];t!==r.visible_&&(r.visible_=t,r.trigger("visible",t))}),!1),r}return(0,i.ZT)(e,t),e.getInstance=function(){return new e},e.prototype.getInitialEvent=function(t){return(0,o.hu)("visible"===t,"Unknown event type: "+t),[this.visible_]},e}(Ve),Be=function(t){function e(){var e=t.call(this,["online"])||this;return e.online_=!0,"undefined"==typeof window||void 0===window.addEventListener||(0,o.uI)()||(window.addEventListener("online",(function(){e.online_||(e.online_=!0,e.trigger("online",!0))}),!1),window.addEventListener("offline",(function(){e.online_&&(e.online_=!1,e.trigger("online",!1))}),!1)),e}return(0,i.ZT)(e,t),e.getInstance=function(){return new e},e.prototype.getInitialEvent=function(t){return(0,o.hu)("online"===t,"Unknown event type: "+t),[this.online_]},e.prototype.currentlyOnline=function(){return this.online_},e}(Ve),ze=function(){function t(t){this.onMessage_=t,this.pendingResponses=[],this.currentResponseNum=0,this.closeAfterResponse=-1,this.onClose=null}return t.prototype.closeAfter=function(t,e){this.closeAfterResponse=t,this.onClose=e,this.closeAfterResponse<this.currentResponseNum&&(this.onClose(),this.onClose=null)},t.prototype.handleResponse=function(t,e){var n=this;this.pendingResponses[t]=e;for(var r=function(){var t=i.pendingResponses[i.currentResponseNum];delete i.pendingResponses[i.currentResponseNum];for(var e=function(e){t[e]&&K((function(){n.onMessage_(t[e])}))},r=0;r<t.length;++r)e(r);if(i.currentResponseNum===i.closeAfterResponse)return i.onClose&&(i.onClose(),i.onClose=null),"break";i.currentResponseNum++},i=this;this.pendingResponses[this.currentResponseNum]&&"break"!==r(););},t}(),Ye="start",Ke="close",Ge=function(){function t(t,e,n,r,i){this.connId=t,this.repoInfo=e,this.applicationId=n,this.transportSessionId=r,this.lastSessionId=i,this.bytesSent=0,this.bytesReceived=0,this.everConnected_=!1,this.log_=w(t),this.stats_=We.getCollection(e),this.urlFn=function(t){return e.connectionURL(tt,t)}}return t.prototype.open=function(t,e){var n=this;this.curSegmentNum=0,this.onDisconnect_=e,this.myPacketOrderer=new ze(t),this.isClosed_=!1,this.connectTimeoutTimer_=setTimeout((function(){n.log_("Timed out trying to connect."),n.onClosed_(),n.connectTimeoutTimer_=null}),Math.floor(3e4)),function(t){if((0,o.Yr)()||"complete"===document.readyState)t();else{var e=!1,n=function(){document.body?e||(e=!0,t()):setTimeout(n,Math.floor(10))};document.addEventListener?(document.addEventListener("DOMContentLoaded",n,!1),window.addEventListener("load",n,!1)):document.attachEvent&&(document.attachEvent("onreadystatechange",(function(){"complete"===document.readyState&&n()})),window.attachEvent("onload",n))}}((function(){if(!n.isClosed_){n.scriptTagHolder=new Xe((function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=(0,i.CR)(t,5),o=r[0],s=r[1],a=r[2];if(r[3],r[4],n.incrementIncomingBytes_(t),n.scriptTagHolder)if(n.connectTimeoutTimer_&&(clearTimeout(n.connectTimeoutTimer_),n.connectTimeoutTimer_=null),n.everConnected_=!0,o===Ye)n.id=s,n.password=a;else{if(o!==Ke)throw new Error("Unrecognized command received: "+o);s?(n.scriptTagHolder.sendNewPolls=!1,n.myPacketOrderer.closeAfter(s,(function(){n.onClosed_()}))):n.onClosed_()}}),(function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=(0,i.CR)(t,2),o=r[0],s=r[1];n.incrementIncomingBytes_(t),n.myPacketOrderer.handleResponse(o,s)}),(function(){n.onClosed_()}),n.urlFn);var t={start:"t"};t.ser=Math.floor(1e8*Math.random()),n.scriptTagHolder.uniqueCallbackIdentifier&&(t.cb=n.scriptTagHolder.uniqueCallbackIdentifier),t.v="5",n.transportSessionId&&(t.s=n.transportSessionId),n.lastSessionId&&(t.ls=n.lastSessionId),n.applicationId&&(t.p=n.applicationId),"undefined"!=typeof location&&location.href&&-1!==location.href.indexOf(Z)&&(t.r="f");var e=n.urlFn(t);n.log_("Connecting via long-poll to "+e),n.scriptTagHolder.addTag(e,(function(){}))}}))},t.prototype.start=function(){this.scriptTagHolder.startLongPoll(this.id,this.password),this.addDisconnectPingFrame(this.id,this.password)},t.forceAllow=function(){t.forceAllow_=!0},t.forceDisallow=function(){t.forceDisallow_=!0},t.isAvailable=function(){return!((0,o.Yr)()||!t.forceAllow_&&(t.forceDisallow_||"undefined"==typeof document||null==document.createElement||"object"==typeof window&&window.chrome&&window.chrome.extension&&!/^chrome/.test(window.location.href)||"object"==typeof Windows&&"object"==typeof Windows.UI))},t.prototype.markConnectionHealthy=function(){},t.prototype.shutdown_=function(){this.isClosed_=!0,this.scriptTagHolder&&(this.scriptTagHolder.close(),this.scriptTagHolder=null),this.myDisconnFrame&&(document.body.removeChild(this.myDisconnFrame),this.myDisconnFrame=null),this.connectTimeoutTimer_&&(clearTimeout(this.connectTimeoutTimer_),this.connectTimeoutTimer_=null)},t.prototype.onClosed_=function(){this.isClosed_||(this.log_("Longpoll is closing itself"),this.shutdown_(),this.onDisconnect_&&(this.onDisconnect_(this.everConnected_),this.onDisconnect_=null))},t.prototype.close=function(){this.isClosed_||(this.log_("Longpoll is being closed."),this.shutdown_())},t.prototype.send=function(t){var e=(0,o.Pz)(t);this.bytesSent+=e.length,this.stats_.incrementCounter("bytes_sent",e.length);for(var n=(0,o.h$)(e),r=A(n,1840),i=0;i<r.length;i++)this.scriptTagHolder.enqueueSegment(this.curSegmentNum,r.length,r[i]),this.curSegmentNum++},t.prototype.addDisconnectPingFrame=function(t,e){if(!(0,o.Yr)()){this.myDisconnFrame=document.createElement("iframe");var n={dframe:"t"};n.id=t,n.pw=e,this.myDisconnFrame.src=this.urlFn(n),this.myDisconnFrame.style.display="none",document.body.appendChild(this.myDisconnFrame)}},t.prototype.incrementIncomingBytes_=function(t){var e=(0,o.Pz)(t).length;this.bytesReceived+=e,this.stats_.incrementCounter("bytes_received",e)},t}(),Xe=function(){function t(e,n,r,i){if(this.onDisconnect=r,this.urlFn=i,this.outstandingRequests=new Set,this.pendingSegs=[],this.currentSerial=Math.floor(1e8*Math.random()),this.sendNewPolls=!0,(0,o.Yr)())this.commandCB=e,this.onMessageCB=n;else{this.uniqueCallbackIdentifier=y(),window["pLPCommand"+this.uniqueCallbackIdentifier]=e,window["pRTLPCB"+this.uniqueCallbackIdentifier]=n,this.myIFrame=t.createIFrame_();var s="";this.myIFrame.src&&"javascript:"===this.myIFrame.src.substr(0,"javascript:".length)&&(s='<script>document.domain="'+document.domain+'";<\/script>');var a="<html><body>"+s+"</body></html>";try{this.myIFrame.doc.open(),this.myIFrame.doc.write(a),this.myIFrame.doc.close()}catch(t){E("frame writing exception"),t.stack&&E(t.stack),E(t)}}}return t.createIFrame_=function(){var t=document.createElement("iframe");if(t.style.display="none",!document.body)throw"Document body has not initialized. Wait to initialize Firebase until after the document is ready.";document.body.appendChild(t);try{t.contentWindow.document||E("No IE domain setting required")}catch(n){var e=document.domain;t.src="javascript:void((function(){document.open();document.domain='"+e+"';document.close();})())"}return t.contentDocument?t.doc=t.contentDocument:t.contentWindow?t.doc=t.contentWindow.document:t.document&&(t.doc=t.document),t},t.prototype.close=function(){var t=this;this.alive=!1,this.myIFrame&&(this.myIFrame.doc.body.innerHTML="",setTimeout((function(){null!==t.myIFrame&&(document.body.removeChild(t.myIFrame),t.myIFrame=null)}),Math.floor(0)));var e=this.onDisconnect;e&&(this.onDisconnect=null,e())},t.prototype.startLongPoll=function(t,e){for(this.myID=t,this.myPW=e,this.alive=!0;this.newRequest_(););},t.prototype.newRequest_=function(){if(this.alive&&this.sendNewPolls&&this.outstandingRequests.size<(this.pendingSegs.length>0?2:1)){this.currentSerial++;var t={};t.id=this.myID,t.pw=this.myPW,t.ser=this.currentSerial;for(var e=this.urlFn(t),n="",r=0;this.pendingSegs.length>0&&this.pendingSegs[0].d.length+30+n.length<=1870;){var i=this.pendingSegs.shift();n=n+"&seg"+r+"="+i.seg+"&ts"+r+"="+i.ts+"&d"+r+"="+i.d,r++}return e+=n,this.addLongPollTag_(e,this.currentSerial),!0}return!1},t.prototype.enqueueSegment=function(t,e,n){this.pendingSegs.push({seg:t,ts:e,d:n}),this.alive&&this.newRequest_()},t.prototype.addLongPollTag_=function(t,e){var n=this;this.outstandingRequests.add(e);var r=function(){n.outstandingRequests.delete(e),n.newRequest_()},i=setTimeout(r,Math.floor(25e3));this.addTag(t,(function(){clearTimeout(i),r()}))},t.prototype.addTag=function(t,e){var n=this;(0,o.Yr)()?this.doNodeLongPoll(t,e):setTimeout((function(){try{if(!n.sendNewPolls)return;var r=n.myIFrame.doc.createElement("script");r.type="text/javascript",r.async=!0,r.src=t,r.onload=r.onreadystatechange=function(){var t=r.readyState;t&&"loaded"!==t&&"complete"!==t||(r.onload=r.onreadystatechange=null,r.parentNode&&r.parentNode.removeChild(r),e())},r.onerror=function(){E("Long-poll script failed to load: "+t),n.sendNewPolls=!1,n.close()},n.myIFrame.doc.body.appendChild(r)}catch(t){}}),Math.floor(1))},t}(),$e="";function Ze(t){$e=t}var Je=null;"undefined"!=typeof MozWebSocket?Je=MozWebSocket:"undefined"!=typeof WebSocket&&(Je=WebSocket);var tn=function(){function t(e,n,r,i,o){this.connId=e,this.applicationId=r,this.keepaliveTimer=null,this.frames=null,this.totalFrames=0,this.bytesSent=0,this.bytesReceived=0,this.log_=w(this.connId),this.stats_=We.getCollection(n),this.connURL=t.connectionURL_(n,i,o),this.nodeAdmin=n.nodeAdmin}return t.connectionURL_=function(t,e,n){var r={v:"5"};return!(0,o.Yr)()&&"undefined"!=typeof location&&location.href&&-1!==location.href.indexOf(Z)&&(r.r="f"),e&&(r.s=e),n&&(r.ls=n),t.connectionURL(J,r)},t.prototype.open=function(t,e){var n=this;this.onDisconnect=e,this.onMessage=t,this.log_("Websocket connecting to "+this.connURL),this.everConnected_=!1,p.set("previous_websocket_failure",!0);try{if((0,o.Yr)()){var r=this.nodeAdmin?"AdminNode":"Node",i={headers:{"User-Agent":"Firebase/5/"+$e+"/"+process.platform+"/"+r,"X-Firebase-GMPID":this.applicationId||""}},s=process.env,a=0===this.connURL.indexOf("wss://")?s.HTTPS_PROXY||s.https_proxy:s.HTTP_PROXY||s.http_proxy;a&&(i.proxy={origin:a}),this.mySock=new Je(this.connURL,[],i)}else i={headers:{"X-Firebase-GMPID":this.applicationId||""}},this.mySock=new Je(this.connURL,[],i)}catch(t){this.log_("Error instantiating WebSocket.");var h=t.message||t.data;return h&&this.log_(h),void this.onClosed_()}this.mySock.onopen=function(){n.log_("Websocket connected."),n.everConnected_=!0},this.mySock.onclose=function(){n.log_("Websocket connection was disconnected."),n.mySock=null,n.onClosed_()},this.mySock.onmessage=function(t){n.handleIncomingFrame(t)},this.mySock.onerror=function(t){n.log_("WebSocket error.  Closing connection.");var e=t.message||t.data;e&&n.log_(e),n.onClosed_()}},t.prototype.start=function(){},t.forceDisallow=function(){t.forceDisallow_=!0},t.isAvailable=function(){var e=!1;if("undefined"!=typeof navigator&&navigator.userAgent){var n=navigator.userAgent.match(/Android ([0-9]{0,}\.[0-9]{0,})/);n&&n.length>1&&parseFloat(n[1])<4.4&&(e=!0)}return!e&&null!==Je&&!t.forceDisallow_},t.previouslyFailed=function(){return p.isInMemoryStorage||!0===p.get("previous_websocket_failure")},t.prototype.markConnectionHealthy=function(){p.remove("previous_websocket_failure")},t.prototype.appendFrame_=function(t){if(this.frames.push(t),this.frames.length===this.totalFrames){var e=this.frames.join("");this.frames=null;var n=(0,o.cI)(e);this.onMessage(n)}},t.prototype.handleNewFrameCount_=function(t){this.totalFrames=t,this.frames=[]},t.prototype.extractFrameCount_=function(t){if((0,o.hu)(null===this.frames,"We already have a frame buffer"),t.length<=6){var e=Number(t);if(!isNaN(e))return this.handleNewFrameCount_(e),null}return this.handleNewFrameCount_(1),t},t.prototype.handleIncomingFrame=function(t){if(null!==this.mySock){var e=t.data;if(this.bytesReceived+=e.length,this.stats_.incrementCounter("bytes_received",e.length),this.resetKeepAlive(),null!==this.frames)this.appendFrame_(e);else{var n=this.extractFrameCount_(e);null!==n&&this.appendFrame_(n)}}},t.prototype.send=function(t){this.resetKeepAlive();var e=(0,o.Pz)(t);this.bytesSent+=e.length,this.stats_.incrementCounter("bytes_sent",e.length);var n=A(e,16384);n.length>1&&this.sendString_(String(n.length));for(var r=0;r<n.length;r++)this.sendString_(n[r])},t.prototype.shutdown_=function(){this.isClosed_=!0,this.keepaliveTimer&&(clearInterval(this.keepaliveTimer),this.keepaliveTimer=null),this.mySock&&(this.mySock.close(),this.mySock=null)},t.prototype.onClosed_=function(){this.isClosed_||(this.log_("WebSocket is closing itself"),this.shutdown_(),this.onDisconnect&&(this.onDisconnect(this.everConnected_),this.onDisconnect=null))},t.prototype.close=function(){this.isClosed_||(this.log_("WebSocket is being closed"),this.shutdown_())},t.prototype.resetKeepAlive=function(){var t=this;clearInterval(this.keepaliveTimer),this.keepaliveTimer=setInterval((function(){t.mySock&&t.sendString_("0"),t.resetKeepAlive()}),Math.floor(45e3))},t.prototype.sendString_=function(t){try{this.mySock.send(t)}catch(t){this.log_("Exception thrown from WebSocket.send():",t.message||t.data,"Closing connection."),setTimeout(this.onClosed_.bind(this),0)}},t.responsesRequiredToBeHealthy=2,t.healthyTimeout=3e4,t}(),en=function(){function t(t){this.initTransports_(t)}return Object.defineProperty(t,"ALL_TRANSPORTS",{get:function(){return[Ge,tn]},enumerable:!1,configurable:!0}),t.prototype.initTransports_=function(e){var n,r,o=tn&&tn.isAvailable(),s=o&&!tn.previouslyFailed();if(e.webSocketOnly&&(o||T("wss:// URL used, but browser isn't known to support websockets.  Trying anyway."),s=!0),s)this.transports_=[tn];else{var a=this.transports_=[];try{for(var h=(0,i.XA)(t.ALL_TRANSPORTS),u=h.next();!u.done;u=h.next()){var l=u.value;l&&l.isAvailable()&&a.push(l)}}catch(t){n={error:t}}finally{try{u&&!u.done&&(r=h.return)&&r.call(h)}finally{if(n)throw n.error}}}},t.prototype.initialTransport=function(){if(this.transports_.length>0)return this.transports_[0];throw new Error("No transports available")},t.prototype.upgradeTransport=function(){return this.transports_.length>1?this.transports_[1]:null},t}(),nn=function(){function t(t,e,n,r,i,o,s,a){this.id=t,this.repoInfo_=e,this.applicationId_=n,this.onMessage_=r,this.onReady_=i,this.onDisconnect_=o,this.onKill_=s,this.lastSessionId=a,this.connectionCount=0,this.pendingDataMessages=[],this.state_=0,this.log_=w("c:"+this.id+":"),this.transportManager_=new en(e),this.log_("Connection created"),this.start_()}return t.prototype.start_=function(){var t=this,e=this.transportManager_.initialTransport();this.conn_=new e(this.nextTransportId_(),this.repoInfo_,this.applicationId_,void 0,this.lastSessionId),this.primaryResponsesRequired_=e.responsesRequiredToBeHealthy||0;var n=this.connReceiver_(this.conn_),r=this.disconnReceiver_(this.conn_);this.tx_=this.conn_,this.rx_=this.conn_,this.secondaryConn_=null,this.isHealthy_=!1,setTimeout((function(){t.conn_&&t.conn_.open(n,r)}),Math.floor(0));var i=e.healthyTimeout||0;i>0&&(this.healthyTimeout_=G((function(){t.healthyTimeout_=null,t.isHealthy_||(t.conn_&&t.conn_.bytesReceived>102400?(t.log_("Connection exceeded healthy timeout but has received "+t.conn_.bytesReceived+" bytes.  Marking connection healthy."),t.isHealthy_=!0,t.conn_.markConnectionHealthy()):t.conn_&&t.conn_.bytesSent>10240?t.log_("Connection exceeded healthy timeout but has sent "+t.conn_.bytesSent+" bytes.  Leaving connection alive."):(t.log_("Closing unhealthy connection after timeout."),t.close()))}),Math.floor(i)))},t.prototype.nextTransportId_=function(){return"c:"+this.id+":"+this.connectionCount++},t.prototype.disconnReceiver_=function(t){var e=this;return function(n){t===e.conn_?e.onConnectionLost_(n):t===e.secondaryConn_?(e.log_("Secondary connection lost."),e.onSecondaryConnectionLost_()):e.log_("closing an old connection")}},t.prototype.connReceiver_=function(t){var e=this;return function(n){2!==e.state_&&(t===e.rx_?e.onPrimaryMessageReceived_(n):t===e.secondaryConn_?e.onSecondaryMessageReceived_(n):e.log_("message on old connection"))}},t.prototype.sendRequest=function(t){var e={t:"d",d:t};this.sendData_(e)},t.prototype.tryCleanupConnection=function(){this.tx_===this.secondaryConn_&&this.rx_===this.secondaryConn_&&(this.log_("cleaning up and promoting a connection: "+this.secondaryConn_.connId),this.conn_=this.secondaryConn_,this.secondaryConn_=null)},t.prototype.onSecondaryControl_=function(t){if("t"in t){var e=t.t;"a"===e?this.upgradeIfSecondaryHealthy_():"r"===e?(this.log_("Got a reset on secondary, closing it"),this.secondaryConn_.close(),this.tx_!==this.secondaryConn_&&this.rx_!==this.secondaryConn_||this.close()):"o"===e&&(this.log_("got pong on secondary."),this.secondaryResponsesRequired_--,this.upgradeIfSecondaryHealthy_())}},t.prototype.onSecondaryMessageReceived_=function(t){var e=O("t",t),n=O("d",t);if("c"===e)this.onSecondaryControl_(n);else{if("d"!==e)throw new Error("Unknown protocol layer: "+e);this.pendingDataMessages.push(n)}},t.prototype.upgradeIfSecondaryHealthy_=function(){this.secondaryResponsesRequired_<=0?(this.log_("Secondary connection is healthy."),this.isHealthy_=!0,this.secondaryConn_.markConnectionHealthy(),this.proceedWithUpgrade_()):(this.log_("sending ping on secondary."),this.secondaryConn_.send({t:"c",d:{t:"p",d:{}}}))},t.prototype.proceedWithUpgrade_=function(){this.secondaryConn_.start(),this.log_("sending client ack on secondary"),this.secondaryConn_.send({t:"c",d:{t:"a",d:{}}}),this.log_("Ending transmission on primary"),this.conn_.send({t:"c",d:{t:"n",d:{}}}),this.tx_=this.secondaryConn_,this.tryCleanupConnection()},t.prototype.onPrimaryMessageReceived_=function(t){var e=O("t",t),n=O("d",t);"c"===e?this.onControl_(n):"d"===e&&this.onDataMessage_(n)},t.prototype.onDataMessage_=function(t){this.onPrimaryResponse_(),this.onMessage_(t)},t.prototype.onPrimaryResponse_=function(){this.isHealthy_||(this.primaryResponsesRequired_--,this.primaryResponsesRequired_<=0&&(this.log_("Primary connection is healthy."),this.isHealthy_=!0,this.conn_.markConnectionHealthy()))},t.prototype.onControl_=function(t){var e=O("t",t);if("d"in t){var n=t.d;if("h"===e)this.onHandshake_(n);else if("n"===e){this.log_("recvd end transmission on primary"),this.rx_=this.secondaryConn_;for(var r=0;r<this.pendingDataMessages.length;++r)this.onDataMessage_(this.pendingDataMessages[r]);this.pendingDataMessages=[],this.tryCleanupConnection()}else"s"===e?this.onConnectionShutdown_(n):"r"===e?this.onReset_(n):"e"===e?b("Server Error: "+n):"o"===e?(this.log_("got pong on primary."),this.onPrimaryResponse_(),this.sendPingOnPrimaryIfNecessary_()):b("Unknown control packet command: "+e)}},t.prototype.onHandshake_=function(t){var e=t.ts,n=t.v,r=t.h;this.sessionId=t.s,this.repoInfo_.updateHost(r),0===this.state_&&(this.conn_.start(),this.onConnectionEstablished_(this.conn_,e),"5"!==n&&T("Protocol version mismatch detected"),this.tryStartUpgrade_())},t.prototype.tryStartUpgrade_=function(){var t=this.transportManager_.upgradeTransport();t&&this.startUpgrade_(t)},t.prototype.startUpgrade_=function(t){var e=this;this.secondaryConn_=new t(this.nextTransportId_(),this.repoInfo_,this.applicationId_,this.sessionId),this.secondaryResponsesRequired_=t.responsesRequiredToBeHealthy||0;var n=this.connReceiver_(this.secondaryConn_),r=this.disconnReceiver_(this.secondaryConn_);this.secondaryConn_.open(n,r),G((function(){e.secondaryConn_&&(e.log_("Timed out trying to upgrade."),e.secondaryConn_.close())}),Math.floor(6e4))},t.prototype.onReset_=function(t){this.log_("Reset packet received.  New host: "+t),this.repoInfo_.updateHost(t),1===this.state_?this.close():(this.closeConnections_(),this.start_())},t.prototype.onConnectionEstablished_=function(t,e){var n=this;this.log_("Realtime connection established."),this.conn_=t,this.state_=1,this.onReady_&&(this.onReady_(e,this.sessionId),this.onReady_=null),0===this.primaryResponsesRequired_?(this.log_("Primary connection is healthy."),this.isHealthy_=!0):G((function(){n.sendPingOnPrimaryIfNecessary_()}),Math.floor(5e3))},t.prototype.sendPingOnPrimaryIfNecessary_=function(){this.isHealthy_||1!==this.state_||(this.log_("sending ping on primary."),this.sendData_({t:"c",d:{t:"p",d:{}}}))},t.prototype.onSecondaryConnectionLost_=function(){var t=this.secondaryConn_;this.secondaryConn_=null,this.tx_!==t&&this.rx_!==t||this.close()},t.prototype.onConnectionLost_=function(t){this.conn_=null,t||0!==this.state_?1===this.state_&&this.log_("Realtime connection lost."):(this.log_("Realtime connection failed."),this.repoInfo_.isCacheableHost()&&(p.remove("host:"+this.repoInfo_.host),this.repoInfo_.internalHost=this.repoInfo_.host)),this.close()},t.prototype.onConnectionShutdown_=function(t){this.log_("Connection shutdown command received. Shutting down..."),this.onKill_&&(this.onKill_(t),this.onKill_=null),this.onDisconnect_=null,this.close()},t.prototype.sendData_=function(t){if(1!==this.state_)throw"Connection is not connected";this.tx_.send(t)},t.prototype.close=function(){2!==this.state_&&(this.log_("Closing realtime connection."),this.state_=2,this.closeConnections_(),this.onDisconnect_&&(this.onDisconnect_(),this.onDisconnect_=null))},t.prototype.closeConnections_=function(){this.log_("Shutting down all connections"),this.conn_&&(this.conn_.close(),this.conn_=null),this.secondaryConn_&&(this.secondaryConn_.close(),this.secondaryConn_=null),this.healthyTimeout_&&(clearTimeout(this.healthyTimeout_),this.healthyTimeout_=null)},t}(),rn=function(){function t(){}return t.prototype.put=function(t,e,n,r){},t.prototype.merge=function(t,e,n,r){},t.prototype.refreshAuthToken=function(t){},t.prototype.onDisconnectPut=function(t,e,n){},t.prototype.onDisconnectMerge=function(t,e,n){},t.prototype.onDisconnectCancel=function(t,e){},t.prototype.reportStats=function(t){},t}(),on=1e3,sn=function(t){function e(n,r,i,s,a,h,u){var l=t.call(this)||this;if(l.repoInfo_=n,l.applicationId_=r,l.onDataUpdate_=i,l.onConnectStatus_=s,l.onServerInfoUpdate_=a,l.authTokenProvider_=h,l.authOverride_=u,l.id=e.nextPersistentConnectionId_++,l.log_=w("p:"+l.id+":"),l.interruptReasons_={},l.listens=new Map,l.outstandingPuts_=[],l.outstandingPutCount_=0,l.onDisconnectRequestQueue_=[],l.connected_=!1,l.reconnectDelay_=on,l.maxReconnectDelay_=3e5,l.securityDebugCallback_=null,l.lastSessionId=null,l.establishConnectionTimer_=null,l.visible_=!1,l.requestCBHash_={},l.requestNumber_=0,l.realtime_=null,l.authToken_=null,l.forceTokenRefresh_=!1,l.invalidAuthTokenCount_=0,l.firstConnection_=!0,l.lastConnectionAttemptTime_=null,l.lastConnectionEstablishedTime_=null,u&&!(0,o.Yr)())throw new Error("Auth override specified in options, but not supported on non Node.js platforms");return l.scheduleConnect_(0),He.getInstance().on("visible",l.onVisible_,l),-1===n.host.indexOf("fblocal")&&Be.getInstance().on("online",l.onOnline_,l),l}return(0,i.ZT)(e,t),e.prototype.sendRequest=function(t,e,n){var r=++this.requestNumber_,i={r,a:t,b:e};this.log_((0,o.Pz)(i)),(0,o.hu)(this.connected_,"sendRequest call when we're not connected not allowed."),this.realtime_.sendRequest(i),n&&(this.requestCBHash_[r]=n)},e.prototype.listen=function(t,e,n,r){var i=t.queryIdentifier(),s=t.path.toString();this.log_("Listen called for "+s+" "+i),this.listens.has(s)||this.listens.set(s,new Map),(0,o.hu)(t.getQueryParams().isDefault()||!t.getQueryParams().loadsAllData(),"listen() called for non-default but complete query"),(0,o.hu)(!this.listens.get(s).has(i),"listen() called twice for same path/queryId.");var a={onComplete:r,hashFn:e,query:t,tag:n};this.listens.get(s).set(i,a),this.connected_&&this.sendListen_(a)},e.prototype.sendListen_=function(t){var n=this,r=t.query,i=r.path.toString(),o=r.queryIdentifier();this.log_("Listen on "+i+" for "+o);var s={p:i};t.tag&&(s.q=r.queryObject(),s.t=t.tag),s.h=t.hashFn(),this.sendRequest("q",s,(function(s){var a=s.d,h=s.s;e.warnOnListenWarnings_(a,r),(n.listens.get(i)&&n.listens.get(i).get(o))===t&&(n.log_("listen response",s),"ok"!==h&&n.removeListen_(i,o),t.onComplete&&t.onComplete(h,a))}))},e.warnOnListenWarnings_=function(t,e){if(t&&"object"==typeof t&&(0,o.r3)(t,"w")){var n=(0,o.DV)(t,"w");if(Array.isArray(n)&&~n.indexOf("no_index")){var r='".indexOn": "'+e.getQueryParams().getIndex().toString()+'"',i=e.path.toString();T("Using an unspecified index. Your data will be downloaded and filtered on the client. Consider adding "+r+" at "+i+" to your security rules for better performance.")}}},e.prototype.refreshAuthToken=function(t){this.authToken_=t,this.log_("Auth token refreshed"),this.authToken_?this.tryAuth():this.connected_&&this.sendRequest("unauth",{},(function(){})),this.reduceReconnectDelayIfAdminCredential_(t)},e.prototype.reduceReconnectDelayIfAdminCredential_=function(t){(t&&40===t.length||(0,o.GJ)(t))&&(this.log_("Admin auth credential detected.  Reducing max reconnect time."),this.maxReconnectDelay_=3e4)},e.prototype.tryAuth=function(){var t=this;if(this.connected_&&this.authToken_){var e=this.authToken_,n=(0,o.w9)(e)?"auth":"gauth",r={cred:e};null===this.authOverride_?r.noauth=!0:"object"==typeof this.authOverride_&&(r.authvar=this.authOverride_),this.sendRequest(n,r,(function(n){var r=n.s,i=n.d||"error";t.authToken_===e&&("ok"===r?t.invalidAuthTokenCount_=0:t.onAuthRevoked_(r,i))}))}},e.prototype.unlisten=function(t,e){var n=t.path.toString(),r=t.queryIdentifier();this.log_("Unlisten called for "+n+" "+r),(0,o.hu)(t.getQueryParams().isDefault()||!t.getQueryParams().loadsAllData(),"unlisten() called for non-default but complete query"),this.removeListen_(n,r)&&this.connected_&&this.sendUnlisten_(n,r,t.queryObject(),e)},e.prototype.sendUnlisten_=function(t,e,n,r){this.log_("Unlisten on "+t+" for "+e);var i={p:t};r&&(i.q=n,i.t=r),this.sendRequest("n",i)},e.prototype.onDisconnectPut=function(t,e,n){this.connected_?this.sendOnDisconnect_("o",t,e,n):this.onDisconnectRequestQueue_.push({pathString:t,action:"o",data:e,onComplete:n})},e.prototype.onDisconnectMerge=function(t,e,n){this.connected_?this.sendOnDisconnect_("om",t,e,n):this.onDisconnectRequestQueue_.push({pathString:t,action:"om",data:e,onComplete:n})},e.prototype.onDisconnectCancel=function(t,e){this.connected_?this.sendOnDisconnect_("oc",t,null,e):this.onDisconnectRequestQueue_.push({pathString:t,action:"oc",data:null,onComplete:e})},e.prototype.sendOnDisconnect_=function(t,e,n,r){var i={p:e,d:n};this.log_("onDisconnect "+t,i),this.sendRequest(t,i,(function(t){r&&setTimeout((function(){r(t.s,t.d)}),Math.floor(0))}))},e.prototype.put=function(t,e,n,r){this.putInternal("p",t,e,n,r)},e.prototype.merge=function(t,e,n,r){this.putInternal("m",t,e,n,r)},e.prototype.putInternal=function(t,e,n,r,i){var o={p:e,d:n};void 0!==i&&(o.h=i),this.outstandingPuts_.push({action:t,request:o,onComplete:r}),this.outstandingPutCount_++;var s=this.outstandingPuts_.length-1;this.connected_?this.sendPut_(s):this.log_("Buffering put: "+e)},e.prototype.sendPut_=function(t){var e=this,n=this.outstandingPuts_[t].action,r=this.outstandingPuts_[t].request,i=this.outstandingPuts_[t].onComplete;this.outstandingPuts_[t].queued=this.connected_,this.sendRequest(n,r,(function(r){e.log_(n+" response",r),delete e.outstandingPuts_[t],e.outstandingPutCount_--,0===e.outstandingPutCount_&&(e.outstandingPuts_=[]),i&&i(r.s,r.d)}))},e.prototype.reportStats=function(t){var e=this;if(this.connected_){var n={c:t};this.log_("reportStats",n),this.sendRequest("s",n,(function(t){if("ok"!==t.s){var n=t.d;e.log_("reportStats","Error sending stats: "+n)}}))}},e.prototype.onDataMessage_=function(t){if("r"in t){this.log_("from server: "+(0,o.Pz)(t));var e=t.r,n=this.requestCBHash_[e];n&&(delete this.requestCBHash_[e],n(t.b))}else{if("error"in t)throw"A server-side error has occurred: "+t.error;"a"in t&&this.onDataPush_(t.a,t.b)}},e.prototype.onDataPush_=function(t,e){this.log_("handleServerMessage",t,e),"d"===t?this.onDataUpdate_(e.p,e.d,!1,e.t):"m"===t?this.onDataUpdate_(e.p,e.d,!0,e.t):"c"===t?this.onListenRevoked_(e.p,e.q):"ac"===t?this.onAuthRevoked_(e.s,e.d):"sd"===t?this.onSecurityDebugPacket_(e):b("Unrecognized action received from server: "+(0,o.Pz)(t)+"\nAre you using the latest client?")},e.prototype.onReady_=function(t,e){this.log_("connection ready"),this.connected_=!0,this.lastConnectionEstablishedTime_=(new Date).getTime(),this.handleTimestamp_(t),this.lastSessionId=e,this.firstConnection_&&this.sendConnectStats_(),this.restoreState_(),this.firstConnection_=!1,this.onConnectStatus_(!0)},e.prototype.scheduleConnect_=function(t){var e=this;(0,o.hu)(!this.realtime_,"Scheduling a connect when we're already connected/ing?"),this.establishConnectionTimer_&&clearTimeout(this.establishConnectionTimer_),this.establishConnectionTimer_=setTimeout((function(){e.establishConnectionTimer_=null,e.establishConnection_()}),Math.floor(t))},e.prototype.onVisible_=function(t){t&&!this.visible_&&this.reconnectDelay_===this.maxReconnectDelay_&&(this.log_("Window became visible.  Reducing delay."),this.reconnectDelay_=on,this.realtime_||this.scheduleConnect_(0)),this.visible_=t},e.prototype.onOnline_=function(t){t?(this.log_("Browser went online."),this.reconnectDelay_=on,this.realtime_||this.scheduleConnect_(0)):(this.log_("Browser went offline.  Killing connection."),this.realtime_&&this.realtime_.close())},e.prototype.onRealtimeDisconnect_=function(){if(this.log_("data client disconnected"),this.connected_=!1,this.realtime_=null,this.cancelSentTransactions_(),this.requestCBHash_={},this.shouldReconnect_()){this.visible_?this.lastConnectionEstablishedTime_&&((new Date).getTime()-this.lastConnectionEstablishedTime_>3e4&&(this.reconnectDelay_=on),this.lastConnectionEstablishedTime_=null):(this.log_("Window isn't visible.  Delaying reconnect."),this.reconnectDelay_=this.maxReconnectDelay_,this.lastConnectionAttemptTime_=(new Date).getTime());var t=(new Date).getTime()-this.lastConnectionAttemptTime_,e=Math.max(0,this.reconnectDelay_-t);e=Math.random()*e,this.log_("Trying to reconnect in "+e+"ms"),this.scheduleConnect_(e),this.reconnectDelay_=Math.min(this.maxReconnectDelay_,1.3*this.reconnectDelay_)}this.onConnectStatus_(!1)},e.prototype.establishConnection_=function(){var t=this;if(this.shouldReconnect_()){this.log_("Making a connection attempt"),this.lastConnectionAttemptTime_=(new Date).getTime(),this.lastConnectionEstablishedTime_=null;var n=this.onDataMessage_.bind(this),r=this.onReady_.bind(this),i=this.onRealtimeDisconnect_.bind(this),s=this.id+":"+e.nextConnectionId_++,a=this,h=this.lastSessionId,u=!1,l=null,c=function(){l?l.close():(u=!0,i())};this.realtime_={close:c,sendRequest:function(t){(0,o.hu)(l,"sendRequest call when we're not connected not allowed."),l.sendRequest(t)}};var p=this.forceTokenRefresh_;this.forceTokenRefresh_=!1,this.authTokenProvider_.getToken(p).then((function(t){u?E("getToken() completed but was canceled"):(E("getToken() completed. Creating connection."),a.authToken_=t&&t.accessToken,l=new nn(s,a.repoInfo_,a.applicationId_,n,r,i,(function(t){T(t+" ("+a.repoInfo_.toString()+")"),a.interrupt("server_kill")}),h))})).then(null,(function(e){a.log_("Failed to get token: "+e),u||(t.repoInfo_.nodeAdmin&&T(e),c())}))}},e.prototype.interrupt=function(t){E("Interrupting connection for reason: "+t),this.interruptReasons_[t]=!0,this.realtime_?this.realtime_.close():(this.establishConnectionTimer_&&(clearTimeout(this.establishConnectionTimer_),this.establishConnectionTimer_=null),this.connected_&&this.onRealtimeDisconnect_())},e.prototype.resume=function(t){E("Resuming connection for reason: "+t),delete this.interruptReasons_[t],(0,o.xb)(this.interruptReasons_)&&(this.reconnectDelay_=on,this.realtime_||this.scheduleConnect_(0))},e.prototype.handleTimestamp_=function(t){var e=t-(new Date).getTime();this.onServerInfoUpdate_({serverTimeOffset:e})},e.prototype.cancelSentTransactions_=function(){for(var t=0;t<this.outstandingPuts_.length;t++){var e=this.outstandingPuts_[t];e&&"h"in e.request&&e.queued&&(e.onComplete&&e.onComplete("disconnect"),delete this.outstandingPuts_[t],this.outstandingPutCount_--)}0===this.outstandingPutCount_&&(this.outstandingPuts_=[])},e.prototype.onListenRevoked_=function(t,e){var n;n=e?e.map((function(t){return x(t)})).join("$"):"default";var r=this.removeListen_(t,n);r&&r.onComplete&&r.onComplete("permission_denied")},e.prototype.removeListen_=function(t,e){var n,r=new X(t).toString();if(this.listens.has(r)){var i=this.listens.get(r);n=i.get(e),i.delete(e),0===i.size&&this.listens.delete(r)}else n=void 0;return n},e.prototype.onAuthRevoked_=function(t,e){E("Auth token revoked: "+t+"/"+e),this.authToken_=null,this.forceTokenRefresh_=!0,this.realtime_.close(),"invalid_token"!==t&&"permission_denied"!==t||(this.invalidAuthTokenCount_++,this.invalidAuthTokenCount_>=3&&(this.reconnectDelay_=3e4,this.authTokenProvider_.notifyForInvalidToken()))},e.prototype.onSecurityDebugPacket_=function(t){this.securityDebugCallback_?this.securityDebugCallback_(t):"msg"in t&&console.log("FIREBASE: "+t.msg.replace("\n","\nFIREBASE: "))},e.prototype.restoreState_=function(){var t,e,n,r;this.tryAuth();try{for(var o=(0,i.XA)(this.listens.values()),s=o.next();!s.done;s=o.next()){var a=s.value;try{for(var h=(n=void 0,(0,i.XA)(a.values())),u=h.next();!u.done;u=h.next()){var l=u.value;this.sendListen_(l)}}catch(t){n={error:t}}finally{try{u&&!u.done&&(r=h.return)&&r.call(h)}finally{if(n)throw n.error}}}}catch(e){t={error:e}}finally{try{s&&!s.done&&(e=o.return)&&e.call(o)}finally{if(t)throw t.error}}for(var c=0;c<this.outstandingPuts_.length;c++)this.outstandingPuts_[c]&&this.sendPut_(c);for(;this.onDisconnectRequestQueue_.length;){var p=this.onDisconnectRequestQueue_.shift();this.sendOnDisconnect_(p.action,p.pathString,p.data,p.onComplete)}},e.prototype.sendConnectStats_=function(){var t={},e="js";(0,o.Yr)()&&(e=this.repoInfo_.nodeAdmin?"admin_node":"node"),t["sdk."+e+"."+$e.replace(/\./g,"-")]=1,(0,o.uI)()?t["framework.cordova"]=1:(0,o.b$)()&&(t["framework.reactnative"]=1),this.reportStats(t)},e.prototype.shouldReconnect_=function(){var t=Be.getInstance().currentlyOnline();return(0,o.xb)(this.interruptReasons_)&&t},e.nextPersistentConnectionId_=0,e.nextConnectionId_=0,e}(rn),an=function(t){function e(e,n,r){var i=t.call(this)||this;return i.repoInfo_=e,i.onDataUpdate_=n,i.authTokenProvider_=r,i.log_=w("p:rest:"),i.listens_={},i}return(0,i.ZT)(e,t),e.prototype.reportStats=function(t){throw new Error("Method not implemented.")},e.getListenId_=function(t,e){return void 0!==e?"tag$"+e:((0,o.hu)(t.getQueryParams().isDefault(),"should have a tag if it's not a default query."),t.path.toString())},e.prototype.listen=function(t,n,r,i){var s=this,a=t.path.toString();this.log_("Listen called for "+a+" "+t.queryIdentifier());var h=e.getListenId_(t,r),u={};this.listens_[h]=u;var l=t.getQueryParams().toRestQueryStringParameters();this.restRequest_(a+".json",l,(function(t,e){var n=e;404===t&&(n=null,t=null),null===t&&s.onDataUpdate_(a,n,!1,r),(0,o.DV)(s.listens_,h)===u&&i(t?401===t?"permission_denied":"rest_error:"+t:"ok",null)}))},e.prototype.unlisten=function(t,n){var r=e.getListenId_(t,n);delete this.listens_[r]},e.prototype.refreshAuthToken=function(t){},e.prototype.restRequest_=function(t,e,n){var r=this;void 0===e&&(e={}),e.format="export",this.authTokenProvider_.getToken(!1).then((function(i){var s=i&&i.accessToken;s&&(e.auth=s);var a=(r.repoInfo_.secure?"https://":"http://")+r.repoInfo_.host+t+"?ns="+r.repoInfo_.namespace+(0,o.xO)(e);r.log_("Sending REST request for "+a);var h=new XMLHttpRequest;h.onreadystatechange=function(){if(n&&4===h.readyState){r.log_("REST Response for "+a+" received. status:",h.status,"response:",h.responseText);var t=null;if(h.status>=200&&h.status<300){try{t=(0,o.cI)(h.responseText)}catch(t){T("Failed to parse JSON response for "+a+": "+h.responseText)}n(null,t)}else 401!==h.status&&404!==h.status&&T("Got unsuccessful REST response for "+a+" Status: "+h.status),n(h.status);n=null}},h.open("GET",a,!0),h.send()}))},e}(rn),hn="repo_interrupt",un=function(){function t(t,e,n,r){this.repoInfo_=t,this.forceRestClient_=e,this.app=n,this.authTokenProvider_=r,this.dataUpdateCount=0,this.statsListener_=null,this.eventQueue_=new qe,this.nextWriteId_=1,this.interceptServerDataCallback_=null,this.onDisconnect_=new le,this.persistentConnection_=null,this.key=this.repoInfo_.toURLString()}return t.prototype.start=function(){var t=this;if(this.stats_=We.getCollection(this.repoInfo_),this.forceRestClient_||("object"==typeof window&&window.navigator&&window.navigator.userAgent||"").search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i)>=0)this.server_=new an(this.repoInfo_,this.onDataUpdate_.bind(this),this.authTokenProvider_),setTimeout(this.onConnectStatus_.bind(this,!0),0);else{var e=this.app.options.databaseAuthVariableOverride;if(null!=e){if("object"!=typeof e)throw new Error("Only objects are supported for option databaseAuthVariableOverride");try{(0,o.Pz)(e)}catch(t){throw new Error("Invalid authOverride provided: "+t)}}this.persistentConnection_=new sn(this.repoInfo_,this.app.options.appId,this.onDataUpdate_.bind(this),this.onConnectStatus_.bind(this),this.onServerInfoUpdate_.bind(this),this.authTokenProvider_,e),this.server_=this.persistentConnection_}this.authTokenProvider_.addTokenChangeListener((function(e){t.server_.refreshAuthToken(e)})),this.statsReporter_=We.getOrCreateReporter(this.repoInfo_,(function(){return new Qe(t.stats_,t.server_)})),this.transactionsInit_(),this.infoData_=new Le,this.infoSyncTree_=new Fe({startListening:function(e,n,r,i){var o=[],s=t.infoData_.getNode(e.path);return s.isEmpty()||(o=t.infoSyncTree_.applyServerOverwrite(e.path,s),setTimeout((function(){i("ok")}),0)),o},stopListening:function(){}}),this.updateInfo_("connected",!1),this.serverSyncTree_=new Fe({startListening:function(e,n,r,i){return t.server_.listen(e,r,n,(function(n,r){var o=i(n,r);t.eventQueue_.raiseEventsForChangedPath(e.path,o)})),[]},stopListening:function(e,n){t.server_.unlisten(e,n)}})},t.prototype.toString=function(){return(this.repoInfo_.secure?"https://":"http://")+this.repoInfo_.host},t.prototype.name=function(){return this.repoInfo_.namespace},t.prototype.serverTime=function(){var t=this.infoData_.getNode(new X(".info/serverTimeOffset")).val()||0;return(new Date).getTime()+t},t.prototype.generateServerValues=function(){return(t=(t={timestamp:this.serverTime()})||{}).timestamp=t.timestamp||(new Date).getTime(),t;var t},t.prototype.onDataUpdate_=function(t,e,n,r){this.dataUpdateCount++;var i=new X(t);e=this.interceptServerDataCallback_?this.interceptServerDataCallback_(t,e):e;var s=[];if(r)if(n){var a=(0,o.UI)(e,(function(t){return Bt(t)}));s=this.serverSyncTree_.applyTaggedQueryMerge(i,a,r)}else{var h=Bt(e);s=this.serverSyncTree_.applyTaggedQueryOverwrite(i,h,r)}else if(n){var u=(0,o.UI)(e,(function(t){return Bt(t)}));s=this.serverSyncTree_.applyServerMerge(i,u)}else{var l=Bt(e);s=this.serverSyncTree_.applyServerOverwrite(i,l)}var c=i;s.length>0&&(c=this.rerunTransactions_(i)),this.eventQueue_.raiseEventsForChangedPath(c,s)},t.prototype.interceptServerData_=function(t){this.interceptServerDataCallback_=t},t.prototype.onConnectStatus_=function(t){this.updateInfo_("connected",t),!1===t&&this.runOnDisconnectEvents_()},t.prototype.onServerInfoUpdate_=function(t){var e=this;k(t,(function(t,n){e.updateInfo_(t,n)}))},t.prototype.updateInfo_=function(t,e){var n=new X("/.info/"+t),r=Bt(e);this.infoData_.updateSnapshot(n,r);var i=this.infoSyncTree_.applyServerOverwrite(n,r);this.eventQueue_.raiseEventsForChangedPath(n,i)},t.prototype.getNextWriteId_=function(){return this.nextWriteId_++},t.prototype.setWithPriority=function(t,e,n,r){var i=this;this.log_("set",{path:t.toString(),value:e,priority:n});var o=this.generateServerValues(),s=Bt(e,n),a=this.serverSyncTree_.calcCompleteEventCache(t),h=ae(s,a,o),u=this.getNextWriteId_(),l=this.serverSyncTree_.applyUserOverwrite(t,h,u,!0);this.eventQueue_.queueEvents(l),this.server_.put(t.toString(),s.val(!0),(function(e,n){var o="ok"===e;o||T("set at "+t+" failed: "+e);var s=i.serverSyncTree_.ackUserWrite(u,!o);i.eventQueue_.raiseEventsForChangedPath(t,s),i.callOnCompleteCallback(r,e,n)}));var c=this.abortTransactions_(t);this.rerunTransactions_(c),this.eventQueue_.raiseEventsForChangedPath(c,[])},t.prototype.update=function(t,e,n){var r=this;this.log_("update",{path:t.toString(),value:e});var i=!0,o=this.generateServerValues(),s={};if(k(e,(function(e,n){i=!1,s[e]=se(t.child(e),Bt(n),r.serverSyncTree_,o)})),i)E("update() called with empty data.  Don't do anything."),this.callOnCompleteCallback(n,"ok");else{var a=this.getNextWriteId_(),h=this.serverSyncTree_.applyUserMerge(t,s,a);this.eventQueue_.queueEvents(h),this.server_.merge(t.toString(),e,(function(e,i){var o="ok"===e;o||T("update at "+t+" failed: "+e);var s=r.serverSyncTree_.ackUserWrite(a,!o),h=s.length>0?r.rerunTransactions_(t):t;r.eventQueue_.raiseEventsForChangedPath(h,s),r.callOnCompleteCallback(n,e,i)})),k(e,(function(e){var n=r.abortTransactions_(t.child(e));r.rerunTransactions_(n)})),this.eventQueue_.raiseEventsForChangedPath(t,[])}},t.prototype.runOnDisconnectEvents_=function(){var t=this;this.log_("onDisconnectEvents");var e=this.generateServerValues(),n=new le;this.onDisconnect_.forEachTree(X.Empty,(function(r,i){var o=se(r,i,t.serverSyncTree_,e);n.remember(r,o)}));var r=[];n.forEachTree(X.Empty,(function(e,n){r=r.concat(t.serverSyncTree_.applyServerOverwrite(e,n));var i=t.abortTransactions_(e);t.rerunTransactions_(i)})),this.onDisconnect_=new le,this.eventQueue_.raiseEventsForChangedPath(X.Empty,r)},t.prototype.onDisconnectCancel=function(t,e){var n=this;this.server_.onDisconnectCancel(t.toString(),(function(r,i){"ok"===r&&n.onDisconnect_.forget(t),n.callOnCompleteCallback(e,r,i)}))},t.prototype.onDisconnectSet=function(t,e,n){var r=this,i=Bt(e);this.server_.onDisconnectPut(t.toString(),i.val(!0),(function(e,o){"ok"===e&&r.onDisconnect_.remember(t,i),r.callOnCompleteCallback(n,e,o)}))},t.prototype.onDisconnectSetWithPriority=function(t,e,n,r){var i=this,o=Bt(e,n);this.server_.onDisconnectPut(t.toString(),o.val(!0),(function(e,n){"ok"===e&&i.onDisconnect_.remember(t,o),i.callOnCompleteCallback(r,e,n)}))},t.prototype.onDisconnectUpdate=function(t,e,n){var r=this;if((0,o.xb)(e))return E("onDisconnect().update() called with empty data.  Don't do anything."),void this.callOnCompleteCallback(n,"ok");this.server_.onDisconnectMerge(t.toString(),e,(function(i,o){"ok"===i&&k(e,(function(e,n){var i=Bt(n);r.onDisconnect_.remember(t.child(e),i)})),r.callOnCompleteCallback(n,i,o)}))},t.prototype.addEventCallbackForQuery=function(t,e){var n;n=".info"===t.path.getFront()?this.infoSyncTree_.addEventRegistration(t,e):this.serverSyncTree_.addEventRegistration(t,e),this.eventQueue_.raiseEventsAtPath(t.path,n)},t.prototype.removeEventCallbackForQuery=function(t,e){var n;n=".info"===t.path.getFront()?this.infoSyncTree_.removeEventRegistration(t,e):this.serverSyncTree_.removeEventRegistration(t,e),this.eventQueue_.raiseEventsAtPath(t.path,n)},t.prototype.interrupt=function(){this.persistentConnection_&&this.persistentConnection_.interrupt(hn)},t.prototype.resume=function(){this.persistentConnection_&&this.persistentConnection_.resume(hn)},t.prototype.stats=function(t){if(void 0===t&&(t=!1),"undefined"!=typeof console){var e;t?(this.statsListener_||(this.statsListener_=new Ue(this.stats_)),e=this.statsListener_.get()):e=this.stats_.get();var n=Object.keys(e).reduce((function(t,e){return Math.max(e.length,t)}),0);k(e,(function(t,e){for(var r=t,i=t.length;i<n+2;i++)r+=" ";console.log(r+e)}))}},t.prototype.statsIncrementCounter=function(t){this.stats_.incrementCounter(t),this.statsReporter_.includeStat(t)},t.prototype.log_=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n="";this.persistentConnection_&&(n=this.persistentConnection_.id+":"),E.apply(void 0,(0,i.fl)([n],t))},t.prototype.callOnCompleteCallback=function(t,e,n){t&&K((function(){if("ok"===e)t(null);else{var r=(e||"error").toUpperCase(),i=r;n&&(i+=": "+n);var o=new Error(i);o.code=r,t(o)}}))},Object.defineProperty(t.prototype,"database",{get:function(){return this.__database||(this.__database=new En(this))},enumerable:!1,configurable:!0}),t}(),ln=function(){function t(e){this.indexedFilter_=new we(e.getIndex()),this.index_=e.getIndex(),this.startPost_=t.getStartPost_(e),this.endPost_=t.getEndPost_(e)}return t.prototype.getStartPost=function(){return this.startPost_},t.prototype.getEndPost=function(){return this.endPost_},t.prototype.matches=function(t){return this.index_.compare(this.getStartPost(),t)<=0&&this.index_.compare(t,this.getEndPost())<=0},t.prototype.updateChild=function(t,e,n,r,i,o){return this.matches(new St(e,n))||(n=Vt.EMPTY_NODE),this.indexedFilter_.updateChild(t,e,n,r,i,o)},t.prototype.updateFullNode=function(t,e,n){e.isLeafNode()&&(e=Vt.EMPTY_NODE);var r=e.withIndex(this.index_);r=r.updatePriority(Vt.EMPTY_NODE);var i=this;return e.forEachChild(Ot,(function(t,e){i.matches(new St(t,e))||(r=r.updateImmediateChild(t,Vt.EMPTY_NODE))})),this.indexedFilter_.updateFullNode(t,r,n)},t.prototype.updatePriority=function(t,e){return t},t.prototype.filtersNodes=function(){return!0},t.prototype.getIndexedFilter=function(){return this.indexedFilter_},t.prototype.getIndex=function(){return this.index_},t.getStartPost_=function(t){if(t.hasStart()){var e=t.getIndexStartName();return t.getIndex().makePost(t.getIndexStartValue(),e)}return t.getIndex().minPost()},t.getEndPost_=function(t){if(t.hasEnd()){var e=t.getIndexEndName();return t.getIndex().makePost(t.getIndexEndValue(),e)}return t.getIndex().maxPost()},t}(),cn=function(){function t(t){this.rangedFilter_=new ln(t),this.index_=t.getIndex(),this.limit_=t.getLimit(),this.reverse_=!t.isViewFromLeft()}return t.prototype.updateChild=function(t,e,n,r,i,o){return this.rangedFilter_.matches(new St(e,n))||(n=Vt.EMPTY_NODE),t.getImmediateChild(e).equals(n)?t:t.numChildren()<this.limit_?this.rangedFilter_.getIndexedFilter().updateChild(t,e,n,r,i,o):this.fullLimitUpdateChild_(t,e,n,i,o)},t.prototype.updateFullNode=function(t,e,n){var r;if(e.isLeafNode()||e.isEmpty())r=Vt.EMPTY_NODE.withIndex(this.index_);else if(2*this.limit_<e.numChildren()&&e.isIndexed(this.index_)){r=Vt.EMPTY_NODE.withIndex(this.index_);var i=void 0;i=this.reverse_?e.getReverseIteratorFrom(this.rangedFilter_.getEndPost(),this.index_):e.getIteratorFrom(this.rangedFilter_.getStartPost(),this.index_);for(var o=0;i.hasNext()&&o<this.limit_;){var s=i.getNext();if(!(this.reverse_?this.index_.compare(this.rangedFilter_.getStartPost(),s)<=0:this.index_.compare(s,this.rangedFilter_.getEndPost())<=0))break;r=r.updateImmediateChild(s.name,s.node),o++}}else{r=(r=e.withIndex(this.index_)).updatePriority(Vt.EMPTY_NODE);var a=void 0,h=void 0,u=void 0;if(i=void 0,this.reverse_){i=r.getReverseIterator(this.index_),a=this.rangedFilter_.getEndPost(),h=this.rangedFilter_.getStartPost();var l=this.index_.getCompare();u=function(t,e){return l(e,t)}}else i=r.getIterator(this.index_),a=this.rangedFilter_.getStartPost(),h=this.rangedFilter_.getEndPost(),u=this.index_.getCompare();o=0;for(var c=!1;i.hasNext();)s=i.getNext(),!c&&u(a,s)<=0&&(c=!0),c&&o<this.limit_&&u(s,h)<=0?o++:r=r.updateImmediateChild(s.name,Vt.EMPTY_NODE)}return this.rangedFilter_.getIndexedFilter().updateFullNode(t,r,n)},t.prototype.updatePriority=function(t,e){return t},t.prototype.filtersNodes=function(){return!0},t.prototype.getIndexedFilter=function(){return this.rangedFilter_.getIndexedFilter()},t.prototype.getIndex=function(){return this.index_},t.prototype.fullLimitUpdateChild_=function(t,e,n,r,i){var s;if(this.reverse_){var a=this.index_.getCompare();s=function(t,e){return a(e,t)}}else s=this.index_.getCompare();var h=t;(0,o.hu)(h.numChildren()===this.limit_,"");var u=new St(e,n),l=this.reverse_?h.getFirstChild(this.index_):h.getLastChild(this.index_),c=this.rangedFilter_.matches(u);if(h.hasChild(e)){for(var p=h.getImmediateChild(e),d=r.getChildAfterChild(this.index_,l,this.reverse_);null!=d&&(d.name===e||h.hasChild(d.name));)d=r.getChildAfterChild(this.index_,d,this.reverse_);var f=null==d?1:s(d,u);if(c&&!n.isEmpty()&&f>=0)return null!=i&&i.trackChildChange(Ee.childChangedChange(e,n,p)),h.updateImmediateChild(e,n);null!=i&&i.trackChildChange(Ee.childRemovedChange(e,p));var y=h.updateImmediateChild(e,Vt.EMPTY_NODE);return null!=d&&this.rangedFilter_.matches(d)?(null!=i&&i.trackChildChange(Ee.childAddedChange(d.name,d.node)),y.updateImmediateChild(d.name,d.node)):y}return n.isEmpty()?t:c&&s(l,u)>=0?(null!=i&&(i.trackChildChange(Ee.childRemovedChange(l.name,l.node)),i.trackChildChange(Ee.childAddedChange(e,n))),h.updateImmediateChild(e,n).updateImmediateChild(l.name,Vt.EMPTY_NODE)):t},t}(),pn=function(){function t(){this.limitSet_=!1,this.startSet_=!1,this.startNameSet_=!1,this.endSet_=!1,this.endNameSet_=!1,this.limit_=0,this.viewFrom_="",this.indexStartValue_=null,this.indexStartName_="",this.indexEndValue_=null,this.indexEndName_="",this.index_=Ot}return t.prototype.hasStart=function(){return this.startSet_},t.prototype.isViewFromLeft=function(){return""===this.viewFrom_?this.startSet_:this.viewFrom_===t.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT},t.prototype.getIndexStartValue=function(){return(0,o.hu)(this.startSet_,"Only valid if start has been set"),this.indexStartValue_},t.prototype.getIndexStartName=function(){return(0,o.hu)(this.startSet_,"Only valid if start has been set"),this.startNameSet_?this.indexStartName_:N},t.prototype.hasEnd=function(){return this.endSet_},t.prototype.getIndexEndValue=function(){return(0,o.hu)(this.endSet_,"Only valid if end has been set"),this.indexEndValue_},t.prototype.getIndexEndName=function(){return(0,o.hu)(this.endSet_,"Only valid if end has been set"),this.endNameSet_?this.indexEndName_:P},t.prototype.hasLimit=function(){return this.limitSet_},t.prototype.hasAnchoredLimit=function(){return this.limitSet_&&""!==this.viewFrom_},t.prototype.getLimit=function(){return(0,o.hu)(this.limitSet_,"Only valid if limit has been set"),this.limit_},t.prototype.getIndex=function(){return this.index_},t.prototype.copy_=function(){var e=new t;return e.limitSet_=this.limitSet_,e.limit_=this.limit_,e.startSet_=this.startSet_,e.indexStartValue_=this.indexStartValue_,e.startNameSet_=this.startNameSet_,e.indexStartName_=this.indexStartName_,e.endSet_=this.endSet_,e.indexEndValue_=this.indexEndValue_,e.endNameSet_=this.endNameSet_,e.indexEndName_=this.indexEndName_,e.index_=this.index_,e.viewFrom_=this.viewFrom_,e},t.prototype.limit=function(t){var e=this.copy_();return e.limitSet_=!0,e.limit_=t,e.viewFrom_="",e},t.prototype.limitToFirst=function(e){var n=this.copy_();return n.limitSet_=!0,n.limit_=e,n.viewFrom_=t.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT,n},t.prototype.limitToLast=function(e){var n=this.copy_();return n.limitSet_=!0,n.limit_=e,n.viewFrom_=t.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT,n},t.prototype.startAt=function(t,e){var n=this.copy_();return n.startSet_=!0,void 0===t&&(t=null),n.indexStartValue_=t,null!=e?(n.startNameSet_=!0,n.indexStartName_=e):(n.startNameSet_=!1,n.indexStartName_=""),n},t.prototype.endAt=function(t,e){var n=this.copy_();return n.endSet_=!0,void 0===t&&(t=null),n.indexEndValue_=t,void 0!==e?(n.endNameSet_=!0,n.indexEndName_=e):(n.endNameSet_=!1,n.indexEndName_=""),n},t.prototype.orderBy=function(t){var e=this.copy_();return e.index_=t,e},t.prototype.getQueryObject=function(){var e=t.WIRE_PROTOCOL_CONSTANTS_,n={};if(this.startSet_&&(n[e.INDEX_START_VALUE]=this.indexStartValue_,this.startNameSet_&&(n[e.INDEX_START_NAME]=this.indexStartName_)),this.endSet_&&(n[e.INDEX_END_VALUE]=this.indexEndValue_,this.endNameSet_&&(n[e.INDEX_END_NAME]=this.indexEndName_)),this.limitSet_){n[e.LIMIT]=this.limit_;var r=this.viewFrom_;""===r&&(r=this.isViewFromLeft()?e.VIEW_FROM_LEFT:e.VIEW_FROM_RIGHT),n[e.VIEW_FROM]=r}return this.index_!==Ot&&(n[e.INDEX]=this.index_.toString()),n},t.prototype.loadsAllData=function(){return!(this.startSet_||this.endSet_||this.limitSet_)},t.prototype.isDefault=function(){return this.loadsAllData()&&this.index_===Ot},t.prototype.getNodeFilter=function(){return this.loadsAllData()?new we(this.getIndex()):this.hasLimit()?new cn(this):new ln(this)},t.prototype.toRestQueryStringParameters=function(){var e,n=t.REST_QUERY_CONSTANTS_,r={};return this.isDefault()||(this.index_===Ot?e=n.PRIORITY_INDEX:this.index_===Yt?e=n.VALUE_INDEX:this.index_===Nt?e=n.KEY_INDEX:((0,o.hu)(this.index_ instanceof Kt,"Unrecognized index type!"),e=this.index_.toString()),r[n.ORDER_BY]=(0,o.Pz)(e),this.startSet_&&(r[n.START_AT]=(0,o.Pz)(this.indexStartValue_),this.startNameSet_&&(r[n.START_AT]+=","+(0,o.Pz)(this.indexStartName_))),this.endSet_&&(r[n.END_AT]=(0,o.Pz)(this.indexEndValue_),this.endNameSet_&&(r[n.END_AT]+=","+(0,o.Pz)(this.indexEndName_))),this.limitSet_&&(this.isViewFromLeft()?r[n.LIMIT_TO_FIRST]=this.limit_:r[n.LIMIT_TO_LAST]=this.limit_)),r},t.WIRE_PROTOCOL_CONSTANTS_={INDEX_START_VALUE:"sp",INDEX_START_NAME:"sn",INDEX_END_VALUE:"ep",INDEX_END_NAME:"en",LIMIT:"l",VIEW_FROM:"vf",VIEW_FROM_LEFT:"l",VIEW_FROM_RIGHT:"r",INDEX:"i"},t.REST_QUERY_CONSTANTS_={ORDER_BY:"orderBy",PRIORITY_INDEX:"$priority",VALUE_INDEX:"$value",KEY_INDEX:"$key",START_AT:"startAt",END_AT:"endAt",LIMIT_TO_FIRST:"limitToFirst",LIMIT_TO_LAST:"limitToLast"},t.DEFAULT=new t,t}(),dn=function(t){function e(e,n){if(!(e instanceof un))throw new Error("new Reference() no longer supported - use app.database().");return t.call(this,e,n,pn.DEFAULT,!1)||this}return(0,i.ZT)(e,t),e.prototype.getKey=function(){return(0,o.Dv)("Reference.key",0,0,arguments.length),this.path.isEmpty()?null:this.path.getBack()},e.prototype.child=function(t){return(0,o.Dv)("Reference.child",1,1,arguments.length),"number"==typeof t?t=String(t):t instanceof X||(null===this.path.getFront()?vt("Reference.child",1,t,!1):_t("Reference.child",1,t,!1)),new e(this.repo,this.path.child(t))},e.prototype.getParent=function(){(0,o.Dv)("Reference.parent",0,0,arguments.length);var t=this.path.parent();return null===t?null:new e(this.repo,t)},e.prototype.getRoot=function(){(0,o.Dv)("Reference.root",0,0,arguments.length);for(var t=this;null!==t.getParent();)t=t.getParent();return t},e.prototype.databaseProp=function(){return this.repo.database},e.prototype.set=function(t,e){(0,o.Dv)("Reference.set",1,2,arguments.length),gt("Reference.set",this.path),lt("Reference.set",1,t,this.path,!1),(0,o.Wj)("Reference.set",2,e,!0);var n=new o.BH;return this.repo.setWithPriority(this.path,t,null,n.wrapCallback(e)),n.promise},e.prototype.update=function(t,e){if((0,o.Dv)("Reference.update",1,2,arguments.length),gt("Reference.update",this.path),Array.isArray(t)){for(var n={},r=0;r<t.length;++r)n[""+r]=t[r];t=n,T("Passing an Array to Firebase.update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.")}pt("Reference.update",1,t,this.path,!1),(0,o.Wj)("Reference.update",2,e,!0);var i=new o.BH;return this.repo.update(this.path,t,i.wrapCallback(e)),i.promise},e.prototype.setWithPriority=function(t,e,n){if((0,o.Dv)("Reference.setWithPriority",2,3,arguments.length),gt("Reference.setWithPriority",this.path),lt("Reference.setWithPriority",1,t,this.path,!1),dt("Reference.setWithPriority",2,e,!1),(0,o.Wj)("Reference.setWithPriority",3,n,!0),".length"===this.getKey()||".keys"===this.getKey())throw"Reference.setWithPriority failed: "+this.getKey()+" is a read-only object.";var r=new o.BH;return this.repo.setWithPriority(this.path,t,e,r.wrapCallback(n)),r.promise},e.prototype.remove=function(t){return(0,o.Dv)("Reference.remove",0,1,arguments.length),gt("Reference.remove",this.path),(0,o.Wj)("Reference.remove",1,t,!0),this.set(null,t)},e.prototype.transaction=function(t,e,n){if((0,o.Dv)("Reference.transaction",1,3,arguments.length),gt("Reference.transaction",this.path),(0,o.Wj)("Reference.transaction",1,t,!1),(0,o.Wj)("Reference.transaction",2,e,!0),Ct("Reference.transaction",3,n,!0),".length"===this.getKey()||".keys"===this.getKey())throw"Reference.transaction failed: "+this.getKey()+" is a read-only object.";void 0===n&&(n=!0);var r=new o.BH;"function"==typeof e&&r.promise.catch((function(){}));var i=function(t,n,i){t?r.reject(t):r.resolve(new wt(n,i)),"function"==typeof e&&e(t,n,i)};return this.repo.startTransaction(this.path,t,i,n),r.promise},e.prototype.setPriority=function(t,e){(0,o.Dv)("Reference.setPriority",1,2,arguments.length),gt("Reference.setPriority",this.path),dt("Reference.setPriority",1,t,!1),(0,o.Wj)("Reference.setPriority",2,e,!0);var n=new o.BH;return this.repo.setWithPriority(this.path.child(".priority"),t,null,n.wrapCallback(e)),n.promise},e.prototype.push=function(t,e){(0,o.Dv)("Reference.push",0,2,arguments.length),gt("Reference.push",this.path),lt("Reference.push",1,t,this.path,!0),(0,o.Wj)("Reference.push",2,e,!0);var n,r=this.repo.serverTime(),i=bt(r),s=this.child(i),a=this.child(i);return n=null!=t?s.set(t,e).then((function(){return a})):Promise.resolve(a),s.then=n.then.bind(n),s.catch=n.then.bind(n,void 0),"function"==typeof e&&n.catch((function(){})),s},e.prototype.onDisconnect=function(){return gt("Reference.onDisconnect",this.path),new Et(this.repo,this.path)},Object.defineProperty(e.prototype,"database",{get:function(){return this.databaseProp()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"key",{get:function(){return this.getKey()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"parent",{get:function(){return this.getParent()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"root",{get:function(){return this.getRoot()},enumerable:!1,configurable:!0}),e}(te);te.__referenceConstructor=dn,De.__referenceConstructor=dn;var fn,yn=function(){this.children={},this.childCount=0,this.value=null},_n=function(){function t(t,e,n){void 0===t&&(t=""),void 0===e&&(e=null),void 0===n&&(n=new yn),this.name_=t,this.parent_=e,this.node_=n}return t.prototype.subTree=function(e){for(var n=e instanceof X?e:new X(e),r=this,i=n.getFront();null!==i;)r=new t(i,r,(0,o.DV)(r.node_.children,i)||new yn),i=(n=n.popFront()).getFront();return r},t.prototype.getValue=function(){return this.node_.value},t.prototype.setValue=function(t){(0,o.hu)(void 0!==t,"Cannot set value to undefined"),this.node_.value=t,this.updateParents_()},t.prototype.clear=function(){this.node_.value=null,this.node_.children={},this.node_.childCount=0,this.updateParents_()},t.prototype.hasChildren=function(){return this.node_.childCount>0},t.prototype.isEmpty=function(){return null===this.getValue()&&!this.hasChildren()},t.prototype.forEachChild=function(e){var n=this;k(this.node_.children,(function(r,i){e(new t(r,n,i))}))},t.prototype.forEachDescendant=function(t,e,n){e&&!n&&t(this),this.forEachChild((function(e){e.forEachDescendant(t,!0,n)})),e&&n&&t(this)},t.prototype.forEachAncestor=function(t,e){for(var n=e?this:this.parent();null!==n;){if(t(n))return!0;n=n.parent()}return!1},t.prototype.forEachImmediateDescendantWithValue=function(t){this.forEachChild((function(e){null!==e.getValue()?t(e):e.forEachImmediateDescendantWithValue(t)}))},t.prototype.path=function(){return new X(null===this.parent_?this.name_:this.parent_.path()+"/"+this.name_)},t.prototype.name=function(){return this.name_},t.prototype.parent=function(){return this.parent_},t.prototype.updateParents_=function(){null!==this.parent_&&this.parent_.updateChild_(this.name_,this)},t.prototype.updateChild_=function(t,e){var n=e.isEmpty(),r=(0,o.r3)(this.node_.children,t);n&&r?(delete this.node_.children[t],this.node_.childCount--,this.updateParents_()):n||r||(this.node_.children[t]=e.node_,this.node_.childCount++,this.updateParents_())},t}();!function(t){t[t.RUN=0]="RUN",t[t.SENT=1]="SENT",t[t.COMPLETED=2]="COMPLETED",t[t.SENT_NEEDS_ABORT=3]="SENT_NEEDS_ABORT",t[t.NEEDS_ABORT=4]="NEEDS_ABORT"}(fn||(fn={})),un.MAX_TRANSACTION_RETRIES_=25,un.prototype.transactionsInit_=function(){this.transactionQueueTree_=new _n},un.prototype.startTransaction=function(t,e,n,r){this.log_("transaction on "+t);var i=function(){},s=new dn(this,t);s.on("value",i);var a={path:t,update:e,onComplete:n,status:null,order:y(),applyLocally:r,retryCount:0,unwatcher:function(){s.off("value",i)},abortReason:null,currentWriteId:null,currentInputSnapshot:null,currentOutputSnapshotRaw:null,currentOutputSnapshotResolved:null},h=this.getLatestState_(t);a.currentInputSnapshot=h;var u=a.update(h.val());if(void 0===u){if(a.unwatcher(),a.currentOutputSnapshotRaw=null,a.currentOutputSnapshotResolved=null,a.onComplete){var l=new Gt(a.currentInputSnapshot,new dn(this,a.path),Ot);a.onComplete(null,!1,l)}}else{ct("transaction failed: Data returned ",u,a.path),a.status=fn.RUN;var c=this.transactionQueueTree_.subTree(t),p=c.getValue()||[];p.push(a),c.setValue(p);var d=void 0;"object"==typeof u&&null!==u&&(0,o.r3)(u,".priority")?(d=(0,o.DV)(u,".priority"),(0,o.hu)(ut(d),"Invalid priority returned by transaction. Priority must be a valid string, finite number, server value, or null.")):d=(this.serverSyncTree_.calcCompleteEventCache(t)||Vt.EMPTY_NODE).getPriority().val(),d=d;var f=this.generateServerValues(),_=Bt(u,d),v=ae(_,h,f);a.currentOutputSnapshotRaw=_,a.currentOutputSnapshotResolved=v,a.currentWriteId=this.getNextWriteId_();var g=this.serverSyncTree_.applyUserOverwrite(t,v,a.currentWriteId,a.applyLocally);this.eventQueue_.raiseEventsForChangedPath(t,g),this.sendReadyTransactions_()}},un.prototype.getLatestState_=function(t,e){return this.serverSyncTree_.calcCompleteEventCache(t,e)||Vt.EMPTY_NODE},un.prototype.sendReadyTransactions_=function(t){var e=this;if(void 0===t&&(t=this.transactionQueueTree_),t||this.pruneCompletedTransactionsBelowNode_(t),null!==t.getValue()){var n=this.buildTransactionQueue_(t);(0,o.hu)(n.length>0,"Sending zero length transaction queue"),n.every((function(t){return t.status===fn.RUN}))&&this.sendTransactionQueue_(t.path(),n)}else t.hasChildren()&&t.forEachChild((function(t){e.sendReadyTransactions_(t)}))},un.prototype.sendTransactionQueue_=function(t,e){for(var n=this,r=e.map((function(t){return t.currentWriteId})),i=this.getLatestState_(t,r),s=i,a=i.hash(),h=0;h<e.length;h++){var u=e[h];(0,o.hu)(u.status===fn.RUN,"tryToSendTransactionQueue_: items in queue should all be run."),u.status=fn.SENT,u.retryCount++;var l=X.relativePath(t,u.path);s=s.updateChild(l,u.currentOutputSnapshotRaw)}var c=s.val(!0),p=t;this.server_.put(p.toString(),c,(function(r){n.log_("transaction put response",{path:p.toString(),status:r});var i=[];if("ok"===r){for(var o=[],s=0;s<e.length;s++){if(e[s].status=fn.COMPLETED,i=i.concat(n.serverSyncTree_.ackUserWrite(e[s].currentWriteId)),e[s].onComplete){var a=e[s].currentOutputSnapshotResolved,h=new dn(n,e[s].path),u=new Gt(a,h,Ot);o.push(e[s].onComplete.bind(null,null,!0,u))}e[s].unwatcher()}for(n.pruneCompletedTransactionsBelowNode_(n.transactionQueueTree_.subTree(t)),n.sendReadyTransactions_(),n.eventQueue_.raiseEventsForChangedPath(t,i),s=0;s<o.length;s++)K(o[s])}else{if("datastale"===r)for(s=0;s<e.length;s++)e[s].status===fn.SENT_NEEDS_ABORT?e[s].status=fn.NEEDS_ABORT:e[s].status=fn.RUN;else for(T("transaction at "+p.toString()+" failed: "+r),s=0;s<e.length;s++)e[s].status=fn.NEEDS_ABORT,e[s].abortReason=r;n.rerunTransactions_(t)}}),a)},un.prototype.rerunTransactions_=function(t){var e=this.getAncestorTransactionNode_(t),n=e.path(),r=this.buildTransactionQueue_(e);return this.rerunTransactionQueue_(r,n),n},un.prototype.rerunTransactionQueue_=function(t,e){if(0!==t.length){for(var n,r=[],i=[],s=t.filter((function(t){return t.status===fn.RUN})).map((function(t){return t.currentWriteId})),a=0;a<t.length;a++){var h=t[a],u=X.relativePath(e,h.path),l=!1,c=void 0;if((0,o.hu)(null!==u,"rerunTransactionsUnderNode_: relativePath should not be null."),h.status===fn.NEEDS_ABORT)l=!0,c=h.abortReason,i=i.concat(this.serverSyncTree_.ackUserWrite(h.currentWriteId,!0));else if(h.status===fn.RUN)if(h.retryCount>=un.MAX_TRANSACTION_RETRIES_)l=!0,c="maxretry",i=i.concat(this.serverSyncTree_.ackUserWrite(h.currentWriteId,!0));else{var p=this.getLatestState_(h.path,s);h.currentInputSnapshot=p;var d=t[a].update(p.val());if(void 0!==d){ct("transaction failed: Data returned ",d,h.path);var f=Bt(d);"object"==typeof d&&null!=d&&(0,o.r3)(d,".priority")||(f=f.updatePriority(p.getPriority()));var y=h.currentWriteId,_=this.generateServerValues(),v=ae(f,p,_);h.currentOutputSnapshotRaw=f,h.currentOutputSnapshotResolved=v,h.currentWriteId=this.getNextWriteId_(),s.splice(s.indexOf(y),1),i=(i=i.concat(this.serverSyncTree_.applyUserOverwrite(h.path,v,h.currentWriteId,h.applyLocally))).concat(this.serverSyncTree_.ackUserWrite(y,!0))}else l=!0,c="nodata",i=i.concat(this.serverSyncTree_.ackUserWrite(h.currentWriteId,!0))}if(this.eventQueue_.raiseEventsForChangedPath(e,i),i=[],l&&(t[a].status=fn.COMPLETED,n=t[a].unwatcher,setTimeout(n,Math.floor(0)),t[a].onComplete))if("nodata"===c){var g=new dn(this,t[a].path),m=t[a].currentInputSnapshot,C=new Gt(m,g,Ot);r.push(t[a].onComplete.bind(null,null,!1,C))}else r.push(t[a].onComplete.bind(null,new Error(c),!1,null))}for(this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_),a=0;a<r.length;a++)K(r[a]);this.sendReadyTransactions_()}},un.prototype.getAncestorTransactionNode_=function(t){var e,n=this.transactionQueueTree_;for(e=t.getFront();null!==e&&null===n.getValue();)n=n.subTree(e),e=(t=t.popFront()).getFront();return n},un.prototype.buildTransactionQueue_=function(t){var e=[];return this.aggregateTransactionQueuesForNode_(t,e),e.sort((function(t,e){return t.order-e.order})),e},un.prototype.aggregateTransactionQueuesForNode_=function(t,e){var n=this,r=t.getValue();if(null!==r)for(var i=0;i<r.length;i++)e.push(r[i]);t.forEachChild((function(t){n.aggregateTransactionQueuesForNode_(t,e)}))},un.prototype.pruneCompletedTransactionsBelowNode_=function(t){var e=this,n=t.getValue();if(n){for(var r=0,i=0;i<n.length;i++)n[i].status!==fn.COMPLETED&&(n[r]=n[i],r++);n.length=r,t.setValue(n.length>0?n:null)}t.forEachChild((function(t){e.pruneCompletedTransactionsBelowNode_(t)}))},un.prototype.abortTransactions_=function(t){var e=this,n=this.getAncestorTransactionNode_(t).path(),r=this.transactionQueueTree_.subTree(t);return r.forEachAncestor((function(t){e.abortTransactionsOnNode_(t)})),this.abortTransactionsOnNode_(r),r.forEachDescendant((function(t){e.abortTransactionsOnNode_(t)})),n},un.prototype.abortTransactionsOnNode_=function(t){var e=t.getValue();if(null!==e){for(var n=[],r=[],i=-1,s=0;s<e.length;s++)e[s].status===fn.SENT_NEEDS_ABORT||(e[s].status===fn.SENT?((0,o.hu)(i===s-1,"All SENT items should be at beginning of queue."),i=s,e[s].status=fn.SENT_NEEDS_ABORT,e[s].abortReason="set"):((0,o.hu)(e[s].status===fn.RUN,"Unexpected transaction status in abort"),e[s].unwatcher(),r=r.concat(this.serverSyncTree_.ackUserWrite(e[s].currentWriteId,!0)),e[s].onComplete&&n.push(e[s].onComplete.bind(null,new Error("set"),!1,null))));for(-1===i?t.setValue(null):e.length=i+1,this.eventQueue_.raiseEventsForChangedPath(t.path(),r),s=0;s<n.length;s++)K(n[s])}};var vn,gn=function(){function t(t,e){var n=this;this.app_=t,this.authProvider_=e,this.auth_=null,this.auth_=e.getImmediate({optional:!0}),this.auth_||e.get().then((function(t){return n.auth_=t}))}return t.prototype.getToken=function(t){return this.auth_?this.auth_.getToken(t).catch((function(t){return t&&"auth/token-not-initialized"===t.code?(E("Got auth/token-not-initialized error.  Treating as null token."),null):Promise.reject(t)})):Promise.resolve(null)},t.prototype.addTokenChangeListener=function(t){this.auth_?this.auth_.addAuthTokenListener(t):(setTimeout((function(){return t(null)}),0),this.authProvider_.get().then((function(e){return e.addAuthTokenListener(t)})))},t.prototype.removeTokenChangeListener=function(t){this.authProvider_.get().then((function(e){return e.removeAuthTokenListener(t)}))},t.prototype.notifyForInvalidToken=function(){var t='Provided authentication credentials for the app named "'+this.app_.name+'" are invalid. This usually indicates your app was not initialized correctly. ';"credential"in this.app_.options?t+='Make sure the "credential" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.':"serviceAccount"in this.app_.options?t+='Make sure the "serviceAccount" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.':t+='Make sure the "apiKey" and "databaseURL" properties provided to initializeApp() match the values provided for your app at https://console.firebase.google.com/.',T(t)},t}(),mn=function(){function t(){}return t.prototype.getToken=function(e){return Promise.resolve({accessToken:t.EMULATOR_AUTH_TOKEN})},t.prototype.addTokenChangeListener=function(e){e(t.EMULATOR_AUTH_TOKEN)},t.prototype.removeTokenChangeListener=function(t){},t.prototype.notifyForInvalidToken=function(){},t.EMULATOR_AUTH_TOKEN="owner",t}(),Cn=function(){function t(){this.repos_={},this.useRestClient_=!1}return t.getInstance=function(){return vn||(vn=new t),vn},t.prototype.interrupt=function(){var t,e,n,r;try{for(var o=(0,i.XA)(Object.keys(this.repos_)),s=o.next();!s.done;s=o.next()){var a=s.value;try{for(var h=(n=void 0,(0,i.XA)(Object.keys(this.repos_[a]))),u=h.next();!u.done;u=h.next()){var l=u.value;this.repos_[a][l].interrupt()}}catch(t){n={error:t}}finally{try{u&&!u.done&&(r=h.return)&&r.call(h)}finally{if(n)throw n.error}}}}catch(e){t={error:e}}finally{try{s&&!s.done&&(e=o.return)&&e.call(o)}finally{if(t)throw t.error}}},t.prototype.resume=function(){var t,e,n,r;try{for(var o=(0,i.XA)(Object.keys(this.repos_)),s=o.next();!s.done;s=o.next()){var a=s.value;try{for(var h=(n=void 0,(0,i.XA)(Object.keys(this.repos_[a]))),u=h.next();!u.done;u=h.next()){var l=u.value;this.repos_[a][l].resume()}}catch(t){n={error:t}}finally{try{u&&!u.done&&(r=h.return)&&r.call(h)}finally{if(n)throw n.error}}}}catch(e){t={error:e}}finally{try{s&&!s.done&&(e=o.return)&&e.call(o)}finally{if(t)throw t.error}}},t.prototype.applyEmulatorSettings=function(t,e,n){t.repoInfo_=new et(e+":"+n,!1,t.repoInfo_.namespace,t.repoInfo_.webSocketOnly,t.repoInfo_.nodeAdmin,t.repoInfo_.persistenceKey,t.repoInfo_.includeNamespaceInQueryParams),t.repoInfo_.nodeAdmin&&(t.authTokenProvider_=new mn)},t.prototype.databaseFromApp=function(t,e,n,r){var i=n||t.options.databaseURL;void 0===i&&(t.options.projectId||S("Can't determine Firebase Database URL. Be sure to include  a Project ID when calling firebase.initializeApp()."),E("Using default host for project ",t.options.projectId),i=t.options.projectId+"-default-rtdb.firebaseio.com");var o,s=nt(i,r),a=s.repoInfo,h=void 0;"undefined"!=typeof process&&(h=process.env.FIREBASE_DATABASE_EMULATOR_HOST),h?(o=!0,i="http://"+h+"?ns="+a.namespace,a=(s=nt(i,r)).repoInfo):o=!s.repoInfo.secure;var u=r&&o?new mn:new gn(t,e);return mt("Invalid Firebase Database URL",1,s),s.path.isEmpty()||S("Database URL must point to the root of a Firebase Database (not including a child path)."),this.createRepo(a,t,u).database},t.prototype.deleteRepo=function(t){var e=(0,o.DV)(this.repos_,t.app.name);e&&(0,o.DV)(e,t.key)===t||S("Database "+t.app.name+"("+t.repoInfo_+") has already been deleted."),t.interrupt(),delete e[t.key]},t.prototype.createRepo=function(t,e,n){var r=(0,o.DV)(this.repos_,e.name);r||(r={},this.repos_[e.name]=r);var i=(0,o.DV)(r,t.toURLString());return i&&S("Database initialized multiple times. Please make sure the format of the database URL matches with each database() call."),i=new un(t,this.useRestClient_,e,n),r[t.toURLString()]=i,i},t.prototype.forceRestClient=function(t){this.useRestClient_=t},t}(),En=function(){function t(t){var e=this;this.repoInternal_=t,this.instanceStarted_=!1,this.INTERNAL={delete:function(){return(0,i.mG)(e,void 0,void 0,(function(){return(0,i.Jh)(this,(function(t){return this.checkDeleted_("delete"),Cn.getInstance().deleteRepo(this.repo_),this.repoInternal_=null,this.rootInternal_=null,[2]}))}))}},t instanceof un||S("Don't call new Database() directly - please use firebase.database().")}return Object.defineProperty(t.prototype,"repo_",{get:function(){return this.instanceStarted_||(this.repoInternal_.start(),this.instanceStarted_=!0),this.repoInternal_},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"root_",{get:function(){return this.rootInternal_||(this.rootInternal_=new dn(this.repo_,X.Empty)),this.rootInternal_},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"app",{get:function(){return this.repo_.app},enumerable:!1,configurable:!0}),t.prototype.useEmulator=function(t,e){this.checkDeleted_("useEmulator"),this.instanceStarted_?S("Cannot call useEmulator() after instance has already been initialized."):Cn.getInstance().applyEmulatorSettings(this.repoInternal_,t,e)},t.prototype.ref=function(t){return this.checkDeleted_("ref"),(0,o.Dv)("database.ref",0,1,arguments.length),t instanceof dn?this.refFromURL(t.toString()):void 0!==t?this.root_.child(t):this.root_},t.prototype.refFromURL=function(t){var e="database.refFromURL";this.checkDeleted_(e),(0,o.Dv)(e,1,1,arguments.length);var n=nt(t,this.repo_.repoInfo_.nodeAdmin);mt(e,1,n);var r=n.repoInfo;return r.isCustomHost()||r.host===this.repo_.repoInfo_.host||S(e+": Host name does not match the current database: (found "+r.host+" but expected "+this.repo_.repoInfo_.host+")"),this.ref(n.path.toString())},t.prototype.checkDeleted_=function(t){null===this.repoInternal_&&S("Cannot call "+t+" on a deleted database.")},t.prototype.goOffline=function(){(0,o.Dv)("database.goOffline",0,0,arguments.length),this.checkDeleted_("goOffline"),this.repo_.interrupt()},t.prototype.goOnline=function(){(0,o.Dv)("database.goOnline",0,0,arguments.length),this.checkDeleted_("goOnline"),this.repo_.resume()},t.ServerValue={TIMESTAMP:{".sv":"timestamp"},increment:function(t){return{".sv":{increment:t}}}},t}(),wn=Object.freeze({__proto__:null,forceLongPolling:function(){tn.forceDisallow(),Ge.forceAllow()},forceWebSockets:function(){Ge.forceDisallow()},isWebSocketsAvailable:function(){return tn.isAvailable()},setSecurityDebugCallback:function(t,e){t.repo.persistentConnection_.securityDebugCallback_=e},stats:function(t,e){t.repo.stats(e)},statsIncrementCounter:function(t,e){t.repo.statsIncrementCounter(e)},dataUpdateCount:function(t){return t.repo.dataUpdateCount},interceptServerData:function(t,e){return t.repo.interceptServerData_(e)},initStandalone:function(t){var e=t.app,n=t.url,r=t.version,i=t.customAuthImpl,o=t.namespace,s=t.nodeAdmin,h=void 0!==s&&s;Ze(r);var u=new a.zt("auth-internal",new a.H0("database-standalone"));return u.setComponent(new a.wA("auth-internal",(function(){return i}),"PRIVATE")),{instance:Cn.getInstance().databaseFromApp(e,u,n,h),namespace:o}}}),bn=sn;sn.prototype.simpleListen=function(t,e){this.sendRequest("q",{p:t},e)},sn.prototype.echo=function(t,e){this.sendRequest("echo",{d:t},e)};var Sn=nn,Tn=et,In=Object.freeze({__proto__:null,DataConnection:bn,RealTimeConnection:Sn,hijackHash:function(t){var e=sn.prototype.put;return sn.prototype.put=function(n,r,i,o){void 0!==o&&(o=t()),e.call(this,n,r,i,o)},function(){sn.prototype.put=e}},ConnectionTarget:Tn,queryIdentifier:function(t){return t.queryIdentifier()},forceRestClient:function(t){Cn.getInstance().forceRestClient(t)}}),Nn=En.ServerValue;!function(e){Ze(e.SDK_VERSION);var n=e.INTERNAL.registerComponent(new a.wA("database",(function(t,e){var n=t.getProvider("app").getImmediate(),r=t.getProvider("auth-internal");return Cn.getInstance().databaseFromApp(n,r,e)}),"PUBLIC").setServiceProps({Reference:dn,Query:te,Database:En,DataSnapshot:Gt,enableLogging:C,INTERNAL:wn,ServerValue:Nn,TEST_ACCESS:In}).setMultipleInstances(!0));e.registerVersion("@firebase/database","0.7.1"),(0,o.Yr)()&&(t.exports=n)}(r.Z)},594:(t,e,n)=>{"use strict";function r(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],s=0,a=o.length;s<a;s++,i++)r[i]=o[s];return r}var i;n.d(e,{in:()=>o,Yd:()=>c,Ub:()=>p,Am:()=>d});var o,s=[];!function(t){t[t.DEBUG=0]="DEBUG",t[t.VERBOSE=1]="VERBOSE",t[t.INFO=2]="INFO",t[t.WARN=3]="WARN",t[t.ERROR=4]="ERROR",t[t.SILENT=5]="SILENT"}(o||(o={}));var a={debug:o.DEBUG,verbose:o.VERBOSE,info:o.INFO,warn:o.WARN,error:o.ERROR,silent:o.SILENT},h=o.INFO,u=((i={})[o.DEBUG]="log",i[o.VERBOSE]="log",i[o.INFO]="info",i[o.WARN]="warn",i[o.ERROR]="error",i),l=function(t,e){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];if(!(e<t.logLevel)){var o=(new Date).toISOString(),s=u[e];if(!s)throw new Error("Attempted to log a message with an invalid logType (value: "+e+")");console[s].apply(console,r(["["+o+"]  "+t.name+":"],n))}},c=function(){function t(t){this.name=t,this._logLevel=h,this._logHandler=l,this._userLogHandler=null,s.push(this)}return Object.defineProperty(t.prototype,"logLevel",{get:function(){return this._logLevel},set:function(t){if(!(t in o))throw new TypeError('Invalid value "'+t+'" assigned to `logLevel`');this._logLevel=t},enumerable:!1,configurable:!0}),t.prototype.setLogLevel=function(t){this._logLevel="string"==typeof t?a[t]:t},Object.defineProperty(t.prototype,"logHandler",{get:function(){return this._logHandler},set:function(t){if("function"!=typeof t)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"userLogHandler",{get:function(){return this._userLogHandler},set:function(t){this._userLogHandler=t},enumerable:!1,configurable:!0}),t.prototype.debug=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,r([this,o.DEBUG],t)),this._logHandler.apply(this,r([this,o.DEBUG],t))},t.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,r([this,o.VERBOSE],t)),this._logHandler.apply(this,r([this,o.VERBOSE],t))},t.prototype.info=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,r([this,o.INFO],t)),this._logHandler.apply(this,r([this,o.INFO],t))},t.prototype.warn=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,r([this,o.WARN],t)),this._logHandler.apply(this,r([this,o.WARN],t))},t.prototype.error=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,r([this,o.ERROR],t)),this._logHandler.apply(this,r([this,o.ERROR],t))},t}();function p(t){s.forEach((function(e){e.setLogLevel(t)}))}function d(t,e){for(var n=function(n){var r=null;e&&e.level&&(r=a[e.level]),n.userLogHandler=null===t?null:function(e,n){for(var i=[],s=2;s<arguments.length;s++)i[s-2]=arguments[s];var a=i.map((function(t){if(null==t)return null;if("string"==typeof t)return t;if("number"==typeof t||"boolean"==typeof t)return t.toString();if(t instanceof Error)return t.message;try{return JSON.stringify(t)}catch(t){return null}})).filter((function(t){return t})).join(" ");n>=(null!=r?r:e.logLevel)&&t({level:o[n].toLowerCase(),message:a,args:i,type:e.name})}},r=0,i=s;r<i.length;r++)n(i[r])}},589:(t,e,n)=>{"use strict";n.d(e,{BH:()=>p,LL:()=>m,gQ:()=>x,hu:()=>i,g5:()=>o,US:()=>a,h$:()=>h,r3:()=>N,ne:()=>A,p$:()=>l,ZB:()=>c,gK:()=>M,GJ:()=>I,jU:()=>y,xb:()=>R,uI:()=>d,UG:()=>f,Yr:()=>v,b$:()=>_,w9:()=>T,cI:()=>w,UI:()=>D,xO:()=>O,DV:()=>P,ug:()=>q,dS:()=>Q,Pz:()=>b,Dv:()=>L,Wj:()=>W,lb:()=>U});var r=n(655),i=function(t,e){if(!t)throw o(e)},o=function(t){return new Error("Firebase Database (${JSCORE_VERSION}) INTERNAL ASSERT FAILED: "+t)},s=function(t){for(var e=[],n=0,r=0;r<t.length;r++){var i=t.charCodeAt(r);i<128?e[n++]=i:i<2048?(e[n++]=i>>6|192,e[n++]=63&i|128):55296==(64512&i)&&r+1<t.length&&56320==(64512&t.charCodeAt(r+1))?(i=65536+((1023&i)<<10)+(1023&t.charCodeAt(++r)),e[n++]=i>>18|240,e[n++]=i>>12&63|128,e[n++]=i>>6&63|128,e[n++]=63&i|128):(e[n++]=i>>12|224,e[n++]=i>>6&63|128,e[n++]=63&i|128)}return e},a={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray:function(t,e){if(!Array.isArray(t))throw Error("encodeByteArray takes an array as a parameter");this.init_();for(var n=e?this.byteToCharMapWebSafe_:this.byteToCharMap_,r=[],i=0;i<t.length;i+=3){var o=t[i],s=i+1<t.length,a=s?t[i+1]:0,h=i+2<t.length,u=h?t[i+2]:0,l=o>>2,c=(3&o)<<4|a>>4,p=(15&a)<<2|u>>6,d=63&u;h||(d=64,s||(p=64)),r.push(n[l],n[c],n[p],n[d])}return r.join("")},encodeString:function(t,e){return this.HAS_NATIVE_SUPPORT&&!e?btoa(t):this.encodeByteArray(s(t),e)},decodeString:function(t,e){return this.HAS_NATIVE_SUPPORT&&!e?atob(t):function(t){for(var e=[],n=0,r=0;n<t.length;){var i=t[n++];if(i<128)e[r++]=String.fromCharCode(i);else if(i>191&&i<224){var o=t[n++];e[r++]=String.fromCharCode((31&i)<<6|63&o)}else if(i>239&&i<365){var s=((7&i)<<18|(63&(o=t[n++]))<<12|(63&(a=t[n++]))<<6|63&t[n++])-65536;e[r++]=String.fromCharCode(55296+(s>>10)),e[r++]=String.fromCharCode(56320+(1023&s))}else{o=t[n++];var a=t[n++];e[r++]=String.fromCharCode((15&i)<<12|(63&o)<<6|63&a)}}return e.join("")}(this.decodeStringToByteArray(t,e))},decodeStringToByteArray:function(t,e){this.init_();for(var n=e?this.charToByteMapWebSafe_:this.charToByteMap_,r=[],i=0;i<t.length;){var o=n[t.charAt(i++)],s=i<t.length?n[t.charAt(i)]:0,a=++i<t.length?n[t.charAt(i)]:64,h=++i<t.length?n[t.charAt(i)]:64;if(++i,null==o||null==s||null==a||null==h)throw Error();var u=o<<2|s>>4;if(r.push(u),64!==a){var l=s<<4&240|a>>2;if(r.push(l),64!==h){var c=a<<6&192|h;r.push(c)}}}return r},init_:function(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(var t=0;t<this.ENCODED_VALS.length;t++)this.byteToCharMap_[t]=this.ENCODED_VALS.charAt(t),this.charToByteMap_[this.byteToCharMap_[t]]=t,this.byteToCharMapWebSafe_[t]=this.ENCODED_VALS_WEBSAFE.charAt(t),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[t]]=t,t>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(t)]=t,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(t)]=t)}}},h=function(t){var e=s(t);return a.encodeByteArray(e,!0)},u=function(t){try{return a.decodeString(t,!0)}catch(t){console.error("base64Decode failed: ",t)}return null};function l(t){return c(void 0,t)}function c(t,e){if(!(e instanceof Object))return e;switch(e.constructor){case Date:return new Date(e.getTime());case Object:void 0===t&&(t={});break;case Array:t=[];break;default:return e}for(var n in e)e.hasOwnProperty(n)&&"__proto__"!==n&&(t[n]=c(t[n],e[n]));return t}var p=function(){function t(){var t=this;this.reject=function(){},this.resolve=function(){},this.promise=new Promise((function(e,n){t.resolve=e,t.reject=n}))}return t.prototype.wrapCallback=function(t){var e=this;return function(n,r){n?e.reject(n):e.resolve(r),"function"==typeof t&&(e.promise.catch((function(){})),1===t.length?t(n):t(n,r))}},t}();function d(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test("undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:"")}function f(){try{return"[object process]"===Object.prototype.toString.call(n.g.process)}catch(t){return!1}}function y(){return"object"==typeof self&&self.self===self}function _(){return"object"==typeof navigator&&"ReactNative"===navigator.product}function v(){return!1}var g=function(t){function e(n,r,i){var o=t.call(this,r)||this;return o.code=n,o.customData=i,o.name="FirebaseError",Object.setPrototypeOf(o,e.prototype),Error.captureStackTrace&&Error.captureStackTrace(o,m.prototype.create),o}return(0,r.ZT)(e,t),e}(Error),m=function(){function t(t,e,n){this.service=t,this.serviceName=e,this.errors=n}return t.prototype.create=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];var r=e[0]||{},i=this.service+"/"+t,o=this.errors[t],s=o?C(o,r):"Error",a=this.serviceName+": "+s+" ("+i+").",h=new g(i,a,r);return h},t}();function C(t,e){return t.replace(E,(function(t,n){var r=e[n];return null!=r?String(r):"<"+n+"?>"}))}var E=/\{\$([^}]+)}/g;function w(t){return JSON.parse(t)}function b(t){return JSON.stringify(t)}var S=function(t){var e={},n={},r={},i="";try{var o=t.split(".");e=w(u(o[0])||""),n=w(u(o[1])||""),i=o[2],r=n.d||{},delete n.d}catch(t){}return{header:e,claims:n,data:r,signature:i}},T=function(t){var e=S(t).claims;return!!e&&"object"==typeof e&&e.hasOwnProperty("iat")},I=function(t){var e=S(t).claims;return"object"==typeof e&&!0===e.admin};function N(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function P(t,e){return Object.prototype.hasOwnProperty.call(t,e)?t[e]:void 0}function R(t){for(var e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!1;return!0}function D(t,e,n){var r={};for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(r[i]=e.call(n,t[i],i,t));return r}function O(t){for(var e=[],n=function(t,n){Array.isArray(n)?n.forEach((function(n){e.push(encodeURIComponent(t)+"="+encodeURIComponent(n))})):e.push(encodeURIComponent(t)+"="+encodeURIComponent(n))},r=0,i=Object.entries(t);r<i.length;r++){var o=i[r];n(o[0],o[1])}return e.length?"&"+e.join("&"):""}var x=function(){function t(){this.chain_=[],this.buf_=[],this.W_=[],this.pad_=[],this.inbuf_=0,this.total_=0,this.blockSize=64,this.pad_[0]=128;for(var t=1;t<this.blockSize;++t)this.pad_[t]=0;this.reset()}return t.prototype.reset=function(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0},t.prototype.compress_=function(t,e){e||(e=0);var n=this.W_;if("string"==typeof t)for(var r=0;r<16;r++)n[r]=t.charCodeAt(e)<<24|t.charCodeAt(e+1)<<16|t.charCodeAt(e+2)<<8|t.charCodeAt(e+3),e+=4;else for(r=0;r<16;r++)n[r]=t[e]<<24|t[e+1]<<16|t[e+2]<<8|t[e+3],e+=4;for(r=16;r<80;r++){var i=n[r-3]^n[r-8]^n[r-14]^n[r-16];n[r]=4294967295&(i<<1|i>>>31)}var o,s,a=this.chain_[0],h=this.chain_[1],u=this.chain_[2],l=this.chain_[3],c=this.chain_[4];for(r=0;r<80;r++)r<40?r<20?(o=l^h&(u^l),s=1518500249):(o=h^u^l,s=1859775393):r<60?(o=h&u|l&(h|u),s=2400959708):(o=h^u^l,s=3395469782),i=(a<<5|a>>>27)+o+c+s+n[r]&4294967295,c=l,l=u,u=4294967295&(h<<30|h>>>2),h=a,a=i;this.chain_[0]=this.chain_[0]+a&4294967295,this.chain_[1]=this.chain_[1]+h&4294967295,this.chain_[2]=this.chain_[2]+u&4294967295,this.chain_[3]=this.chain_[3]+l&4294967295,this.chain_[4]=this.chain_[4]+c&4294967295},t.prototype.update=function(t,e){if(null!=t){void 0===e&&(e=t.length);for(var n=e-this.blockSize,r=0,i=this.buf_,o=this.inbuf_;r<e;){if(0===o)for(;r<=n;)this.compress_(t,r),r+=this.blockSize;if("string"==typeof t){for(;r<e;)if(i[o]=t.charCodeAt(r),++r,++o===this.blockSize){this.compress_(i),o=0;break}}else for(;r<e;)if(i[o]=t[r],++r,++o===this.blockSize){this.compress_(i),o=0;break}}this.inbuf_=o,this.total_+=e}},t.prototype.digest=function(){var t=[],e=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(var n=this.blockSize-1;n>=56;n--)this.buf_[n]=255&e,e/=256;this.compress_(this.buf_);var r=0;for(n=0;n<5;n++)for(var i=24;i>=0;i-=8)t[r]=this.chain_[n]>>i&255,++r;return t},t}();function A(t,e){var n=new k(t,e);return n.subscribe.bind(n)}var k=function(){function t(t,e){var n=this;this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=e,this.task.then((function(){t(n)})).catch((function(t){n.error(t)}))}return t.prototype.next=function(t){this.forEachObserver((function(e){e.next(t)}))},t.prototype.error=function(t){this.forEachObserver((function(e){e.error(t)})),this.close(t)},t.prototype.complete=function(){this.forEachObserver((function(t){t.complete()})),this.close()},t.prototype.subscribe=function(t,e,n){var r,i=this;if(void 0===t&&void 0===e&&void 0===n)throw new Error("Missing Observer.");void 0===(r=function(t,e){if("object"!=typeof t||null===t)return!1;for(var n=0,r=["next","error","complete"];n<r.length;n++){var i=r[n];if(i in t&&"function"==typeof t[i])return!0}return!1}(t)?t:{next:t,error:e,complete:n}).next&&(r.next=F),void 0===r.error&&(r.error=F),void 0===r.complete&&(r.complete=F);var o=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((function(){try{i.finalError?r.error(i.finalError):r.complete()}catch(t){}})),this.observers.push(r),o},t.prototype.unsubscribeOne=function(t){void 0!==this.observers&&void 0!==this.observers[t]&&(delete this.observers[t],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))},t.prototype.forEachObserver=function(t){if(!this.finalized)for(var e=0;e<this.observers.length;e++)this.sendOne(e,t)},t.prototype.sendOne=function(t,e){var n=this;this.task.then((function(){if(void 0!==n.observers&&void 0!==n.observers[t])try{e(n.observers[t])}catch(t){"undefined"!=typeof console&&console.error&&console.error(t)}}))},t.prototype.close=function(t){var e=this;this.finalized||(this.finalized=!0,void 0!==t&&(this.finalError=t),this.task.then((function(){e.observers=void 0,e.onNoObservers=void 0})))},t}();function F(){}var L=function(t,e,n,r){var i;if(r<e?i="at least "+e:r>n&&(i=0===n?"none":"no more than "+n),i)throw new Error(t+" failed: Was called with "+r+(1===r?" argument.":" arguments.")+" Expects "+i+".")};function M(t,e,n){var r="";switch(e){case 1:r=n?"first":"First";break;case 2:r=n?"second":"Second";break;case 3:r=n?"third":"Third";break;case 4:r=n?"fourth":"Fourth";break;default:throw new Error("errorPrefix called with argumentNumber > 4.  Need to update it?")}return t+" failed: "+(r+" argument ")}function W(t,e,n,r){if((!r||n)&&"function"!=typeof n)throw new Error(M(t,e,r)+"must be a valid function.")}function U(t,e,n,r){if((!r||n)&&("object"!=typeof n||null===n))throw new Error(M(t,e,r)+"must be a valid context object.")}var Q=function(t){for(var e=[],n=0,r=0;r<t.length;r++){var o=t.charCodeAt(r);if(o>=55296&&o<=56319){var s=o-55296;r++,i(r<t.length,"Surrogate pair missing trail surrogate."),o=65536+(s<<10)+(t.charCodeAt(r)-56320)}o<128?e[n++]=o:o<2048?(e[n++]=o>>6|192,e[n++]=63&o|128):o<65536?(e[n++]=o>>12|224,e[n++]=o>>6&63|128,e[n++]=63&o|128):(e[n++]=o>>18|240,e[n++]=o>>12&63|128,e[n++]=o>>6&63|128,e[n++]=63&o|128)}return e},q=function(t){for(var e=0,n=0;n<t.length;n++){var r=t.charCodeAt(n);r<128?e++:r<2048?e+=2:r>=55296&&r<=56319?(e+=4,n++):e+=3}return e}},666:t=>{var e=function(t){"use strict";var e,n=Object.prototype,r=n.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},o=i.iterator||"@@iterator",s=i.asyncIterator||"@@asyncIterator",a=i.toStringTag||"@@toStringTag";function h(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{h({},"")}catch(t){h=function(t,e,n){return t[e]=n}}function u(t,e,n,r){var i=e&&e.prototype instanceof _?e:_,o=Object.create(i.prototype),s=new P(r||[]);return o._invoke=function(t,e,n){var r=c;return function(i,o){if(r===d)throw new Error("Generator is already running");if(r===f){if("throw"===i)throw o;return D()}for(n.method=i,n.arg=o;;){var s=n.delegate;if(s){var a=T(s,n);if(a){if(a===y)continue;return a}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===c)throw r=f,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=d;var h=l(t,e,n);if("normal"===h.type){if(r=n.done?f:p,h.arg===y)continue;return{value:h.arg,done:n.done}}"throw"===h.type&&(r=f,n.method="throw",n.arg=h.arg)}}}(t,n,s),o}function l(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=u;var c="suspendedStart",p="suspendedYield",d="executing",f="completed",y={};function _(){}function v(){}function g(){}var m={};m[o]=function(){return this};var C=Object.getPrototypeOf,E=C&&C(C(R([])));E&&E!==n&&r.call(E,o)&&(m=E);var w=g.prototype=_.prototype=Object.create(m);function b(t){["next","throw","return"].forEach((function(e){h(t,e,(function(t){return this._invoke(e,t)}))}))}function S(t,e){function n(i,o,s,a){var h=l(t[i],t,o);if("throw"!==h.type){var u=h.arg,c=u.value;return c&&"object"==typeof c&&r.call(c,"__await")?e.resolve(c.__await).then((function(t){n("next",t,s,a)}),(function(t){n("throw",t,s,a)})):e.resolve(c).then((function(t){u.value=t,s(u)}),(function(t){return n("throw",t,s,a)}))}a(h.arg)}var i;this._invoke=function(t,r){function o(){return new e((function(e,i){n(t,r,e,i)}))}return i=i?i.then(o,o):o()}}function T(t,n){var r=t.iterator[n.method];if(r===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=e,T(t,n),"throw"===n.method))return y;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return y}var i=l(r,t.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,y;var o=i.arg;return o?o.done?(n[t.resultName]=o.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,y):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function I(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function N(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function P(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(I,this),this.reset(!0)}function R(t){if(t){var n=t[o];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var i=-1,s=function n(){for(;++i<t.length;)if(r.call(t,i))return n.value=t[i],n.done=!1,n;return n.value=e,n.done=!0,n};return s.next=s}}return{next:D}}function D(){return{value:e,done:!0}}return v.prototype=w.constructor=g,g.constructor=v,v.displayName=h(g,a,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===v||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,g):(t.__proto__=g,h(t,a,"GeneratorFunction")),t.prototype=Object.create(w),t},t.awrap=function(t){return{__await:t}},b(S.prototype),S.prototype[s]=function(){return this},t.AsyncIterator=S,t.async=function(e,n,r,i,o){void 0===o&&(o=Promise);var s=new S(u(e,n,r,i),o);return t.isGeneratorFunction(n)?s:s.next().then((function(t){return t.done?t.value:s.next()}))},b(w),h(w,a,"Generator"),w[o]=function(){return this},w.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},t.values=R,P.prototype={constructor:P,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(N),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function i(r,i){return a.type="throw",a.arg=t,n.next=r,i&&(n.method="next",n.arg=e),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var s=this.tryEntries[o],a=s.completion;if("root"===s.tryLoc)return i("end");if(s.tryLoc<=this.prev){var h=r.call(s,"catchLoc"),u=r.call(s,"finallyLoc");if(h&&u){if(this.prev<s.catchLoc)return i(s.catchLoc,!0);if(this.prev<s.finallyLoc)return i(s.finallyLoc)}else if(h){if(this.prev<s.catchLoc)return i(s.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<s.finallyLoc)return i(s.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var i=this.tryEntries[n];if(i.tryLoc<=this.prev&&r.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var s=o?o.completion:{};return s.type=t,s.arg=e,o?(this.method="next",this.next=o.finallyLoc,y):this.complete(s)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),N(n),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var i=r.arg;N(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:R(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),y}},t}(t.exports);try{regeneratorRuntime=e}catch(t){Function("r","regeneratorRuntime = r")(e)}},655:(t,e,n)=>{"use strict";n.d(e,{ZT:()=>i,pi:()=>o,mG:()=>s,Jh:()=>a,XA:()=>h,CR:()=>u,fl:()=>l});var r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};function i(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}var o=function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};function s(t,e,n,r){return new(n||(n=Promise))((function(i,o){function s(t){try{h(r.next(t))}catch(t){o(t)}}function a(t){try{h(r.throw(t))}catch(t){o(t)}}function h(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}h((r=r.apply(t,e||[])).next())}))}function a(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}}function h(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function u(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)s.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return s}function l(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(u(arguments[e]));return t}}},e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={id:r,loaded:!1,exports:{}};return t[r](i,i.exports,n),i.loaded=!0,i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.hmd=t=>((t=Object.create(t)).children||(t.children=[]),Object.defineProperty(t,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+t.id)}}),t),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t=n(757),e=n.n(t),r=n(926),i=n.n(r),o=n(99);o.Z.registerVersion("firebase","8.0.1","app"),n(446),console.log("[email] Engine loading ...");var s=o.Z.initializeApp({apiKey:"AIzaSyA7yaoZCxckoiys4sxJfFs_vksIMPYQUn0",authDomain:"naiosoft69.firebaseapp.com",databaseURL:"https://naiosoft69.firebaseio.com",projectId:"naiosoft69",storageBucket:"naiosoft69.appspot.com",messagingSenderId:"911767014077",appId:"1:911767014077:web:c70f5a14ac111ebf6345d4",measurementId:"G-BC26M9FKX6"});function a(){return h.apply(this,arguments)}function h(){return(h=i()(e().mark((function t(){return e().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",new Promise((function(t){return t(null)})));case 1:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function u(){return(u=i()(e().mark((function t(n,r){var i,o,h;return e().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return i=s.database().ref().child("posts").push().key,o={},console.log("Retrieving location data of available..."),t.next=5,a();case 5:h=t.sent,console.log("Pushing the data to the server..."),o["/users/"+i]={email:n,registered:new Date,location:h},console.log('Registering email "'.concat(n,'" as id "').concat(i,'"...')),s.database().ref().update(o,r);case 10:case"end":return t.stop()}}),t)})))).apply(this,arguments)}self.addEventListener("message",(function(t){var e=t.data.id,n=t.data.data;switch(n.cmd){case"addUser":!function(t,e){u.apply(this,arguments)}(n.data,(function(t){self.postMessage({id:e,data:t})}));break;default:console.error('Unmanaged message "'.concat(n.cmd,'"'))}}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uYWlvLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXN5bmNUb0dlbmVyYXRvci5qcyIsIndlYnBhY2s6Ly9uYWlvLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yL2luZGV4LmpzIiwid2VicGFjazovL25haW8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2FwcC9kaXN0L2luZGV4LmVzbS5qcyIsIndlYnBhY2s6Ly9uYWlvLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9jb21wb25lbnQvZGlzdC9pbmRleC5lc20uanMiLCJ3ZWJwYWNrOi8vbmFpby8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvZGF0YWJhc2UvZGlzdC9pbmRleC5lc20uanMiLCJ3ZWJwYWNrOi8vbmFpby8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvbG9nZ2VyL2Rpc3QvaW5kZXguZXNtLmpzIiwid2VicGFjazovL25haW8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3V0aWwvZGlzdC9pbmRleC5lc20uanMiLCJ3ZWJwYWNrOi8vbmFpby8uL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vbmFpby8uL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYuanMiLCJ3ZWJwYWNrOi8vbmFpby93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9uYWlvL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL25haW8vd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL25haW8vd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9uYWlvL3dlYnBhY2svcnVudGltZS9oYXJtb255IG1vZHVsZSBkZWNvcmF0b3IiLCJ3ZWJwYWNrOi8vbmFpby93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL25haW8vLi9ub2RlX21vZHVsZXMvZmlyZWJhc2UvYXBwL2Rpc3QvaW5kZXguZXNtLmpzIiwid2VicGFjazovL25haW8vLi9zcmMvZHluYW1pYy9maXJlYmFzZS1zdy5tanMiXSwibmFtZXMiOlsiYXN5bmNHZW5lcmF0b3JTdGVwIiwiZ2VuIiwicmVzb2x2ZSIsInJlamVjdCIsIl9uZXh0IiwiX3Rocm93Iiwia2V5IiwiYXJnIiwiaW5mbyIsInZhbHVlIiwiZXJyb3IiLCJkb25lIiwiUHJvbWlzZSIsInRoZW4iLCJtb2R1bGUiLCJleHBvcnRzIiwiZm4iLCJzZWxmIiwidGhpcyIsImFyZ3MiLCJhcmd1bWVudHMiLCJhcHBseSIsImVyciIsInVuZGVmaW5lZCIsIl9hIiwiX2EkMSIsIkVSUk9SUyIsIkVSUk9SX0ZBQ1RPUlkiLCJuYW1lJDEiLCJERUZBVUxUX0VOVFJZX05BTUUiLCJQTEFURk9STV9MT0dfU1RSSU5HIiwibG9nZ2VyIiwiRmlyZWJhc2VBcHBJbXBsIiwib3B0aW9ucyIsImNvbmZpZyIsImZpcmViYXNlXyIsImVfMSIsIl90aGlzIiwiaXNEZWxldGVkXyIsIm5hbWVfIiwibmFtZSIsImF1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZF8iLCJhdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWQiLCJvcHRpb25zXyIsImNvbnRhaW5lciIsIl9hZGRDb21wb25lbnQiLCJfYiIsIklOVEVSTkFMIiwiY29tcG9uZW50cyIsInZhbHVlcyIsIl9jIiwibmV4dCIsImNvbXBvbmVudCIsImVfMV8xIiwicmV0dXJuIiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwicHJvdG90eXBlIiwiZ2V0IiwiY2hlY2tEZXN0cm95ZWRfIiwic2V0IiwidmFsIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsImRlbGV0ZSIsInJlbW92ZUFwcCIsImFsbCIsImdldFByb3ZpZGVycyIsIm1hcCIsInByb3ZpZGVyIiwiX2dldFNlcnZpY2UiLCJpbnN0YW5jZUlkZW50aWZpZXIiLCJnZXRQcm92aWRlciIsImdldEltbWVkaWF0ZSIsImlkZW50aWZpZXIiLCJfcmVtb3ZlU2VydmljZUluc3RhbmNlIiwiY2xlYXJJbnN0YW5jZSIsImFkZENvbXBvbmVudCIsImUiLCJkZWJ1ZyIsIl9hZGRPck92ZXJ3cml0ZUNvbXBvbmVudCIsImFkZE9yT3ZlcndyaXRlQ29tcG9uZW50IiwiY3JlYXRlIiwiYXBwTmFtZSIsImNvbnNvbGUiLCJsb2ciLCJmaXJlYmFzZSIsImNyZWF0ZUZpcmViYXNlTmFtZXNwYWNlIiwibmFtZXNwYWNlIiwiZmlyZWJhc2VBcHBJbXBsIiwiYXBwcyIsIk1hcCIsIl9fZXNNb2R1bGUiLCJpbml0aWFsaXplQXBwIiwicmF3Q29uZmlnIiwiU3RyaW5nIiwiYXBwIiwicmVnaXN0ZXJWZXJzaW9uIiwibGlicmFyeUtleU9yTmFtZSIsInZlcnNpb24iLCJ2YXJpYW50IiwibGlicmFyeSIsImxpYnJhcnlNaXNtYXRjaCIsIm1hdGNoIiwidmVyc2lvbk1pc21hdGNoIiwid2FybmluZyIsInB1c2giLCJ3YXJuIiwiam9pbiIsInJlZ2lzdGVyQ29tcG9uZW50Iiwic2V0TG9nTGV2ZWwiLCJvbkxvZyIsImxvZ0NhbGxiYWNrIiwiU0RLX1ZFUlNJT04iLCJ1c2VBc1NlcnZpY2UiLCJjb21wb25lbnROYW1lIiwiaGFzIiwidHlwZSIsInNlcnZpY2VOYW1lc3BhY2UiLCJhcHBBcmciLCJzZXJ2aWNlUHJvcHMiLCJfaSIsImxlbmd0aCIsImJpbmQiLCJtdWx0aXBsZUluc3RhbmNlcyIsImtleXMiLCJjcmVhdGVGaXJlYmFzZU5hbWVzcGFjZUNvcmUiLCJleHRlbmROYW1lc3BhY2UiLCJwcm9wcyIsImNyZWF0ZVN1YnNjcmliZSIsIkVycm9yRmFjdG9yeSIsImRlZXBFeHRlbmQiLCJQbGF0Zm9ybUxvZ2dlclNlcnZpY2UiLCJnZXRQbGF0Zm9ybUluZm9TdHJpbmciLCJnZXRDb21wb25lbnQiLCJpc1ZlcnNpb25TZXJ2aWNlUHJvdmlkZXIiLCJzZXJ2aWNlIiwiZmlsdGVyIiwibG9nU3RyaW5nIiwic2RrVmVyc2lvbiIsImluZGV4T2YiLCJmaXJlYmFzZSQxIiwicmVnaXN0ZXJDb3JlQ29tcG9uZW50cyIsIkNvbXBvbmVudCIsImluc3RhbmNlRmFjdG9yeSIsImluc3RhbnRpYXRpb25Nb2RlIiwic2V0SW5zdGFudGlhdGlvbk1vZGUiLCJtb2RlIiwic2V0TXVsdGlwbGVJbnN0YW5jZXMiLCJzZXRTZXJ2aWNlUHJvcHMiLCJQcm92aWRlciIsImluc3RhbmNlcyIsImluc3RhbmNlc0RlZmVycmVkIiwibm9ybWFsaXplZElkZW50aWZpZXIiLCJub3JtYWxpemVJbnN0YW5jZUlkZW50aWZpZXIiLCJkZWZlcnJlZCIsImluc3RhbmNlIiwiZ2V0T3JJbml0aWFsaXplU2VydmljZSIsInByb21pc2UiLCJvcHRpb25hbCIsIkVycm9yIiwic2V0Q29tcG9uZW50IiwiaXNDb21wb25lbnRFYWdlciIsImVudHJpZXMiLCJfZCIsImluc3RhbmNlRGVmZXJyZWQiLCJzZXJ2aWNlcyIsImxhYmVsIiwiQXJyYXkiLCJmcm9tIiwiX2RlbGV0ZSIsInNlbnQiLCJpc0NvbXBvbmVudFNldCIsIm5vcm1hbGl6ZUlkZW50aWZpZXJGb3JGYWN0b3J5IiwiQ29tcG9uZW50Q29udGFpbmVyIiwicHJvdmlkZXJzIiwiaWQiLCJET01TdG9yYWdlV3JhcHBlciIsImRvbVN0b3JhZ2VfIiwicHJlZml4XyIsInJlbW92ZUl0ZW0iLCJwcmVmaXhlZE5hbWVfIiwic2V0SXRlbSIsInN0b3JlZFZhbCIsImdldEl0ZW0iLCJyZW1vdmUiLCJ0b1N0cmluZyIsIk1lbW9yeVN0b3JhZ2UiLCJjYWNoZV8iLCJpc0luTWVtb3J5U3RvcmFnZSIsImNyZWF0ZVN0b3JhZ2Vmb3IiLCJkb21TdG9yYWdlTmFtZSIsIndpbmRvdyIsImRvbVN0b3JhZ2UiLCJQZXJzaXN0ZW50U3RvcmFnZSIsIlNlc3Npb25TdG9yYWdlIiwibG9nQ2xpZW50IiwiTFVJREdlbmVyYXRvciIsInNoYTEiLCJzdHIiLCJ1dGY4Qnl0ZXMiLCJ1cGRhdGUiLCJzaGExQnl0ZXMiLCJkaWdlc3QiLCJidWlsZExvZ01lc3NhZ2VfIiwidmFyQXJncyIsIm1lc3NhZ2UiLCJpIiwiaXNBcnJheSIsImZpcnN0TG9nXyIsImVuYWJsZUxvZ2dpbmciLCJsb2dnZXJfIiwicGVyc2lzdGVudCIsImxvZ0xldmVsIiwibG9nV3JhcHBlciIsInByZWZpeCIsImZhdGFsIiwiaXNJbnZhbGlkSlNPTk51bWJlciIsImRhdGEiLCJOdW1iZXIiLCJQT1NJVElWRV9JTkZJTklUWSIsIk5FR0FUSVZFX0lORklOSVRZIiwiTUlOX05BTUUiLCJNQVhfTkFNRSIsIm5hbWVDb21wYXJlIiwiYSIsImIiLCJhQXNJbnQiLCJ0cnlQYXJzZUludCIsImJBc0ludCIsInN0cmluZ0NvbXBhcmUiLCJyZXF1aXJlS2V5Iiwib2JqIiwiT2JqZWN0VG9VbmlxdWVLZXkiLCJrIiwic29ydCIsInNwbGl0U3RyaW5nQnlTaXplIiwic2Vnc2l6ZSIsImxlbiIsImRhdGFTZWdzIiwiYyIsInN1YnN0cmluZyIsImVhY2giLCJoYXNPd25Qcm9wZXJ0eSIsIlBVU0hfQ0hBUlMiLCJsYXN0UHVzaFRpbWUiLCJsYXN0UmFuZENoYXJzIiwiX19FTVBUWV9OT0RFIiwiTUFYX05PREUiLCJfX2NoaWxkcmVuTm9kZUNvbnN0cnVjdG9yIiwibm9kZUZyb21KU09OIiwiTUFYX05PREUkMSIsIl9kZWZhdWx0SW5kZXhNYXAiLCJFTVBUWV9OT0RFIiwiZG91YmxlVG9JRUVFNzU0U3RyaW5nIiwidiIsInMiLCJmIiwibG4iLCJNYXRoIiwiYWJzIiwicG93IiwibWluIiwiZmxvb3IiLCJMTjIiLCJyb3VuZCIsImJpdHMiLCJyZXZlcnNlIiwiaGV4Qnl0ZVN0cmluZyIsImhleEJ5dGUiLCJwYXJzZUludCIsInN1YnN0ciIsInRvTG93ZXJDYXNlIiwiSU5URUdFUl9SRUdFWFBfIiwiUmVnRXhwIiwidGVzdCIsImludFZhbCIsImV4Y2VwdGlvbkd1YXJkIiwic2V0VGltZW91dCIsInN0YWNrIiwic2V0VGltZW91dE5vbkJsb2NraW5nIiwidGltZSIsInRpbWVvdXQiLCJQYXRoIiwicGF0aE9yU3RyaW5nIiwicGllY2VOdW0iLCJwaWVjZXNfIiwic3BsaXQiLCJjb3B5VG8iLCJwaWVjZU51bV8iLCJnZXRGcm9udCIsImdldExlbmd0aCIsInBvcEZyb250IiwiZ2V0QmFjayIsInBhdGhTdHJpbmciLCJ0b1VybEVuY29kZWRTdHJpbmciLCJlbmNvZGVVUklDb21wb25lbnQiLCJzbGljZSIsImJlZ2luIiwicGFyZW50IiwicGllY2VzIiwiY2hpbGQiLCJjaGlsZFBhdGhPYmoiLCJjaGlsZFBpZWNlcyIsImlzRW1wdHkiLCJyZWxhdGl2ZVBhdGgiLCJvdXRlclBhdGgiLCJpbm5lclBhdGgiLCJvdXRlciIsImlubmVyIiwiY29tcGFyZVBhdGhzIiwibGVmdCIsInJpZ2h0IiwibGVmdEtleXMiLCJyaWdodEtleXMiLCJjbXAiLCJlcXVhbHMiLCJvdGhlciIsImoiLCJjb250YWlucyIsIlZhbGlkYXRpb25QYXRoIiwicGF0aCIsImVycm9yUHJlZml4XyIsInBhcnRzXyIsImJ5dGVMZW5ndGhfIiwibWF4IiwiY2hlY2tWYWxpZF8iLCJwb3AiLCJsYXN0IiwiTUFYX1BBVEhfTEVOR1RIX0JZVEVTIiwiTUFYX1BBVEhfREVQVEgiLCJ0b0Vycm9yU3RyaW5nIiwiRk9SR0VfRE9NQUlOIiwiV0VCU09DS0VUIiwiTE9OR19QT0xMSU5HIiwiUmVwb0luZm8iLCJob3N0Iiwic2VjdXJlIiwid2ViU29ja2V0T25seSIsIm5vZGVBZG1pbiIsInBlcnNpc3RlbmNlS2V5IiwiaW5jbHVkZU5hbWVzcGFjZUluUXVlcnlQYXJhbXMiLCJkb21haW4iLCJpbnRlcm5hbEhvc3QiLCJuZWVkc1F1ZXJ5UGFyYW0iLCJpc0N1c3RvbUhvc3QiLCJpc0NhY2hlYWJsZUhvc3QiLCJpc0RlbW9Ib3N0IiwidXBkYXRlSG9zdCIsIm5ld0hvc3QiLCJjb25uZWN0aW9uVVJMIiwicGFyYW1zIiwiY29ublVSTCIsInBhaXJzIiwidG9VUkxTdHJpbmciLCJwYXJzZVJlcG9JbmZvIiwiZGF0YVVSTCIsInBhcnNlZFVybCIsInBhcnNlRGF0YWJhc2VVUkwiLCJsb2NhdGlvbiIsInByb3RvY29sIiwic2NoZW1lIiwicmVwb0luZm8iLCJzdWJkb21haW4iLCJwb3J0IiwiY29sb25JbmQiLCJzbGFzaEluZCIsInF1ZXN0aW9uTWFya0luZCIsInBhdGhTdHJpbmdEZWNvZGVkIiwicGllY2UiLCJkZWNvZGVVUklDb21wb25lbnQiLCJyZXBsYWNlIiwiZGVjb2RlUGF0aCIsInF1ZXJ5UGFyYW1zIiwicXVlcnlTdHJpbmciLCJyZXN1bHRzIiwiY2hhckF0Iiwic2VnbWVudCIsImt2IiwiZGVjb2RlUXVlcnkiLCJob3N0V2l0aG91dFBvcnQiLCJkb3RJbmQiLCJJTlZBTElEX0tFWV9SRUdFWF8iLCJJTlZBTElEX1BBVEhfUkVHRVhfIiwiTUFYX0xFQUZfU0laRV8iLCJpc1ZhbGlkS2V5IiwiaXNWYWxpZFBhdGhTdHJpbmciLCJpc1ZhbGlkUHJpb3JpdHkiLCJwcmlvcml0eSIsInZhbGlkYXRlRmlyZWJhc2VEYXRhQXJnIiwiZm5OYW1lIiwiYXJndW1lbnROdW1iZXIiLCJ2YWxpZGF0ZUZpcmViYXNlRGF0YSIsImVycm9yUHJlZml4IiwicGF0aF8iLCJoYXNEb3RWYWx1ZV8xIiwiaGFzQWN0dWFsQ2hpbGRfMSIsInZhbGlkYXRlRmlyZWJhc2VNZXJnZURhdGFBcmciLCJlcnJvclByZWZpeCQxIiwibWVyZ2VQYXRocyIsImN1clBhdGgiLCJwcmV2UGF0aCIsInZhbGlkYXRlRmlyZWJhc2VNZXJnZVBhdGhzIiwidmFsaWRhdGVQcmlvcml0eSIsInZhbGlkYXRlRXZlbnRUeXBlIiwiZXZlbnRUeXBlIiwidmFsaWRhdGVLZXkiLCJ2YWxpZGF0ZVBhdGhTdHJpbmciLCJ2YWxpZGF0ZVJvb3RQYXRoU3RyaW5nIiwidmFsaWRhdGVXcml0YWJsZVBhdGgiLCJ2YWxpZGF0ZVVybCIsImlzVmFsaWRSb290UGF0aFN0cmluZyIsInZhbGlkYXRlQm9vbGVhbiIsImJvb2wiLCJPbkRpc2Nvbm5lY3QiLCJyZXBvXyIsImNhbmNlbCIsIm9uQ29tcGxldGUiLCJvbkRpc2Nvbm5lY3RDYW5jZWwiLCJ3cmFwQ2FsbGJhY2siLCJvbkRpc2Nvbm5lY3RTZXQiLCJzZXRXaXRoUHJpb3JpdHkiLCJvbkRpc2Nvbm5lY3RTZXRXaXRoUHJpb3JpdHkiLCJvYmplY3RUb01lcmdlIiwibmV3T2JqZWN0VG9NZXJnZSIsIm9uRGlzY29ubmVjdFVwZGF0ZSIsIlRyYW5zYWN0aW9uUmVzdWx0IiwiY29tbWl0dGVkIiwic25hcHNob3QiLCJ0b0pTT04iLCJuZXh0UHVzaElkIiwibm93IiwiZHVwbGljYXRlVGltZSIsInRpbWVTdGFtcENoYXJzIiwicmFuZG9tIiwiTmFtZWROb2RlIiwibm9kZSIsIldyYXAiLCJJbmRleCIsImdldENvbXBhcmUiLCJjb21wYXJlIiwiaW5kZXhlZFZhbHVlQ2hhbmdlZCIsIm9sZE5vZGUiLCJuZXdOb2RlIiwib2xkV3JhcHBlZCIsIm5ld1dyYXBwZWQiLCJtaW5Qb3N0IiwiTUlOIiwiS2V5SW5kZXgiLCJfc3VwZXIiLCJpc0RlZmluZWRPbiIsIm1heFBvc3QiLCJtYWtlUG9zdCIsImluZGV4VmFsdWUiLCJLRVlfSU5ERVgiLCJwcmlvcml0eUhhc2hUZXh0IiwidmFsaWRhdGVQcmlvcml0eU5vZGUiLCJwcmlvcml0eU5vZGUiLCJpc0xlYWZOb2RlIiwiZ2V0UHJpb3JpdHkiLCJMZWFmTm9kZSIsInZhbHVlXyIsInByaW9yaXR5Tm9kZV8iLCJsYXp5SGFzaF8iLCJ1cGRhdGVQcmlvcml0eSIsIm5ld1ByaW9yaXR5Tm9kZSIsImdldEltbWVkaWF0ZUNoaWxkIiwiY2hpbGROYW1lIiwiZ2V0Q2hpbGQiLCJoYXNDaGlsZCIsImdldFByZWRlY2Vzc29yQ2hpbGROYW1lIiwiY2hpbGROb2RlIiwidXBkYXRlSW1tZWRpYXRlQ2hpbGQiLCJuZXdDaGlsZE5vZGUiLCJ1cGRhdGVDaGlsZCIsImZyb250IiwibnVtQ2hpbGRyZW4iLCJmb3JFYWNoQ2hpbGQiLCJpbmRleCIsImFjdGlvbiIsImV4cG9ydEZvcm1hdCIsImdldFZhbHVlIiwiaGFzaCIsInRvSGFzaCIsImNvbXBhcmVUbyIsImNvbXBhcmVUb0xlYWZOb2RlXyIsIm90aGVyTGVhZiIsIm90aGVyTGVhZlR5cGUiLCJ0aGlzTGVhZlR5cGUiLCJvdGhlckluZGV4IiwiVkFMVUVfVFlQRV9PUkRFUiIsInRoaXNJbmRleCIsIndpdGhJbmRleCIsImlzSW5kZXhlZCIsIlBSSU9SSVRZX0lOREVYIiwiUHJpb3JpdHlJbmRleCIsImFQcmlvcml0eSIsImJQcmlvcml0eSIsImluZGV4Q21wIiwiU29ydGVkTWFwSXRlcmF0b3IiLCJzdGFydEtleSIsImNvbXBhcmF0b3IiLCJpc1JldmVyc2VfIiwicmVzdWx0R2VuZXJhdG9yXyIsIm5vZGVTdGFja18iLCJnZXROZXh0IiwicmVzdWx0IiwiaGFzTmV4dCIsInBlZWsiLCJMTFJCTm9kZSIsImNvbG9yIiwiUkVEIiwiU29ydGVkTWFwIiwiY29weSIsImNvdW50IiwiaW5vcmRlclRyYXZlcnNhbCIsInJldmVyc2VUcmF2ZXJzYWwiLCJtaW5fIiwibWluS2V5IiwibWF4S2V5IiwiaW5zZXJ0IiwibiIsImZpeFVwXyIsInJlbW92ZU1pbl8iLCJpc1JlZF8iLCJtb3ZlUmVkTGVmdF8iLCJzbWFsbGVzdCIsInJvdGF0ZVJpZ2h0XyIsIm1vdmVSZWRSaWdodF8iLCJyb3RhdGVMZWZ0XyIsImNvbG9yRmxpcF8iLCJubCIsIm5yIiwiY2hlY2tNYXhEZXB0aF8iLCJibGFja0RlcHRoIiwiY2hlY2tfIiwiQkxBQ0siLCJMTFJCRW1wdHlOb2RlIiwiY29tcGFyYXRvcl8iLCJyb290XyIsImdldFByZWRlY2Vzc29yS2V5IiwicmlnaHRQYXJlbnQiLCJnZXRJdGVyYXRvciIsInJlc3VsdEdlbmVyYXRvciIsImdldEl0ZXJhdG9yRnJvbSIsImdldFJldmVyc2VJdGVyYXRvckZyb20iLCJnZXRSZXZlcnNlSXRlcmF0b3IiLCJMT0dfMiIsIkJhc2UxMk51bSIsIm51bSIsImN1cnJlbnRfIiwibWFzayIsImJpdHNfIiwibmV4dEJpdElzT25lIiwiYnVpbGRDaGlsZFNldCIsImNoaWxkTGlzdCIsImtleUZuIiwibWFwU29ydEZuIiwiYnVpbGRCYWxhbmNlZFRyZWUiLCJsb3ciLCJoaWdoIiwibmFtZWROb2RlIiwibWlkZGxlIiwicm9vdCIsImJhc2UxMiIsImJ1aWxkUGVubmFudCIsImNodW5rU2l6ZSIsImNoaWxkVHJlZSIsImF0dGFjaFBlbm5hbnQiLCJwZW5uYW50IiwiaXNPbmUiLCJidWlsZEZyb20xMkFycmF5IiwiZmFsbGJhY2tPYmplY3QiLCJJbmRleE1hcCIsImluZGV4ZXNfIiwiaW5kZXhTZXRfIiwiaW5kZXhLZXkiLCJzb3J0ZWRNYXAiLCJoYXNJbmRleCIsImluZGV4RGVmaW5pdGlvbiIsImFkZEluZGV4IiwiZXhpc3RpbmdDaGlsZHJlbiIsIm5ld0luZGV4Iiwic2F3SW5kZXhlZFZhbHVlIiwiaXRlciIsImluZGV4TmFtZSIsIm5ld0luZGV4U2V0IiwibmV3SW5kZXhlcyIsImFkZFRvSW5kZXhlcyIsImluZGV4ZWRDaGlsZHJlbiIsImV4aXN0aW5nU25hcCIsIm5ld0NoaWxkcmVuIiwicmVtb3ZlRnJvbUluZGV4ZXMiLCJOQU1FX09OTFlfQ09NUEFSQVRPUiIsIk5BTUVfQ09NUEFSQVRPUiIsIkNoaWxkcmVuTm9kZSIsImNoaWxkcmVuXyIsImluZGV4TWFwXyIsIkRlZmF1bHQiLCJuZXdJbmRleE1hcCIsIm5ld1ByaW9yaXR5IiwibmV3SW1tZWRpYXRlQ2hpbGQiLCJudW1LZXlzIiwiYWxsSW50ZWdlcktleXMiLCJhcnJheSIsInRvSGFzaF8xIiwiY2hpbGRIYXNoIiwiaWR4IiwicmVzb2x2ZUluZGV4XyIsInByZWRlY2Vzc29yIiwiZ2V0Rmlyc3RDaGlsZE5hbWUiLCJnZXRGaXJzdENoaWxkIiwiZ2V0TGFzdENoaWxkTmFtZSIsImdldExhc3RDaGlsZCIsIndyYXBwZWROb2RlIiwic3RhcnRQb3N0IiwiaXRlcmF0b3IiLCJlbmRQb3N0IiwiTUFYX05PREUkMiIsIm90aGVyQ2hpbGRyZW5Ob2RlIiwidGhpc0l0ZXIiLCJvdGhlckl0ZXIiLCJ0aGlzQ3VycmVudCIsIm90aGVyQ3VycmVudCIsIk1heE5vZGUiLCJub2RlRnJvbUpTT04kMSIsImpzb24iLCJub2RlXzEiLCJjaGlsZERhdGEiLCJjaGlsZHJlbl8xIiwiY2hpbGRyZW5IYXZlUHJpb3JpdHlfMSIsImNoaWxkU2V0Iiwic29ydGVkQ2hpbGRTZXQiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiTUFYIiwic2V0Tm9kZUZyb21KU09OIiwiX19yZWZlcmVuY2VDb25zdHJ1Y3RvciIsIlZBTFVFX0lOREVYIiwiVmFsdWVJbmRleCIsInZhbHVlTm9kZSIsIlBhdGhJbmRleCIsImluZGV4UGF0aF8iLCJleHRyYWN0Q2hpbGQiLCJzbmFwIiwiYUNoaWxkIiwiYkNoaWxkIiwiRGF0YVNuYXBzaG90Iiwibm9kZV8iLCJyZWZfIiwiaW5kZXhfIiwiZXhwb3J0VmFsIiwiZXhpc3RzIiwiY2hpbGRQYXRoU3RyaW5nIiwiY2hpbGRQYXRoIiwiY2hpbGRSZWYiLCJmb3JFYWNoIiwiY2hpbGRyZW5Ob2RlIiwiaGFzQ2hpbGRyZW4iLCJnZXRLZXkiLCJnZXRSZWYiLCJEYXRhRXZlbnQiLCJldmVudFJlZ2lzdHJhdGlvbiIsInByZXZOYW1lIiwiZ2V0UGF0aCIsInJlZiIsImdldFBhcmVudCIsImdldEV2ZW50VHlwZSIsImdldEV2ZW50UnVubmVyIiwiQ2FuY2VsRXZlbnQiLCJWYWx1ZUV2ZW50UmVnaXN0cmF0aW9uIiwiY2FsbGJhY2tfIiwiY2FuY2VsQ2FsbGJhY2tfIiwiY29udGV4dF8iLCJyZXNwb25kc1RvIiwiY3JlYXRlRXZlbnQiLCJjaGFuZ2UiLCJxdWVyeSIsImdldFF1ZXJ5UGFyYW1zIiwiZ2V0SW5kZXgiLCJzbmFwc2hvdE5vZGUiLCJldmVudERhdGEiLCJjdHgiLCJjYW5jZWxDQl8xIiwiY2JfMSIsImNyZWF0ZUNhbmNlbEV2ZW50IiwibWF0Y2hlcyIsImhhc0FueUNhbGxiYWNrIiwiQ2hpbGRFdmVudFJlZ2lzdHJhdGlvbiIsImNhbGxiYWNrc18iLCJldmVudFRvQ2hlY2siLCJjYW5jZWxDQl8yIiwiY2JfMiIsIm90aGVyS2V5cyIsInRoaXNLZXlzIiwib3RoZXJDb3VudCIsIm90aGVyS2V5IiwidGhpc0tleSIsImV2ZXJ5IiwiUXVlcnkiLCJyZXBvIiwicXVlcnlQYXJhbXNfIiwib3JkZXJCeUNhbGxlZF8iLCJ2YWxpZGF0ZVF1ZXJ5RW5kcG9pbnRzXyIsInN0YXJ0Tm9kZSIsImVuZE5vZGUiLCJoYXNTdGFydCIsImdldEluZGV4U3RhcnRWYWx1ZSIsImhhc0VuZCIsImdldEluZGV4RW5kVmFsdWUiLCJ0b29NYW55QXJnc0Vycm9yIiwid3JvbmdBcmdUeXBlRXJyb3IiLCJnZXRJbmRleFN0YXJ0TmFtZSIsImdldEluZGV4RW5kTmFtZSIsInZhbGlkYXRlTGltaXRfIiwiaGFzTGltaXQiLCJoYXNBbmNob3JlZExpbWl0IiwidmFsaWRhdGVOb1ByZXZpb3VzT3JkZXJCeUNhbGxfIiwib24iLCJjYWxsYmFjayIsImNhbmNlbENhbGxiYWNrT3JDb250ZXh0IiwiY29udGV4dCIsInJldCIsImdldENhbmNlbEFuZENvbnRleHRBcmdzXyIsIm9uVmFsdWVFdmVudCIsImNhbGxiYWNrcyIsIm9uQ2hpbGRFdmVudCIsImNhbmNlbENhbGxiYWNrIiwiYWRkRXZlbnRDYWxsYmFja0ZvclF1ZXJ5Iiwib2ZmIiwidmFsdWVDYWxsYmFjayIsInJlbW92ZUV2ZW50Q2FsbGJhY2tGb3JRdWVyeSIsIm9uY2UiLCJ1c2VyQ2FsbGJhY2siLCJmYWlsdXJlQ2FsbGJhY2tPckNvbnRleHQiLCJmaXJzdENhbGwiLCJjYXRjaCIsIm9uY2VDYWxsYmFjayIsImxpbWl0VG9GaXJzdCIsImxpbWl0IiwibGltaXRUb0xhc3QiLCJvcmRlckJ5Q2hpbGQiLCJwYXJzZWRQYXRoIiwibmV3UGFyYW1zIiwib3JkZXJCeSIsIm9yZGVyQnlLZXkiLCJvcmRlckJ5UHJpb3JpdHkiLCJvcmRlckJ5VmFsdWUiLCJzdGFydEF0IiwiZW5kQXQiLCJlcXVhbFRvIiwicXVlcnlPYmplY3QiLCJnZXRRdWVyeU9iamVjdCIsInF1ZXJ5SWRlbnRpZmllciIsImlzRXF1YWwiLCJzYW1lUmVwbyIsInNhbWVQYXRoIiwic2FtZVF1ZXJ5SWRlbnRpZmllciIsImNhbmNlbE9yQ29udGV4dCIsIkV4aXN0aW5nVmFsdWVQcm92aWRlciIsIkRlZmVycmVkVmFsdWVQcm92aWRlciIsInN5bmNUcmVlIiwic3luY1RyZWVfIiwiY2FsY0NvbXBsZXRlRXZlbnRDYWNoZSIsInJlc29sdmVEZWZlcnJlZExlYWZWYWx1ZSIsImV4aXN0aW5nVmFsIiwic2VydmVyVmFsdWVzIiwicmVzb2x2ZVNjYWxhckRlZmVycmVkVmFsdWUiLCJyZXNvbHZlQ29tcGxleERlZmVycmVkVmFsdWUiLCJKU09OIiwic3RyaW5naWZ5Iiwib3AiLCJleGlzdGluZyIsInVudXNlZCIsImRlbHRhIiwiZXhpc3RpbmdOb2RlIiwicmVzb2x2ZURlZmVycmVkVmFsdWVUcmVlIiwicmVzb2x2ZURlZmVycmVkVmFsdWUiLCJyZXNvbHZlRGVmZXJyZWRWYWx1ZVNuYXBzaG90IiwicmF3UHJpIiwibGVhZk5vZGUiLCJPcGVyYXRpb25UeXBlIiwiU3BhcnNlU25hcHNob3RUcmVlIiwiY2hpbGRyZW4iLCJmaW5kIiwic2l6ZSIsImNoaWxkS2V5IiwicmVtZW1iZXIiLCJjbGVhciIsImZvcmdldCIsInNlbGZfMSIsInRyZWUiLCJmb3JFYWNoVHJlZSIsInByZWZpeFBhdGgiLCJmdW5jIiwiZW1wdHlDaGlsZHJlblNpbmdsZXRvbiIsIl9fcmVmZXJlbmNlQ29uc3RydWN0b3IkMSIsIk9wZXJhdGlvblNvdXJjZSIsImZyb21Vc2VyIiwiZnJvbVNlcnZlciIsInF1ZXJ5SWQiLCJ0YWdnZWQiLCJVc2VyIiwiU2VydmVyIiwiZm9yU2VydmVyVGFnZ2VkUXVlcnkiLCJBY2tVc2VyV3JpdGUiLCJhZmZlY3RlZFRyZWUiLCJyZXZlcnQiLCJBQ0tfVVNFUl9XUklURSIsInNvdXJjZSIsIm9wZXJhdGlvbkZvckNoaWxkIiwic3VidHJlZSIsIkVtcHR5IiwiSW1tdXRhYmxlVHJlZSIsImZyb21PYmplY3QiLCJjaGlsZFNuYXAiLCJmaW5kUm9vdE1vc3RNYXRjaGluZ1BhdGhBbmRWYWx1ZSIsInByZWRpY2F0ZSIsImNoaWxkRXhpc3RpbmdQYXRoQW5kVmFsdWUiLCJmaW5kUm9vdE1vc3RWYWx1ZUFuZFBhdGgiLCJ0b1NldCIsIm5ld0NoaWxkIiwic2V0VHJlZSIsIm5ld1RyZWUiLCJmb2xkIiwiZm9sZF8iLCJwYXRoU29GYXIiLCJhY2N1bSIsImZpbmRPblBhdGgiLCJmaW5kT25QYXRoXyIsInBhdGhUb0ZvbGxvdyIsIm5leHRDaGlsZCIsImZvcmVhY2hPblBhdGgiLCJmb3JlYWNoT25QYXRoXyIsImN1cnJlbnRSZWxhdGl2ZVBhdGgiLCJmb3JlYWNoIiwiZm9yZWFjaF8iLCJmb3JlYWNoQ2hpbGQiLCJMaXN0ZW5Db21wbGV0ZSIsIkxJU1RFTl9DT01QTEVURSIsIk92ZXJ3cml0ZSIsIk9WRVJXUklURSIsIk1lcmdlIiwiTUVSR0UiLCJDYWNoZU5vZGUiLCJmdWxseUluaXRpYWxpemVkXyIsImZpbHRlcmVkXyIsImlzRnVsbHlJbml0aWFsaXplZCIsImlzRmlsdGVyZWQiLCJpc0NvbXBsZXRlRm9yUGF0aCIsImlzQ29tcGxldGVGb3JDaGlsZCIsImdldE5vZGUiLCJWaWV3Q2FjaGUiLCJldmVudENhY2hlXyIsInNlcnZlckNhY2hlXyIsInVwZGF0ZUV2ZW50U25hcCIsImV2ZW50U25hcCIsImNvbXBsZXRlIiwiZmlsdGVyZWQiLCJ1cGRhdGVTZXJ2ZXJTbmFwIiwic2VydmVyU25hcCIsImdldEV2ZW50Q2FjaGUiLCJnZXRDb21wbGV0ZUV2ZW50U25hcCIsImdldFNlcnZlckNhY2hlIiwiZ2V0Q29tcGxldGVTZXJ2ZXJTbmFwIiwiQ2hhbmdlIiwib2xkU25hcCIsInZhbHVlQ2hhbmdlIiwiVkFMVUUiLCJjaGlsZEFkZGVkQ2hhbmdlIiwiQ0hJTERfQURERUQiLCJjaGlsZFJlbW92ZWRDaGFuZ2UiLCJDSElMRF9SRU1PVkVEIiwiY2hpbGRDaGFuZ2VkQ2hhbmdlIiwibmV3U25hcHNob3QiLCJvbGRTbmFwc2hvdCIsIkNISUxEX0NIQU5HRUQiLCJjaGlsZE1vdmVkQ2hhbmdlIiwiQ0hJTERfTU9WRUQiLCJJbmRleGVkRmlsdGVyIiwiYWZmZWN0ZWRQYXRoIiwib3B0Q2hhbmdlQWNjdW11bGF0b3IiLCJvbGRDaGlsZCIsInRyYWNrQ2hpbGRDaGFuZ2UiLCJ1cGRhdGVGdWxsTm9kZSIsIm5ld1NuYXAiLCJmaWx0ZXJzTm9kZXMiLCJnZXRJbmRleGVkRmlsdGVyIiwiQ2hpbGRDaGFuZ2VBY2N1bXVsYXRvciIsImNoYW5nZU1hcCIsIm9sZENoYW5nZSIsIm9sZFR5cGUiLCJnZXRDaGFuZ2VzIiwiTk9fQ09NUExFVEVfQ0hJTERfU09VUkNFIiwiTm9Db21wbGV0ZUNoaWxkU291cmNlXyIsImdldENvbXBsZXRlQ2hpbGQiLCJnZXRDaGlsZEFmdGVyQ2hpbGQiLCJXcml0ZVRyZWVDb21wbGV0ZUNoaWxkU291cmNlIiwid3JpdGVzXyIsInZpZXdDYWNoZV8iLCJvcHRDb21wbGV0ZVNlcnZlckNhY2hlXyIsInNlcnZlck5vZGUiLCJjYWxjQ29tcGxldGVDaGlsZCIsImNvbXBsZXRlU2VydmVyRGF0YSIsIm5vZGVzIiwiY2FsY0luZGV4ZWRTbGljZSIsIlByb2Nlc3NvclJlc3VsdCIsInZpZXdDYWNoZSIsImNoYW5nZXMiLCJWaWV3UHJvY2Vzc29yIiwiZmlsdGVyXyIsImFzc2VydEluZGV4ZWQiLCJhcHBseU9wZXJhdGlvbiIsIm9sZFZpZXdDYWNoZSIsIm9wZXJhdGlvbiIsIndyaXRlc0NhY2hlIiwiY29tcGxldGVDYWNoZSIsIm5ld1ZpZXdDYWNoZSIsImZpbHRlclNlcnZlck5vZGUiLCJhY2N1bXVsYXRvciIsIm92ZXJ3cml0ZSIsImFwcGx5VXNlck92ZXJ3cml0ZV8iLCJhcHBseVNlcnZlck92ZXJ3cml0ZV8iLCJtZXJnZSIsImFwcGx5VXNlck1lcmdlXyIsImFwcGx5U2VydmVyTWVyZ2VfIiwiYWNrVXNlcldyaXRlIiwicmV2ZXJ0VXNlcldyaXRlXyIsImFja1VzZXJXcml0ZV8iLCJsaXN0ZW5Db21wbGV0ZV8iLCJtYXliZUFkZFZhbHVlRXZlbnRfIiwiaXNMZWFmT3JFbXB0eSIsIm9sZENvbXBsZXRlU25hcCIsImdlbmVyYXRlRXZlbnRDYWNoZUFmdGVyU2VydmVyRXZlbnRfIiwiY2hhbmdlUGF0aCIsIm9sZEV2ZW50U25hcCIsInNoYWRvd2luZ1dyaXRlIiwibmV3RXZlbnRDYWNoZSIsInNlcnZlckNhY2hlIiwiY29tcGxldGVDaGlsZHJlbiIsImNvbXBsZXRlRXZlbnRDaGlsZHJlbiIsImNhbGNDb21wbGV0ZUV2ZW50Q2hpbGRyZW4iLCJjb21wbGV0ZU5vZGUiLCJvbGRFdmVudE5vZGUiLCJ1cGRhdGVkUHJpb3JpdHkiLCJjYWxjRXZlbnRDYWNoZUFmdGVyU2VydmVyT3ZlcndyaXRlIiwiY2hpbGRDaGFuZ2VQYXRoIiwibmV3RXZlbnRDaGlsZCIsImV2ZW50Q2hpbGRVcGRhdGUiLCJjaGFuZ2VkU25hcCIsIm5ld1NlcnZlckNhY2hlIiwib2xkU2VydmVyU25hcCIsInNlcnZlckZpbHRlciIsIm5ld1NlcnZlck5vZGUiLCJuZXdFdmVudFNuYXAiLCJjYWNoZUhhc0NoaWxkXyIsImNoYW5nZWRDaGlsZHJlbiIsImN1clZpZXdDYWNoZSIsIndyaXRlUGF0aCIsImFwcGx5TWVyZ2VfIiwidmlld01lcmdlVHJlZSIsInNlcnZlckNoaWxkIiwiY2hpbGRNZXJnZVRyZWUiLCJpc1Vua25vd25EZWVwTWVyZ2UiLCJhY2tQYXRoIiwiY2hhbmdlZENoaWxkcmVuXzEiLCJjaGFuZ2VkQ2hpbGRyZW5fMiIsIm1lcmdlUGF0aCIsInNlcnZlckNhY2hlUGF0aCIsIm9sZFNlcnZlck5vZGUiLCJjb21wbGV0ZVNlcnZlckNhY2hlIiwib2xkRXZlbnRDYWNoZSIsInNlcnZlckNoaWxkcmVuIiwiRXZlbnRHZW5lcmF0b3IiLCJxdWVyeV8iLCJnZW5lcmF0ZUV2ZW50c0ZvckNoYW5nZXMiLCJldmVudENhY2hlIiwiZXZlbnRSZWdpc3RyYXRpb25zIiwiZXZlbnRzIiwibW92ZXMiLCJnZW5lcmF0ZUV2ZW50c0ZvclR5cGVfIiwicmVnaXN0cmF0aW9ucyIsImZpbHRlcmVkQ2hhbmdlcyIsImNvbXBhcmVDaGFuZ2VzXyIsIm1hdGVyaWFsaXplZENoYW5nZSIsIm1hdGVyaWFsaXplU2luZ2xlQ2hhbmdlXyIsInJlZ2lzdHJhdGlvbiIsImFXcmFwcGVkIiwiYldyYXBwZWQiLCJWaWV3IiwiaW5pdGlhbFZpZXdDYWNoZSIsImV2ZW50UmVnaXN0cmF0aW9uc18iLCJpbmRleEZpbHRlciIsImdldE5vZGVGaWx0ZXIiLCJwcm9jZXNzb3JfIiwiaW5pdGlhbFNlcnZlckNhY2hlIiwiaW5pdGlhbEV2ZW50Q2FjaGUiLCJldmVudEdlbmVyYXRvcl8iLCJnZXRRdWVyeSIsImdldENvbXBsZXRlU2VydmVyQ2FjaGUiLCJjYWNoZSIsImxvYWRzQWxsRGF0YSIsImFkZEV2ZW50UmVnaXN0cmF0aW9uIiwicmVtb3ZlRXZlbnRSZWdpc3RyYXRpb24iLCJjYW5jZWxFcnJvciIsImNhbmNlbEV2ZW50cyIsInBhdGhfMSIsIm1heWJlRXZlbnQiLCJyZW1haW5pbmciLCJjb25jYXQiLCJnZW5lcmF0ZUV2ZW50c0ZvckNoYW5nZXNfIiwiZ2V0SW5pdGlhbEV2ZW50cyIsImluaXRpYWxDaGFuZ2VzIiwiU3luY1BvaW50Iiwidmlld3MiLCJvcHRDb21wbGV0ZVNlcnZlckNhY2hlIiwidmlldyIsInNlcnZlckNhY2hlQ29tcGxldGUiLCJldmVudENhY2hlQ29tcGxldGUiLCJlXzIiLCJyZW1vdmVkIiwiaGFkQ29tcGxldGVWaWV3IiwiaGFzQ29tcGxldGVWaWV3Iiwidmlld1F1ZXJ5SWQiLCJlXzJfMSIsImdldFF1ZXJ5Vmlld3MiLCJlXzMiLCJlXzNfMSIsImVfNCIsImVfNF8xIiwidmlld0ZvclF1ZXJ5IiwiZ2V0Q29tcGxldGVWaWV3Iiwidmlld0V4aXN0c0ZvclF1ZXJ5IiwiZV81IiwiZV81XzEiLCJDb21wb3VuZFdyaXRlIiwid3JpdGVUcmVlXyIsImFkZFdyaXRlIiwicm9vdG1vc3QiLCJyb290TW9zdFBhdGgiLCJhZGRXcml0ZXMiLCJ1cGRhdGVzIiwibmV3V3JpdGUiLCJyZW1vdmVXcml0ZSIsImhhc0NvbXBsZXRlV3JpdGUiLCJnZXRDb21wbGV0ZU5vZGUiLCJnZXRDb21wbGV0ZUNoaWxkcmVuIiwiY2hpbGRDb21wb3VuZFdyaXRlIiwic2hhZG93aW5nTm9kZSIsImFwcGx5U3VidHJlZVdyaXRlIiwid3JpdGVUcmVlIiwicHJpb3JpdHlXcml0ZV8xIiwiV3JpdGVUcmVlIiwidmlzaWJsZVdyaXRlc18iLCJhbGxXcml0ZXNfIiwibGFzdFdyaXRlSWRfIiwiY2hpbGRXcml0ZXMiLCJXcml0ZVRyZWVSZWYiLCJhZGRPdmVyd3JpdGUiLCJ3cml0ZUlkIiwidmlzaWJsZSIsImFkZE1lcmdlIiwiZ2V0V3JpdGUiLCJyZWNvcmQiLCJmaW5kSW5kZXgiLCJ3cml0ZVRvUmVtb3ZlIiwic3BsaWNlIiwicmVtb3ZlZFdyaXRlV2FzVmlzaWJsZSIsInJlbW92ZWRXcml0ZU92ZXJsYXBzV2l0aE90aGVyV3JpdGVzIiwiY3VycmVudFdyaXRlIiwicmVjb3JkQ29udGFpbnNQYXRoXyIsInJlc2V0VHJlZV8iLCJnZXRDb21wbGV0ZVdyaXRlRGF0YSIsInRyZWVQYXRoIiwid3JpdGVJZHNUb0V4Y2x1ZGUiLCJpbmNsdWRlSGlkZGVuV3JpdGVzIiwibWVyZ2VBdFBhdGgiLCJsYXllclRyZWVfIiwid3JpdGUiLCJsYXllcmVkQ2FjaGUiLCJzdWJNZXJnZSIsImNvbXBsZXRlU2VydmVyQ2hpbGRyZW4iLCJ0b3BMZXZlbFNldCIsIm1lcmdlXzEiLCJleGlzdGluZ0V2ZW50U25hcCIsImV4aXN0aW5nU2VydmVyU25hcCIsImNoaWxkTWVyZ2UiLCJ0b0l0ZXJhdGUiLCJ3cml0ZVJlY29yZCIsIkRlZmF1bHRGaWx0ZXJfIiwid3JpdGVzIiwidHJlZVJvb3QiLCJjb21wb3VuZFdyaXRlIiwiZGVlcE5vZGUiLCJ0cmVlUGF0aF8iLCJleGlzdGluZ1NlcnZlckNhY2hlIiwiU3luY1RyZWUiLCJsaXN0ZW5Qcm92aWRlcl8iLCJzeW5jUG9pbnRUcmVlXyIsInBlbmRpbmdXcml0ZVRyZWVfIiwidGFnVG9RdWVyeU1hcCIsInF1ZXJ5VG9UYWdNYXAiLCJhcHBseVVzZXJPdmVyd3JpdGUiLCJuZXdEYXRhIiwiYXBwbHlPcGVyYXRpb25Ub1N5bmNQb2ludHNfIiwiYXBwbHlVc2VyTWVyZ2UiLCJjaGFuZ2VUcmVlIiwiYWZmZWN0ZWRUcmVlXzEiLCJhcHBseVNlcnZlck92ZXJ3cml0ZSIsImFwcGx5U2VydmVyTWVyZ2UiLCJhcHBseUxpc3RlbkNvbXBsZXRlIiwiYXBwbHlUYWdnZWRRdWVyeU92ZXJ3cml0ZSIsInRhZyIsInF1ZXJ5S2V5IiwicXVlcnlLZXlGb3JUYWdfIiwiciIsInBhcnNlUXVlcnlLZXlfIiwicXVlcnlQYXRoIiwiYXBwbHlUYWdnZWRPcGVyYXRpb25fIiwiYXBwbHlUYWdnZWRRdWVyeU1lcmdlIiwiYXBwbHlUYWdnZWRMaXN0ZW5Db21wbGV0ZSIsImZvdW5kQW5jZXN0b3JEZWZhdWx0VmlldyIsInBhdGhUb1N5bmNQb2ludCIsInNwIiwic3luY1BvaW50IiwiY2hpbGRTeW5jUG9pbnQiLCJ2aWV3QWxyZWFkeUV4aXN0cyIsIm1ha2VRdWVyeUtleV8iLCJnZXROZXh0UXVlcnlUYWdfIiwic2V0dXBMaXN0ZW5lcl8iLCJtYXliZVN5bmNQb2ludCIsInJlbW92ZWRBbmRFdmVudHMiLCJyZW1vdmluZ0RlZmF1bHQiLCJjb3ZlcmVkIiwicGFyZW50U3luY1BvaW50IiwibmV3Vmlld3MiLCJjb2xsZWN0RGlzdGluY3RWaWV3c0ZvclN1YlRyZWVfIiwibmV3UXVlcnkiLCJsaXN0ZW5lciIsImNyZWF0ZUxpc3RlbmVyRm9yVmlld18iLCJzdGFydExpc3RlbmluZyIsInF1ZXJ5Rm9yTGlzdGVuaW5nXyIsInRhZ0ZvclF1ZXJ5XyIsImhhc2hGbiIsInN0b3BMaXN0ZW5pbmciLCJxdWVyeVRvUmVtb3ZlIiwidGFnVG9SZW1vdmUiLCJyZW1vdmVUYWdzXyIsIm1heWJlQ2hpbGRTeW5jUG9pbnQiLCJjaGlsZE1hcCIsInZpZXdzXzEiLCJfa2V5IiwiY2hpbGRWaWV3cyIsInF1ZXJpZXMiLCJyZW1vdmVkUXVlcnkiLCJyZW1vdmVkUXVlcnlLZXkiLCJyZW1vdmVkUXVlcnlUYWciLCJpc0RlZmF1bHQiLCJxdWVyaWVzVG9TdG9wIiwicXVlcmllc18xIiwiY2hpbGRRdWVyaWVzIiwicXVlcnlUb1N0b3AiLCJzdGF0dXMiLCJjb2RlIiwicmVhc29uIiwidG9VcHBlckNhc2UiLCJlcnJvckZvclNlcnZlckNvZGUiLCJzcGxpdEluZGV4IiwibmV4dFF1ZXJ5VGFnXyIsImFwcGx5T3BlcmF0aW9uSGVscGVyXyIsInN5bmNQb2ludFRyZWUiLCJhcHBseU9wZXJhdGlvbkRlc2NlbmRhbnRzSGVscGVyXyIsImNoaWxkT3BlcmF0aW9uIiwiY2hpbGRTZXJ2ZXJDYWNoZSIsImNoaWxkV3JpdGVzQ2FjaGUiLCJTbmFwc2hvdEhvbGRlciIsInJvb3ROb2RlXyIsInVwZGF0ZVNuYXBzaG90IiwibmV3U25hcHNob3ROb2RlIiwiU3RhdHNDb2xsZWN0aW9uIiwiY291bnRlcnNfIiwiaW5jcmVtZW50Q291bnRlciIsImFtb3VudCIsIlN0YXRzTWFuYWdlciIsImdldENvbGxlY3Rpb24iLCJoYXNoU3RyaW5nIiwiY29sbGVjdGlvbnNfIiwiZ2V0T3JDcmVhdGVSZXBvcnRlciIsImNyZWF0b3JGdW5jdGlvbiIsInJlcG9ydGVyc18iLCJTdGF0c0xpc3RlbmVyIiwiY29sbGVjdGlvbl8iLCJsYXN0XyIsIm5ld1N0YXRzIiwic3RhdCIsIlN0YXRzUmVwb3J0ZXIiLCJjb2xsZWN0aW9uIiwic2VydmVyXyIsInN0YXRzVG9SZXBvcnRfIiwic3RhdHNMaXN0ZW5lcl8iLCJyZXBvcnRTdGF0c18iLCJpbmNsdWRlU3RhdCIsInN0YXRzIiwicmVwb3J0ZWRTdGF0cyIsImhhdmVTdGF0c1RvUmVwb3J0IiwicmVwb3J0U3RhdHMiLCJFdmVudFF1ZXVlIiwiZXZlbnRMaXN0c18iLCJyZWN1cnNpb25EZXB0aF8iLCJxdWV1ZUV2ZW50cyIsImV2ZW50RGF0YUxpc3QiLCJjdXJyTGlzdCIsImV2ZW50UGF0aCIsIkV2ZW50TGlzdCIsImFkZCIsInJhaXNlRXZlbnRzQXRQYXRoIiwicmFpc2VRdWV1ZWRFdmVudHNNYXRjaGluZ1ByZWRpY2F0ZV8iLCJyYWlzZUV2ZW50c0ZvckNoYW5nZWRQYXRoIiwiY2hhbmdlZFBhdGgiLCJzZW50QWxsIiwiZXZlbnRMaXN0IiwicmFpc2UiLCJldmVudHNfIiwiZXZlbnRGbiIsIkV2ZW50RW1pdHRlciIsImFsbG93ZWRFdmVudHNfIiwibGlzdGVuZXJzXyIsInRyaWdnZXIiLCJsaXN0ZW5lcnMiLCJ2YWxpZGF0ZUV2ZW50VHlwZV8iLCJnZXRJbml0aWFsRXZlbnQiLCJldCIsIlZpc2liaWxpdHlNb25pdG9yIiwiaGlkZGVuIiwidmlzaWJpbGl0eUNoYW5nZSIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsInZpc2libGVfIiwiZ2V0SW5zdGFuY2UiLCJPbmxpbmVNb25pdG9yIiwib25saW5lXyIsImN1cnJlbnRseU9ubGluZSIsIlBhY2tldFJlY2VpdmVyIiwib25NZXNzYWdlXyIsInBlbmRpbmdSZXNwb25zZXMiLCJjdXJyZW50UmVzcG9uc2VOdW0iLCJjbG9zZUFmdGVyUmVzcG9uc2UiLCJvbkNsb3NlIiwiY2xvc2VBZnRlciIsInJlc3BvbnNlTnVtIiwiaGFuZGxlUmVzcG9uc2UiLCJyZXF1ZXN0TnVtIiwiX2xvb3BfMSIsInRvUHJvY2VzcyIsInRoaXNfMSIsIl9sb29wXzIiLCJGSVJFQkFTRV9MT05HUE9MTF9TVEFSVF9QQVJBTSIsIkZJUkVCQVNFX0xPTkdQT0xMX0NMT1NFX0NPTU1BTkQiLCJCcm93c2VyUG9sbENvbm5lY3Rpb24iLCJjb25uSWQiLCJhcHBsaWNhdGlvbklkIiwidHJhbnNwb3J0U2Vzc2lvbklkIiwibGFzdFNlc3Npb25JZCIsImJ5dGVzU2VudCIsImJ5dGVzUmVjZWl2ZWQiLCJldmVyQ29ubmVjdGVkXyIsImxvZ18iLCJzdGF0c18iLCJ1cmxGbiIsIm9wZW4iLCJvbk1lc3NhZ2UiLCJvbkRpc2Nvbm5lY3QiLCJjdXJTZWdtZW50TnVtIiwib25EaXNjb25uZWN0XyIsIm15UGFja2V0T3JkZXJlciIsImlzQ2xvc2VkXyIsImNvbm5lY3RUaW1lb3V0VGltZXJfIiwib25DbG9zZWRfIiwicmVhZHlTdGF0ZSIsImNhbGxlZF8xIiwid3JhcHBlZEZuXzEiLCJib2R5IiwiYXR0YWNoRXZlbnQiLCJleGVjdXRlV2hlbkRPTVJlYWR5Iiwic2NyaXB0VGFnSG9sZGVyIiwiRmlyZWJhc2VJRnJhbWVTY3JpcHRIb2xkZXIiLCJjb21tYW5kIiwiYXJnMSIsImFyZzIiLCJpbmNyZW1lbnRJbmNvbWluZ0J5dGVzXyIsImNsZWFyVGltZW91dCIsInBhc3N3b3JkIiwic2VuZE5ld1BvbGxzIiwicE4iLCJ1cmxQYXJhbXMiLCJ1bmlxdWVDYWxsYmFja0lkZW50aWZpZXIiLCJocmVmIiwiY29ubmVjdFVSTCIsImFkZFRhZyIsInN0YXJ0Iiwic3RhcnRMb25nUG9sbCIsImFkZERpc2Nvbm5lY3RQaW5nRnJhbWUiLCJmb3JjZUFsbG93IiwiZm9yY2VBbGxvd18iLCJmb3JjZURpc2FsbG93IiwiZm9yY2VEaXNhbGxvd18iLCJpc0F2YWlsYWJsZSIsImNyZWF0ZUVsZW1lbnQiLCJXaW5kb3dzIiwiVUkiLCJtYXJrQ29ubmVjdGlvbkhlYWx0aHkiLCJzaHV0ZG93bl8iLCJjbG9zZSIsIm15RGlzY29ubkZyYW1lIiwicmVtb3ZlQ2hpbGQiLCJzZW5kIiwiZGF0YVN0ciIsImJhc2U2NGRhdGEiLCJNQVhfVVJMX0RBVEFfU0laRSIsImVucXVldWVTZWdtZW50IiwicHciLCJzcmMiLCJzdHlsZSIsImRpc3BsYXkiLCJhcHBlbmRDaGlsZCIsImNvbW1hbmRDQiIsIm9uTWVzc2FnZUNCIiwib3V0c3RhbmRpbmdSZXF1ZXN0cyIsIlNldCIsInBlbmRpbmdTZWdzIiwiY3VycmVudFNlcmlhbCIsIm15SUZyYW1lIiwiY3JlYXRlSUZyYW1lXyIsInNjcmlwdCIsImlmcmFtZUNvbnRlbnRzIiwiZG9jIiwiaWZyYW1lIiwiY29udGVudFdpbmRvdyIsImNvbnRlbnREb2N1bWVudCIsImFsaXZlIiwiaW5uZXJIVE1MIiwibXlJRCIsIm15UFciLCJuZXdSZXF1ZXN0XyIsInRoZVVSTCIsImN1ckRhdGFTdHJpbmciLCJkIiwidGhlU2VnIiwic2hpZnQiLCJzZWciLCJ0cyIsImFkZExvbmdQb2xsVGFnXyIsInNlZ251bSIsInRvdGFsc2VncyIsInVybCIsInNlcmlhbCIsImRvTmV3UmVxdWVzdCIsImtlZXBhbGl2ZVRpbWVvdXQiLCJsb2FkQ0IiLCJkb05vZGVMb25nUG9sbCIsIm5ld1NjcmlwdF8xIiwiYXN5bmMiLCJvbmxvYWQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyc3RhdGUiLCJwYXJlbnROb2RlIiwib25lcnJvciIsInNldFNES1ZlcnNpb24iLCJXZWJTb2NrZXRJbXBsIiwiTW96V2ViU29ja2V0IiwiV2ViU29ja2V0IiwiV2ViU29ja2V0Q29ubmVjdGlvbiIsImtlZXBhbGl2ZVRpbWVyIiwiZnJhbWVzIiwidG90YWxGcmFtZXMiLCJjb25uZWN0aW9uVVJMXyIsImRldmljZSIsImhlYWRlcnMiLCJwcm9jZXNzIiwicGxhdGZvcm0iLCJlbnYiLCJwcm94eSIsIm9yaWdpbiIsIm15U29jayIsIm9ub3BlbiIsIm9uY2xvc2UiLCJvbm1lc3NhZ2UiLCJtIiwiaGFuZGxlSW5jb21pbmdGcmFtZSIsImlzT2xkQW5kcm9pZCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIm9sZEFuZHJvaWRNYXRjaCIsInBhcnNlRmxvYXQiLCJwcmV2aW91c2x5RmFpbGVkIiwiYXBwZW5kRnJhbWVfIiwiZnVsbE1lc3MiLCJqc29uTWVzcyIsImhhbmRsZU5ld0ZyYW1lQ291bnRfIiwiZnJhbWVDb3VudCIsImV4dHJhY3RGcmFtZUNvdW50XyIsImlzTmFOIiwibWVzcyIsInJlc2V0S2VlcEFsaXZlIiwicmVtYWluaW5nRGF0YSIsInNlbmRTdHJpbmdfIiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwicmVzcG9uc2VzUmVxdWlyZWRUb0JlSGVhbHRoeSIsImhlYWx0aHlUaW1lb3V0IiwiVHJhbnNwb3J0TWFuYWdlciIsImluaXRUcmFuc3BvcnRzXyIsImlzV2ViU29ja2V0c0F2YWlsYWJsZSIsImlzU2tpcFBvbGxDb25uZWN0aW9uIiwidHJhbnNwb3J0c18iLCJ0cmFuc3BvcnRzIiwiQUxMX1RSQU5TUE9SVFMiLCJ0cmFuc3BvcnQiLCJpbml0aWFsVHJhbnNwb3J0IiwidXBncmFkZVRyYW5zcG9ydCIsIkNvbm5lY3Rpb24iLCJyZXBvSW5mb18iLCJhcHBsaWNhdGlvbklkXyIsIm9uUmVhZHlfIiwib25LaWxsXyIsImNvbm5lY3Rpb25Db3VudCIsInBlbmRpbmdEYXRhTWVzc2FnZXMiLCJzdGF0ZV8iLCJ0cmFuc3BvcnRNYW5hZ2VyXyIsInN0YXJ0XyIsImNvbm4iLCJjb25uXyIsIm5leHRUcmFuc3BvcnRJZF8iLCJwcmltYXJ5UmVzcG9uc2VzUmVxdWlyZWRfIiwib25NZXNzYWdlUmVjZWl2ZWQiLCJjb25uUmVjZWl2ZXJfIiwib25Db25uZWN0aW9uTG9zdCIsImRpc2Nvbm5SZWNlaXZlcl8iLCJ0eF8iLCJyeF8iLCJzZWNvbmRhcnlDb25uXyIsImlzSGVhbHRoeV8iLCJoZWFsdGh5VGltZW91dE1TIiwiaGVhbHRoeVRpbWVvdXRfIiwiZXZlckNvbm5lY3RlZCIsIm9uQ29ubmVjdGlvbkxvc3RfIiwib25TZWNvbmRhcnlDb25uZWN0aW9uTG9zdF8iLCJvblByaW1hcnlNZXNzYWdlUmVjZWl2ZWRfIiwib25TZWNvbmRhcnlNZXNzYWdlUmVjZWl2ZWRfIiwic2VuZFJlcXVlc3QiLCJkYXRhTXNnIiwibXNnIiwidCIsInNlbmREYXRhXyIsInRyeUNsZWFudXBDb25uZWN0aW9uIiwib25TZWNvbmRhcnlDb250cm9sXyIsImNvbnRyb2xEYXRhIiwiY21kIiwidXBncmFkZUlmU2Vjb25kYXJ5SGVhbHRoeV8iLCJzZWNvbmRhcnlSZXNwb25zZXNSZXF1aXJlZF8iLCJwYXJzZWREYXRhIiwibGF5ZXIiLCJwcm9jZWVkV2l0aFVwZ3JhZGVfIiwib25Db250cm9sXyIsIm9uRGF0YU1lc3NhZ2VfIiwib25QcmltYXJ5UmVzcG9uc2VfIiwicGF5bG9hZCIsIm9uSGFuZHNoYWtlXyIsIm9uQ29ubmVjdGlvblNodXRkb3duXyIsIm9uUmVzZXRfIiwic2VuZFBpbmdPblByaW1hcnlJZk5lY2Vzc2FyeV8iLCJoYW5kc2hha2UiLCJ0aW1lc3RhbXAiLCJoIiwic2Vzc2lvbklkIiwib25Db25uZWN0aW9uRXN0YWJsaXNoZWRfIiwidHJ5U3RhcnRVcGdyYWRlXyIsInN0YXJ0VXBncmFkZV8iLCJjbG9zZUNvbm5lY3Rpb25zXyIsIlNlcnZlckFjdGlvbnMiLCJwdXQiLCJyZWZyZXNoQXV0aFRva2VuIiwidG9rZW4iLCJvbkRpc2Nvbm5lY3RQdXQiLCJvbkRpc2Nvbm5lY3RNZXJnZSIsIlJFQ09OTkVDVF9NSU5fREVMQVkiLCJQZXJzaXN0ZW50Q29ubmVjdGlvbiIsIm9uRGF0YVVwZGF0ZV8iLCJvbkNvbm5lY3RTdGF0dXNfIiwib25TZXJ2ZXJJbmZvVXBkYXRlXyIsImF1dGhUb2tlblByb3ZpZGVyXyIsImF1dGhPdmVycmlkZV8iLCJuZXh0UGVyc2lzdGVudENvbm5lY3Rpb25JZF8iLCJpbnRlcnJ1cHRSZWFzb25zXyIsImxpc3RlbnMiLCJvdXRzdGFuZGluZ1B1dHNfIiwib3V0c3RhbmRpbmdQdXRDb3VudF8iLCJvbkRpc2Nvbm5lY3RSZXF1ZXN0UXVldWVfIiwiY29ubmVjdGVkXyIsInJlY29ubmVjdERlbGF5XyIsIm1heFJlY29ubmVjdERlbGF5XyIsInNlY3VyaXR5RGVidWdDYWxsYmFja18iLCJlc3RhYmxpc2hDb25uZWN0aW9uVGltZXJfIiwicmVxdWVzdENCSGFzaF8iLCJyZXF1ZXN0TnVtYmVyXyIsInJlYWx0aW1lXyIsImF1dGhUb2tlbl8iLCJmb3JjZVRva2VuUmVmcmVzaF8iLCJpbnZhbGlkQXV0aFRva2VuQ291bnRfIiwiZmlyc3RDb25uZWN0aW9uXyIsImxhc3RDb25uZWN0aW9uQXR0ZW1wdFRpbWVfIiwibGFzdENvbm5lY3Rpb25Fc3RhYmxpc2hlZFRpbWVfIiwic2NoZWR1bGVDb25uZWN0XyIsIm9uVmlzaWJsZV8iLCJvbk9ubGluZV8iLCJvblJlc3BvbnNlIiwiY3VyUmVxTnVtIiwibGlzdGVuIiwiY3VycmVudEhhc2hGbiIsImxpc3RlblNwZWMiLCJzZW5kTGlzdGVuXyIsInJlcSIsInAiLCJ3YXJuT25MaXN0ZW5XYXJuaW5nc18iLCJyZW1vdmVMaXN0ZW5fIiwid2FybmluZ3MiLCJpbmRleFNwZWMiLCJpbmRleFBhdGgiLCJ0cnlBdXRoIiwicmVkdWNlUmVjb25uZWN0RGVsYXlJZkFkbWluQ3JlZGVudGlhbF8iLCJjcmVkZW50aWFsIiwidG9rZW5fMSIsImF1dGhNZXRob2QiLCJyZXF1ZXN0RGF0YSIsImNyZWQiLCJyZXMiLCJvbkF1dGhSZXZva2VkXyIsInVubGlzdGVuIiwic2VuZFVubGlzdGVuXyIsInF1ZXJ5T2JqIiwic2VuZE9uRGlzY29ubmVjdF8iLCJyZXF1ZXN0IiwicmVzcG9uc2UiLCJwdXRJbnRlcm5hbCIsInNlbmRQdXRfIiwicXVldWVkIiwiZXJyb3JSZWFzb24iLCJyZXFOdW0iLCJvbkRhdGFQdXNoXyIsIm9uTGlzdGVuUmV2b2tlZF8iLCJvblNlY3VyaXR5RGVidWdQYWNrZXRfIiwiRGF0ZSIsImdldFRpbWUiLCJoYW5kbGVUaW1lc3RhbXBfIiwic2VuZENvbm5lY3RTdGF0c18iLCJyZXN0b3JlU3RhdGVfIiwiZXN0YWJsaXNoQ29ubmVjdGlvbl8iLCJvbmxpbmUiLCJvblJlYWx0aW1lRGlzY29ubmVjdF8iLCJjYW5jZWxTZW50VHJhbnNhY3Rpb25zXyIsInNob3VsZFJlY29ubmVjdF8iLCJ0aW1lU2luY2VMYXN0Q29ubmVjdEF0dGVtcHQiLCJyZWNvbm5lY3REZWxheSIsIm9uRGF0YU1lc3NhZ2VfMSIsIm9uUmVhZHlfMSIsIm9uRGlzY29ubmVjdF8xIiwiY29ubklkXzEiLCJuZXh0Q29ubmVjdGlvbklkXyIsImxhc3RTZXNzaW9uSWRfMSIsImNhbmNlbGVkXzEiLCJjb25uZWN0aW9uXzEiLCJjbG9zZUZuXzEiLCJmb3JjZVJlZnJlc2giLCJnZXRUb2tlbiIsImFjY2Vzc1Rva2VuIiwiaW50ZXJydXB0IiwicmVzdW1lIiwic2VydmVyVGltZU9mZnNldCIsInEiLCJub3JtYWxpemVkUGF0aFN0cmluZyIsInN0YXR1c0NvZGUiLCJleHBsYW5hdGlvbiIsIm5vdGlmeUZvckludmFsaWRUb2tlbiIsIl9lIiwiX2YiLCJjbGllbnROYW1lIiwiUmVhZG9ubHlSZXN0Q2xpZW50IiwibGlzdGVuc18iLCJnZXRMaXN0ZW5JZF8iLCJsaXN0ZW5JZCIsInRoaXNMaXN0ZW4iLCJxdWVyeVN0cmluZ1BhcmFtZXRlcnMiLCJ0b1Jlc3RRdWVyeVN0cmluZ1BhcmFtZXRlcnMiLCJyZXN0UmVxdWVzdF8iLCJhdXRoVG9rZW5EYXRhIiwiYXV0aFRva2VuIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJyZXNwb25zZVRleHQiLCJJTlRFUlJVUFRfUkVBU09OIiwiUmVwbyIsImZvcmNlUmVzdENsaWVudF8iLCJkYXRhVXBkYXRlQ291bnQiLCJldmVudFF1ZXVlXyIsIm5leHRXcml0ZUlkXyIsImludGVyY2VwdFNlcnZlckRhdGFDYWxsYmFja18iLCJwZXJzaXN0ZW50Q29ubmVjdGlvbl8iLCJzZWFyY2giLCJhdXRoT3ZlcnJpZGUiLCJhcHBJZCIsImFkZFRva2VuQ2hhbmdlTGlzdGVuZXIiLCJzdGF0c1JlcG9ydGVyXyIsInRyYW5zYWN0aW9uc0luaXRfIiwiaW5mb0RhdGFfIiwiaW5mb1N5bmNUcmVlXyIsImluZm9FdmVudHMiLCJ1cGRhdGVJbmZvXyIsInNlcnZlclN5bmNUcmVlXyIsInNlcnZlclRpbWUiLCJvZmZzZXQiLCJnZW5lcmF0ZVNlcnZlclZhbHVlcyIsImlzTWVyZ2UiLCJ0YWdnZWRDaGlsZHJlbiIsInJhdyIsInRhZ2dlZFNuYXAiLCJyZXJ1blRyYW5zYWN0aW9uc18iLCJpbnRlcmNlcHRTZXJ2ZXJEYXRhXyIsImNvbm5lY3RTdGF0dXMiLCJydW5PbkRpc2Nvbm5lY3RFdmVudHNfIiwiZ2V0TmV4dFdyaXRlSWRfIiwibmV3VmFsIiwibmV3Tm9kZVVucmVzb2x2ZWQiLCJzdWNjZXNzIiwiY2xlYXJFdmVudHMiLCJjYWxsT25Db21wbGV0ZUNhbGxiYWNrIiwiYWJvcnRUcmFuc2FjdGlvbnNfIiwiY2hpbGRyZW5Ub01lcmdlIiwiZW1wdHkiLCJjaGFuZ2VkS2V5IiwiY2hhbmdlZFZhbHVlIiwid3JpdGVJZF8xIiwicmVzb2x2ZWRPbkRpc2Nvbm5lY3RUcmVlIiwicmVzb2x2ZWQiLCJzaG93RGVsdGEiLCJsb25nZXN0TmFtZSIsInJlZHVjZSIsInByZXZpb3VzVmFsdWUiLCJjdXJyZW50VmFsdWUiLCJwYWRkZWRTdGF0Iiwic3RhdHNJbmNyZW1lbnRDb3VudGVyIiwibWV0cmljIiwiX19kYXRhYmFzZSIsIkRhdGFiYXNlIiwiUmFuZ2VkRmlsdGVyIiwiaW5kZXhlZEZpbHRlcl8iLCJzdGFydFBvc3RfIiwiZ2V0U3RhcnRQb3N0XyIsImVuZFBvc3RfIiwiZ2V0RW5kUG9zdF8iLCJnZXRTdGFydFBvc3QiLCJnZXRFbmRQb3N0Iiwic3RhcnROYW1lIiwiZW5kTmFtZSIsIkxpbWl0ZWRGaWx0ZXIiLCJyYW5nZWRGaWx0ZXJfIiwibGltaXRfIiwiZ2V0TGltaXQiLCJyZXZlcnNlXyIsImlzVmlld0Zyb21MZWZ0IiwiZnVsbExpbWl0VXBkYXRlQ2hpbGRfIiwiaW5kZXhDb21wYXJlXzEiLCJmb3VuZFN0YXJ0UG9zdCIsImNoYW5nZUFjY3VtdWxhdG9yIiwiaW5kZXhDbXBfMSIsIm5ld0NoaWxkTmFtZWROb2RlIiwid2luZG93Qm91bmRhcnkiLCJpblJhbmdlIiwib2xkQ2hpbGRTbmFwIiwiY29tcGFyZU5leHQiLCJRdWVyeVBhcmFtcyIsImxpbWl0U2V0XyIsInN0YXJ0U2V0XyIsInN0YXJ0TmFtZVNldF8iLCJlbmRTZXRfIiwiZW5kTmFtZVNldF8iLCJ2aWV3RnJvbV8iLCJpbmRleFN0YXJ0VmFsdWVfIiwiaW5kZXhTdGFydE5hbWVfIiwiaW5kZXhFbmRWYWx1ZV8iLCJpbmRleEVuZE5hbWVfIiwiV0lSRV9QUk9UT0NPTF9DT05TVEFOVFNfIiwiVklFV19GUk9NX0xFRlQiLCJjb3B5XyIsIm5ld0xpbWl0IiwiVklFV19GUk9NX1JJR0hUIiwiV0lSRV9QUk9UT0NPTF9DT05TVEFOVFMiLCJJTkRFWF9TVEFSVF9WQUxVRSIsIklOREVYX1NUQVJUX05BTUUiLCJJTkRFWF9FTkRfVkFMVUUiLCJJTkRFWF9FTkRfTkFNRSIsIkxJTUlUIiwidmlld0Zyb20iLCJWSUVXX0ZST00iLCJJTkRFWCIsIlJFU1RfQ09OU1RBTlRTIiwiUkVTVF9RVUVSWV9DT05TVEFOVFNfIiwicXMiLCJPUkRFUl9CWSIsIlNUQVJUX0FUIiwiRU5EX0FUIiwiTElNSVRfVE9fRklSU1QiLCJMSU1JVF9UT19MQVNUIiwiREVGQVVMVCIsIlJlZmVyZW5jZSIsInBhcmVudFBhdGgiLCJnZXRSb290IiwiZGF0YWJhc2VQcm9wIiwiZGF0YWJhc2UiLCJ0cmFuc2FjdGlvbiIsInRyYW5zYWN0aW9uVXBkYXRlIiwiYXBwbHlMb2NhbGx5IiwicHJvbWlzZUNvbXBsZXRlIiwic3RhcnRUcmFuc2FjdGlvbiIsInNldFByaW9yaXR5IiwidGhlbm5hYmxlUHVzaFJlZiIsInB1c2hSZWYiLCJUcmFuc2FjdGlvblN0YXR1cyIsIlRyZWVOb2RlIiwiY2hpbGRDb3VudCIsIlRyZWUiLCJwYXJlbnRfIiwic3ViVHJlZSIsInBhdGhPYmoiLCJzZXRWYWx1ZSIsInVwZGF0ZVBhcmVudHNfIiwiZm9yRWFjaERlc2NlbmRhbnQiLCJpbmNsdWRlU2VsZiIsImNoaWxkcmVuRmlyc3QiLCJmb3JFYWNoQW5jZXN0b3IiLCJmb3JFYWNoSW1tZWRpYXRlRGVzY2VuZGFudFdpdGhWYWx1ZSIsInVwZGF0ZUNoaWxkXyIsImNoaWxkRW1wdHkiLCJjaGlsZEV4aXN0cyIsIk1BWF9UUkFOU0FDVElPTl9SRVRSSUVTXyIsInRyYW5zYWN0aW9uUXVldWVUcmVlXyIsIndhdGNoUmVmIiwib3JkZXIiLCJyZXRyeUNvdW50IiwidW53YXRjaGVyIiwiYWJvcnRSZWFzb24iLCJjdXJyZW50V3JpdGVJZCIsImN1cnJlbnRJbnB1dFNuYXBzaG90IiwiY3VycmVudE91dHB1dFNuYXBzaG90UmF3IiwiY3VycmVudE91dHB1dFNuYXBzaG90UmVzb2x2ZWQiLCJjdXJyZW50U3RhdGUiLCJnZXRMYXRlc3RTdGF0ZV8iLCJSVU4iLCJxdWV1ZU5vZGUiLCJub2RlUXVldWUiLCJwcmlvcml0eUZvck5vZGUiLCJzZW5kUmVhZHlUcmFuc2FjdGlvbnNfIiwiZXhjbHVkZVNldHMiLCJwcnVuZUNvbXBsZXRlZFRyYW5zYWN0aW9uc0JlbG93Tm9kZV8iLCJxdWV1ZSIsImJ1aWxkVHJhbnNhY3Rpb25RdWV1ZV8iLCJzZW5kVHJhbnNhY3Rpb25RdWV1ZV8iLCJzZXRzVG9JZ25vcmUiLCJ0eG4iLCJsYXRlc3RTdGF0ZSIsInNuYXBUb1NlbmQiLCJsYXRlc3RIYXNoIiwiU0VOVCIsImRhdGFUb1NlbmQiLCJwYXRoVG9TZW5kIiwiQ09NUExFVEVEIiwiU0VOVF9ORUVEU19BQk9SVCIsIk5FRURTX0FCT1JUIiwicm9vdE1vc3RUcmFuc2FjdGlvbk5vZGUiLCJnZXRBbmNlc3RvclRyYW5zYWN0aW9uTm9kZV8iLCJyZXJ1blRyYW5zYWN0aW9uUXVldWVfIiwiYWJvcnRUcmFuc2FjdGlvbiIsImN1cnJlbnROb2RlIiwibmV3RGF0YU5vZGUiLCJvbGRXcml0ZUlkIiwibmV3Tm9kZVJlc29sdmVkIiwibGFzdElucHV0IiwidHJhbnNhY3Rpb25Ob2RlIiwidHJhbnNhY3Rpb25RdWV1ZSIsImFnZ3JlZ2F0ZVRyYW5zYWN0aW9uUXVldWVzRm9yTm9kZV8iLCJ0byIsImFib3J0VHJhbnNhY3Rpb25zT25Ob2RlXyIsImxhc3RTZW50IiwiX3N0YXRpY0luc3RhbmNlIiwiRmlyZWJhc2VBdXRoVG9rZW5Qcm92aWRlciIsImFwcF8iLCJhdXRoUHJvdmlkZXJfIiwiYXV0aF8iLCJhdXRoIiwiYWRkQXV0aFRva2VuTGlzdGVuZXIiLCJyZW1vdmVUb2tlbkNoYW5nZUxpc3RlbmVyIiwicmVtb3ZlQXV0aFRva2VuTGlzdGVuZXIiLCJlcnJvck1lc3NhZ2UiLCJFbXVsYXRvckFkbWluVG9rZW5Qcm92aWRlciIsIkVNVUxBVE9SX0FVVEhfVE9LRU4iLCJSZXBvTWFuYWdlciIsInJlcG9zXyIsInVzZVJlc3RDbGllbnRfIiwiZGJVcmwiLCJhcHBseUVtdWxhdG9yU2V0dGluZ3MiLCJkYXRhYmFzZUZyb21BcHAiLCJhdXRoUHJvdmlkZXIiLCJkYXRhYmFzZVVSTCIsInByb2plY3RJZCIsImlzRW11bGF0b3IiLCJkYkVtdWxhdG9ySG9zdCIsImF1dGhUb2tlblByb3ZpZGVyIiwiY3JlYXRlUmVwbyIsImRlbGV0ZVJlcG8iLCJhcHBSZXBvcyIsImZvcmNlUmVzdENsaWVudCIsInJlcG9JbnRlcm5hbF8iLCJpbnN0YW5jZVN0YXJ0ZWRfIiwiY2hlY2tEZWxldGVkXyIsInJvb3RJbnRlcm5hbF8iLCJ1c2VFbXVsYXRvciIsInJlZkZyb21VUkwiLCJhcGlOYW1lIiwicGFyc2VkVVJMIiwiZ29PZmZsaW5lIiwiZ29PbmxpbmUiLCJTZXJ2ZXJWYWx1ZSIsIlRJTUVTVEFNUCIsImluY3JlbWVudCIsImZyZWV6ZSIsIl9fcHJvdG9fXyIsImZvcmNlTG9uZ1BvbGxpbmciLCJmb3JjZVdlYlNvY2tldHMiLCJzZXRTZWN1cml0eURlYnVnQ2FsbGJhY2siLCJpbnRlcmNlcHRTZXJ2ZXJEYXRhIiwiaW5pdFN0YW5kYWxvbmUiLCJjdXN0b21BdXRoSW1wbCIsIkRhdGFDb25uZWN0aW9uIiwic2ltcGxlTGlzdGVuIiwiZWNobyIsIm9uRWNobyIsIlJlYWxUaW1lQ29ubmVjdGlvbiIsIkNvbm5lY3Rpb25UYXJnZXQiLCJURVNUX0FDQ0VTUyIsImhpamFja0hhc2giLCJuZXdIYXNoIiwib2xkUHV0IiwicmVnaXN0ZXJEYXRhYmFzZSIsIl9fc3ByZWFkQXJyYXlzIiwiaWwiLCJqbCIsIkxvZ0xldmVsIiwibGV2ZWxTdHJpbmdUb0VudW0iLCJERUJVRyIsIlZFUkJPU0UiLCJJTkZPIiwiV0FSTiIsIkVSUk9SIiwiU0lMRU5UIiwiZGVmYXVsdExvZ0xldmVsIiwiQ29uc29sZU1ldGhvZCIsImRlZmF1bHRMb2dIYW5kbGVyIiwibG9nVHlwZSIsInRvSVNPU3RyaW5nIiwibWV0aG9kIiwiTG9nZ2VyIiwiX2xvZ0xldmVsIiwiX2xvZ0hhbmRsZXIiLCJfdXNlckxvZ0hhbmRsZXIiLCJUeXBlRXJyb3IiLCJsZXZlbCIsImluc3QiLCJzZXRVc2VyTG9nSGFuZGxlciIsImN1c3RvbUxvZ0xldmVsIiwidXNlckxvZ0hhbmRsZXIiLCJpZ25vcmVkIiwiaW5zdGFuY2VzXzEiLCJhc3NlcnQiLCJhc3NlcnRpb24iLCJhc3NlcnRpb25FcnJvciIsInN0cmluZ1RvQnl0ZUFycmF5Iiwib3V0IiwiY2hhckNvZGVBdCIsImJhc2U2NCIsImJ5dGVUb0NoYXJNYXBfIiwiY2hhclRvQnl0ZU1hcF8iLCJieXRlVG9DaGFyTWFwV2ViU2FmZV8iLCJjaGFyVG9CeXRlTWFwV2ViU2FmZV8iLCJFTkNPREVEX1ZBTFNfQkFTRSIsIkhBU19OQVRJVkVfU1VQUE9SVCIsImF0b2IiLCJlbmNvZGVCeXRlQXJyYXkiLCJpbnB1dCIsIndlYlNhZmUiLCJpbml0XyIsImJ5dGVUb0NoYXJNYXAiLCJvdXRwdXQiLCJieXRlMSIsImhhdmVCeXRlMiIsImJ5dGUyIiwiaGF2ZUJ5dGUzIiwiYnl0ZTMiLCJvdXRCeXRlMSIsIm91dEJ5dGUyIiwib3V0Qnl0ZTMiLCJvdXRCeXRlNCIsImVuY29kZVN0cmluZyIsImJ0b2EiLCJkZWNvZGVTdHJpbmciLCJieXRlcyIsInBvcyIsImMxIiwiZnJvbUNoYXJDb2RlIiwiYzIiLCJ1IiwiYzMiLCJieXRlQXJyYXlUb1N0cmluZyIsImRlY29kZVN0cmluZ1RvQnl0ZUFycmF5IiwiY2hhclRvQnl0ZU1hcCIsImJ5dGU0IiwiRU5DT0RFRF9WQUxTIiwiRU5DT0RFRF9WQUxTX1dFQlNBRkUiLCJiYXNlNjRFbmNvZGUiLCJiYXNlNjREZWNvZGUiLCJkZWVwQ29weSIsInRhcmdldCIsImNvbnN0cnVjdG9yIiwicHJvcCIsIkRlZmVycmVkIiwiaXNNb2JpbGVDb3Jkb3ZhIiwiaXNOb2RlIiwiZyIsImlzQnJvd3NlciIsImlzUmVhY3ROYXRpdmUiLCJpc05vZGVTZGsiLCJDT05TVEFOVFMiLCJGaXJlYmFzZUVycm9yIiwiY3VzdG9tRGF0YSIsInNldFByb3RvdHlwZU9mIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJzZXJ2aWNlTmFtZSIsImVycm9ycyIsImZ1bGxDb2RlIiwidGVtcGxhdGUiLCJyZXBsYWNlVGVtcGxhdGUiLCJmdWxsTWVzc2FnZSIsIlBBVFRFUk4iLCJfIiwianNvbkV2YWwiLCJwYXJzZSIsImRlY29kZSIsImhlYWRlciIsImNsYWltcyIsInNpZ25hdHVyZSIsInBhcnRzIiwiaXNWYWxpZEZvcm1hdCIsImlzQWRtaW4iLCJzYWZlR2V0IiwiY29udGV4dE9iaiIsInF1ZXJ5c3RyaW5nIiwicXVlcnlzdHJpbmdQYXJhbXMiLCJhcnJheVZhbCIsIlNoYTEiLCJjaGFpbl8iLCJidWZfIiwiV18iLCJwYWRfIiwiaW5idWZfIiwidG90YWxfIiwiYmxvY2tTaXplIiwicmVzZXQiLCJjb21wcmVzc18iLCJidWYiLCJXIiwibGVuZ3RoTWludXNCbG9jayIsImluYnVmIiwidG90YWxCaXRzIiwiZXhlY3V0b3IiLCJvbk5vT2JzZXJ2ZXJzIiwiT2JzZXJ2ZXJQcm94eSIsInN1YnNjcmliZSIsIm9ic2VydmVycyIsInVuc3Vic2NyaWJlcyIsIm9ic2VydmVyQ291bnQiLCJ0YXNrIiwiZmluYWxpemVkIiwiZm9yRWFjaE9ic2VydmVyIiwib2JzZXJ2ZXIiLCJuZXh0T3JPYnNlcnZlciIsIm1ldGhvZHMiLCJtZXRob2RzXzEiLCJpbXBsZW1lbnRzQW55TWV0aG9kcyIsIm5vb3AiLCJ1bnN1YiIsInVuc3Vic2NyaWJlT25lIiwiZmluYWxFcnJvciIsInNlbmRPbmUiLCJ2YWxpZGF0ZUFyZ0NvdW50IiwibWluQ291bnQiLCJtYXhDb3VudCIsImFyZ0NvdW50IiwiYXJnRXJyb3IiLCJhcmdOYW1lIiwidmFsaWRhdGVDYWxsYmFjayIsInZhbGlkYXRlQ29udGV4dE9iamVjdCIsInN0cmluZ1RvQnl0ZUFycmF5JDEiLCJzdHJpbmdMZW5ndGgiLCJydW50aW1lIiwiT3AiLCJoYXNPd24iLCIkU3ltYm9sIiwiU3ltYm9sIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwidG9TdHJpbmdUYWciLCJkZWZpbmUiLCJ3cml0YWJsZSIsIndyYXAiLCJpbm5lckZuIiwib3V0ZXJGbiIsInRyeUxvY3NMaXN0IiwicHJvdG9HZW5lcmF0b3IiLCJHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJDb250ZXh0IiwiX2ludm9rZSIsInN0YXRlIiwiR2VuU3RhdGVTdXNwZW5kZWRTdGFydCIsIkdlblN0YXRlRXhlY3V0aW5nIiwiR2VuU3RhdGVDb21wbGV0ZWQiLCJkb25lUmVzdWx0IiwiZGVsZWdhdGUiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJDb250aW51ZVNlbnRpbmVsIiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsInRyeUNhdGNoIiwiR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCIsIm1ha2VJbnZva2VNZXRob2QiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJnZXRQcm90byIsImdldFByb3RvdHlwZU9mIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJHcCIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsIkFzeW5jSXRlcmF0b3IiLCJQcm9taXNlSW1wbCIsImludm9rZSIsIl9fYXdhaXQiLCJ1bndyYXBwZWQiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsImVudHJ5IiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJpdGVyYWJsZSIsIml0ZXJhdG9yTWV0aG9kIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiY3RvciIsIm1hcmsiLCJhd3JhcCIsIm9iamVjdCIsInNraXBUZW1wUmVzZXQiLCJwcmV2Iiwic3RvcCIsInJvb3RSZWNvcmQiLCJydmFsIiwiZXhjZXB0aW9uIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiZmluYWxseUVudHJ5IiwiZmluaXNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsInJlZ2VuZXJhdG9yUnVudGltZSIsImFjY2lkZW50YWxTdHJpY3RNb2RlIiwiRnVuY3Rpb24iLCJleHRlbmRTdGF0aWNzIiwiX19leHRlbmRzIiwiX18iLCJfX2Fzc2lnbiIsImFzc2lnbiIsIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImZ1bGZpbGxlZCIsInN0ZXAiLCJyZWplY3RlZCIsIl9fZ2VuZXJhdG9yIiwieSIsInRyeXMiLCJvcHMiLCJ2ZXJiIiwiX192YWx1ZXMiLCJvIiwiX19yZWFkIiwiYXIiLCJfX3NwcmVhZCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImxvYWRlZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJkZWZpbml0aW9uIiwiZ2xvYmFsVGhpcyIsImhtZCIsImFwaUtleSIsImF1dGhEb21haW4iLCJzdG9yYWdlQnVja2V0IiwibWVzc2FnaW5nU2VuZGVySWQiLCJtZWFzdXJlbWVudElkIiwiZ2V0TG9jYXRpb24iLCJlbWFpbCIsInVzZXJJZCIsInJlZ2lzdGVyZWQiLCJldmVudCIsImFkZFVzZXIiLCJwb3N0TWVzc2FnZSJdLCJtYXBwaW5ncyI6IjtxQkFBQSxTQUFTQSxFQUFtQkMsRUFBS0MsRUFBU0MsRUFBUUMsRUFBT0MsRUFBUUMsRUFBS0MsR0FDcEUsSUFDRSxJQUFJQyxFQUFPUCxFQUFJSyxHQUFLQyxHQUNoQkUsRUFBUUQsRUFBS0MsTUFDakIsTUFBT0MsR0FFUCxZQURBUCxFQUFPTyxHQUlMRixFQUFLRyxLQUNQVCxFQUFRTyxHQUVSRyxRQUFRVixRQUFRTyxHQUFPSSxLQUFLVCxFQUFPQyxHQXdCdkNTLEVBQU9DLFFBcEJQLFNBQTJCQyxHQUN6QixPQUFPLFdBQ0wsSUFBSUMsRUFBT0MsS0FDUEMsRUFBT0MsVUFDWCxPQUFPLElBQUlSLFNBQVEsU0FBVVYsRUFBU0MsR0FDcEMsSUFBSUYsRUFBTWUsRUFBR0ssTUFBTUosRUFBTUUsR0FFekIsU0FBU2YsRUFBTUssR0FDYlQsRUFBbUJDLEVBQUtDLEVBQVNDLEVBQVFDLEVBQU9DLEVBQVEsT0FBUUksR0FHbEUsU0FBU0osRUFBT2lCLEdBQ2R0QixFQUFtQkMsRUFBS0MsRUFBU0MsRUFBUUMsRUFBT0MsRUFBUSxRQUFTaUIsR0FHbkVsQixPQUFNbUIsUyxjQy9CWlQsRUFBT0MsUUFBVSxFQUFqQixNLCtDQ3FCSVMsRUFzREFDLEUsb0NBckRBQyxJQUFVRixFQUFLLElBQ1osVUFBeUIsb0ZBRTVCQSxFQUFHLGdCQUFxQyxnQ0FDeENBLEVBQUcsaUJBQXVDLGlEQUMxQ0EsRUFBRyxlQUFtQyxrREFDdENBLEVBQUcsd0JBQXFELDZFQUV4REEsRUFBRyx3QkFBcUQsd0RBQ3hEQSxHQUNBRyxFQUFnQixJQUFJLEtBQWEsTUFBTyxXQUFZRCxHQUVwREUsRUFBUyxnQkEwQ1RDLEVBQXFCLFlBQ3JCQyxJQUF1QkwsRUFBTyxJQUN6QkcsR0FBVSxZQUNmSCxFQTFDUyx1QkEwQ00saUJBQ2ZBLEVBekNTLGtCQXlDTSxZQUNmQSxFQXhDUyxzQkF3Q00sWUFDZkEsRUF2Q1MsdUJBdUNNLFVBQ2ZBLEVBdENTLDJCQXNDTSxXQUNmQSxFQXJDUyx1QkFxQ00sV0FDZkEsRUFwQ1MseUJBb0NNLFlBQ2ZBLEVBbkNTLDJCQW1DTSxVQUNmQSxFQWxDUyxxQkFrQ00sV0FDZkEsRUFqQ1MsdUJBaUNNLFdBQ2ZBLEVBQUssV0FBYSxVQUNsQkEsRUFqQ1Msb0JBaUNNLGNBQ2ZBLEdBa0JBTSxFQUFTLElBQUksS0FBTyxpQkFzQnBCQyxFQUFpQyxXQUNqQyxTQUFTQSxFQUFnQkMsRUFBU0MsRUFBUUMsR0FDdEMsSUFBSUMsRUFBS1osRUFDTGEsRUFBUW5CLEtBQ1pBLEtBQUtpQixVQUFZQSxFQUNqQmpCLEtBQUtvQixZQUFhLEVBQ2xCcEIsS0FBS3FCLE1BQVFMLEVBQU9NLEtBQ3BCdEIsS0FBS3VCLGdDQUNEUCxFQUFPUSxpQ0FBa0MsRUFDN0N4QixLQUFLeUIsVUFBVyxRQUFTVixHQUN6QmYsS0FBSzBCLFVBQVksSUFBSSxLQUFtQlYsRUFBT00sTUFFL0N0QixLQUFLMkIsY0FBYyxJQUFJLEtBQVUsT0FBTyxXQUFjLE9BQU9SLElBQVUsV0FDdkUsSUFFSSxJQUFLLElBQUlTLEdBQUssUUFBUzVCLEtBQUtpQixVQUFVWSxTQUFTQyxXQUFXQyxVQUFXQyxFQUFLSixFQUFHSyxRQUFTRCxFQUFHdkMsS0FBTXVDLEVBQUtKLEVBQUdLLE9BQVEsQ0FDM0csSUFBSUMsRUFBWUYsRUFBR3pDLE1BQ25CUyxLQUFLMkIsY0FBY08sSUFHM0IsTUFBT0MsR0FBU2pCLEVBQU0sQ0FBRTFCLE1BQU8yQyxHQUMvQixRQUNJLElBQ1FILElBQU9BLEVBQUd2QyxPQUFTYSxFQUFLc0IsRUFBR1EsU0FBUzlCLEVBQUcrQixLQUFLVCxHQUVwRCxRQUFVLEdBQUlWLEVBQUssTUFBTUEsRUFBSTFCLFFBeUdyQyxPQXRHQThDLE9BQU9DLGVBQWV6QixFQUFnQjBCLFVBQVcsaUNBQWtDLENBQy9FQyxJQUFLLFdBRUQsT0FEQXpDLEtBQUswQyxrQkFDRTFDLEtBQUt1QixpQ0FFaEJvQixJQUFLLFNBQVVDLEdBQ1g1QyxLQUFLMEMsa0JBQ0wxQyxLQUFLdUIsZ0NBQWtDcUIsR0FFM0NDLFlBQVksRUFDWkMsY0FBYyxJQUVsQlIsT0FBT0MsZUFBZXpCLEVBQWdCMEIsVUFBVyxPQUFRLENBQ3JEQyxJQUFLLFdBRUQsT0FEQXpDLEtBQUswQyxrQkFDRTFDLEtBQUtxQixPQUVoQndCLFlBQVksRUFDWkMsY0FBYyxJQUVsQlIsT0FBT0MsZUFBZXpCLEVBQWdCMEIsVUFBVyxVQUFXLENBQ3hEQyxJQUFLLFdBRUQsT0FEQXpDLEtBQUswQyxrQkFDRTFDLEtBQUt5QixVQUVoQm9CLFlBQVksRUFDWkMsY0FBYyxJQUVsQmhDLEVBQWdCMEIsVUFBVU8sT0FBUyxXQUMvQixJQUFJNUIsRUFBUW5CLEtBQ1osT0FBTyxJQUFJTixTQUFRLFNBQVVWLEdBQ3pCbUMsRUFBTXVCLGtCQUNOMUQsT0FFQ1csTUFBSyxXQUVOLE9BREF3QixFQUFNRixVQUFVWSxTQUFTbUIsVUFBVTdCLEVBQU1FLE9BQ2xDM0IsUUFBUXVELElBQUk5QixFQUFNTyxVQUFVd0IsZUFBZUMsS0FBSSxTQUFVQyxHQUFZLE9BQU9BLEVBQVNMLGdCQUUzRnBELE1BQUssV0FDTndCLEVBQU1DLFlBQWEsTUFpQjNCTixFQUFnQjBCLFVBQVVhLFlBQWMsU0FBVS9CLEVBQU1nQyxHQUlwRCxZQUgyQixJQUF2QkEsSUFBaUNBLEVBQXFCM0MsR0FDMURYLEtBQUswQyxrQkFFRTFDLEtBQUswQixVQUFVNkIsWUFBWWpDLEdBQU1rQyxhQUFhLENBQ2pEQyxXQUFZSCxLQWFwQnhDLEVBQWdCMEIsVUFBVWtCLHVCQUF5QixTQUFVcEMsRUFBTWdDLFFBQ3BDLElBQXZCQSxJQUFpQ0EsRUFBcUIzQyxHQUUxRFgsS0FBSzBCLFVBQVU2QixZQUFZakMsR0FBTXFDLGNBQWNMLElBS25EeEMsRUFBZ0IwQixVQUFVYixjQUFnQixTQUFVTyxHQUNoRCxJQUNJbEMsS0FBSzBCLFVBQVVrQyxhQUFhMUIsR0FFaEMsTUFBTzJCLEdBQ0hoRCxFQUFPaUQsTUFBTSxhQUFlNUIsRUFBVVosS0FBTyx3Q0FBMEN0QixLQUFLc0IsS0FBTXVDLEtBRzFHL0MsRUFBZ0IwQixVQUFVdUIseUJBQTJCLFNBQVU3QixHQUMzRGxDLEtBQUswQixVQUFVc0Msd0JBQXdCOUIsSUFNM0NwQixFQUFnQjBCLFVBQVVFLGdCQUFrQixXQUN4QyxHQUFJMUMsS0FBS29CLFdBQ0wsTUFBTVgsRUFBY3dELE9BQU8sY0FBaUMsQ0FBRUMsUUFBU2xFLEtBQUtxQixTQUc3RVAsRUFsSXlCLEdBc0luQ0EsRUFBZ0IwQixVQUFVbEIsTUFBUVIsRUFBZ0IwQixVQUFVekIsU0FDekRELEVBQWdCMEIsVUFBVU8sUUFDMUJvQixRQUFRQyxJQUFJLE1Ba1JoQixJQUFJQyxFQWpCSixTQUFTQyxJQUNMLElBQUlDLEVBdk9SLFNBQXFDQyxHQUNqQyxJQUFJQyxFQUFPLEdBRVAzQyxFQUFhLElBQUk0QyxJQUVqQkgsRUFBWSxDQUlaSSxZQUFZLEVBQ1pDLGNBbURKLFNBQXVCN0QsRUFBUzhELFFBQ1YsSUFBZEEsSUFBd0JBLEVBQVksSUFDZixpQkFBZEEsR0FBd0MsT0FBZEEsSUFFakNBLEVBQVksQ0FBRXZELEtBRER1RCxJQUdqQixJQUFJN0QsRUFBUzZELE9BQ094RSxJQUFoQlcsRUFBT00sT0FDUE4sRUFBT00sS0FBT1gsR0FFbEIsSUFBSVcsRUFBT04sRUFBT00sS0FDbEIsR0FBb0IsaUJBQVRBLElBQXNCQSxFQUM3QixNQUFNYixFQUFjd0QsT0FBTyxlQUFtQyxDQUMxREMsUUFBU1ksT0FBT3hELEtBR3hCLElBQUksUUFBU21ELEVBQU1uRCxHQUNmLE1BQU1iLEVBQWN3RCxPQUFPLGdCQUFxQyxDQUFFQyxRQUFTNUMsSUFFL0UsSUFBSXlELEVBQU0sSUFBSVAsRUFBZ0J6RCxFQUFTQyxFQUFRdUQsR0FFL0MsT0FEQUUsRUFBS25ELEdBQVF5RCxFQUNOQSxHQXRFUEEsSUFBS0EsRUFDTEMsZ0JBa0pKLFNBQXlCQyxFQUFrQkMsRUFBU0MsR0FDaEQsSUFBSTdFLEVBR0E4RSxFQUEyRCxRQUFoRDlFLEVBQUtNLEVBQW9CcUUsVUFBc0MsSUFBUDNFLEVBQWdCQSxFQUFLMkUsRUFDeEZFLElBQ0FDLEdBQVcsSUFBTUQsR0FFckIsSUFBSUUsRUFBa0JELEVBQVFFLE1BQU0sU0FDaENDLEVBQWtCTCxFQUFRSSxNQUFNLFNBQ3BDLEdBQUlELEdBQW1CRSxFQUFpQixDQUNwQyxJQUFJQyxFQUFVLENBQ1YsK0JBQWtDSixFQUFVLG1CQUF1QkYsRUFBVSxNQVlqRixPQVZJRyxHQUNBRyxFQUFRQyxLQUFLLGlCQUFvQkwsRUFBVSxxREFFM0NDLEdBQW1CRSxHQUNuQkMsRUFBUUMsS0FBSyxPQUViRixHQUNBQyxFQUFRQyxLQUFLLGlCQUFvQlAsRUFBVSwwREFFL0NyRSxFQUFPNkUsS0FBS0YsRUFBUUcsS0FBSyxNQUc3QkMsRUFBa0IsSUFBSSxLQUFVUixFQUFVLFlBQVksV0FBYyxNQUFPLENBQUdBLFFBQVNBLEVBQVNGLFFBQVNBLEtBQWUsYUEzS3hIVyxZQUFhLEtBQ2JDLE1BNEtKLFNBQWVDLEVBQWFoRixHQUN4QixHQUFvQixPQUFoQmdGLEdBQStDLG1CQUFoQkEsRUFDL0IsTUFBTXRGLEVBQWN3RCxPQUFPLHVCQUFtRCxDQUMxRUMsUUFBUzVDLFFBR2pCLFFBQWtCeUUsRUFBYWhGLElBaEwvQjBELEtBQU0sS0FDTnVCLFlBM0NRLFFBNENSbkUsU0FBVSxDQUNOK0Qsa0JBQW1CQSxFQUNuQjVDLFVBeUJSLFNBQW1CMUIsVUFDUm1ELEVBQUtuRCxJQXpCUlEsV0FBWUEsRUFDWm1FLGFBOEtSLFNBQXNCbEIsRUFBS3pELEdBQ3ZCLE1BQWEsZUFBVEEsRUFDTyxLQUVNQSxLQXJKckIsU0FBU3lELEVBQUl6RCxHQUVULEdBREFBLEVBQU9BLEdBQVFYLElBQ1YsUUFBUzhELEVBQU1uRCxHQUNoQixNQUFNYixFQUFjd0QsT0FBTyxTQUF1QixDQUFFQyxRQUFTNUMsSUFFakUsT0FBT21ELEVBQUtuRCxHQWtDaEIsU0FBU3NFLEVBQWtCMUQsR0FDdkIsSUFBSWhCLEVBQUtaLEVBQ0w0RixFQUFnQmhFLEVBQVVaLEtBQzlCLEdBQUlRLEVBQVdxRSxJQUFJRCxHQUVmLE9BREFyRixFQUFPaUQsTUFBTSxzREFBd0RvQyxFQUFnQixLQUMzRCxXQUFuQmhFLEVBQVVrRSxLQUVUN0IsRUFBVTJCLEdBQ1osS0FJVixHQUZBcEUsRUFBV2EsSUFBSXVELEVBQWVoRSxHQUVQLFdBQW5CQSxFQUFVa0UsS0FBZ0MsQ0FFMUMsSUFBSUMsRUFBbUIsU0FBVUMsR0FHN0IsUUFGZSxJQUFYQSxJQUFxQkEsRUFBU3ZCLEtBRUcsbUJBQTFCdUIsRUFBT0osR0FHZCxNQUFNekYsRUFBY3dELE9BQU8sdUJBQW1ELENBQzFFQyxRQUFTZ0MsSUFLakIsT0FBT0ksRUFBT0osV0FHYTdGLElBQTNCNkIsRUFBVXFFLGVBQ1YsUUFBV0YsRUFBa0JuRSxFQUFVcUUsY0FHM0NoQyxFQUFVMkIsR0FBaUJHLEVBRzNCN0IsRUFBZ0JoQyxVQUFVMEQsR0FJdEIsV0FFSSxJQURBLElBQUlqRyxFQUFPLEdBQ0Z1RyxFQUFLLEVBQUdBLEVBQUt0RyxVQUFVdUcsT0FBUUQsSUFDcEN2RyxFQUFLdUcsR0FBTXRHLFVBQVVzRyxHQUd6QixPQURpQnhHLEtBQUtxRCxZQUFZcUQsS0FBSzFHLEtBQU1rRyxHQUMzQi9GLE1BQU1ILEtBQU1rQyxFQUFVeUUsa0JBQW9CMUcsRUFBTyxLQUcvRSxJQUVJLElBQUssSUFBSTJCLEdBQUssUUFBU1UsT0FBT3NFLEtBQUtuQyxJQUFRekMsRUFBS0osRUFBR0ssUUFBU0QsRUFBR3ZDLEtBQU11QyxFQUFLSixFQUFHSyxPQUFRLENBQ2pGLElBQUlpQyxFQUFVbEMsRUFBR3pDLE1BQ2pCa0YsRUFBS1AsR0FBU3ZDLGNBQWNPLElBR3BDLE1BQU9DLEdBQVNqQixFQUFNLENBQUUxQixNQUFPMkMsR0FDL0IsUUFDSSxJQUNRSCxJQUFPQSxFQUFHdkMsT0FBU2EsRUFBS3NCLEVBQUdRLFNBQVM5QixFQUFHK0IsS0FBS1QsR0FFcEQsUUFBVSxHQUFJVixFQUFLLE1BQU1BLEVBQUkxQixPQUVqQyxNQUEwQixXQUFuQjBDLEVBQVVrRSxLQUVUN0IsRUFBVTJCLEdBQ1osS0ErQ1YsT0F2S0EzQixFQUFtQixRQUFJQSxFQUV2QmpDLE9BQU9DLGVBQWVnQyxFQUFXLE9BQVEsQ0FDckM5QixJQStDSixXQUVJLE9BQU9ILE9BQU9zRSxLQUFLbkMsR0FBTXRCLEtBQUksU0FBVTdCLEdBQVEsT0FBT21ELEVBQUtuRCxTQTdCL0R5RCxFQUFTLElBQUlQLEVBZ0pORCxFQTJCU3NDLENBQTRCL0YsR0FjNUMsT0FiQXlELEVBQVUxQyxVQUFXLFNBQVMsUUFBUyxHQUFJMEMsRUFBVTFDLFVBQVcsQ0FBRXlDLHdCQUF5QkEsRUFDdkZ3QyxnQkFTSixTQUF5QkMsSUFDckIsUUFBV3hDLEVBQVd3QyxJQVR0QkMsZ0JBQWlCLEtBQ2pCQyxhQUFjLEtBQ2RDLFdBQVksT0FTVDNDLEVBRUlELEdBa0JYNkMsRUFBdUMsV0FDdkMsU0FBU0EsRUFBc0J6RixHQUMzQjFCLEtBQUswQixVQUFZQSxFQXFCckIsT0FqQkF5RixFQUFzQjNFLFVBQVU0RSxzQkFBd0IsV0FJcEQsT0FIZ0JwSCxLQUFLMEIsVUFBVXdCLGVBSTFCQyxLQUFJLFNBQVVDLEdBQ2YsR0FxQlosU0FBa0NBLEdBQzlCLElBQUlsQixFQUFZa0IsRUFBU2lFLGVBQ3pCLE1BQWtGLGFBQTFFbkYsYUFBNkMsRUFBU0EsRUFBVWtFLE1BdkI1RGtCLENBQXlCbEUsR0FBVyxDQUNwQyxJQUFJbUUsRUFBVW5FLEVBQVNJLGVBQ3ZCLE9BQU8rRCxFQUFRbkMsUUFBVSxJQUFNbUMsRUFBUXJDLFFBR3ZDLE9BQU8sUUFHVnNDLFFBQU8sU0FBVUMsR0FBYSxPQUFPQSxLQUNyQzlCLEtBQUssTUFFUHdCLEVBdkIrQixHQWdGMUMsSUFBSSxnQkFBaUM5RyxJQUFsQk4sS0FBS3NFLFNBQXdCLENBQzVDeEQsRUFBTzZFLEtBQUssbUlBRVosSUFBSWdDLEVBQWEzSCxLQUFLc0UsU0FBUzJCLFlBQzNCMEIsR0FBY0EsRUFBV0MsUUFBUSxTQUFXLEdBQzVDOUcsRUFBTzZFLEtBQUssc05BR3BCLElBQUlkLEVBQWdCUCxFQUFTTyxjQUk3QlAsRUFBU08sY0FBZ0IsV0FFckIsSUFEQSxJQUFJM0UsRUFBTyxHQUNGdUcsRUFBSyxFQUFHQSxFQUFLdEcsVUFBVXVHLE9BQVFELElBQ3BDdkcsRUFBS3VHLEdBQU10RyxVQUFVc0csR0FRekIsT0FISSxXQUNBM0YsRUFBTzZFLEtBQUssMnBCQUVUZCxFQUFjekUsV0FBTUUsRUFBV0osSUFFMUMsSUFBSTJILEVBQWF2RCxHQW5EakIsU0FBZ0NBLEVBQVVjLEdBQ3RDZCxFQUFTeEMsU0FBUytELGtCQUFrQixJQUFJLEtBQVUsbUJBQW1CLFNBQVVsRSxHQUFhLE9BQU8sSUFBSXlGLEVBQXNCekYsS0FBZSxZQUU1STJDLEVBQVNXLGdCQUFnQnRFLEVBcmtCZixjQXNuQmRtSCxHQS9DSXhELEVBQVNXLGdCQUFnQixVQUFXLElBK0N4QzZDLENBQXVCRCxHQUV2QixXLHFGQ3JwQklFLEVBQTJCLFdBTzNCLFNBQVNBLEVBQVV4RyxFQUFNeUcsRUFBaUIzQixHQUN0Q3BHLEtBQUtzQixLQUFPQSxFQUNadEIsS0FBSytILGdCQUFrQkEsRUFDdkIvSCxLQUFLb0csS0FBT0EsRUFDWnBHLEtBQUsyRyxtQkFBb0IsRUFJekIzRyxLQUFLdUcsYUFBZSxHQUNwQnZHLEtBQUtnSSxrQkFBb0IsT0FjN0IsT0FaQUYsRUFBVXRGLFVBQVV5RixxQkFBdUIsU0FBVUMsR0FFakQsT0FEQWxJLEtBQUtnSSxrQkFBb0JFLEVBQ2xCbEksTUFFWDhILEVBQVV0RixVQUFVMkYscUJBQXVCLFNBQVV4QixHQUVqRCxPQURBM0csS0FBSzJHLGtCQUFvQkEsRUFDbEIzRyxNQUVYOEgsRUFBVXRGLFVBQVU0RixnQkFBa0IsU0FBVXJCLEdBRTVDLE9BREEvRyxLQUFLdUcsYUFBZVEsRUFDYi9HLE1BRUo4SCxFQTlCbUIsR0FpRDFCbkgsRUFBcUIsWUFzQnJCMEgsRUFBMEIsV0FDMUIsU0FBU0EsRUFBUy9HLEVBQU1JLEdBQ3BCMUIsS0FBS3NCLEtBQU9BLEVBQ1p0QixLQUFLMEIsVUFBWUEsRUFDakIxQixLQUFLa0MsVUFBWSxLQUNqQmxDLEtBQUtzSSxVQUFZLElBQUk1RCxJQUNyQjFFLEtBQUt1SSxrQkFBb0IsSUFBSTdELElBbUpqQyxPQTdJQTJELEVBQVM3RixVQUFVQyxJQUFNLFNBQVVnQixRQUNaLElBQWZBLElBQXlCQSxFQUFhOUMsR0FFMUMsSUFBSTZILEVBQXVCeEksS0FBS3lJLDRCQUE0QmhGLEdBQzVELElBQUt6RCxLQUFLdUksa0JBQWtCcEMsSUFBSXFDLEdBQXVCLENBQ25ELElBQUlFLEVBQVcsSUFBSSxLQUNuQjFJLEtBQUt1SSxrQkFBa0I1RixJQUFJNkYsRUFBc0JFLEdBRWpELElBQ0ksSUFBSUMsRUFBVzNJLEtBQUs0SSx1QkFBdUJKLEdBQ3ZDRyxHQUNBRCxFQUFTMUosUUFBUTJKLEdBR3pCLE1BQU85RSxLQUtYLE9BQU83RCxLQUFLdUksa0JBQWtCOUYsSUFBSStGLEdBQXNCSyxTQUU1RFIsRUFBUzdGLFVBQVVnQixhQUFlLFNBQVV6QyxHQUN4QyxJQUFJVCxHQUFLLFFBQVMsQ0FBRW1ELFdBQVk5QyxFQUFvQm1JLFVBQVUsR0FBUy9ILEdBQVUwQyxFQUFhbkQsRUFBR21ELFdBQVlxRixFQUFXeEksRUFBR3dJLFNBRXZITixFQUF1QnhJLEtBQUt5SSw0QkFBNEJoRixHQUM1RCxJQUNJLElBQUlrRixFQUFXM0ksS0FBSzRJLHVCQUF1QkosR0FDM0MsSUFBS0csRUFBVSxDQUNYLEdBQUlHLEVBQ0EsT0FBTyxLQUVYLE1BQU1DLE1BQU0sV0FBYS9JLEtBQUtzQixLQUFPLHFCQUV6QyxPQUFPcUgsRUFFWCxNQUFPOUUsR0FDSCxHQUFJaUYsRUFDQSxPQUFPLEtBR1AsTUFBTWpGLElBSWxCd0UsRUFBUzdGLFVBQVU2RSxhQUFlLFdBQzlCLE9BQU9ySCxLQUFLa0MsV0FFaEJtRyxFQUFTN0YsVUFBVXdHLGFBQWUsU0FBVTlHLEdBQ3hDLElBQUloQixFQUFLWixFQUNULEdBQUk0QixFQUFVWixPQUFTdEIsS0FBS3NCLEtBQ3hCLE1BQU15SCxNQUFNLHlCQUEyQjdHLEVBQVVaLEtBQU8saUJBQW1CdEIsS0FBS3NCLEtBQU8sS0FFM0YsR0FBSXRCLEtBQUtrQyxVQUNMLE1BQU02RyxNQUFNLGlCQUFtQi9JLEtBQUtzQixLQUFPLDhCQUkvQyxHQUZBdEIsS0FBS2tDLFVBQVlBLEVBNEZ6QixTQUEwQkEsR0FDdEIsTUFBdUMsVUFBaENBLEVBQVU4RixrQkEzRlRpQixDQUFpQi9HLEdBQ2pCLElBQ0lsQyxLQUFLNEksdUJBQXVCakksR0FFaEMsTUFBT2tELElBT1gsSUFJSSxJQUFLLElBQUlqQyxHQUFLLFFBQVM1QixLQUFLdUksa0JBQWtCVyxXQUFZbEgsRUFBS0osRUFBR0ssUUFBU0QsRUFBR3ZDLEtBQU11QyxFQUFLSixFQUFHSyxPQUFRLENBQ2hHLElBQUlrSCxHQUFLLFFBQU9uSCxFQUFHekMsTUFBTyxHQUFJK0QsRUFBcUI2RixFQUFHLEdBQUlDLEVBQW1CRCxFQUFHLEdBQzVFWCxFQUF1QnhJLEtBQUt5SSw0QkFBNEJuRixHQUM1RCxJQUVJLElBQUlxRixFQUFXM0ksS0FBSzRJLHVCQUF1QkosR0FDM0NZLEVBQWlCcEssUUFBUTJKLEdBRTdCLE1BQU85RSxNQU1mLE1BQU8xQixHQUFTakIsRUFBTSxDQUFFMUIsTUFBTzJDLEdBQy9CLFFBQ0ksSUFDUUgsSUFBT0EsRUFBR3ZDLE9BQVNhLEVBQUtzQixFQUFHUSxTQUFTOUIsRUFBRytCLEtBQUtULEdBRXBELFFBQVUsR0FBSVYsRUFBSyxNQUFNQSxFQUFJMUIsU0FHckM2SSxFQUFTN0YsVUFBVW1CLGNBQWdCLFNBQVVGLFFBQ3RCLElBQWZBLElBQXlCQSxFQUFhOUMsR0FDMUNYLEtBQUt1SSxrQkFBa0J4RixPQUFPVSxHQUM5QnpELEtBQUtzSSxVQUFVdkYsT0FBT1UsSUFJMUI0RSxFQUFTN0YsVUFBVU8sT0FBUyxXQUN4QixPQUFPLFFBQVUvQyxVQUFNLE9BQVEsR0FBUSxXQUNuQyxJQUFJcUosRUFDSixPQUFPLFFBQVlySixNQUFNLFNBQVVNLEdBQy9CLE9BQVFBLEVBQUdnSixPQUNQLEtBQUssRUFFRCxPQURBRCxFQUFXRSxNQUFNQyxLQUFLeEosS0FBS3NJLFVBQVV2RyxVQUM5QixDQUFDLEVBQWFyQyxRQUFRdUQsS0FBSSxRQUFTb0csRUFDakM3QixRQUFPLFNBQVVELEdBQVcsTUFBTyxhQUFjQSxLQUVqRHBFLEtBQUksU0FBVW9FLEdBQVcsT0FBT0EsRUFBUTFGLFNBQVNrQixZQUFjc0csRUFDL0Q3QixRQUFPLFNBQVVELEdBQVcsTUFBTyxZQUFhQSxLQUVoRHBFLEtBQUksU0FBVW9FLEdBQVcsT0FBT0EsRUFBUWtDLGdCQUNyRCxLQUFLLEVBRUQsT0FEQW5KLEVBQUdvSixPQUNJLENBQUMsV0FLNUJyQixFQUFTN0YsVUFBVW1ILGVBQWlCLFdBQ2hDLE9BQXlCLE1BQWxCM0osS0FBS2tDLFdBRWhCbUcsRUFBUzdGLFVBQVVvRyx1QkFBeUIsU0FBVW5GLEdBQ2xELElBQUlrRixFQUFXM0ksS0FBS3NJLFVBQVU3RixJQUFJZ0IsR0FLbEMsT0FKS2tGLEdBQVkzSSxLQUFLa0MsWUFDbEJ5RyxFQUFXM0ksS0FBS2tDLFVBQVU2RixnQkFBZ0IvSCxLQUFLMEIsVUFnQjNELFNBQXVDK0IsR0FDbkMsT0FBT0EsSUFBZTlDLE9BQXFCTixFQUFZb0QsRUFqQldtRyxDQUE4Qm5HLElBQ3hGekQsS0FBS3NJLFVBQVUzRixJQUFJYyxFQUFZa0YsSUFFNUJBLEdBQVksTUFFdkJOLEVBQVM3RixVQUFVaUcsNEJBQThCLFNBQVVoRixHQUN2RCxPQUFJekQsS0FBS2tDLFVBQ0VsQyxLQUFLa0MsVUFBVXlFLGtCQUFvQmxELEVBQWE5QyxFQUdoRDhDLEdBR1I0RSxFQXpKa0IsR0FzTHpCd0IsRUFBb0MsV0FDcEMsU0FBU0EsRUFBbUJ2SSxHQUN4QnRCLEtBQUtzQixLQUFPQSxFQUNadEIsS0FBSzhKLFVBQVksSUFBSXBGLElBNkN6QixPQWxDQW1GLEVBQW1CckgsVUFBVW9CLGFBQWUsU0FBVTFCLEdBQ2xELElBQUlrQixFQUFXcEQsS0FBS3VELFlBQVlyQixFQUFVWixNQUMxQyxHQUFJOEIsRUFBU3VHLGlCQUNULE1BQU0sSUFBSVosTUFBTSxhQUFlN0csRUFBVVosS0FBTyxxQ0FBdUN0QixLQUFLc0IsTUFFaEc4QixFQUFTNEYsYUFBYTlHLElBRTFCMkgsRUFBbUJySCxVQUFVd0Isd0JBQTBCLFNBQVU5QixHQUM5Q2xDLEtBQUt1RCxZQUFZckIsRUFBVVosTUFDN0JxSSxrQkFFVDNKLEtBQUs4SixVQUFVL0csT0FBT2IsRUFBVVosTUFFcEN0QixLQUFLNEQsYUFBYTFCLElBU3RCMkgsRUFBbUJySCxVQUFVZSxZQUFjLFNBQVVqQyxHQUNqRCxHQUFJdEIsS0FBSzhKLFVBQVUzRCxJQUFJN0UsR0FDbkIsT0FBT3RCLEtBQUs4SixVQUFVckgsSUFBSW5CLEdBRzlCLElBQUk4QixFQUFXLElBQUlpRixFQUFTL0csRUFBTXRCLE1BRWxDLE9BREFBLEtBQUs4SixVQUFVbkgsSUFBSXJCLEVBQU04QixHQUNsQkEsR0FFWHlHLEVBQW1CckgsVUFBVVUsYUFBZSxXQUN4QyxPQUFPcUcsTUFBTUMsS0FBS3hKLEtBQUs4SixVQUFVL0gsV0FFOUI4SCxFQWhENEIsSSxzRkNuT3ZDLElBMEtRRSxFQTFLSkMsRUFBbUMsV0FJbkMsU0FBU0EsRUFBa0JDLEdBQ3ZCakssS0FBS2lLLFlBQWNBLEVBRW5CakssS0FBS2tLLFFBQVUsWUEyQ25CLE9BckNBRixFQUFrQnhILFVBQVVHLElBQU0sU0FBVXZELEVBQUtHLEdBQ2hDLE1BQVRBLEVBQ0FTLEtBQUtpSyxZQUFZRSxXQUFXbkssS0FBS29LLGNBQWNoTCxJQUcvQ1ksS0FBS2lLLFlBQVlJLFFBQVFySyxLQUFLb0ssY0FBY2hMLElBQU0sUUFBVUcsS0FPcEV5SyxFQUFrQnhILFVBQVVDLElBQU0sU0FBVXJELEdBQ3hDLElBQUlrTCxFQUFZdEssS0FBS2lLLFlBQVlNLFFBQVF2SyxLQUFLb0ssY0FBY2hMLElBQzVELE9BQWlCLE1BQWJrTCxFQUNPLE1BR0EsUUFBU0EsSUFNeEJOLEVBQWtCeEgsVUFBVWdJLE9BQVMsU0FBVXBMLEdBQzNDWSxLQUFLaUssWUFBWUUsV0FBV25LLEtBQUtvSyxjQUFjaEwsS0FNbkQ0SyxFQUFrQnhILFVBQVU0SCxjQUFnQixTQUFVOUksR0FDbEQsT0FBT3RCLEtBQUtrSyxRQUFVNUksR0FFMUIwSSxFQUFrQnhILFVBQVVpSSxTQUFXLFdBQ25DLE9BQU96SyxLQUFLaUssWUFBWVEsWUFFckJULEVBbEQyQixHQTJFbENVLEVBQStCLFdBQy9CLFNBQVNBLElBQ0wxSyxLQUFLMkssT0FBUyxHQUNkM0ssS0FBSzRLLG1CQUFvQixFQW1CN0IsT0FqQkFGLEVBQWNsSSxVQUFVRyxJQUFNLFNBQVV2RCxFQUFLRyxHQUM1QixNQUFUQSxTQUNPUyxLQUFLMkssT0FBT3ZMLEdBR25CWSxLQUFLMkssT0FBT3ZMLEdBQU9HLEdBRzNCbUwsRUFBY2xJLFVBQVVDLElBQU0sU0FBVXJELEdBQ3BDLE9BQUksUUFBU1ksS0FBSzJLLE9BQVF2TCxHQUNmWSxLQUFLMkssT0FBT3ZMLEdBRWhCLE1BRVhzTCxFQUFjbEksVUFBVWdJLE9BQVMsU0FBVXBMLFVBQ2hDWSxLQUFLMkssT0FBT3ZMLElBRWhCc0wsRUF0QnVCLEdBa0Q5QkcsRUFBbUIsU0FBVUMsR0FDN0IsSUFHSSxHQUFzQixvQkFBWEMsYUFDMkIsSUFBM0JBLE9BQU9ELEdBQWlDLENBRS9DLElBQUlFLEVBQWFELE9BQU9ELEdBR3hCLE9BRkFFLEVBQVdYLFFBQVEsb0JBQXFCLFNBQ3hDVyxFQUFXYixXQUFXLHFCQUNmLElBQUlILEVBQWtCZ0IsSUFHckMsTUFBT25ILElBR1AsT0FBTyxJQUFJNkcsR0FHWE8sRUFBb0JKLEVBQWlCLGdCQUVyQ0ssRUFBaUJMLEVBQWlCLGtCQWtCbENNLEVBQVksSUFBSSxLQUFPLHNCQUt2QkMsR0FDSXJCLEVBQUssRUFDRixXQUNILE9BQU9BLE1BUVhzQixFQUFPLFNBQVVDLEdBQ2pCLElBQUlDLEdBQVksUUFBa0JELEdBQzlCRCxFQUFPLElBQUksS0FDZkEsRUFBS0csT0FBT0QsR0FDWixJQUFJRSxFQUFZSixFQUFLSyxTQUNyQixPQUFPLHFCQUF1QkQsSUFPOUJFLEVBQW1CLFdBRW5CLElBREEsSUFBSUMsRUFBVSxHQUNMcEYsRUFBSyxFQUFHQSxFQUFLdEcsVUFBVXVHLE9BQVFELElBQ3BDb0YsRUFBUXBGLEdBQU10RyxVQUFVc0csR0FHNUIsSUFEQSxJQUFJcUYsRUFBVSxHQUNMQyxFQUFJLEVBQUdBLEVBQUlGLEVBQVFuRixPQUFRcUYsSUFBSyxDQUNyQyxJQUFJek0sRUFBTXVNLEVBQVFFLEdBQ2R2QyxNQUFNd0MsUUFBUTFNLElBQ2JBLEdBQ2tCLGlCQUFSQSxHQUVlLGlCQUFmQSxFQUFJb0gsT0FDZm9GLEdBQVdGLEVBQWlCeEwsTUFBTSxLQUFNZCxHQUd4Q3dNLEdBRG9CLGlCQUFSeE0sR0FDRCxRQUFVQSxHQUdWQSxFQUVmd00sR0FBVyxJQUVmLE9BQU9BLEdBTVBoTCxFQUFTLEtBTVRtTCxHQUFZLEVBTVpDLEVBQWdCLFNBQVVDLEVBQVNDLElBQ25DLFNBQVFBLElBQTBCLElBQVpELElBQWdDLElBQVpBLEVBQW1CLCtDQUM3QyxJQUFaQSxHQUNBZixFQUFVaUIsU0FBVyxhQUNyQnZMLEVBQVNzSyxFQUFVL0csSUFBSXNDLEtBQUt5RSxHQUN4QmdCLEdBQ0FqQixFQUFldkksSUFBSSxtQkFBbUIsSUFHbEIsbUJBQVp1SixFQUNackwsRUFBU3FMLEdBR1RyTCxFQUFTLEtBQ1RxSyxFQUFlVixPQUFPLHFCQU8xQnBHLEVBQU0sV0FFTixJQURBLElBQUl3SCxFQUFVLEdBQ0xwRixFQUFLLEVBQUdBLEVBQUt0RyxVQUFVdUcsT0FBUUQsSUFDcENvRixFQUFRcEYsR0FBTXRHLFVBQVVzRyxHQVE1QixJQU5rQixJQUFkd0YsSUFDQUEsR0FBWSxFQUNHLE9BQVhuTCxJQUE2RCxJQUExQ3FLLEVBQWV6SSxJQUFJLG9CQUN0Q3dKLEdBQWMsSUFHbEJwTCxFQUFRLENBQ1IsSUFBSWdMLEVBQVVGLEVBQWlCeEwsTUFBTSxLQUFNeUwsR0FDM0MvSyxFQUFPZ0wsS0FPWFEsRUFBYSxTQUFVQyxHQUN2QixPQUFPLFdBRUgsSUFEQSxJQUFJVixFQUFVLEdBQ0xwRixFQUFLLEVBQUdBLEVBQUt0RyxVQUFVdUcsT0FBUUQsSUFDcENvRixFQUFRcEYsR0FBTXRHLFVBQVVzRyxHQUU1QnBDLEVBQUlqRSxXQUFNLEdBQVEsUUFBUyxDQUFDbU0sR0FBU1YsTUFNekNwTSxFQUFRLFdBRVIsSUFEQSxJQUFJb00sRUFBVSxHQUNMcEYsRUFBSyxFQUFHQSxFQUFLdEcsVUFBVXVHLE9BQVFELElBQ3BDb0YsRUFBUXBGLEdBQU10RyxVQUFVc0csR0FFNUIsSUFBSXFGLEVBQVUsNEJBQThCRixFQUFpQnhMLFdBQU0sR0FBUSxRQUFTeUwsSUFDcEZULEVBQVUzTCxNQUFNcU0sSUFLaEJVLEVBQVEsV0FFUixJQURBLElBQUlYLEVBQVUsR0FDTHBGLEVBQUssRUFBR0EsRUFBS3RHLFVBQVV1RyxPQUFRRCxJQUNwQ29GLEVBQVFwRixHQUFNdEcsVUFBVXNHLEdBRTVCLElBQUlxRixFQUFVLHlCQUEyQkYsRUFBaUJ4TCxXQUFNLEdBQVEsUUFBU3lMLElBRWpGLE1BREFULEVBQVUzTCxNQUFNcU0sR0FDVixJQUFJOUMsTUFBTThDLElBS2hCbkcsRUFBTyxXQUVQLElBREEsSUFBSWtHLEVBQVUsR0FDTHBGLEVBQUssRUFBR0EsRUFBS3RHLFVBQVV1RyxPQUFRRCxJQUNwQ29GLEVBQVFwRixHQUFNdEcsVUFBVXNHLEdBRTVCLElBQUlxRixFQUFVLHFCQUF1QkYsRUFBaUJ4TCxXQUFNLEdBQVEsUUFBU3lMLElBQzdFVCxFQUFVekYsS0FBS21HLElBcUJmVyxFQUFzQixTQUFVQyxHQUNoQyxNQUF3QixpQkFBVEEsSUFDVkEsR0FBU0EsR0FDTkEsSUFBU0MsT0FBT0MsbUJBQ2hCRixJQUFTQyxPQUFPRSxvQkFrRHhCQyxFQUFXLGFBS1hDLEVBQVcsYUFPWEMsRUFBYyxTQUFVQyxFQUFHQyxHQUMzQixHQUFJRCxJQUFNQyxFQUNOLE9BQU8sRUFFTixHQUFJRCxJQUFNSCxHQUFZSSxJQUFNSCxFQUM3QixPQUFRLEVBRVAsR0FBSUcsSUFBTUosR0FBWUcsSUFBTUYsRUFDN0IsT0FBTyxFQUdQLElBQUlJLEVBQVNDLEVBQVlILEdBQUlJLEVBQVNELEVBQVlGLEdBQ2xELE9BQWUsT0FBWEMsRUFDZSxPQUFYRSxFQUNPRixFQUFTRSxHQUFXLEVBQUlKLEVBQUV2RyxPQUFTd0csRUFBRXhHLE9BQVN5RyxFQUFTRSxHQUd0RCxFQUdJLE9BQVhBLEVBQ0UsRUFHQUosRUFBSUMsR0FBSyxFQUFJLEdBUzVCSSxFQUFnQixTQUFVTCxFQUFHQyxHQUM3QixPQUFJRCxJQUFNQyxFQUNDLEVBRUZELEVBQUlDLEdBQ0QsRUFHRCxHQVFYSyxFQUFhLFNBQVVsTyxFQUFLbU8sR0FDNUIsR0FBSUEsR0FBT25PLEtBQU9tTyxFQUNkLE9BQU9BLEVBQUluTyxHQUdYLE1BQU0sSUFBSTJKLE1BQU0seUJBQTJCM0osRUFBTSxpQkFBa0IsUUFBVW1PLEtBT2pGQyxFQUFvQixTQUFVRCxHQUM5QixHQUFtQixpQkFBUkEsR0FBNEIsT0FBUkEsRUFDM0IsT0FBTyxRQUFVQSxHQUVyQixJQUFJM0csRUFBTyxHQUVYLElBQUssSUFBSTZHLEtBQUtGLEVBQ1YzRyxFQUFLbkIsS0FBS2dJLEdBR2Q3RyxFQUFLOEcsT0FFTCxJQURBLElBQUl0TyxFQUFNLElBQ0QwTSxFQUFJLEVBQUdBLEVBQUlsRixFQUFLSCxPQUFRcUYsSUFDbkIsSUFBTkEsSUFDQTFNLEdBQU8sS0FFWEEsSUFBTyxRQUFVd0gsRUFBS2tGLElBQ3RCMU0sR0FBTyxJQUNQQSxHQUFPb08sRUFBa0JELEVBQUkzRyxFQUFLa0YsS0FHdEMsT0FEQTFNLEVBQU8sS0FTUHVPLEVBQW9CLFNBQVVyQyxFQUFLc0MsR0FDbkMsSUFBSUMsRUFBTXZDLEVBQUk3RSxPQUNkLEdBQUlvSCxHQUFPRCxFQUNQLE1BQU8sQ0FBQ3RDLEdBR1osSUFEQSxJQUFJd0MsRUFBVyxHQUNOQyxFQUFJLEVBQUdBLEVBQUlGLEVBQUtFLEdBQUtILEVBQ3RCRyxFQUFJSCxFQUFVQyxFQUNkQyxFQUFTckksS0FBSzZGLEVBQUkwQyxVQUFVRCxFQUFHRixJQUcvQkMsRUFBU3JJLEtBQUs2RixFQUFJMEMsVUFBVUQsRUFBR0EsRUFBSUgsSUFHM0MsT0FBT0UsR0FRWCxTQUFTRyxFQUFLVixFQUFLek4sR0FDZixJQUFLLElBQUlWLEtBQU9tTyxFQUNSQSxFQUFJVyxlQUFlOU8sSUFDbkJVLEVBQUdWLEVBQUttTyxFQUFJbk8sSUFXeEIsSUF1eUNRK08sRUFHQUMsRUFLQUMsRUFpSkpDLEVBdUZBQyxFQW1EQUMsRUF3UUFDLEVBQ0FDLEVBaTNCQUMsRUF5S0FDLEVBNzJGQUMsRUFBd0IsU0FBVUMsSUFDbEMsU0FBUXRDLEVBQW9Cc0MsR0FBSSx1QkFDaEMsSUFFSUMsRUFBR2xMLEVBQUdtTCxFQUFHQyxFQUFJbkQsRUFHUCxJQUFOZ0QsR0FDQWpMLEVBQUksRUFDSm1MLEVBQUksRUFDSkQsRUFBSSxFQUFJRCxJQUFNLElBQVksRUFBSSxJQUc5QkMsRUFBSUQsRUFBSSxHQUNSQSxFQUFJSSxLQUFLQyxJQUFJTCxLQUNKSSxLQUFLRSxJQUFJLEdBQUcsT0FHakJ2TCxHQURBb0wsRUFBS0MsS0FBS0csSUFBSUgsS0FBS0ksTUFBTUosS0FBSzlLLElBQUkwSyxHQUFLSSxLQUFLSyxLQWR6QyxZQWdCSFAsRUFBSUUsS0FBS00sTUFBTVYsRUFBSUksS0FBS0UsSUFBSSxFQWpCWixHQWlCdUJILEdBQU1DLEtBQUtFLElBQUksRUFqQnRDLE9BcUJoQnZMLEVBQUksRUFDSm1MLEVBQUlFLEtBQUtNLE1BQU1WLEVBQUlJLEtBQUtFLElBQUksR0FBRyxTQUl2QyxJQUFJSyxFQUFPLEdBQ1gsSUFBSzNELEVBM0JtQixHQTJCUkEsRUFBR0EsR0FBSyxFQUNwQjJELEVBQUtoSyxLQUFLdUosRUFBSSxFQUFJLEVBQUksR0FDdEJBLEVBQUlFLEtBQUtJLE1BQU1OLEVBQUksR0FFdkIsSUFBS2xELEVBL0JPLEdBK0JJQSxFQUFHQSxHQUFLLEVBQ3BCMkQsRUFBS2hLLEtBQUs1QixFQUFJLEVBQUksRUFBSSxHQUN0QkEsRUFBSXFMLEtBQUtJLE1BQU16TCxFQUFJLEdBRXZCNEwsRUFBS2hLLEtBQUtzSixFQUFJLEVBQUksR0FDbEJVLEVBQUtDLFVBQ0wsSUFBSXBFLEVBQU1tRSxFQUFLOUosS0FBSyxJQUVoQmdLLEVBQWdCLEdBQ3BCLElBQUs3RCxFQUFJLEVBQUdBLEVBQUksR0FBSUEsR0FBSyxFQUFHLENBQ3hCLElBQUk4RCxFQUFVQyxTQUFTdkUsRUFBSXdFLE9BQU9oRSxFQUFHLEdBQUksR0FBR3JCLFNBQVMsSUFDOUIsSUFBbkJtRixFQUFRbkosU0FDUm1KLEVBQVUsSUFBTUEsR0FFcEJELEdBQWdDQyxFQUVwQyxPQUFPRCxFQUFjSSxlQWtEckJDLEVBQWtCLElBQUlDLE9BQU8scUJBTTdCOUMsRUFBYyxTQUFVN0IsR0FDeEIsR0FBSTBFLEVBQWdCRSxLQUFLNUUsR0FBTSxDQUMzQixJQUFJNkUsRUFBU3pELE9BQU9wQixHQUNwQixHQUFJNkUsSUFBVyxZQUFjQSxHQUFVLFdBQ25DLE9BQU9BLEVBR2YsT0FBTyxNQW1CUEMsRUFBaUIsU0FBVXRRLEdBQzNCLElBQ0lBLElBRUosTUFBTytELEdBRUh3TSxZQUFXLFdBS1AsSUFBSUMsRUFBUXpNLEVBQUV5TSxPQUFTLEdBRXZCLE1BREE1SyxFQUFLLHlDQUEwQzRLLEdBQ3pDek0sSUFDUHFMLEtBQUtJLE1BQU0sTUEwQmxCaUIsRUFBd0IsU0FBVXpRLEVBQUkwUSxHQUN0QyxJQUFJQyxFQUFVSixXQUFXdlEsRUFBSTBRLEdBTTdCLE1BSnVCLGlCQUFaQyxHQUF3QkEsRUFBZSxPQUU5Q0EsRUFBZSxRQUVaQSxHQXdCUEMsRUFBc0IsV0FNdEIsU0FBU0EsRUFBS0MsRUFBY0MsR0FDeEIsUUFBaUIsSUFBYkEsRUFBcUIsQ0FDckI1USxLQUFLNlEsUUFBVUYsRUFBYUcsTUFBTSxLQUdsQyxJQURBLElBQUlDLEVBQVMsRUFDSmpGLEVBQUksRUFBR0EsRUFBSTlMLEtBQUs2USxRQUFRcEssT0FBUXFGLElBQ2pDOUwsS0FBSzZRLFFBQVEvRSxHQUFHckYsT0FBUyxJQUN6QnpHLEtBQUs2USxRQUFRRSxHQUFVL1EsS0FBSzZRLFFBQVEvRSxHQUNwQ2lGLEtBR1IvUSxLQUFLNlEsUUFBUXBLLE9BQVNzSyxFQUN0Qi9RLEtBQUtnUixVQUFZLE9BR2pCaFIsS0FBSzZRLFFBQVVGLEVBQ2YzUSxLQUFLZ1IsVUFBWUosRUFrTXpCLE9BL0xBdE8sT0FBT0MsZUFBZW1PLEVBQU0sUUFBUyxDQU1qQ2pPLElBQUssV0FDRCxPQUFPLElBQUlpTyxFQUFLLEtBRXBCN04sWUFBWSxFQUNaQyxjQUFjLElBRWxCNE4sRUFBS2xPLFVBQVV5TyxTQUFXLFdBQ3RCLE9BQUlqUixLQUFLZ1IsV0FBYWhSLEtBQUs2USxRQUFRcEssT0FDeEIsS0FFSnpHLEtBQUs2USxRQUFRN1EsS0FBS2dSLFlBSzdCTixFQUFLbE8sVUFBVTBPLFVBQVksV0FDdkIsT0FBT2xSLEtBQUs2USxRQUFRcEssT0FBU3pHLEtBQUtnUixXQUt0Q04sRUFBS2xPLFVBQVUyTyxTQUFXLFdBQ3RCLElBQUlQLEVBQVc1USxLQUFLZ1IsVUFJcEIsT0FISUosRUFBVzVRLEtBQUs2USxRQUFRcEssUUFDeEJtSyxJQUVHLElBQUlGLEVBQUsxUSxLQUFLNlEsUUFBU0QsSUFLbENGLEVBQUtsTyxVQUFVNE8sUUFBVSxXQUNyQixPQUFJcFIsS0FBS2dSLFVBQVloUixLQUFLNlEsUUFBUXBLLE9BQ3ZCekcsS0FBSzZRLFFBQVE3USxLQUFLNlEsUUFBUXBLLE9BQVMsR0FFdkMsTUFFWGlLLEVBQUtsTyxVQUFVaUksU0FBVyxXQUV0QixJQURBLElBQUk0RyxFQUFhLEdBQ1J2RixFQUFJOUwsS0FBS2dSLFVBQVdsRixFQUFJOUwsS0FBSzZRLFFBQVFwSyxPQUFRcUYsSUFDMUIsS0FBcEI5TCxLQUFLNlEsUUFBUS9FLEtBQ2J1RixHQUFjLElBQU1yUixLQUFLNlEsUUFBUS9FLElBR3pDLE9BQU91RixHQUFjLEtBRXpCWCxFQUFLbE8sVUFBVThPLG1CQUFxQixXQUVoQyxJQURBLElBQUlELEVBQWEsR0FDUnZGLEVBQUk5TCxLQUFLZ1IsVUFBV2xGLEVBQUk5TCxLQUFLNlEsUUFBUXBLLE9BQVFxRixJQUMxQixLQUFwQjlMLEtBQUs2USxRQUFRL0UsS0FDYnVGLEdBQWMsSUFBTUUsbUJBQW1Cek0sT0FBTzlFLEtBQUs2USxRQUFRL0UsTUFHbkUsT0FBT3VGLEdBQWMsS0FRekJYLEVBQUtsTyxVQUFVZ1AsTUFBUSxTQUFVQyxHQUU3QixZQURjLElBQVZBLElBQW9CQSxFQUFRLEdBQ3pCelIsS0FBSzZRLFFBQVFXLE1BQU14UixLQUFLZ1IsVUFBWVMsSUFLL0NmLEVBQUtsTyxVQUFVa1AsT0FBUyxXQUNwQixHQUFJMVIsS0FBS2dSLFdBQWFoUixLQUFLNlEsUUFBUXBLLE9BQy9CLE9BQU8sS0FHWCxJQURBLElBQUlrTCxFQUFTLEdBQ0o3RixFQUFJOUwsS0FBS2dSLFVBQVdsRixFQUFJOUwsS0FBSzZRLFFBQVFwSyxPQUFTLEVBQUdxRixJQUN0RDZGLEVBQU9sTSxLQUFLekYsS0FBSzZRLFFBQVEvRSxJQUU3QixPQUFPLElBQUk0RSxFQUFLaUIsRUFBUSxJQU01QmpCLEVBQUtsTyxVQUFVb1AsTUFBUSxTQUFVQyxHQUU3QixJQURBLElBQUlGLEVBQVMsR0FDSjdGLEVBQUk5TCxLQUFLZ1IsVUFBV2xGLEVBQUk5TCxLQUFLNlEsUUFBUXBLLE9BQVFxRixJQUNsRDZGLEVBQU9sTSxLQUFLekYsS0FBSzZRLFFBQVEvRSxJQUU3QixHQUFJK0YsYUFBd0JuQixFQUN4QixJQUFTNUUsRUFBSStGLEVBQWFiLFVBQVdsRixFQUFJK0YsRUFBYWhCLFFBQVFwSyxPQUFRcUYsSUFDbEU2RixFQUFPbE0sS0FBS29NLEVBQWFoQixRQUFRL0UsUUFJckMsS0FBSWdHLEVBQWNELEVBQWFmLE1BQU0sS0FDckMsSUFBU2hGLEVBQUksRUFBR0EsRUFBSWdHLEVBQVlyTCxPQUFRcUYsSUFDaENnRyxFQUFZaEcsR0FBR3JGLE9BQVMsR0FDeEJrTCxFQUFPbE0sS0FBS3FNLEVBQVloRyxJQUlwQyxPQUFPLElBQUk0RSxFQUFLaUIsRUFBUSxJQUs1QmpCLEVBQUtsTyxVQUFVdVAsUUFBVSxXQUNyQixPQUFPL1IsS0FBS2dSLFdBQWFoUixLQUFLNlEsUUFBUXBLLFFBTzFDaUssRUFBS3NCLGFBQWUsU0FBVUMsRUFBV0MsR0FDckMsSUFBSUMsRUFBUUYsRUFBVWhCLFdBQVltQixFQUFRRixFQUFVakIsV0FDcEQsR0FBYyxPQUFWa0IsRUFDQSxPQUFPRCxFQUVOLEdBQUlDLElBQVVDLEVBQ2YsT0FBTzFCLEVBQUtzQixhQUFhQyxFQUFVZCxXQUFZZSxFQUFVZixZQUd6RCxNQUFNLElBQUlwSSxNQUFNLDhCQUNabUosRUFEWSw4QkFJWkQsRUFDQSxNQVFadkIsRUFBSzJCLGFBQWUsU0FBVUMsRUFBTUMsR0FHaEMsSUFGQSxJQUFJQyxFQUFXRixFQUFLZCxRQUNoQmlCLEVBQVlGLEVBQU1mLFFBQ2IxRixFQUFJLEVBQUdBLEVBQUkwRyxFQUFTL0wsUUFBVXFGLEVBQUkyRyxFQUFVaE0sT0FBUXFGLElBQUssQ0FDOUQsSUFBSTRHLEVBQU0zRixFQUFZeUYsRUFBUzFHLEdBQUkyRyxFQUFVM0csSUFDN0MsR0FBWSxJQUFSNEcsRUFDQSxPQUFPQSxFQUdmLE9BQUlGLEVBQVMvTCxTQUFXZ00sRUFBVWhNLE9BQ3ZCLEVBRUorTCxFQUFTL0wsT0FBU2dNLEVBQVVoTSxRQUFVLEVBQUksR0FPckRpSyxFQUFLbE8sVUFBVW1RLE9BQVMsU0FBVUMsR0FDOUIsR0FBSTVTLEtBQUtrUixjQUFnQjBCLEVBQU0xQixZQUMzQixPQUFPLEVBRVgsSUFBSyxJQUFJcEYsRUFBSTlMLEtBQUtnUixVQUFXNkIsRUFBSUQsRUFBTTVCLFVBQVdsRixHQUFLOUwsS0FBSzZRLFFBQVFwSyxPQUFRcUYsSUFBSytHLElBQzdFLEdBQUk3UyxLQUFLNlEsUUFBUS9FLEtBQU84RyxFQUFNL0IsUUFBUWdDLEdBQ2xDLE9BQU8sRUFHZixPQUFPLEdBT1huQyxFQUFLbE8sVUFBVXNRLFNBQVcsU0FBVUYsR0FDaEMsSUFBSTlHLEVBQUk5TCxLQUFLZ1IsVUFDVDZCLEVBQUlELEVBQU01QixVQUNkLEdBQUloUixLQUFLa1IsWUFBYzBCLEVBQU0xQixZQUN6QixPQUFPLEVBRVgsS0FBT3BGLEVBQUk5TCxLQUFLNlEsUUFBUXBLLFFBQVEsQ0FDNUIsR0FBSXpHLEtBQUs2USxRQUFRL0UsS0FBTzhHLEVBQU0vQixRQUFRZ0MsR0FDbEMsT0FBTyxJQUVUL0csSUFDQStHLEVBRU4sT0FBTyxHQUVKbkMsRUF4TmMsR0FvT3JCcUMsRUFBZ0MsV0FLaEMsU0FBU0EsRUFBZUMsRUFBTUMsR0FDMUJqVCxLQUFLaVQsYUFBZUEsRUFFcEJqVCxLQUFLa1QsT0FBU0YsRUFBS3hCLFFBRW5CeFIsS0FBS21ULFlBQWNqRSxLQUFLa0UsSUFBSSxFQUFHcFQsS0FBS2tULE9BQU96TSxRQUMzQyxJQUFLLElBQUlxRixFQUFJLEVBQUdBLEVBQUk5TCxLQUFLa1QsT0FBT3pNLE9BQVFxRixJQUNwQzlMLEtBQUttVCxjQUFlLFFBQWFuVCxLQUFLa1QsT0FBT3BILElBRWpEOUwsS0FBS3FULGNBZ0VULE9BOURBL1EsT0FBT0MsZUFBZXdRLEVBQWdCLGlCQUFrQixDQUVwRHRRLElBQUssV0FDRCxPQUFPLElBRVhJLFlBQVksRUFDWkMsY0FBYyxJQUVsQlIsT0FBT0MsZUFBZXdRLEVBQWdCLHdCQUF5QixDQUUzRHRRLElBQUssV0FDRCxPQUFPLEtBRVhJLFlBQVksRUFDWkMsY0FBYyxJQUdsQmlRLEVBQWV2USxVQUFVaUQsS0FBTyxTQUFVbU0sR0FFbEM1UixLQUFLa1QsT0FBT3pNLE9BQVMsSUFDckJ6RyxLQUFLbVQsYUFBZSxHQUV4Qm5ULEtBQUtrVCxPQUFPek4sS0FBS21NLEdBQ2pCNVIsS0FBS21ULGNBQWUsUUFBYXZCLEdBQ2pDNVIsS0FBS3FULGVBRVROLEVBQWV2USxVQUFVOFEsSUFBTSxXQUMzQixJQUFJQyxFQUFPdlQsS0FBS2tULE9BQU9JLE1BQ3ZCdFQsS0FBS21ULGNBQWUsUUFBYUksR0FFN0J2VCxLQUFLa1QsT0FBT3pNLE9BQVMsSUFDckJ6RyxLQUFLbVQsYUFBZSxJQUc1QkosRUFBZXZRLFVBQVU2USxZQUFjLFdBQ25DLEdBQUlyVCxLQUFLbVQsWUFBY0osRUFBZVMsc0JBQ2xDLE1BQU0sSUFBSXpLLE1BQU0vSSxLQUFLaVQsYUFDakIsOEJBQ0FGLEVBQWVTLHNCQUNmLFdBQ0F4VCxLQUFLbVQsWUFDTCxNQUVSLEdBQUluVCxLQUFLa1QsT0FBT3pNLE9BQVNzTSxFQUFlVSxlQUNwQyxNQUFNLElBQUkxSyxNQUFNL0ksS0FBS2lULGFBQ2pCLGlFQUNBRixFQUFlVSxlQUNmLGdDQUNBelQsS0FBSzBULGtCQVFqQlgsRUFBZXZRLFVBQVVrUixjQUFnQixXQUNyQyxPQUEyQixJQUF2QjFULEtBQUtrVCxPQUFPek0sT0FDTCxHQUVKLGdCQUFrQnpHLEtBQUtrVCxPQUFPdk4sS0FBSyxLQUFPLEtBRTlDb04sRUE5RXdCLEdBc0cvQlksRUFBZSxpQkFHZkMsRUFBWSxZQUNaQyxHQUFlLGVBdUJmQyxHQUEwQixXQVMxQixTQUFTQSxFQUFTQyxFQUFNQyxFQUFRelAsRUFBVzBQLEVBQWVDLEVBQVdDLEVBQWdCQyxRQUMvRCxJQUFkRixJQUF3QkEsR0FBWSxRQUNqQixJQUFuQkMsSUFBNkJBLEVBQWlCLFNBQ1osSUFBbENDLElBQTRDQSxHQUFnQyxHQUNoRnBVLEtBQUtnVSxPQUFTQSxFQUNkaFUsS0FBS3VFLFVBQVlBLEVBQ2pCdkUsS0FBS2lVLGNBQWdCQSxFQUNyQmpVLEtBQUtrVSxVQUFZQSxFQUNqQmxVLEtBQUttVSxlQUFpQkEsRUFDdEJuVSxLQUFLb1UsOEJBQWdDQSxFQUNyQ3BVLEtBQUsrVCxLQUFPQSxFQUFLaEUsY0FDakIvUCxLQUFLcVUsT0FBU3JVLEtBQUsrVCxLQUFLakUsT0FBTzlQLEtBQUsrVCxLQUFLcE0sUUFBUSxLQUFPLEdBQ3hEM0gsS0FBS3NVLGFBQ0RySixFQUFrQnhJLElBQUksUUFBVXNSLElBQVMvVCxLQUFLK1QsS0FrRXRELE9BaEVBRCxFQUFTdFIsVUFBVStSLGdCQUFrQixXQUNqQyxPQUFRdlUsS0FBSytULE9BQVMvVCxLQUFLc1UsY0FDdkJ0VSxLQUFLd1UsZ0JBQ0x4VSxLQUFLb1UsK0JBRWJOLEVBQVN0UixVQUFVaVMsZ0JBQWtCLFdBQ2pDLE1BQTBDLE9BQW5DelUsS0FBS3NVLGFBQWF4RSxPQUFPLEVBQUcsSUFFdkNnRSxFQUFTdFIsVUFBVWtTLFdBQWEsV0FDNUIsTUFBdUIsd0JBQWhCMVUsS0FBS3FVLFFBRWhCUCxFQUFTdFIsVUFBVWdTLGFBQWUsV0FDOUIsTUFBd0IsbUJBQWhCeFUsS0FBS3FVLFFBQStDLHdCQUFoQnJVLEtBQUtxVSxRQUVyRFAsRUFBU3RSLFVBQVVtUyxXQUFhLFNBQVVDLEdBQ2xDQSxJQUFZNVUsS0FBS3NVLGVBQ2pCdFUsS0FBS3NVLGFBQWVNLEVBQ2hCNVUsS0FBS3lVLG1CQUNMeEosRUFBa0J0SSxJQUFJLFFBQVUzQyxLQUFLK1QsS0FBTS9ULEtBQUtzVSxnQkFVNURSLEVBQVN0UixVQUFVcVMsY0FBZ0IsU0FBVXpPLEVBQU0wTyxHQUcvQyxJQUFJQyxFQUNKLElBSEEsUUFBdUIsaUJBQVQzTyxFQUFtQiwrQkFDakMsUUFBeUIsaUJBQVgwTyxFQUFxQixnQ0FFL0IxTyxJQUFTd04sRUFDVG1CLEdBQ0svVSxLQUFLZ1UsT0FBUyxTQUFXLFNBQVdoVSxLQUFLc1UsYUFBZSxZQUU1RCxJQUFJbE8sSUFBU3lOLEdBS2QsTUFBTSxJQUFJOUssTUFBTSw0QkFBOEIzQyxHQUo5QzJPLEdBQ0svVSxLQUFLZ1UsT0FBUyxXQUFhLFdBQWFoVSxLQUFLc1UsYUFBZSxRQUtqRXRVLEtBQUt1VSxvQkFDTE8sRUFBVyxHQUFJOVUsS0FBS3VFLFdBRXhCLElBQUl5USxFQUFRLEdBSVosT0FIQS9HLEVBQUs2RyxHQUFRLFNBQVUxVixFQUFLRyxHQUN4QnlWLEVBQU12UCxLQUFLckcsRUFBTSxJQUFNRyxNQUVwQndWLEVBQVVDLEVBQU1yUCxLQUFLLE1BR2hDbU8sRUFBU3RSLFVBQVVpSSxTQUFXLFdBQzFCLElBQUlhLEVBQU10TCxLQUFLaVYsY0FJZixPQUhJalYsS0FBS21VLGlCQUNMN0ksR0FBTyxJQUFNdEwsS0FBS21VLGVBQWlCLEtBRWhDN0ksR0FHWHdJLEVBQVN0UixVQUFVeVMsWUFBYyxXQUM3QixPQUFRalYsS0FBS2dVLE9BQVMsV0FBYSxXQUFhaFUsS0FBSytULE1BRWxERCxFQXhGa0IsR0FnS3pCb0IsR0FBZ0IsU0FBVUMsRUFBU2pCLEdBQ25DLElBQUlrQixFQUFZQyxHQUFpQkYsR0FBVTVRLEVBQVk2USxFQUFVN1EsVUFDeEMsaUJBQXJCNlEsRUFBVWYsUUFDVjlILEVBQU02SSxFQUFVckIsS0FBVnFCLDhFQUtKN1EsR0FBMkIsY0FBZEEsR0FDTSxjQUFyQjZRLEVBQVVmLFFBQ1Y5SCxFQUFNLGdGQUVMNkksRUFBVXBCLFFBeDZCTyxvQkFBWGpKLFFBQ1BBLE9BQU91SyxVQUNQdkssT0FBT3VLLFNBQVNDLFdBQ2dDLElBQWhEeEssT0FBT3VLLFNBQVNDLFNBQVM1TixRQUFRLFdBQ2pDakMsRUFBSyw2RkF1NkJULElBQUl1TyxFQUFxQyxPQUFyQm1CLEVBQVVJLFFBQXdDLFFBQXJCSixFQUFVSSxPQUMzRCxNQUFPLENBQ0hDLFNBQVUsSUFBSTNCLEdBQVNzQixFQUFVckIsS0FBTXFCLEVBQVVwQixPQUFRelAsRUFBVzJQLEVBQVdELEVBQzNELEdBQ2UxUCxJQUFjNlEsRUFBVU0sV0FDM0QxQyxLQUFNLElBQUl0QyxFQUFLMEUsRUFBVS9ELGNBUTdCZ0UsR0FBbUIsU0FBVUYsR0FFN0IsSUFBSXBCLEVBQU8sR0FBSU0sRUFBUyxHQUFJcUIsRUFBWSxHQUFJckUsRUFBYSxHQUFJOU0sRUFBWSxHQUVyRXlQLEdBQVMsRUFBTXdCLEVBQVMsUUFBU0csRUFBTyxJQUU1QyxHQUF1QixpQkFBWlIsRUFBc0IsQ0FFN0IsSUFBSVMsRUFBV1QsRUFBUXhOLFFBQVEsTUFDM0JpTyxHQUFZLElBQ1pKLEVBQVNMLEVBQVFuSCxVQUFVLEVBQUc0SCxFQUFXLEdBQ3pDVCxFQUFVQSxFQUFRbkgsVUFBVTRILEVBQVcsSUFHM0MsSUFBSUMsRUFBV1YsRUFBUXhOLFFBQVEsTUFDYixJQUFka08sSUFDQUEsRUFBV1YsRUFBUTFPLFFBRXZCLElBQUlxUCxFQUFrQlgsRUFBUXhOLFFBQVEsTUFDYixJQUFyQm1PLElBQ0FBLEVBQWtCWCxFQUFRMU8sUUFFOUJzTixFQUFPb0IsRUFBUW5ILFVBQVUsRUFBR2tCLEtBQUtHLElBQUl3RyxFQUFVQyxJQUMzQ0QsRUFBV0MsSUFFWHpFLEVBdEdaLFNBQW9CQSxHQUdoQixJQUZBLElBQUkwRSxFQUFvQixHQUNwQnBFLEVBQVNOLEVBQVdQLE1BQU0sS0FDckJoRixFQUFJLEVBQUdBLEVBQUk2RixFQUFPbEwsT0FBUXFGLElBQy9CLEdBQUk2RixFQUFPN0YsR0FBR3JGLE9BQVMsRUFBRyxDQUN0QixJQUFJdVAsRUFBUXJFLEVBQU83RixHQUNuQixJQUNJa0ssRUFBUUMsbUJBQW1CRCxFQUFNRSxRQUFRLE1BQU8sTUFFcEQsTUFBT3JTLElBQ1BrUyxHQUFxQixJQUFNQyxFQUduQyxPQUFPRCxFQXlGY0ksQ0FBV2hCLEVBQVFuSCxVQUFVNkgsRUFBVUMsS0FFeEQsSUFBSU0sRUFyRlosU0FBcUJDLEdBQ2pCLElBQUluVixFQUFLWixFQUNMZ1csRUFBVSxHQUNnQixNQUExQkQsRUFBWUUsT0FBTyxLQUNuQkYsRUFBY0EsRUFBWXJJLFVBQVUsSUFFeEMsSUFDSSxJQUFLLElBQUlwTSxHQUFLLFFBQVN5VSxFQUFZdkYsTUFBTSxNQUFPOU8sRUFBS0osRUFBR0ssUUFBU0QsRUFBR3ZDLEtBQU11QyxFQUFLSixFQUFHSyxPQUFRLENBQ3RGLElBQUl1VSxFQUFVeFUsRUFBR3pDLE1BQ2pCLEdBQXVCLElBQW5CaVgsRUFBUS9QLE9BQVosQ0FHQSxJQUFJZ1EsRUFBS0QsRUFBUTFGLE1BQU0sS0FDTCxJQUFkMkYsRUFBR2hRLE9BQ0g2UCxFQUFRTCxtQkFBbUJRLEVBQUcsS0FBT1IsbUJBQW1CUSxFQUFHLElBRzNEL1EsRUFBSywwQkFBNEI4USxFQUFVLGVBQWlCSCxFQUFjLE9BSXRGLE1BQU9sVSxHQUFTakIsRUFBTSxDQUFFMUIsTUFBTzJDLEdBQy9CLFFBQ0ksSUFDUUgsSUFBT0EsRUFBR3ZDLE9BQVNhLEVBQUtzQixFQUFHUSxTQUFTOUIsRUFBRytCLEtBQUtULEdBRXBELFFBQVUsR0FBSVYsRUFBSyxNQUFNQSxFQUFJMUIsT0FFakMsT0FBTzhXLEVBeURlSSxDQUFZdkIsRUFBUW5ILFVBQVVrQixLQUFLRyxJQUFJOEYsRUFBUTFPLE9BQVFxUCxNQUV6RUYsRUFBVzdCLEVBQUtwTSxRQUFRLE9BQ1IsR0FDWnFNLEVBQW9CLFVBQVh3QixHQUFpQyxRQUFYQSxFQUMvQkcsRUFBTzlGLFNBQVNrRSxFQUFLL0YsVUFBVTRILEVBQVcsR0FBSSxLQUc5Q0EsRUFBVzdCLEVBQUt0TixPQUVwQixJQUFJa1EsRUFBa0I1QyxFQUFLdkMsTUFBTSxFQUFHb0UsR0FDcEMsR0FBc0MsY0FBbENlLEVBQWdCNUcsY0FDaEJzRSxFQUFTLGlCQUVSLEdBQUlzQyxFQUFnQjdGLE1BQU0sS0FBS3JLLFFBQVUsRUFDMUM0TixFQUFTc0MsTUFFUixDQUVELElBQUlDLEVBQVM3QyxFQUFLcE0sUUFBUSxLQUMxQitOLEVBQVkzQixFQUFLL0YsVUFBVSxFQUFHNEksR0FBUTdHLGNBQ3RDc0UsRUFBU04sRUFBSy9GLFVBQVU0SSxFQUFTLEdBRWpDclMsRUFBWW1SLEVBR1osT0FBUVUsSUFDUjdSLEVBQVk2UixFQUFnQixJQUdwQyxNQUFPLENBQ0hyQyxLQUFNQSxFQUNONEIsS0FBTUEsRUFDTnRCLE9BQVFBLEVBQ1JxQixVQUFXQSxFQUNYMUIsT0FBUUEsRUFDUndCLE9BQVFBLEVBQ1JuRSxXQUFZQSxFQUNaOU0sVUFBV0EsSUF5QmZzUyxHQUFxQixpQ0FPckJDLEdBQXNCLCtCQU10QkMsR0FBaUIsU0FLakJDLEdBQWEsU0FBVTVYLEdBQ3ZCLE1BQXVCLGlCQUFSQSxHQUFtQyxJQUFmQSxFQUFJcUgsU0FBaUJvUSxHQUFtQjNHLEtBQUs5USxJQU1oRjZYLEdBQW9CLFNBQVU1RixHQUM5QixNQUE4QixpQkFBZkEsR0FDVyxJQUF0QkEsRUFBVzVLLFNBQ1ZxUSxHQUFvQjVHLEtBQUttQixJQWlCOUI2RixHQUFrQixTQUFVQyxHQUM1QixPQUFxQixPQUFiQSxHQUNnQixpQkFBYkEsR0FDYyxpQkFBYkEsSUFBMEIzSyxFQUFvQjJLLElBQ3JEQSxHQUN1QixpQkFBYkEsSUFFUCxRQUFTQSxFQUFVLFFBVzNCQyxHQUEwQixTQUFVQyxFQUFRQyxFQUFnQjdLLEVBQU11RyxFQUFNbEssR0FDcEVBLFFBQXFCekksSUFBVG9NLEdBR2hCOEssSUFBcUIsUUFBWUYsRUFBUUMsRUFBZ0J4TyxHQUFXMkQsRUFBTXVHLElBUzFFdUUsR0FBdUIsU0FBVUMsRUFBYS9LLEVBQU1nTCxHQUNwRCxJQUFJekUsRUFBT3lFLGFBQWlCL0csRUFBTyxJQUFJcUMsRUFBZTBFLEVBQU9ELEdBQWVDLEVBQzVFLFFBQWFwWCxJQUFUb00sRUFDQSxNQUFNLElBQUkxRCxNQUFNeU8sRUFBYyxzQkFBd0J4RSxFQUFLVSxpQkFFL0QsR0FBb0IsbUJBQVRqSCxFQUNQLE1BQU0sSUFBSTFELE1BQU15TyxFQUNaLHVCQUNBeEUsRUFBS1UsZ0JBQ0wsb0JBQ0FqSCxFQUFLaEMsWUFFYixHQUFJK0IsRUFBb0JDLEdBQ3BCLE1BQU0sSUFBSTFELE1BQU15TyxFQUFjLFlBQWMvSyxFQUFLaEMsV0FBYSxJQUFNdUksRUFBS1UsaUJBRzdFLEdBQW9CLGlCQUFUakgsR0FDUEEsRUFBS2hHLE9BQVNzUSxHQUFpQixJQUMvQixRQUFhdEssR0FBUXNLLEdBQ3JCLE1BQU0sSUFBSWhPLE1BQU15Tyx3REFJWnhFLEVBQUtVLGdCQUNMLE1BQ0FqSCxFQUFLdUIsVUFBVSxFQUFHLElBQ2xCLFNBSVIsR0FBSXZCLEdBQXdCLGlCQUFUQSxFQUFtQixDQUNsQyxJQUFJaUwsR0FBZ0IsRUFDaEJDLEdBQW1CLEVBcUJ2QixHQXBCQTFKLEVBQUt4QixHQUFNLFNBQVVyTixFQUFLRyxHQUN0QixHQUFZLFdBQVJILEVBQ0FzWSxHQUFnQixPQUVmLEdBQVksY0FBUnRZLEdBQStCLFFBQVJBLElBQzVCdVksR0FBbUIsR0FDZFgsR0FBVzVYLElBQ1osTUFBTSxJQUFJMkosTUFBTXlPLEVBQ1osNkJBQ0FwWSxFQUNBLEtBQ0E0VCxFQUFLVSxnQkFKTzhELHdGQVN4QnhFLEVBQUt2TixLQUFLckcsR0FDVm1ZLEdBQXFCQyxFQUFhalksRUFBT3lULEdBQ3pDQSxFQUFLTSxTQUVMb0UsR0FBaUJDLEVBQ2pCLE1BQU0sSUFBSTVPLE1BQU15TyxFQUNaLDRCQUNBeEUsRUFBS1UsZ0JBQ0wsc0NBdURaa0UsR0FBK0IsU0FBVVAsRUFBUUMsRUFBZ0I3SyxFQUFNdUcsRUFBTWxLLEdBQzdFLElBQUlBLFFBQXFCekksSUFBVG9NLEVBQWhCLENBR0EsSUFBSW9MLEdBQWdCLFFBQVlSLEVBQVFDLEVBQWdCeE8sR0FDeEQsSUFBTTJELEdBQXdCLGlCQUFUQSxHQUFzQmxELE1BQU13QyxRQUFRVSxHQUNyRCxNQUFNLElBQUkxRCxNQUFNOE8sRUFBZ0IsMERBRXBDLElBQUlDLEVBQWEsR0FDakI3SixFQUFLeEIsR0FBTSxTQUFVck4sRUFBS0csR0FDdEIsSUFBSXdZLEVBQVUsSUFBSXJILEVBQUt0UixHQUV2QixHQURBbVksR0FBcUJNLEVBQWV0WSxFQUFPeVQsRUFBS3BCLE1BQU1tRyxJQUM1QixjQUF0QkEsRUFBUTNHLFlBQ0g4RixHQUFnQjNYLEdBQ2pCLE1BQU0sSUFBSXdKLE1BQU04TyxFQUNaLGtDQUNBRSxFQUFRdE4sV0FGSW9OLGdHQU94QkMsRUFBV3JTLEtBQUtzUyxNQWxFUyxTQUFVUCxFQUFhTSxHQUNwRCxJQUFJaE0sRUFBR2lNLEVBQ1AsSUFBS2pNLEVBQUksRUFBR0EsRUFBSWdNLEVBQVdyUixPQUFRcUYsSUFHL0IsSUFEQSxJQUFJbEYsR0FESm1SLEVBQVVELEVBQVdoTSxJQUNGMEYsUUFDVnFCLEVBQUksRUFBR0EsRUFBSWpNLEVBQUtILE9BQVFvTSxJQUM3QixHQUFnQixjQUFaak0sRUFBS2lNLElBQXNCQSxJQUFNak0sRUFBS0gsT0FBUyxRQUM5QyxJQUFLdVEsR0FBV3BRLEVBQUtpTSxJQUN0QixNQUFNLElBQUk5SixNQUFNeU8sRUFDWiw0QkFDQTVRLEVBQUtpTSxHQUNMLGFBQ0FrRixFQUFRdE4sV0FKSStNLHVGQWE1Qk0sRUFBV3BLLEtBQUtnRCxFQUFLMkIsY0FDckIsSUFBSTJGLEVBQVcsS0FDZixJQUFLbE0sRUFBSSxFQUFHQSxFQUFJZ00sRUFBV3JSLE9BQVFxRixJQUFLLENBRXBDLEdBREFpTSxFQUFVRCxFQUFXaE0sR0FDSixPQUFia00sR0FBcUJBLEVBQVNsRixTQUFTaUYsR0FDdkMsTUFBTSxJQUFJaFAsTUFBTXlPLEVBQ1osbUJBQ0FRLEVBQVN2TixXQUNULHFDQUNBc04sRUFBUXROLFlBRWhCdU4sRUFBV0QsR0FvQ2ZFLENBQTJCSixFQUFlQyxLQUUxQ0ksR0FBbUIsU0FBVWIsRUFBUUMsRUFBZ0JILEVBQVVyTyxHQUMvRCxJQUFJQSxRQUF5QnpJLElBQWI4VyxFQUFoQixDQUdBLEdBQUkzSyxFQUFvQjJLLEdBQ3BCLE1BQU0sSUFBSXBPLE9BQU0sUUFBWXNPLEVBQVFDLEVBQWdCeE8sR0FDaEQsTUFDQXFPLEVBQVMxTSxXQUZHLDZGQU9wQixJQUFLeU0sR0FBZ0JDLEdBQ2pCLE1BQU0sSUFBSXBPLE9BQU0sUUFBWXNPLEVBQVFDLEVBQWdCeE8sR0FBcEMseUZBS3BCcVAsR0FBb0IsU0FBVWQsRUFBUUMsRUFBZ0JjLEVBQVd0UCxHQUNqRSxJQUFJQSxRQUEwQnpJLElBQWQrWCxFQUdoQixPQUFRQSxHQUNKLElBQUssUUFDTCxJQUFLLGNBQ0wsSUFBSyxnQkFDTCxJQUFLLGdCQUNMLElBQUssY0FDRCxNQUNKLFFBQ0ksTUFBTSxJQUFJclAsT0FBTSxRQUFZc08sRUFBUUMsRUFBZ0J4TyxHQUFwQyw4R0FLeEJ1UCxHQUFjLFNBQVVoQixFQUFRQyxFQUFnQmxZLEVBQUswSixHQUNyRCxLQUFJQSxRQUFvQnpJLElBQVJqQixHQUdYNFgsR0FBVzVYLElBQ1osTUFBTSxJQUFJMkosT0FBTSxRQUFZc08sRUFBUUMsRUFBZ0J4TyxHQUNoRCx5QkFDQTFKLEVBRlkscUdBT3BCa1osR0FBcUIsU0FBVWpCLEVBQVFDLEVBQWdCakcsRUFBWXZJLEdBQ25FLEtBQUlBLFFBQTJCekksSUFBZmdSLEdBR1g0RixHQUFrQjVGLElBQ25CLE1BQU0sSUFBSXRJLE9BQU0sUUFBWXNPLEVBQVFDLEVBQWdCeE8sR0FDaEQsMEJBQ0F1SSxFQUZZLHFGQU9wQmtILEdBQXlCLFNBQVVsQixFQUFRQyxFQUFnQmpHLEVBQVl2SSxHQUNuRXVJLElBRUFBLEVBQWFBLEVBQVc2RSxRQUFRLG1CQUFvQixNQUV4RG9DLEdBQW1CakIsRUFBUUMsRUFBZ0JqRyxFQUFZdkksSUFFdkQwUCxHQUF1QixTQUFVbkIsRUFBUXJFLEdBQ3pDLEdBQXdCLFVBQXBCQSxFQUFLL0IsV0FDTCxNQUFNLElBQUlsSSxNQUFNc08sRUFBUyw4Q0FHN0JvQixHQUFjLFNBQVVwQixFQUFRQyxFQUFnQmxDLEdBRWhELElBQUkvRCxFQUFhK0QsRUFBVXBDLEtBQUt2SSxXQUNoQyxHQUF5QyxpQkFBNUIySyxFQUFVSyxTQUFTMUIsTUFDTyxJQUFuQ3FCLEVBQVVLLFNBQVMxQixLQUFLdE4sU0FDdEJ1USxHQUFXNUIsRUFBVUssU0FBU2xSLFlBQ2MsY0FBMUM2USxFQUFVSyxTQUFTMUIsS0FBS2pELE1BQU0sS0FBSyxJQUNoQixJQUF0Qk8sRUFBVzVLLFNBalFRLFNBQVU0SyxHQUtsQyxPQUpJQSxJQUVBQSxFQUFhQSxFQUFXNkUsUUFBUSxtQkFBb0IsTUFFakRlLEdBQWtCNUYsR0E0UFFxSCxDQUFzQnJILEdBQ25ELE1BQU0sSUFBSXRJLE9BQU0sUUFBWXNPLEVBQVFDLEdBQWdCLEdBQXBDLHlGQUtwQnFCLEdBQWtCLFNBQVV0QixFQUFRQyxFQUFnQnNCLEVBQU05UCxHQUMxRCxLQUFJQSxRQUFxQnpJLElBQVR1WSxJQUdJLGtCQUFUQSxFQUNQLE1BQU0sSUFBSTdQLE9BQU0sUUFBWXNPLEVBQVFDLEVBQWdCeE8sR0FBWSx1QkF1QnBFK1AsR0FBOEIsV0FLOUIsU0FBU0EsRUFBYUMsRUFBT3JCLEdBQ3pCelgsS0FBSzhZLE1BQVFBLEVBQ2I5WSxLQUFLeVgsTUFBUUEsRUE4RWpCLE9BeEVBb0IsRUFBYXJXLFVBQVV1VyxPQUFTLFNBQVVDLElBQ3RDLFFBQWlCLHNCQUF1QixFQUFHLEVBQUc5WSxVQUFVdUcsU0FDeEQsUUFBaUIsc0JBQXVCLEVBQUd1UyxHQUFZLEdBQ3ZELElBQUl0USxFQUFXLElBQUksS0FFbkIsT0FEQTFJLEtBQUs4WSxNQUFNRyxtQkFBbUJqWixLQUFLeVgsTUFBTy9PLEVBQVN3USxhQUFhRixJQUN6RHRRLEVBQVNHLFNBTXBCZ1EsRUFBYXJXLFVBQVVnSSxPQUFTLFNBQVV3TyxJQUN0QyxRQUFpQixzQkFBdUIsRUFBRyxFQUFHOVksVUFBVXVHLFFBQ3hEK1IsR0FBcUIsc0JBQXVCeFksS0FBS3lYLFFBQ2pELFFBQWlCLHNCQUF1QixFQUFHdUIsR0FBWSxHQUN2RCxJQUFJdFEsRUFBVyxJQUFJLEtBRW5CLE9BREExSSxLQUFLOFksTUFBTUssZ0JBQWdCblosS0FBS3lYLE1BQU8sS0FBTS9PLEVBQVN3USxhQUFhRixJQUM1RHRRLEVBQVNHLFNBT3BCZ1EsRUFBYXJXLFVBQVVHLElBQU0sU0FBVXBELEVBQU95WixJQUMxQyxRQUFpQixtQkFBb0IsRUFBRyxFQUFHOVksVUFBVXVHLFFBQ3JEK1IsR0FBcUIsbUJBQW9CeFksS0FBS3lYLE9BQzlDTCxHQUF3QixtQkFBb0IsRUFBRzdYLEVBQU9TLEtBQUt5WCxPQUFPLElBQ2xFLFFBQWlCLG1CQUFvQixFQUFHdUIsR0FBWSxHQUNwRCxJQUFJdFEsRUFBVyxJQUFJLEtBRW5CLE9BREExSSxLQUFLOFksTUFBTUssZ0JBQWdCblosS0FBS3lYLE1BQU9sWSxFQUFPbUosRUFBU3dRLGFBQWFGLElBQzdEdFEsRUFBU0csU0FRcEJnUSxFQUFhclcsVUFBVTRXLGdCQUFrQixTQUFVN1osRUFBTzRYLEVBQVU2QixJQUNoRSxRQUFpQiwrQkFBZ0MsRUFBRyxFQUFHOVksVUFBVXVHLFFBQ2pFK1IsR0FBcUIsK0JBQWdDeFksS0FBS3lYLE9BQzFETCxHQUF3QiwrQkFBZ0MsRUFBRzdYLEVBQU9TLEtBQUt5WCxPQUFPLEdBQzlFUyxHQUFpQiwrQkFBZ0MsRUFBR2YsR0FBVSxJQUM5RCxRQUFpQiwrQkFBZ0MsRUFBRzZCLEdBQVksR0FDaEUsSUFBSXRRLEVBQVcsSUFBSSxLQUVuQixPQURBMUksS0FBSzhZLE1BQU1PLDRCQUE0QnJaLEtBQUt5WCxNQUFPbFksRUFBTzRYLEVBQVV6TyxFQUFTd1EsYUFBYUYsSUFDbkZ0USxFQUFTRyxTQU9wQmdRLEVBQWFyVyxVQUFVZ0osT0FBUyxTQUFVOE4sRUFBZU4sR0FHckQsSUFGQSxRQUFpQixzQkFBdUIsRUFBRyxFQUFHOVksVUFBVXVHLFFBQ3hEK1IsR0FBcUIsc0JBQXVCeFksS0FBS3lYLE9BQzdDbE8sTUFBTXdDLFFBQVF1TixHQUFnQixDQUU5QixJQURBLElBQUlDLEVBQW1CLEdBQ2R6TixFQUFJLEVBQUdBLEVBQUl3TixFQUFjN1MsU0FBVXFGLEVBQ3hDeU4sRUFBaUIsR0FBS3pOLEdBQUt3TixFQUFjeE4sR0FFN0N3TixFQUFnQkMsRUFDaEI3VCxFQUFLLGdPQUdUa1MsR0FBNkIsc0JBQXVCLEVBQUcwQixFQUFldFosS0FBS3lYLE9BQU8sSUFDbEYsUUFBaUIsc0JBQXVCLEVBQUd1QixHQUFZLEdBQ3ZELElBQUl0USxFQUFXLElBQUksS0FFbkIsT0FEQTFJLEtBQUs4WSxNQUFNVSxtQkFBbUJ4WixLQUFLeVgsTUFBTzZCLEVBQWU1USxFQUFTd1EsYUFBYUYsSUFDeEV0USxFQUFTRyxTQUViZ1EsRUFyRnNCLEdBd0c3QlksR0FBbUMsV0FRbkMsU0FBU0EsRUFBa0JDLEVBQVdDLEdBQ2xDM1osS0FBSzBaLFVBQVlBLEVBQ2pCMVosS0FBSzJaLFNBQVdBLEVBUXBCLE9BSkFGLEVBQWtCalgsVUFBVW9YLE9BQVMsV0FFakMsT0FEQSxRQUFpQiwyQkFBNEIsRUFBRyxFQUFHMVosVUFBVXVHLFFBQ3RELENBQUVpVCxVQUFXMVosS0FBSzBaLFVBQVdDLFNBQVUzWixLQUFLMlosU0FBU0MsV0FFekRILEVBbEIyQixHQW1EbENJLElBRUkxTCxFQUFhLG1FQUdiQyxFQUFlLEVBS2ZDLEVBQWdCLEdBQ2IsU0FBVXlMLEdBQ2IsSUFFSWhPLEVBRkFpTyxFQUFnQkQsSUFBUTFMLEVBQzVCQSxFQUFlMEwsRUFFZixJQUFJRSxFQUFpQixJQUFJelEsTUFBTSxHQUMvQixJQUFLdUMsRUFBSSxFQUFHQSxHQUFLLEVBQUdBLElBQ2hCa08sRUFBZWxPLEdBQUtxQyxFQUFXb0ksT0FBT3VELEVBQU0sSUFHNUNBLEVBQU01SyxLQUFLSSxNQUFNd0ssRUFBTSxLQUUzQixRQUFlLElBQVJBLEVBQVcsNEJBQ2xCLElBQUkvUCxFQUFLaVEsRUFBZXJVLEtBQUssSUFDN0IsR0FBS29VLEVBS0EsQ0FHRCxJQUFLak8sRUFBSSxHQUFJQSxHQUFLLEdBQTBCLEtBQXJCdUMsRUFBY3ZDLEdBQVdBLElBQzVDdUMsRUFBY3ZDLEdBQUssRUFFdkJ1QyxFQUFjdkMsVUFWZCxJQUFLQSxFQUFJLEVBQUdBLEVBQUksR0FBSUEsSUFDaEJ1QyxFQUFjdkMsR0FBS29ELEtBQUtJLE1BQXNCLEdBQWhCSixLQUFLK0ssVUFXM0MsSUFBS25PLEVBQUksRUFBR0EsRUFBSSxHQUFJQSxJQUNoQi9CLEdBQU1vRSxFQUFXb0ksT0FBT2xJLEVBQWN2QyxJQUcxQyxPQURBLFFBQXFCLEtBQWQvQixFQUFHdEQsT0FBZSxvQ0FDbEJzRCxJQTJCWG1RLEdBQTJCLFdBQzNCLFNBQVNBLEVBQVU1WSxFQUFNNlksR0FDckJuYSxLQUFLc0IsS0FBT0EsRUFDWnRCLEtBQUttYSxLQUFPQSxFQVdoQixPQUhBRCxFQUFVRSxLQUFPLFNBQVU5WSxFQUFNNlksR0FDN0IsT0FBTyxJQUFJRCxFQUFVNVksRUFBTTZZLElBRXhCRCxFQWRtQixHQXFDMUJHLEdBQXVCLFdBQ3ZCLFNBQVNBLEtBOEJULE9BeEJBQSxFQUFNN1gsVUFBVThYLFdBQWEsV0FDekIsT0FBT3RhLEtBQUt1YSxRQUFRN1QsS0FBSzFHLE9BVTdCcWEsRUFBTTdYLFVBQVVnWSxvQkFBc0IsU0FBVUMsRUFBU0MsR0FDckQsSUFBSUMsRUFBYSxJQUFJVCxHQUFVck4sRUFBVTROLEdBQ3JDRyxFQUFhLElBQUlWLEdBQVVyTixFQUFVNk4sR0FDekMsT0FBZ0QsSUFBekMxYSxLQUFLdWEsUUFBUUksRUFBWUMsSUFNcENQLEVBQU03WCxVQUFVcVksUUFBVSxXQUV0QixPQUFPWCxHQUFVWSxLQUVkVCxFQS9CZSxHQW1EdEJVLEdBQTBCLFNBQVVDLEdBRXBDLFNBQVNELElBQ0wsT0FBa0IsT0FBWEMsR0FBbUJBLEVBQU83YSxNQUFNSCxLQUFNRSxZQUFjRixLQStEL0QsT0FqRUEsUUFBVSthLEVBQVVDLEdBSXBCMVksT0FBT0MsZUFBZXdZLEVBQVUsZUFBZ0IsQ0FDNUN0WSxJQUFLLFdBQ0QsT0FBTzZMLEdBRVgzTCxJQUFLLFNBQVVDLEdBQ1gwTCxFQUFlMUwsR0FFbkJDLFlBQVksRUFDWkMsY0FBYyxJQUtsQmlZLEVBQVN2WSxVQUFVK1gsUUFBVSxTQUFVdk4sRUFBR0MsR0FDdEMsT0FBT0YsRUFBWUMsRUFBRTFMLEtBQU0yTCxFQUFFM0wsT0FLakN5WixFQUFTdlksVUFBVXlZLFlBQWMsU0FBVWQsR0FHdkMsTUFBTSxRQUFlLG9EQUt6QlksRUFBU3ZZLFVBQVVnWSxvQkFBc0IsU0FBVUMsRUFBU0MsR0FDeEQsT0FBTyxHQUtYSyxFQUFTdlksVUFBVXFZLFFBQVUsV0FFekIsT0FBT1gsR0FBVVksS0FLckJDLEVBQVN2WSxVQUFVMFksUUFBVSxXQUd6QixPQUFPLElBQUloQixHQUFVcE4sRUFBVXdCLElBT25DeU0sRUFBU3ZZLFVBQVUyWSxTQUFXLFNBQVVDLEVBQVk5WixHQUdoRCxPQUZBLFFBQTZCLGlCQUFmOFosRUFBeUIsZ0RBRWhDLElBQUlsQixHQUFVa0IsRUFBWTlNLElBS3JDeU0sRUFBU3ZZLFVBQVVpSSxTQUFXLFdBQzFCLE1BQU8sUUFFSnNRLEVBbEVrQixDQW1FM0JWLElBQ0VnQixHQUFZLElBQUlOLEdBMEJoQk8sR0FBbUIsU0FBVW5FLEdBQzdCLE1BQXdCLGlCQUFiQSxFQUNBLFVBQVl0SSxFQUFzQnNJLEdBR2xDLFVBQVlBLEdBUXZCb0UsR0FBdUIsU0FBVUMsR0FDakMsR0FBSUEsRUFBYUMsYUFBYyxDQUMzQixJQUFJN1ksRUFBTTRZLEVBQWE1WSxPQUN2QixRQUFzQixpQkFBUkEsR0FDSyxpQkFBUkEsR0FDUyxpQkFBUkEsSUFBb0IsUUFBU0EsRUFBSyxPQUFTLDZDQUd2RCxRQUFPNFksSUFBaUJqTixHQUFZaU4sRUFBYXpKLFVBQVcsaUNBR2hFLFFBQU95SixJQUFpQmpOLEdBQVlpTixFQUFhRSxjQUFjM0osVUFBVyx1REF5QjFFNEosR0FBMEIsV0FPMUIsU0FBU0EsRUFBU0MsRUFBUUMsUUFDQSxJQUFsQkEsSUFBNEJBLEVBQWdCRixFQUFTbk4sMEJBQTBCSSxZQUNuRjVPLEtBQUs0YixPQUFTQSxFQUNkNWIsS0FBSzZiLGNBQWdCQSxFQUNyQjdiLEtBQUs4YixVQUFZLE1BQ2pCLGFBQXVCemIsSUFBaEJMLEtBQUs0YixRQUF3QyxPQUFoQjViLEtBQUs0YixPQUFpQiw0REFDMURMLEdBQXFCdmIsS0FBSzZiLGVBa085QixPQWhPQXZaLE9BQU9DLGVBQWVvWixFQUFVLDRCQUE2QixDQUN6RGxaLElBQUssV0FDRCxPQUFPK0wsR0FFWDdMLElBQUssU0FBVUMsR0FDWDRMLEVBQTRCNUwsR0FFaENDLFlBQVksRUFDWkMsY0FBYyxJQUdsQjZZLEVBQVNuWixVQUFVaVosV0FBYSxXQUM1QixPQUFPLEdBR1hFLEVBQVNuWixVQUFVa1osWUFBYyxXQUM3QixPQUFPMWIsS0FBSzZiLGVBR2hCRixFQUFTblosVUFBVXVaLGVBQWlCLFNBQVVDLEdBQzFDLE9BQU8sSUFBSUwsRUFBUzNiLEtBQUs0YixPQUFRSSxJQUdyQ0wsRUFBU25aLFVBQVV5WixrQkFBb0IsU0FBVUMsR0FFN0MsTUFBa0IsY0FBZEEsRUFDT2xjLEtBQUs2YixjQUdMRixFQUFTbk4sMEJBQTBCSSxZQUlsRCtNLEVBQVNuWixVQUFVMlosU0FBVyxTQUFVbkosR0FDcEMsT0FBSUEsRUFBS2pCLFVBQ0UvUixLQUVrQixjQUFwQmdULEVBQUsvQixXQUNIalIsS0FBSzZiLGNBR0xGLEVBQVNuTiwwQkFBMEJJLFlBTWxEK00sRUFBU25aLFVBQVU0WixTQUFXLFdBQzFCLE9BQU8sR0FHWFQsRUFBU25aLFVBQVU2Wix3QkFBMEIsU0FBVUgsRUFBV0ksR0FDOUQsT0FBTyxNQUdYWCxFQUFTblosVUFBVStaLHFCQUF1QixTQUFVTCxFQUFXTSxHQUMzRCxNQUFrQixjQUFkTixFQUNPbGMsS0FBSytiLGVBQWVTLEdBRXRCQSxFQUFhekssV0FBMkIsY0FBZG1LLEVBQ3hCbGMsS0FHQTJiLEVBQVNuTiwwQkFBMEJJLFdBQVcyTixxQkFBcUJMLEVBQVdNLEdBQWNULGVBQWUvYixLQUFLNmIsZ0JBSS9IRixFQUFTblosVUFBVWlhLFlBQWMsU0FBVXpKLEVBQU13SixHQUM3QyxJQUFJRSxFQUFRMUosRUFBSy9CLFdBQ2pCLE9BQWMsT0FBVnlMLEVBQ09GLEVBRUZBLEVBQWF6SyxXQUF1QixjQUFWMkssRUFDeEIxYyxPQUdQLFFBQWlCLGNBQVYwYyxHQUE4QyxJQUFyQjFKLEVBQUs5QixZQUFtQiw4Q0FDakRsUixLQUFLdWMscUJBQXFCRyxFQUFPZixFQUFTbk4sMEJBQTBCSSxXQUFXNk4sWUFBWXpKLEVBQUs3QixXQUFZcUwsTUFJM0hiLEVBQVNuWixVQUFVdVAsUUFBVSxXQUN6QixPQUFPLEdBR1g0SixFQUFTblosVUFBVW1hLFlBQWMsV0FDN0IsT0FBTyxHQUdYaEIsRUFBU25aLFVBQVVvYSxhQUFlLFNBQVVDLEVBQU9DLEdBQy9DLE9BQU8sR0FLWG5CLEVBQVNuWixVQUFVSSxJQUFNLFNBQVVtYSxHQUMvQixPQUFJQSxJQUFpQi9jLEtBQUswYixjQUFjM0osVUFDN0IsQ0FDSCxTQUFVL1IsS0FBS2dkLFdBQ2YsWUFBYWhkLEtBQUswYixjQUFjOVksT0FJN0I1QyxLQUFLZ2QsWUFJcEJyQixFQUFTblosVUFBVXlhLEtBQU8sV0FDdEIsR0FBdUIsT0FBbkJqZCxLQUFLOGIsVUFBb0IsQ0FDekIsSUFBSW9CLEVBQVMsR0FDUmxkLEtBQUs2YixjQUFjOUosWUFDcEJtTCxHQUNJLFlBQ0k1QixHQUFpQnRiLEtBQUs2YixjQUFjalosT0FDcEMsS0FFWixJQUFJd0QsU0FBY3BHLEtBQUs0YixPQUN2QnNCLEdBQVU5VyxFQUFPLElBRWI4VyxHQURTLFdBQVQ5VyxFQUNVeUksRUFBc0I3TyxLQUFLNGIsUUFHM0I1YixLQUFLNGIsT0FFbkI1YixLQUFLOGIsVUFBWXpRLEVBQUs2UixHQUUxQixPQUFPbGQsS0FBSzhiLFdBTWhCSCxFQUFTblosVUFBVXdhLFNBQVcsV0FDMUIsT0FBT2hkLEtBQUs0YixRQUtoQkQsRUFBU25aLFVBQVUyYSxVQUFZLFNBQVV2SyxHQUNyQyxPQUFJQSxJQUFVK0ksRUFBU25OLDBCQUEwQkksV0FDdEMsRUFFRmdFLGFBQWlCK0ksRUFBU25OLDJCQUN2QixJQUdSLFFBQU9vRSxFQUFNNkksYUFBYyxxQkFDcEJ6YixLQUFLb2QsbUJBQW1CeEssS0FTdkMrSSxFQUFTblosVUFBVTRhLG1CQUFxQixTQUFVQyxHQUM5QyxJQUFJQyxTQUF1QkQsRUFBVXpCLE9BQ2pDMkIsU0FBc0J2ZCxLQUFLNGIsT0FDM0I0QixFQUFhN0IsRUFBUzhCLGlCQUFpQjlWLFFBQVEyVixHQUMvQ0ksRUFBWS9CLEVBQVM4QixpQkFBaUI5VixRQUFRNFYsR0FHbEQsT0FGQSxRQUFPQyxHQUFjLEVBQUcsc0JBQXdCRixJQUNoRCxRQUFPSSxHQUFhLEVBQUcsc0JBQXdCSCxHQUMzQ0MsSUFBZUUsRUFFTSxXQUFqQkgsRUFFTyxFQUlIdmQsS0FBSzRiLE9BQVN5QixFQUFVekIsUUFDaEIsRUFFSDViLEtBQUs0YixTQUFXeUIsRUFBVXpCLE9BQ3hCLEVBR0EsRUFLUjhCLEVBQVlGLEdBTTNCN0IsRUFBU25aLFVBQVVtYixVQUFZLFdBQzNCLE9BQU8zZCxNQUtYMmIsRUFBU25aLFVBQVVvYixVQUFZLFdBQzNCLE9BQU8sR0FLWGpDLEVBQVNuWixVQUFVbVEsT0FBUyxTQUFVQyxHQUlsQyxHQUFJQSxJQUFVNVMsS0FDVixPQUFPLEVBRU4sR0FBSTRTLEVBQU02SSxhQUFjLENBQ3pCLElBQUk0QixFQUFZekssRUFDaEIsT0FBUTVTLEtBQUs0YixTQUFXeUIsRUFBVXpCLFFBQzlCNWIsS0FBSzZiLGNBQWNsSixPQUFPMEssRUFBVXhCLGVBR3hDLE9BQU8sR0FTZkYsRUFBUzhCLGlCQUFtQixDQUFDLFNBQVUsVUFBVyxTQUFVLFVBQ3JEOUIsRUEvT2tCLEdBNFV6QmtDLEdBQWlCLElBN0RjLFNBQVU3QyxHQUV6QyxTQUFTOEMsSUFDTCxPQUFrQixPQUFYOUMsR0FBbUJBLEVBQU83YSxNQUFNSCxLQUFNRSxZQUFjRixLQXdEL0QsT0ExREEsUUFBVThkLEVBQWU5QyxHQU96QjhDLEVBQWN0YixVQUFVK1gsUUFBVSxTQUFVdk4sRUFBR0MsR0FDM0MsSUFBSThRLEVBQVkvUSxFQUFFbU4sS0FBS3VCLGNBQ25Cc0MsRUFBWS9RLEVBQUVrTixLQUFLdUIsY0FDbkJ1QyxFQUFXRixFQUFVWixVQUFVYSxHQUNuQyxPQUFpQixJQUFiQyxFQUNPbFIsRUFBWUMsRUFBRTFMLEtBQU0yTCxFQUFFM0wsTUFHdEIyYyxHQU1mSCxFQUFjdGIsVUFBVXlZLFlBQWMsU0FBVWQsR0FDNUMsT0FBUUEsRUFBS3VCLGNBQWMzSixXQUsvQitMLEVBQWN0YixVQUFVZ1ksb0JBQXNCLFNBQVVDLEVBQVNDLEdBQzdELE9BQVFELEVBQVFpQixjQUFjL0ksT0FBTytILEVBQVFnQixnQkFLakRvQyxFQUFjdGIsVUFBVXFZLFFBQVUsV0FFOUIsT0FBT1gsR0FBVVksS0FLckJnRCxFQUFjdGIsVUFBVTBZLFFBQVUsV0FDOUIsT0FBTyxJQUFJaEIsR0FBVXBOLEVBQVUsSUFBSTZPLEdBQVMsa0JBQW1Cak4sS0FPbkVvUCxFQUFjdGIsVUFBVTJZLFNBQVcsU0FBVUMsRUFBWTlaLEdBQ3JELElBQUlrYSxFQUFlL00sRUFBYTJNLEdBQ2hDLE9BQU8sSUFBSWxCLEdBQVU1WSxFQUFNLElBQUlxYSxHQUFTLGtCQUFtQkgsS0FLL0RzQyxFQUFjdGIsVUFBVWlJLFNBQVcsV0FDL0IsTUFBTyxhQUVKcVQsRUEzRHVCLENBNERoQ3pELEtBc0JFNkQsR0FBbUMsV0FTbkMsU0FBU0EsRUFBa0IvRCxFQUFNZ0UsRUFBVUMsRUFBWUMsRUFBWUMsUUFDdEMsSUFBckJBLElBQStCQSxFQUFtQixNQUN0RHRlLEtBQUtxZSxXQUFhQSxFQUNsQnJlLEtBQUtzZSxpQkFBbUJBLEVBSXhCdGUsS0FBS3VlLFdBQWEsR0FFbEIsSUFEQSxJQUFJN0wsRUFBTSxHQUNGeUgsRUFBS3BJLFdBT1QsR0FOQW9JLEVBQU9BLEVBQ1B6SCxFQUFNeUwsRUFBV0MsRUFBV2pFLEVBQUsvYSxJQUFLK2UsR0FBWSxFQUU5Q0UsSUFDQTNMLElBQVEsR0FFUkEsRUFBTSxFQUdGeUgsRUFEQW5hLEtBQUtxZSxXQUNFbEUsRUFBSzdILEtBR0w2SCxFQUFLNUgsVUFHZixJQUFZLElBQVJHLEVBQVcsQ0FFaEIxUyxLQUFLdWUsV0FBVzlZLEtBQUswVSxHQUNyQixNQUlBbmEsS0FBS3VlLFdBQVc5WSxLQUFLMFUsR0FFakJBLEVBREFuYSxLQUFLcWUsV0FDRWxFLEVBQUs1SCxNQUdMNEgsRUFBSzdILE1BZ0Q1QixPQTNDQTRMLEVBQWtCMWIsVUFBVWdjLFFBQVUsV0FDbEMsR0FBK0IsSUFBM0J4ZSxLQUFLdWUsV0FBVzlYLE9BQ2hCLE9BQU8sS0FFWCxJQUNJZ1ksRUFEQXRFLEVBQU9uYSxLQUFLdWUsV0FBV2pMLE1BUTNCLEdBTEltTCxFQURBemUsS0FBS3NlLGlCQUNJdGUsS0FBS3NlLGlCQUFpQm5FLEVBQUsvYSxJQUFLK2EsRUFBSzVhLE9BR3JDLENBQUVILElBQUsrYSxFQUFLL2EsSUFBS0csTUFBTzRhLEVBQUs1YSxPQUV0Q1MsS0FBS3FlLFdBRUwsSUFEQWxFLEVBQU9BLEVBQUs3SCxNQUNKNkgsRUFBS3BJLFdBQ1QvUixLQUFLdWUsV0FBVzlZLEtBQUswVSxHQUNyQkEsRUFBT0EsRUFBSzVILFdBS2hCLElBREE0SCxFQUFPQSxFQUFLNUgsT0FDSjRILEVBQUtwSSxXQUNUL1IsS0FBS3VlLFdBQVc5WSxLQUFLMFUsR0FDckJBLEVBQU9BLEVBQUs3SCxLQUdwQixPQUFPbU0sR0FFWFAsRUFBa0IxYixVQUFVa2MsUUFBVSxXQUNsQyxPQUFPMWUsS0FBS3VlLFdBQVc5WCxPQUFTLEdBRXBDeVgsRUFBa0IxYixVQUFVbWMsS0FBTyxXQUMvQixHQUErQixJQUEzQjNlLEtBQUt1ZSxXQUFXOVgsT0FDaEIsT0FBTyxLQUVYLElBQUkwVCxFQUFPbmEsS0FBS3VlLFdBQVd2ZSxLQUFLdWUsV0FBVzlYLE9BQVMsR0FDcEQsT0FBSXpHLEtBQUtzZSxpQkFDRXRlLEtBQUtzZSxpQkFBaUJuRSxFQUFLL2EsSUFBSythLEVBQUs1YSxPQUdyQyxDQUFFSCxJQUFLK2EsRUFBSy9hLElBQUtHLE1BQU80YSxFQUFLNWEsUUFHckMyZSxFQTlGMkIsR0FtR2xDVSxHQUEwQixXQVMxQixTQUFTQSxFQUFTeGYsRUFBS0csRUFBT3NmLEVBQU92TSxFQUFNQyxHQUN2Q3ZTLEtBQUtaLElBQU1BLEVBQ1hZLEtBQUtULE1BQVFBLEVBQ2JTLEtBQUs2ZSxNQUFpQixNQUFUQSxFQUFnQkEsRUFBUUQsRUFBU0UsSUFDOUM5ZSxLQUFLc1MsS0FDTyxNQUFSQSxFQUFlQSxFQUFPeU0sR0FBVW5RLFdBQ3BDNU8sS0FBS3VTLE1BQ1EsTUFBVEEsRUFBZ0JBLEVBQVF3TSxHQUFVblEsV0FrUTFDLE9BdFBBZ1EsRUFBU3BjLFVBQVV3YyxLQUFPLFNBQVU1ZixFQUFLRyxFQUFPc2YsRUFBT3ZNLEVBQU1DLEdBQ3pELE9BQU8sSUFBSXFNLEVBQWdCLE1BQVB4ZixFQUFjQSxFQUFNWSxLQUFLWixJQUFjLE1BQVRHLEVBQWdCQSxFQUFRUyxLQUFLVCxNQUFnQixNQUFUc2YsRUFBZ0JBLEVBQVE3ZSxLQUFLNmUsTUFBZSxNQUFSdk0sRUFBZUEsRUFBT3RTLEtBQUtzUyxLQUFlLE1BQVRDLEVBQWdCQSxFQUFRdlMsS0FBS3VTLFFBSzVMcU0sRUFBU3BjLFVBQVV5YyxNQUFRLFdBQ3ZCLE9BQU9qZixLQUFLc1MsS0FBSzJNLFFBQVUsRUFBSWpmLEtBQUt1UyxNQUFNME0sU0FLOUNMLEVBQVNwYyxVQUFVdVAsUUFBVSxXQUN6QixPQUFPLEdBV1g2TSxFQUFTcGMsVUFBVTBjLGlCQUFtQixTQUFVcEMsR0FDNUMsT0FBUTljLEtBQUtzUyxLQUFLNE0saUJBQWlCcEMsTUFDN0JBLEVBQU85YyxLQUFLWixJQUFLWSxLQUFLVCxRQUN4QlMsS0FBS3VTLE1BQU0yTSxpQkFBaUJwQyxJQVVwQzhCLEVBQVNwYyxVQUFVMmMsaUJBQW1CLFNBQVVyQyxHQUM1QyxPQUFROWMsS0FBS3VTLE1BQU00TSxpQkFBaUJyQyxJQUNoQ0EsRUFBTzljLEtBQUtaLElBQUtZLEtBQUtULFFBQ3RCUyxLQUFLc1MsS0FBSzZNLGlCQUFpQnJDLElBTW5DOEIsRUFBU3BjLFVBQVU0YyxLQUFPLFdBQ3RCLE9BQUlwZixLQUFLc1MsS0FBS1AsVUFDSC9SLEtBR0FBLEtBQUtzUyxLQUFLOE0sUUFNekJSLEVBQVNwYyxVQUFVNmMsT0FBUyxXQUN4QixPQUFPcmYsS0FBS29mLE9BQU9oZ0IsS0FLdkJ3ZixFQUFTcGMsVUFBVThjLE9BQVMsV0FDeEIsT0FBSXRmLEtBQUt1UyxNQUFNUixVQUNKL1IsS0FBS1osSUFHTFksS0FBS3VTLE1BQU0rTSxVQVUxQlYsRUFBU3BjLFVBQVUrYyxPQUFTLFNBQVVuZ0IsRUFBS0csRUFBTzZlLEdBQzlDLElBQUlvQixFQUFJeGYsS0FDSjBTLEVBQU0wTCxFQUFXaGYsRUFBS29nQixFQUFFcGdCLEtBVTVCLE9BUklvZ0IsRUFEQTlNLEVBQU0sRUFDRjhNLEVBQUVSLEtBQUssS0FBTSxLQUFNLEtBQU1RLEVBQUVsTixLQUFLaU4sT0FBT25nQixFQUFLRyxFQUFPNmUsR0FBYSxNQUV2RCxJQUFSMUwsRUFDRDhNLEVBQUVSLEtBQUssS0FBTXpmLEVBQU8sS0FBTSxLQUFNLE1BR2hDaWdCLEVBQUVSLEtBQUssS0FBTSxLQUFNLEtBQU0sS0FBTVEsRUFBRWpOLE1BQU1nTixPQUFPbmdCLEVBQUtHLEVBQU82ZSxLQUV6RHFCLFVBTWJiLEVBQVNwYyxVQUFVa2QsV0FBYSxXQUM1QixHQUFJMWYsS0FBS3NTLEtBQUtQLFVBQ1YsT0FBT2dOLEdBQVVuUSxXQUVyQixJQUFJNFEsRUFBSXhmLEtBS1IsT0FKS3dmLEVBQUVsTixLQUFLcU4sVUFBYUgsRUFBRWxOLEtBQUtBLEtBQUtxTixXQUNqQ0gsRUFBSUEsRUFBRUksaUJBRVZKLEVBQUlBLEVBQUVSLEtBQUssS0FBTSxLQUFNLEtBQU1RLEVBQUVsTixLQUFLb04sYUFBYyxPQUN6Q0QsVUFPYmIsRUFBU3BjLFVBQVVnSSxPQUFTLFNBQVVwTCxFQUFLZ2YsR0FDdkMsSUFBSW9CLEVBQUdLLEVBRVAsR0FBSXpCLEVBQVdoZixHQURmb2dCLEVBQUl4ZixNQUNrQlosS0FBTyxFQUNwQm9nQixFQUFFbE4sS0FBS1AsV0FBY3lOLEVBQUVsTixLQUFLcU4sVUFBYUgsRUFBRWxOLEtBQUtBLEtBQUtxTixXQUN0REgsRUFBSUEsRUFBRUksZ0JBRVZKLEVBQUlBLEVBQUVSLEtBQUssS0FBTSxLQUFNLEtBQU1RLEVBQUVsTixLQUFLOUgsT0FBT3BMLEVBQUtnZixHQUFhLFVBRTVELENBT0QsR0FOSW9CLEVBQUVsTixLQUFLcU4sV0FDUEgsRUFBSUEsRUFBRU0sZ0JBRUxOLEVBQUVqTixNQUFNUixXQUFjeU4sRUFBRWpOLE1BQU1vTixVQUFhSCxFQUFFak4sTUFBTUQsS0FBS3FOLFdBQ3pESCxFQUFJQSxFQUFFTyxpQkFFcUIsSUFBM0IzQixFQUFXaGYsRUFBS29nQixFQUFFcGdCLEtBQVksQ0FDOUIsR0FBSW9nQixFQUFFak4sTUFBTVIsVUFDUixPQUFPZ04sR0FBVW5RLFdBR2pCaVIsRUFBV0wsRUFBRWpOLE1BQU02TSxPQUNuQkksRUFBSUEsRUFBRVIsS0FBS2EsRUFBU3pnQixJQUFLeWdCLEVBQVN0Z0IsTUFBTyxLQUFNLEtBQU1pZ0IsRUFBRWpOLE1BQU1tTixjQUdyRUYsRUFBSUEsRUFBRVIsS0FBSyxLQUFNLEtBQU0sS0FBTSxLQUFNUSxFQUFFak4sTUFBTS9ILE9BQU9wTCxFQUFLZ2YsSUFFM0QsT0FBT29CLEVBQUVDLFVBTWJiLEVBQVNwYyxVQUFVbWQsT0FBUyxXQUN4QixPQUFPM2YsS0FBSzZlLE9BTWhCRCxFQUFTcGMsVUFBVWlkLE9BQVMsV0FDeEIsSUFBSUQsRUFBSXhmLEtBVVIsT0FUSXdmLEVBQUVqTixNQUFNb04sV0FBYUgsRUFBRWxOLEtBQUtxTixXQUM1QkgsRUFBSUEsRUFBRVEsZUFFTlIsRUFBRWxOLEtBQUtxTixVQUFZSCxFQUFFbE4sS0FBS0EsS0FBS3FOLFdBQy9CSCxFQUFJQSxFQUFFTSxnQkFFTk4sRUFBRWxOLEtBQUtxTixVQUFZSCxFQUFFak4sTUFBTW9OLFdBQzNCSCxFQUFJQSxFQUFFUyxjQUVIVCxHQU1YWixFQUFTcGMsVUFBVW9kLGFBQWUsV0FDOUIsSUFBSUosRUFBSXhmLEtBQUtpZ0IsYUFNYixPQUxJVCxFQUFFak4sTUFBTUQsS0FBS3FOLFdBR2JILEdBREFBLEdBREFBLEVBQUlBLEVBQUVSLEtBQUssS0FBTSxLQUFNLEtBQU0sS0FBTVEsRUFBRWpOLE1BQU11TixpQkFDckNFLGVBQ0FDLGNBRUhULEdBTVhaLEVBQVNwYyxVQUFVdWQsY0FBZ0IsV0FDL0IsSUFBSVAsRUFBSXhmLEtBQUtpZ0IsYUFLYixPQUpJVCxFQUFFbE4sS0FBS0EsS0FBS3FOLFdBRVpILEdBREFBLEVBQUlBLEVBQUVNLGdCQUNBRyxjQUVIVCxHQU1YWixFQUFTcGMsVUFBVXdkLFlBQWMsV0FDN0IsSUFBSUUsRUFBS2xnQixLQUFLZ2YsS0FBSyxLQUFNLEtBQU1KLEVBQVNFLElBQUssS0FBTTllLEtBQUt1UyxNQUFNRCxNQUM5RCxPQUFPdFMsS0FBS3VTLE1BQU15TSxLQUFLLEtBQU0sS0FBTWhmLEtBQUs2ZSxNQUFPcUIsRUFBSSxPQU12RHRCLEVBQVNwYyxVQUFVc2QsYUFBZSxXQUM5QixJQUFJSyxFQUFLbmdCLEtBQUtnZixLQUFLLEtBQU0sS0FBTUosRUFBU0UsSUFBSzllLEtBQUtzUyxLQUFLQyxNQUFPLE1BQzlELE9BQU92UyxLQUFLc1MsS0FBSzBNLEtBQUssS0FBTSxLQUFNaGYsS0FBSzZlLE1BQU8sS0FBTXNCLElBTXhEdkIsRUFBU3BjLFVBQVV5ZCxXQUFhLFdBQzVCLElBQUkzTixFQUFPdFMsS0FBS3NTLEtBQUswTSxLQUFLLEtBQU0sTUFBT2hmLEtBQUtzUyxLQUFLdU0sTUFBTyxLQUFNLE1BQzFEdE0sRUFBUXZTLEtBQUt1UyxNQUFNeU0sS0FBSyxLQUFNLE1BQU9oZixLQUFLdVMsTUFBTXNNLE1BQU8sS0FBTSxNQUNqRSxPQUFPN2UsS0FBS2dmLEtBQUssS0FBTSxNQUFPaGYsS0FBSzZlLE1BQU92TSxFQUFNQyxJQVFwRHFNLEVBQVNwYyxVQUFVNGQsZUFBaUIsV0FDaEMsSUFBSUMsRUFBYXJnQixLQUFLc2dCLFNBQ3RCLE9BQU9wUixLQUFLRSxJQUFJLEVBQUtpUixJQUFlcmdCLEtBQUtpZixRQUFVLEdBTXZETCxFQUFTcGMsVUFBVThkLE9BQVMsV0FDeEIsR0FBSXRnQixLQUFLMmYsVUFBWTNmLEtBQUtzUyxLQUFLcU4sU0FDM0IsTUFBTSxJQUFJNVcsTUFBTSwwQkFBNEIvSSxLQUFLWixJQUFNLElBQU1ZLEtBQUtULE1BQVEsS0FFOUUsR0FBSVMsS0FBS3VTLE1BQU1vTixTQUNYLE1BQU0sSUFBSTVXLE1BQU0sbUJBQXFCL0ksS0FBS1osSUFBTSxJQUFNWSxLQUFLVCxNQUFRLFlBRXZFLElBQUk4Z0IsRUFBYXJnQixLQUFLc1MsS0FBS2dPLFNBQzNCLEdBQUlELElBQWVyZ0IsS0FBS3VTLE1BQU0rTixTQUMxQixNQUFNLElBQUl2WCxNQUFNLHVCQUdoQixPQUFPc1gsR0FBY3JnQixLQUFLMmYsU0FBVyxFQUFJLElBR2pEZixFQUFTRSxLQUFNLEVBQ2ZGLEVBQVMyQixPQUFRLEVBQ1YzQixFQWxSa0IsR0F1UnpCNEIsR0FBK0IsV0FDL0IsU0FBU0EsS0EyRlQsT0FwRkFBLEVBQWNoZSxVQUFVd2MsS0FBTyxTQUFVNWYsRUFBS0csRUFBT3NmLEVBQU92TSxFQUFNQyxHQUM5RCxPQUFPdlMsTUFVWHdnQixFQUFjaGUsVUFBVStjLE9BQVMsU0FBVW5nQixFQUFLRyxFQUFPNmUsR0FDbkQsT0FBTyxJQUFJUSxHQUFTeGYsRUFBS0csRUFBTyxPQVNwQ2loQixFQUFjaGUsVUFBVWdJLE9BQVMsU0FBVXBMLEVBQUtnZixHQUM1QyxPQUFPcGUsTUFLWHdnQixFQUFjaGUsVUFBVXljLE1BQVEsV0FDNUIsT0FBTyxHQUtYdUIsRUFBY2hlLFVBQVV1UCxRQUFVLFdBQzlCLE9BQU8sR0FVWHlPLEVBQWNoZSxVQUFVMGMsaUJBQW1CLFNBQVVwQyxHQUNqRCxPQUFPLEdBVVgwRCxFQUFjaGUsVUFBVTJjLGlCQUFtQixTQUFVckMsR0FDakQsT0FBTyxHQUtYMEQsRUFBY2hlLFVBQVU2YyxPQUFTLFdBQzdCLE9BQU8sTUFLWG1CLEVBQWNoZSxVQUFVOGMsT0FBUyxXQUM3QixPQUFPLE1BTVhrQixFQUFjaGUsVUFBVThkLE9BQVMsV0FDN0IsT0FBTyxHQU1YRSxFQUFjaGUsVUFBVW1kLE9BQVMsV0FDN0IsT0FBTyxHQUVKYSxFQTVGdUIsR0FrRzlCekIsR0FBMkIsV0FNM0IsU0FBU0EsRUFBVTBCLEVBQWFDLFFBQ2QsSUFBVkEsSUFBb0JBLEVBQVEzQixFQUFVblEsWUFDMUM1TyxLQUFLeWdCLFlBQWNBLEVBQ25CemdCLEtBQUswZ0IsTUFBUUEsRUEwSmpCLE9BaEpBM0IsRUFBVXZjLFVBQVUrYyxPQUFTLFNBQVVuZ0IsRUFBS0csR0FDeEMsT0FBTyxJQUFJd2YsRUFBVS9lLEtBQUt5Z0IsWUFBYXpnQixLQUFLMGdCLE1BQ3ZDbkIsT0FBT25nQixFQUFLRyxFQUFPUyxLQUFLeWdCLGFBQ3hCekIsS0FBSyxLQUFNLEtBQU1KLEdBQVMyQixNQUFPLEtBQU0sUUFRaER4QixFQUFVdmMsVUFBVWdJLE9BQVMsU0FBVXBMLEdBQ25DLE9BQU8sSUFBSTJmLEVBQVUvZSxLQUFLeWdCLFlBQWF6Z0IsS0FBSzBnQixNQUN2Q2xXLE9BQU9wTCxFQUFLWSxLQUFLeWdCLGFBQ2pCekIsS0FBSyxLQUFNLEtBQU1KLEdBQVMyQixNQUFPLEtBQU0sUUFTaER4QixFQUFVdmMsVUFBVUMsSUFBTSxTQUFVckQsR0FHaEMsSUFGQSxJQUFJc1QsRUFDQXlILEVBQU9uYSxLQUFLMGdCLE9BQ1J2RyxFQUFLcEksV0FBVyxDQUVwQixHQUFZLEtBRFpXLEVBQU0xUyxLQUFLeWdCLFlBQVlyaEIsRUFBSythLEVBQUsvYSxNQUU3QixPQUFPK2EsRUFBSzVhLE1BRVBtVCxFQUFNLEVBQ1h5SCxFQUFPQSxFQUFLN0gsS0FFUEksRUFBTSxJQUNYeUgsRUFBT0EsRUFBSzVILE9BR3BCLE9BQU8sTUFPWHdNLEVBQVV2YyxVQUFVbWUsa0JBQW9CLFNBQVV2aEIsR0FFOUMsSUFEQSxJQUFJc1QsRUFBS3lILEVBQU9uYSxLQUFLMGdCLE1BQU9FLEVBQWMsTUFDbEN6RyxFQUFLcEksV0FBVyxDQUVwQixHQUFZLEtBRFpXLEVBQU0xUyxLQUFLeWdCLFlBQVlyaEIsRUFBSythLEVBQUsvYSxNQUNsQixDQUNYLEdBQUsrYSxFQUFLN0gsS0FBS1AsVUFPVixPQUFJNk8sRUFDRUEsRUFBWXhoQixJQUdaLEtBVFAsSUFEQSthLEVBQU9BLEVBQUs3SCxNQUNKNkgsRUFBSzVILE1BQU1SLFdBQ2ZvSSxFQUFPQSxFQUFLNUgsTUFFaEIsT0FBTzRILEVBQUsvYSxJQVNYc1QsRUFBTSxFQUNYeUgsRUFBT0EsRUFBSzdILEtBRVBJLEVBQU0sSUFDWGtPLEVBQWN6RyxFQUNkQSxFQUFPQSxFQUFLNUgsT0FHcEIsTUFBTSxJQUFJeEosTUFBTSwwRUFLcEJnVyxFQUFVdmMsVUFBVXVQLFFBQVUsV0FDMUIsT0FBTy9SLEtBQUswZ0IsTUFBTTNPLFdBS3RCZ04sRUFBVXZjLFVBQVV5YyxNQUFRLFdBQ3hCLE9BQU9qZixLQUFLMGdCLE1BQU16QixTQUt0QkYsRUFBVXZjLFVBQVU2YyxPQUFTLFdBQ3pCLE9BQU9yZixLQUFLMGdCLE1BQU1yQixVQUt0Qk4sRUFBVXZjLFVBQVU4YyxPQUFTLFdBQ3pCLE9BQU90ZixLQUFLMGdCLE1BQU1wQixVQVd0QlAsRUFBVXZjLFVBQVUwYyxpQkFBbUIsU0FBVXBDLEdBQzdDLE9BQU85YyxLQUFLMGdCLE1BQU14QixpQkFBaUJwQyxJQVV2Q2lDLEVBQVV2YyxVQUFVMmMsaUJBQW1CLFNBQVVyQyxHQUM3QyxPQUFPOWMsS0FBSzBnQixNQUFNdkIsaUJBQWlCckMsSUFRdkNpQyxFQUFVdmMsVUFBVXFlLFlBQWMsU0FBVUMsR0FDeEMsT0FBTyxJQUFJNUMsR0FBa0JsZSxLQUFLMGdCLE1BQU8sS0FBTTFnQixLQUFLeWdCLGFBQWEsRUFBT0ssSUFFNUUvQixFQUFVdmMsVUFBVXVlLGdCQUFrQixTQUFVM2hCLEVBQUswaEIsR0FDakQsT0FBTyxJQUFJNUMsR0FBa0JsZSxLQUFLMGdCLE1BQU90aEIsRUFBS1ksS0FBS3lnQixhQUFhLEVBQU9LLElBRTNFL0IsRUFBVXZjLFVBQVV3ZSx1QkFBeUIsU0FBVTVoQixFQUFLMGhCLEdBQ3hELE9BQU8sSUFBSTVDLEdBQWtCbGUsS0FBSzBnQixNQUFPdGhCLEVBQUtZLEtBQUt5Z0IsYUFBYSxFQUFNSyxJQUUxRS9CLEVBQVV2YyxVQUFVeWUsbUJBQXFCLFNBQVVILEdBQy9DLE9BQU8sSUFBSTVDLEdBQWtCbGUsS0FBSzBnQixNQUFPLEtBQU0xZ0IsS0FBS3lnQixhQUFhLEVBQU1LLElBTTNFL0IsRUFBVW5RLFdBQWEsSUFBSTRSLEdBQ3BCekIsRUFuS21CLEdBc0wxQm1DLEdBQVFoUyxLQUFLOUssSUFBSSxHQUlqQitjLEdBQTJCLFdBSTNCLFNBQVNBLEVBQVUxYSxHQUNmLElBQXlCMmEsRUFLekJwaEIsS0FBS2lmLE9BTG9CbUMsRUFLSDNhLEVBQVMsRUFIcEJvSixTQUFVWCxLQUFLOUssSUFBSWdkLEdBQU9GLEdBQVEsS0FJN0NsaEIsS0FBS3FoQixTQUFXcmhCLEtBQUtpZixNQUFRLEVBQzdCLElBSHdCeFAsRUFHcEI2UixHQUhvQjdSLEVBR0x6UCxLQUFLaWYsTUFIZXBQLFNBQVN0RyxNQUFNa0csRUFBTyxHQUFHOUosS0FBSyxLQUFNLElBSTNFM0YsS0FBS3VoQixNQUFTOWEsRUFBUyxFQUFLNmEsRUFXaEMsT0FOQUgsRUFBVTNlLFVBQVVnZixhQUFlLFdBRS9CLElBQUkvQyxJQUFXemUsS0FBS3VoQixNQUFTLEdBQU92aEIsS0FBS3FoQixVQUV6QyxPQURBcmhCLEtBQUtxaEIsV0FDRTVDLEdBRUowQyxFQXhCbUIsR0F5QzFCTSxHQUFnQixTQUFVQyxFQUFXaFAsRUFBS2lQLEVBQU9DLEdBQ2pERixFQUFVaFUsS0FBS2dGLEdBQ2YsSUFBSW1QLEVBQW9CLFNBQVVDLEVBQUtDLEdBQ25DLElBQ0lDLEVBQ0E1aUIsRUFGQXFILEVBQVNzYixFQUFPRCxFQUdwQixHQUFlLElBQVhyYixFQUNBLE9BQU8sS0FFTixHQUFlLElBQVhBLEVBR0wsT0FGQXViLEVBQVlOLEVBQVVJLEdBQ3RCMWlCLEVBQU11aUIsRUFBUUEsRUFBTUssR0FBYUEsRUFDMUIsSUFBSXBELEdBQVN4ZixFQUFLNGlCLEVBQVU3SCxLQUFNeUUsR0FBUzJCLE1BQU8sS0FBTSxNQUkvRCxJQUFJMEIsRUFBU3BTLFNBQVVwSixFQUFTLEVBQUksSUFBTXFiLEVBQ3RDeFAsRUFBT3VQLEVBQWtCQyxFQUFLRyxHQUM5QjFQLEVBQVFzUCxFQUFrQkksRUFBUyxFQUFHRixHQUcxQyxPQUZBQyxFQUFZTixFQUFVTyxHQUN0QjdpQixFQUFNdWlCLEVBQVFBLEVBQU1LLEdBQWFBLEVBQzFCLElBQUlwRCxHQUFTeGYsRUFBSzRpQixFQUFVN0gsS0FBTXlFLEdBQVMyQixNQUFPak8sRUFBTUMsSUEwQ25FMlAsRUF2Q21CLFNBQVVDLEdBdUI3QixJQXRCQSxJQUFJaEksRUFBTyxLQUNQK0gsRUFBTyxLQUNQckYsRUFBUTZFLEVBQVVqYixPQUNsQjJiLEVBQWUsU0FBVUMsRUFBV3hELEdBQ3BDLElBQUlpRCxFQUFNakYsRUFBUXdGLEVBQ2ROLEVBQU9sRixFQUNYQSxHQUFTd0YsRUFDVCxJQUFJQyxFQUFZVCxFQUFrQkMsRUFBTSxFQUFHQyxHQUN2Q0MsRUFBWU4sRUFBVUksR0FDdEIxaUIsRUFBTXVpQixFQUFRQSxFQUFNSyxHQUFhQSxFQUNyQ08sRUFBYyxJQUFJM0QsR0FBU3hmLEVBQUs0aUIsRUFBVTdILEtBQU0wRSxFQUFPLEtBQU15RCxLQUU3REMsRUFBZ0IsU0FBVUMsR0FDdEJySSxHQUNBQSxFQUFLN0gsS0FBT2tRLEVBQ1pySSxFQUFPcUksSUFHUE4sRUFBT00sRUFDUHJJLEVBQU9xSSxJQUdOMVcsRUFBSSxFQUFHQSxFQUFJcVcsRUFBT2xELFFBQVNuVCxFQUFHLENBQ25DLElBQUkyVyxFQUFRTixFQUFPWCxlQUVmYSxFQUFZblQsS0FBS0UsSUFBSSxFQUFHK1MsRUFBT2xELE9BQVNuVCxFQUFJLElBQzVDMlcsRUFDQUwsRUFBYUMsRUFBV3pELEdBQVMyQixRQUlqQzZCLEVBQWFDLEVBQVd6RCxHQUFTMkIsT0FDakM2QixFQUFhQyxFQUFXekQsR0FBU0UsTUFHekMsT0FBT29ELEVBR0FRLENBREUsSUFBSXZCLEdBQVVPLEVBQVVqYixTQUdyQyxPQUFPLElBQUlzWSxHQUFVNkMsR0FBYWxQLEVBQUt3UCxJQW9CdkNTLEdBQWlCLEdBQ2pCQyxHQUEwQixXQUMxQixTQUFTQSxFQUFTQyxFQUFVQyxHQUN4QjlpQixLQUFLNmlCLFNBQVdBLEVBQ2hCN2lCLEtBQUs4aUIsVUFBWUEsRUF5SHJCLE9BdkhBeGdCLE9BQU9DLGVBQWVxZ0IsRUFBVSxVQUFXLENBSXZDbmdCLElBQUssV0FLRCxPQUpBLFFBQU9rZ0IsSUFBa0I5RSxHQUFnQix1Q0FDekNsUCxFQUNJQSxHQUNJLElBQUlpVSxFQUFTLENBQUUsWUFBYUQsSUFBa0IsQ0FBRSxZQUFhOUUsTUFHekVoYixZQUFZLEVBQ1pDLGNBQWMsSUFFbEI4ZixFQUFTcGdCLFVBQVVDLElBQU0sU0FBVXNnQixHQUMvQixJQUFJQyxHQUFZLFFBQVFoakIsS0FBSzZpQixTQUFVRSxHQUN2QyxJQUFLQyxFQUNELE1BQU0sSUFBSWphLE1BQU0sd0JBQTBCZ2EsR0FFOUMsT0FBSUMsYUFBcUJqRSxHQUNkaUUsRUFLQSxNQUdmSixFQUFTcGdCLFVBQVV5Z0IsU0FBVyxTQUFVQyxHQUNwQyxPQUFPLFFBQVNsakIsS0FBSzhpQixVQUFXSSxFQUFnQnpZLGFBRXBEbVksRUFBU3BnQixVQUFVMmdCLFNBQVcsU0FBVUQsRUFBaUJFLElBQ3JELFFBQU9GLElBQW9CN0gsR0FBVyx1RUFLdEMsSUFKQSxJQVVJZ0ksRUFWQTNCLEVBQVksR0FDWjRCLEdBQWtCLEVBQ2xCQyxFQUFPSCxFQUFpQnZDLFlBQVkzRyxHQUFVRSxNQUM5Q25ZLEVBQU9zaEIsRUFBSy9FLFVBQ1R2YyxHQUNIcWhCLEVBQ0lBLEdBQW1CSixFQUFnQmpJLFlBQVloWixFQUFLa1ksTUFDeER1SCxFQUFVamMsS0FBS3hELEdBQ2ZBLEVBQU9zaEIsRUFBSy9FLFVBSVo2RSxFQURBQyxFQUNXN0IsR0FBY0MsRUFBV3dCLEVBQWdCNUksY0FHekNxSSxHQUVmLElBQUlhLEVBQVlOLEVBQWdCelksV0FDNUJnWixHQUFjLFFBQVMsR0FBSXpqQixLQUFLOGlCLFdBQ3BDVyxFQUFZRCxHQUFhTixFQUN6QixJQUFJUSxHQUFhLFFBQVMsR0FBSTFqQixLQUFLNmlCLFVBRW5DLE9BREFhLEVBQVdGLEdBQWFILEVBQ2pCLElBQUlULEVBQVNjLEVBQVlELElBS3BDYixFQUFTcGdCLFVBQVVtaEIsYUFBZSxTQUFVM0IsRUFBV29CLEdBQ25ELElBQUlqaUIsRUFBUW5CLEtBa0NaLE9BQU8sSUFBSTRpQixHQWpDTSxRQUFJNWlCLEtBQUs2aUIsVUFBVSxTQUFVZSxFQUFpQkosR0FDM0QsSUFBSTNHLEdBQVEsUUFBUTFiLEVBQU0yaEIsVUFBV1UsR0FFckMsSUFEQSxRQUFPM0csRUFBTyxvQ0FBc0MyRyxHQUNoREksSUFBb0JqQixHQUFnQixDQUVwQyxHQUFJOUYsRUFBTTVCLFlBQVkrRyxFQUFVN0gsTUFBTyxDQUtuQyxJQUhBLElBQUl1SCxFQUFZLEdBQ1o2QixFQUFPSCxFQUFpQnZDLFlBQVkzRyxHQUFVRSxNQUM5Q25ZLEVBQU9zaEIsRUFBSy9FLFVBQ1R2YyxHQUNDQSxFQUFLWCxPQUFTMGdCLEVBQVUxZ0IsTUFDeEJvZ0IsRUFBVWpjLEtBQUt4RCxHQUVuQkEsRUFBT3NoQixFQUFLL0UsVUFHaEIsT0FEQWtELEVBQVVqYyxLQUFLdWMsR0FDUlAsR0FBY0MsRUFBVzdFLEVBQU12QyxjQUl0QyxPQUFPcUksR0FJWCxJQUFJa0IsRUFBZVQsRUFBaUIzZ0IsSUFBSXVmLEVBQVUxZ0IsTUFDOUN3aUIsRUFBY0YsRUFJbEIsT0FISUMsSUFDQUMsRUFBY0EsRUFBWXRaLE9BQU8sSUFBSTBQLEdBQVU4SCxFQUFVMWdCLEtBQU11aUIsS0FFNURDLEVBQVl2RSxPQUFPeUMsRUFBV0EsRUFBVTdILFNBR3ZCbmEsS0FBSzhpQixZQUt6Q0YsRUFBU3BnQixVQUFVdWhCLGtCQUFvQixTQUFVL0IsRUFBV29CLEdBaUJ4RCxPQUFPLElBQUlSLEdBaEJNLFFBQUk1aUIsS0FBSzZpQixVQUFVLFNBQVVlLEdBQzFDLEdBQUlBLElBQW9CakIsR0FFcEIsT0FBT2lCLEVBR1AsSUFBSUMsRUFBZVQsRUFBaUIzZ0IsSUFBSXVmLEVBQVUxZ0IsTUFDbEQsT0FBSXVpQixFQUNPRCxFQUFnQnBaLE9BQU8sSUFBSTBQLEdBQVU4SCxFQUFVMWdCLEtBQU11aUIsSUFJckRELEtBSWE1akIsS0FBSzhpQixZQUVsQ0YsRUE1SGtCLEdBK0k3QixTQUFTb0IsR0FBcUIxUixFQUFNQyxHQUNoQyxPQUFPeEYsRUFBWXVGLEVBQUtoUixLQUFNaVIsRUFBTWpSLE1BRXhDLFNBQVMyaUIsR0FBZ0IzUixFQUFNQyxHQUMzQixPQUFPeEYsRUFBWXVGLEVBQU1DLEdBNkI3QixJQUFJMlIsR0FBOEIsV0FROUIsU0FBU0EsRUFBYUMsRUFBV3RJLEVBQWV1SSxHQUM1Q3BrQixLQUFLbWtCLFVBQVlBLEVBQ2pCbmtCLEtBQUs2YixjQUFnQkEsRUFDckI3YixLQUFLb2tCLFVBQVlBLEVBQ2pCcGtCLEtBQUs4YixVQUFZLEtBTWI5YixLQUFLNmIsZUFDTE4sR0FBcUJ2YixLQUFLNmIsZUFFMUI3YixLQUFLbWtCLFVBQVVwUyxZQUNmLFNBQVEvUixLQUFLNmIsZUFBaUI3YixLQUFLNmIsY0FBYzlKLFVBQVcsd0NBK1hwRSxPQTVYQXpQLE9BQU9DLGVBQWUyaEIsRUFBYyxhQUFjLENBQzlDemhCLElBQUssV0FDRCxPQUFRbU0sSUFDSEEsRUFBYSxJQUFJc1YsRUFBYSxJQUFJbkYsR0FBVWtGLElBQWtCLEtBQU1yQixHQUFTeUIsV0FFdEZ4aEIsWUFBWSxFQUNaQyxjQUFjLElBR2xCb2hCLEVBQWExaEIsVUFBVWlaLFdBQWEsV0FDaEMsT0FBTyxHQUdYeUksRUFBYTFoQixVQUFVa1osWUFBYyxXQUNqQyxPQUFPMWIsS0FBSzZiLGVBQWlCak4sR0FHakNzVixFQUFhMWhCLFVBQVV1WixlQUFpQixTQUFVQyxHQUM5QyxPQUFJaGMsS0FBS21rQixVQUFVcFMsVUFFUi9SLEtBR0EsSUFBSWtrQixFQUFhbGtCLEtBQUtta0IsVUFBV25JLEVBQWlCaGMsS0FBS29rQixZQUl0RUYsRUFBYTFoQixVQUFVeVosa0JBQW9CLFNBQVVDLEdBRWpELEdBQWtCLGNBQWRBLEVBQ0EsT0FBT2xjLEtBQUswYixjQUdaLElBQUk5SixFQUFRNVIsS0FBS21rQixVQUFVMWhCLElBQUl5WixHQUMvQixPQUFpQixPQUFWdEssRUFBaUJoRCxFQUFhZ0QsR0FJN0NzUyxFQUFhMWhCLFVBQVUyWixTQUFXLFNBQVVuSixHQUN4QyxJQUFJMEosRUFBUTFKLEVBQUsvQixXQUNqQixPQUFjLE9BQVZ5TCxFQUNPMWMsS0FFSkEsS0FBS2ljLGtCQUFrQlMsR0FBT1AsU0FBU25KLEVBQUs3QixhQUd2RCtTLEVBQWExaEIsVUFBVTRaLFNBQVcsU0FBVUYsR0FDeEMsT0FBeUMsT0FBbENsYyxLQUFLbWtCLFVBQVUxaEIsSUFBSXlaLElBRzlCZ0ksRUFBYTFoQixVQUFVK1oscUJBQXVCLFNBQVVMLEVBQVdNLEdBRS9ELElBREEsUUFBT0EsRUFBYyw4Q0FDSCxjQUFkTixFQUNBLE9BQU9sYyxLQUFLK2IsZUFBZVMsR0FHM0IsSUFBSXdGLEVBQVksSUFBSTlILEdBQVVnQyxFQUFXTSxHQUNyQ3NILE9BQWMsRUFBUVEsT0FBYyxFQUNwQzlILEVBQWF6SyxXQUNiK1IsRUFBYzlqQixLQUFLbWtCLFVBQVUzWixPQUFPMFIsR0FDcENvSSxFQUFjdGtCLEtBQUtva0IsVUFBVUwsa0JBQWtCL0IsRUFBV2hpQixLQUFLbWtCLGFBRy9ETCxFQUFjOWpCLEtBQUtta0IsVUFBVTVFLE9BQU9yRCxFQUFXTSxHQUMvQzhILEVBQWN0a0IsS0FBS29rQixVQUFVVCxhQUFhM0IsRUFBV2hpQixLQUFLbWtCLFlBRTlELElBQUlJLEVBQWNULEVBQVkvUixVQUN4Qm5ELEVBQ0E1TyxLQUFLNmIsY0FDWCxPQUFPLElBQUlxSSxFQUFhSixFQUFhUyxFQUFhRCxJQUkxREosRUFBYTFoQixVQUFVaWEsWUFBYyxTQUFVekosRUFBTXdKLEdBQ2pELElBQUlFLEVBQVExSixFQUFLL0IsV0FDakIsR0FBYyxPQUFWeUwsRUFDQSxPQUFPRixHQUdQLFFBQTJCLGNBQXBCeEosRUFBSy9CLFlBQW1ELElBQXJCK0IsRUFBSzlCLFlBQW1CLDhDQUNsRSxJQUFJc1QsRUFBb0J4a0IsS0FBS2ljLGtCQUFrQlMsR0FBT0QsWUFBWXpKLEVBQUs3QixXQUFZcUwsR0FDbkYsT0FBT3hjLEtBQUt1YyxxQkFBcUJHLEVBQU84SCxJQUloRE4sRUFBYTFoQixVQUFVdVAsUUFBVSxXQUM3QixPQUFPL1IsS0FBS21rQixVQUFVcFMsV0FHMUJtUyxFQUFhMWhCLFVBQVVtYSxZQUFjLFdBQ2pDLE9BQU8zYyxLQUFLbWtCLFVBQVVsRixTQUcxQmlGLEVBQWExaEIsVUFBVUksSUFBTSxTQUFVbWEsR0FDbkMsR0FBSS9jLEtBQUsrUixVQUNMLE9BQU8sS0FFWCxJQUFJeEUsRUFBTSxHQUNOa1gsRUFBVSxFQUFHbkYsRUFBUyxFQUFHb0YsR0FBaUIsRUFXOUMsR0FWQTFrQixLQUFLNGMsYUFBYWlCLElBQWdCLFNBQVV6ZSxFQUFLa2QsR0FDN0MvTyxFQUFJbk8sR0FBT2tkLEVBQVUxWixJQUFJbWEsR0FDekIwSCxJQUNJQyxHQUFrQlIsRUFBYWxVLGdCQUFnQkUsS0FBSzlRLEdBQ3BEa2dCLEVBQVNwUSxLQUFLa0UsSUFBSWtNLEVBQVE1UyxPQUFPdE4sSUFHakNzbEIsR0FBaUIsTUFHcEIzSCxHQUFnQjJILEdBQWtCcEYsRUFBUyxFQUFJbUYsRUFBUyxDQUV6RCxJQUFJRSxFQUFRLEdBRVosSUFBSyxJQUFJdmxCLEtBQU9tTyxFQUNab1gsRUFBTXZsQixHQUFPbU8sRUFBSW5PLEdBRXJCLE9BQU91bEIsRUFNUCxPQUhJNUgsSUFBaUIvYyxLQUFLMGIsY0FBYzNKLFlBQ3BDeEUsRUFBSSxhQUFldk4sS0FBSzBiLGNBQWM5WSxPQUVuQzJLLEdBSWYyVyxFQUFhMWhCLFVBQVV5YSxLQUFPLFdBQzFCLEdBQXVCLE9BQW5CamQsS0FBSzhiLFVBQW9CLENBQ3pCLElBQUk4SSxFQUFXLEdBQ1Y1a0IsS0FBSzBiLGNBQWMzSixZQUNwQjZTLEdBQ0ksWUFDSXRKLEdBQWlCdGIsS0FBSzBiLGNBQWM5WSxPQUNwQyxLQUVaNUMsS0FBSzRjLGFBQWFpQixJQUFnQixTQUFVemUsRUFBS2tkLEdBQzdDLElBQUl1SSxFQUFZdkksRUFBVVcsT0FDUixLQUFkNEgsSUFDQUQsR0FBWSxJQUFNeGxCLEVBQU0sSUFBTXlsQixNQUd0QzdrQixLQUFLOGIsVUFBeUIsS0FBYjhJLEVBQWtCLEdBQUt2WixFQUFLdVosR0FFakQsT0FBTzVrQixLQUFLOGIsV0FHaEJvSSxFQUFhMWhCLFVBQVU2Wix3QkFBMEIsU0FBVUgsRUFBV0ksRUFBV08sR0FDN0UsSUFBSWlJLEVBQU05a0IsS0FBSytrQixjQUFjbEksR0FDN0IsR0FBSWlJLEVBQUssQ0FDTCxJQUFJRSxFQUFjRixFQUFJbkUsa0JBQWtCLElBQUl6RyxHQUFVZ0MsRUFBV0ksSUFDakUsT0FBTzBJLEVBQWNBLEVBQVkxakIsS0FBTyxLQUd4QyxPQUFPdEIsS0FBS21rQixVQUFVeEQsa0JBQWtCekUsSUFPaERnSSxFQUFhMWhCLFVBQVV5aUIsa0JBQW9CLFNBQVUvQixHQUNqRCxJQUFJNEIsRUFBTTlrQixLQUFLK2tCLGNBQWM3QixHQUM3QixHQUFJNEIsRUFBSyxDQUNMLElBQUl6RixFQUFTeUYsRUFBSXpGLFNBQ2pCLE9BQU9BLEdBQVVBLEVBQU8vZCxLQUd4QixPQUFPdEIsS0FBS21rQixVQUFVOUUsVUFPOUI2RSxFQUFhMWhCLFVBQVUwaUIsY0FBZ0IsU0FBVWhDLEdBQzdDLElBQUk3RCxFQUFTcmYsS0FBS2lsQixrQkFBa0IvQixHQUNwQyxPQUFJN0QsRUFDTyxJQUFJbkYsR0FBVW1GLEVBQVFyZixLQUFLbWtCLFVBQVUxaEIsSUFBSTRjLElBR3pDLE1BUWY2RSxFQUFhMWhCLFVBQVUyaUIsaUJBQW1CLFNBQVVqQyxHQUNoRCxJQUFJNEIsRUFBTTlrQixLQUFLK2tCLGNBQWM3QixHQUM3QixHQUFJNEIsRUFBSyxDQUNMLElBQUl4RixFQUFTd0YsRUFBSXhGLFNBQ2pCLE9BQU9BLEdBQVVBLEVBQU9oZSxLQUd4QixPQUFPdEIsS0FBS21rQixVQUFVN0UsVUFPOUI0RSxFQUFhMWhCLFVBQVU0aUIsYUFBZSxTQUFVbEMsR0FDNUMsSUFBSTVELEVBQVN0ZixLQUFLbWxCLGlCQUFpQmpDLEdBQ25DLE9BQUk1RCxFQUNPLElBQUlwRixHQUFVb0YsRUFBUXRmLEtBQUtta0IsVUFBVTFoQixJQUFJNmMsSUFHekMsTUFNZjRFLEVBQWExaEIsVUFBVW9hLGFBQWUsU0FBVUMsRUFBT0MsR0FDbkQsSUFBSWdJLEVBQU05a0IsS0FBSytrQixjQUFjbEksR0FDN0IsT0FBSWlJLEVBQ09BLEVBQUk1RixrQkFBaUIsU0FBVW1HLEdBQ2xDLE9BQU92SSxFQUFPdUksRUFBWS9qQixLQUFNK2pCLEVBQVlsTCxTQUl6Q25hLEtBQUtta0IsVUFBVWpGLGlCQUFpQnBDLElBTy9Db0gsRUFBYTFoQixVQUFVcWUsWUFBYyxTQUFVcUMsR0FDM0MsT0FBT2xqQixLQUFLK2dCLGdCQUFnQm1DLEVBQWdCckksVUFBV3FJLElBUTNEZ0IsRUFBYTFoQixVQUFVdWUsZ0JBQWtCLFNBQVV1RSxFQUFXcEMsR0FDMUQsSUFBSTRCLEVBQU05a0IsS0FBSytrQixjQUFjN0IsR0FDN0IsR0FBSTRCLEVBQ0EsT0FBT0EsRUFBSS9ELGdCQUFnQnVFLEdBQVcsU0FBVWxtQixHQUFPLE9BQU9BLEtBSzlELElBRkEsSUFBSW1tQixFQUFXdmxCLEtBQUtta0IsVUFBVXBELGdCQUFnQnVFLEVBQVVoa0IsS0FBTTRZLEdBQVVFLE1BQ3BFblksRUFBT3NqQixFQUFTNUcsT0FDTCxNQUFSMWMsR0FBZ0JpaEIsRUFBZ0IzSSxRQUFRdFksRUFBTXFqQixHQUFhLEdBQzlEQyxFQUFTL0csVUFDVHZjLEVBQU9zakIsRUFBUzVHLE9BRXBCLE9BQU80RyxHQU9mckIsRUFBYTFoQixVQUFVeWUsbUJBQXFCLFNBQVVpQyxHQUNsRCxPQUFPbGpCLEtBQUtnaEIsdUJBQXVCa0MsRUFBZ0JoSSxVQUFXZ0ksSUFPbEVnQixFQUFhMWhCLFVBQVV3ZSx1QkFBeUIsU0FBVXdFLEVBQVN0QyxHQUMvRCxJQUFJNEIsRUFBTTlrQixLQUFLK2tCLGNBQWM3QixHQUM3QixHQUFJNEIsRUFDQSxPQUFPQSxFQUFJOUQsdUJBQXVCd0UsR0FBUyxTQUFVcG1CLEdBQ2pELE9BQU9BLEtBTVgsSUFGQSxJQUFJbW1CLEVBQVd2bEIsS0FBS21rQixVQUFVbkQsdUJBQXVCd0UsRUFBUWxrQixLQUFNNFksR0FBVUUsTUFDekVuWSxFQUFPc2pCLEVBQVM1RyxPQUNMLE1BQVIxYyxHQUFnQmloQixFQUFnQjNJLFFBQVF0WSxFQUFNdWpCLEdBQVcsR0FDNURELEVBQVMvRyxVQUNUdmMsRUFBT3NqQixFQUFTNUcsT0FFcEIsT0FBTzRHLEdBTWZyQixFQUFhMWhCLFVBQVUyYSxVQUFZLFNBQVV2SyxHQUN6QyxPQUFJNVMsS0FBSytSLFVBQ0RhLEVBQU1iLFVBQ0MsR0FHQyxFQUdQYSxFQUFNNkksY0FBZ0I3SSxFQUFNYixVQUMxQixFQUVGYSxJQUFVNlMsSUFDUCxFQUlELEdBTWZ2QixFQUFhMWhCLFVBQVVtYixVQUFZLFNBQVV1RixHQUN6QyxHQUFJQSxJQUFvQjdILElBQ3BCcmIsS0FBS29rQixVQUFVbkIsU0FBU0MsR0FDeEIsT0FBT2xqQixLQUdQLElBQUlza0IsRUFBY3RrQixLQUFLb2tCLFVBQVVqQixTQUFTRCxFQUFpQmxqQixLQUFLbWtCLFdBQ2hFLE9BQU8sSUFBSUQsRUFBYWxrQixLQUFLbWtCLFVBQVdua0IsS0FBSzZiLGNBQWV5SSxJQU1wRUosRUFBYTFoQixVQUFVb2IsVUFBWSxTQUFVZixHQUN6QyxPQUFPQSxJQUFVeEIsSUFBYXJiLEtBQUtva0IsVUFBVW5CLFNBQVNwRyxJQUsxRHFILEVBQWExaEIsVUFBVW1RLE9BQVMsU0FBVUMsR0FDdEMsR0FBSUEsSUFBVTVTLEtBQ1YsT0FBTyxFQUVOLEdBQUk0UyxFQUFNNkksYUFDWCxPQUFPLEVBR1AsSUFBSWlLLEVBQW9COVMsRUFDeEIsR0FBSzVTLEtBQUswYixjQUFjL0ksT0FBTytTLEVBQWtCaEssZUFHNUMsSUFBSTFiLEtBQUtta0IsVUFBVWxGLFVBQVl5RyxFQUFrQnZCLFVBQVVsRixRQUFTLENBS3JFLElBSkEsSUFBSTBHLEVBQVczbEIsS0FBSzZnQixZQUFZaEQsSUFDNUIrSCxFQUFZRixFQUFrQjdFLFlBQVloRCxJQUMxQ2dJLEVBQWNGLEVBQVNuSCxVQUN2QnNILEVBQWVGLEVBQVVwSCxVQUN0QnFILEdBQWVDLEdBQWMsQ0FDaEMsR0FBSUQsRUFBWXZrQixPQUFTd2tCLEVBQWF4a0IsT0FDakN1a0IsRUFBWTFMLEtBQUt4SCxPQUFPbVQsRUFBYTNMLE1BQ3RDLE9BQU8sRUFFWDBMLEVBQWNGLEVBQVNuSCxVQUN2QnNILEVBQWVGLEVBQVVwSCxVQUU3QixPQUF1QixPQUFoQnFILEdBQXlDLE9BQWpCQyxFQUcvQixPQUFPLEVBbEJQLE9BQU8sR0E4Qm5CNUIsRUFBYTFoQixVQUFVdWlCLGNBQWdCLFNBQVU3QixHQUM3QyxPQUFJQSxJQUFvQjdILEdBQ2IsS0FHQXJiLEtBQUtva0IsVUFBVTNoQixJQUFJeWdCLEVBQWdCelksYUFPbER5WixFQUFhbFUsZ0JBQWtCLGlCQUN4QmtVLEVBclpzQixHQTZiN0J1QixHQUFhLElBakNZLFNBQVV6SyxHQUVuQyxTQUFTK0ssSUFDTCxPQUFPL0ssRUFBTzNZLEtBQUtyQyxLQUFNLElBQUkrZSxHQUFVa0YsSUFBa0JDLEdBQWF0VixXQUFZZ1UsR0FBU3lCLFVBQVlya0IsS0F1QjNHLE9BekJBLFFBQVUrbEIsRUFBUy9LLEdBSW5CK0ssRUFBUXZqQixVQUFVMmEsVUFBWSxTQUFVdkssR0FDcEMsT0FBSUEsSUFBVTVTLEtBQ0gsRUFHQSxHQUdmK2xCLEVBQVF2akIsVUFBVW1RLE9BQVMsU0FBVUMsR0FFakMsT0FBT0EsSUFBVTVTLE1BRXJCK2xCLEVBQVF2akIsVUFBVWtaLFlBQWMsV0FDNUIsT0FBTzFiLE1BRVgrbEIsRUFBUXZqQixVQUFVeVosa0JBQW9CLFNBQVVDLEdBQzVDLE9BQU9nSSxHQUFhdFYsWUFFeEJtWCxFQUFRdmpCLFVBQVV1UCxRQUFVLFdBQ3hCLE9BQU8sR0FFSmdVLEVBMUJpQixDQTJCMUI3QixLQStDRixTQUFTOEIsR0FBZUMsRUFBTTlPLEdBRTFCLFFBRGlCLElBQWJBLElBQXVCQSxFQUFXLE1BQ3pCLE9BQVQ4TyxFQUNBLE9BQU8vQixHQUFhdFYsV0FheEIsR0FYb0IsaUJBQVRxWCxHQUFxQixjQUFlQSxJQUMzQzlPLEVBQVc4TyxFQUFLLGVBRXBCLFFBQW9CLE9BQWI5TyxHQUNpQixpQkFBYkEsR0FDYSxpQkFBYkEsR0FDYyxpQkFBYkEsR0FBeUIsUUFBU0EsRUFBVyx1Q0FBeUNBLEdBQzlFLGlCQUFUOE8sR0FBcUIsV0FBWUEsR0FBMkIsT0FBbkJBLEVBQUssWUFDckRBLEVBQU9BLEVBQUssV0FHSSxpQkFBVEEsR0FBcUIsUUFBU0EsRUFFckMsT0FBTyxJQUFJdEssR0FESXNLLEVBQ2VELEdBQWU3TyxJQUVqRCxHQUFNOE8sYUFBZ0IxYyxNQTJCakIsQ0FDRCxJQUFJMmMsRUFBU2hDLEdBQWF0VixXQVkxQixPQVhBWCxFQUFLZ1ksR0FBTSxTQUFVN21CLEVBQUsrbUIsR0FDdEIsSUFBSSxRQUFTRixFQUFNN21CLElBQ2EsTUFBeEJBLEVBQUk0TyxVQUFVLEVBQUcsR0FBWSxDQUU3QixJQUFJc08sRUFBWTBKLEdBQWVHLElBQzNCN0osRUFBVWIsY0FBaUJhLEVBQVV2SyxZQUNyQ21VLEVBQVNBLEVBQU8zSixxQkFBcUJuZCxFQUFLa2QsUUFLbkQ0SixFQUFPbkssZUFBZWlLLEdBQWU3TyxJQXZDNUMsSUFBSWlQLEVBQWEsR0FDYkMsR0FBeUIsRUFhN0IsR0FYQXBZLEVBRG1CZ1ksR0FDQSxTQUFVN21CLEVBQUt3UyxHQUM5QixHQUE0QixNQUF4QnhTLEVBQUk0TyxVQUFVLEVBQUcsR0FBWSxDQUU3QixJQUFJc08sRUFBWTBKLEdBQWVwVSxHQUMxQjBLLEVBQVV2SyxZQUNYc1UsRUFDSUEsSUFBMkIvSixFQUFVWixjQUFjM0osVUFDdkRxVSxFQUFXM2dCLEtBQUssSUFBSXlVLEdBQVU5YSxFQUFLa2QsU0FJckIsSUFBdEI4SixFQUFXM2YsT0FDWCxPQUFPeWQsR0FBYXRWLFdBRXhCLElBQUkwWCxFQUFXN0UsR0FBYzJFLEVBQVlwQyxJQUFzQixTQUFVaEMsR0FBYSxPQUFPQSxFQUFVMWdCLE9BQVMyaUIsSUFDaEgsR0FBSW9DLEVBQXdCLENBQ3hCLElBQUlFLEVBQWlCOUUsR0FBYzJFLEVBQVl2SSxHQUFldkQsY0FDOUQsT0FBTyxJQUFJNEosR0FBYW9DLEVBQVVOLEdBQWU3TyxHQUFXLElBQUl5TCxHQUFTLENBQUUsWUFBYTJELEdBQWtCLENBQUUsWUFBYTFJLE1BR3pILE9BQU8sSUFBSXFHLEdBQWFvQyxFQUFVTixHQUFlN08sR0FBV3lMLEdBQVN5QixTQXBGakYvaEIsT0FBT2trQixpQkFBaUJ0TSxHQUFXLENBQy9CWSxJQUFLLENBQ0R2YixNQUFPLElBQUkyYSxHQUFVck4sRUFBVXFYLEdBQWF0VixhQUVoRDZYLElBQUssQ0FDRGxuQixNQUFPLElBQUkyYSxHQUFVcE4sRUFBVTJZLE9BTXZDMUssR0FBU3pNLGFBQWU0VixHQUFhdFYsV0FDckMrTSxHQUFTbk4sMEJBQTRCMFYsR0F2eURqQzNWLEVBd3lET2tYLEdBeitDUC9XLEVBMCtDUytXLEdBOStDYixTQUF5QjdpQixHQUNyQjZMLEVBQWU3TCxFQXNrRG5COGpCLENBQWdCVixJQXVCaEIsSUF1b0JJVyxHQTNrQkFDLEdBQWMsSUE1RGMsU0FBVTVMLEdBRXRDLFNBQVM2TCxJQUNMLE9BQWtCLE9BQVg3TCxHQUFtQkEsRUFBTzdhLE1BQU1ILEtBQU1FLFlBQWNGLEtBdUQvRCxPQXpEQSxRQUFVNm1CLEVBQVk3TCxHQU90QjZMLEVBQVdya0IsVUFBVStYLFFBQVUsU0FBVXZOLEVBQUdDLEdBQ3hDLElBQUlnUixFQUFXalIsRUFBRW1OLEtBQUtnRCxVQUFVbFEsRUFBRWtOLE1BQ2xDLE9BQWlCLElBQWI4RCxFQUNPbFIsRUFBWUMsRUFBRTFMLEtBQU0yTCxFQUFFM0wsTUFHdEIyYyxHQU1mNEksRUFBV3JrQixVQUFVeVksWUFBYyxTQUFVZCxHQUN6QyxPQUFPLEdBS1gwTSxFQUFXcmtCLFVBQVVnWSxvQkFBc0IsU0FBVUMsRUFBU0MsR0FDMUQsT0FBUUQsRUFBUTlILE9BQU8rSCxJQUszQm1NLEVBQVdya0IsVUFBVXFZLFFBQVUsV0FFM0IsT0FBT1gsR0FBVVksS0FLckIrTCxFQUFXcmtCLFVBQVUwWSxRQUFVLFdBRTNCLE9BQU9oQixHQUFVdU0sS0FPckJJLEVBQVdya0IsVUFBVTJZLFNBQVcsU0FBVUMsRUFBWTlaLEdBQ2xELElBQUl3bEIsRUFBWWQsR0FBZTVLLEdBQy9CLE9BQU8sSUFBSWxCLEdBQVU1WSxFQUFNd2xCLElBSy9CRCxFQUFXcmtCLFVBQVVpSSxTQUFXLFdBQzVCLE1BQU8sVUFFSm9jLEVBMURvQixDQTJEN0J4TSxLQXdCRTBNLEdBQTJCLFNBQVUvTCxHQUVyQyxTQUFTK0wsRUFBVUMsR0FDZixJQUFJN2xCLEVBQVE2WixFQUFPM1ksS0FBS3JDLE9BQVNBLEtBR2pDLE9BRkFtQixFQUFNNmxCLFdBQWFBLEdBQ25CLFNBQVFBLEVBQVdqVixXQUF1QyxjQUExQmlWLEVBQVcvVixXQUE0QiwyREFDaEU5UCxFQW1EWCxPQXhEQSxRQUFVNGxCLEVBQVcvTCxHQVlyQitMLEVBQVV2a0IsVUFBVXlrQixhQUFlLFNBQVVDLEdBQ3pDLE9BQU9BLEVBQUsvSyxTQUFTbmMsS0FBS2duQixhQUs5QkQsRUFBVXZrQixVQUFVeVksWUFBYyxTQUFVZCxHQUN4QyxPQUFRQSxFQUFLZ0MsU0FBU25jLEtBQUtnbkIsWUFBWWpWLFdBSzNDZ1YsRUFBVXZrQixVQUFVK1gsUUFBVSxTQUFVdk4sRUFBR0MsR0FDdkMsSUFBSWthLEVBQVNubkIsS0FBS2luQixhQUFhamEsRUFBRW1OLE1BQzdCaU4sRUFBU3BuQixLQUFLaW5CLGFBQWFoYSxFQUFFa04sTUFDN0I4RCxFQUFXa0osRUFBT2hLLFVBQVVpSyxHQUNoQyxPQUFpQixJQUFibkosRUFDT2xSLEVBQVlDLEVBQUUxTCxLQUFNMkwsRUFBRTNMLE1BR3RCMmMsR0FNZjhJLEVBQVV2a0IsVUFBVTJZLFNBQVcsU0FBVUMsRUFBWTlaLEdBQ2pELElBQUl3bEIsRUFBWWQsR0FBZTVLLEdBQzNCakIsRUFBTytKLEdBQWF0VixXQUFXNk4sWUFBWXpjLEtBQUtnbkIsV0FBWUYsR0FDaEUsT0FBTyxJQUFJNU0sR0FBVTVZLEVBQU02WSxJQUsvQjRNLEVBQVV2a0IsVUFBVTBZLFFBQVUsV0FDMUIsSUFBSWYsRUFBTytKLEdBQWF0VixXQUFXNk4sWUFBWXpjLEtBQUtnbkIsV0FBWXZCLElBQ2hFLE9BQU8sSUFBSXZMLEdBQVVwTixFQUFVcU4sSUFLbkM0TSxFQUFVdmtCLFVBQVVpSSxTQUFXLFdBQzNCLE9BQU96SyxLQUFLZ25CLFdBQVd4VixRQUFRN0wsS0FBSyxNQUVqQ29oQixFQXpEbUIsQ0EwRDVCMU0sSUFzQkVnTixHQUE4QixXQU05QixTQUFTQSxFQUFhQyxFQUFPQyxFQUFNQyxHQUMvQnhuQixLQUFLc25CLE1BQVFBLEVBQ2J0bkIsS0FBS3VuQixLQUFPQSxFQUNadm5CLEtBQUt3bkIsT0FBU0EsRUF5SWxCLE9BaklBSCxFQUFhN2tCLFVBQVVJLElBQU0sV0FFekIsT0FEQSxRQUFpQixtQkFBb0IsRUFBRyxFQUFHMUMsVUFBVXVHLFFBQzlDekcsS0FBS3NuQixNQUFNMWtCLE9BT3RCeWtCLEVBQWE3a0IsVUFBVWlsQixVQUFZLFdBRS9CLE9BREEsUUFBaUIseUJBQTBCLEVBQUcsRUFBR3ZuQixVQUFVdUcsUUFDcER6RyxLQUFLc25CLE1BQU0xa0IsS0FBSSxJQUkxQnlrQixFQUFhN2tCLFVBQVVvWCxPQUFTLFdBRzVCLE9BREEsUUFBaUIsc0JBQXVCLEVBQUcsRUFBRzFaLFVBQVV1RyxRQUNqRHpHLEtBQUt5bkIsYUFPaEJKLEVBQWE3a0IsVUFBVWtsQixPQUFTLFdBRTVCLE9BREEsUUFBaUIsc0JBQXVCLEVBQUcsRUFBR3huQixVQUFVdUcsU0FDaER6RyxLQUFLc25CLE1BQU12VixXQVF2QnNWLEVBQWE3a0IsVUFBVW9QLE1BQVEsU0FBVStWLElBQ3JDLFFBQWlCLHFCQUFzQixFQUFHLEVBQUd6bkIsVUFBVXVHLFFBRXZEa2hCLEVBQWtCN2lCLE9BQU82aUIsR0FDekJyUCxHQUFtQixxQkFBc0IsRUFBR3FQLEdBQWlCLEdBQzdELElBQUlDLEVBQVksSUFBSWxYLEVBQUtpWCxHQUNyQkUsRUFBVzduQixLQUFLdW5CLEtBQUszVixNQUFNZ1csR0FDL0IsT0FBTyxJQUFJUCxFQUFhcm5CLEtBQUtzbkIsTUFBTW5MLFNBQVN5TCxHQUFZQyxFQUFVaEssS0FRdEV3SixFQUFhN2tCLFVBQVU0WixTQUFXLFNBQVV1TCxJQUN4QyxRQUFpQix3QkFBeUIsRUFBRyxFQUFHem5CLFVBQVV1RyxRQUMxRDZSLEdBQW1CLHdCQUF5QixFQUFHcVAsR0FBaUIsR0FDaEUsSUFBSUMsRUFBWSxJQUFJbFgsRUFBS2lYLEdBQ3pCLE9BQVEzbkIsS0FBS3NuQixNQUFNbkwsU0FBU3lMLEdBQVc3VixXQU8zQ3NWLEVBQWE3a0IsVUFBVWtaLFlBQWMsV0FHakMsT0FGQSxRQUFpQiwyQkFBNEIsRUFBRyxFQUFHeGIsVUFBVXVHLFFBRXREekcsS0FBS3NuQixNQUFNNUwsY0FBYzlZLE9BVXBDeWtCLEVBQWE3a0IsVUFBVXNsQixRQUFVLFNBQVVoTCxHQUN2QyxJQUFJM2IsRUFBUW5CLEtBR1osSUFGQSxRQUFpQix1QkFBd0IsRUFBRyxFQUFHRSxVQUFVdUcsU0FDekQsUUFBaUIsdUJBQXdCLEVBQUdxVyxHQUFRLEdBQ2hEOWMsS0FBS3NuQixNQUFNN0wsYUFDWCxPQUFPLEVBRVgsSUFBSXNNLEVBQWUvbkIsS0FBS3NuQixNQUV4QixRQUFTUyxFQUFhbkwsYUFBYTVjLEtBQUt3bkIsUUFBUSxTQUFVcG9CLEVBQUsrYSxHQUMzRCxPQUFPMkMsRUFBTyxJQUFJdUssRUFBYWxOLEVBQU1oWixFQUFNb21CLEtBQUszVixNQUFNeFMsR0FBTXllLFNBT3BFd0osRUFBYTdrQixVQUFVd2xCLFlBQWMsV0FFakMsT0FEQSxRQUFpQiwyQkFBNEIsRUFBRyxFQUFHOW5CLFVBQVV1RyxTQUN6RHpHLEtBQUtzbkIsTUFBTTdMLGVBSUh6YixLQUFLc25CLE1BQU12VixXQUczQnpQLE9BQU9DLGVBQWU4a0IsRUFBYTdrQixVQUFXLE1BQU8sQ0FDakRDLElBQUssV0FDRCxPQUFPekMsS0FBS3VuQixLQUFLVSxVQUVyQnBsQixZQUFZLEVBQ1pDLGNBQWMsSUFNbEJ1a0IsRUFBYTdrQixVQUFVbWEsWUFBYyxXQUVqQyxPQURBLFFBQWlCLDJCQUE0QixFQUFHLEVBQUd6YyxVQUFVdUcsUUFDdER6RyxLQUFLc25CLE1BQU0zSyxlQUt0QjBLLEVBQWE3a0IsVUFBVTBsQixPQUFTLFdBRTVCLE9BREEsUUFBaUIsbUJBQW9CLEVBQUcsRUFBR2hvQixVQUFVdUcsUUFDOUN6RyxLQUFLdW5CLE1BRWhCamxCLE9BQU9DLGVBQWU4a0IsRUFBYTdrQixVQUFXLE1BQU8sQ0FDakRDLElBQUssV0FDRCxPQUFPekMsS0FBS2tvQixVQUVoQnJsQixZQUFZLEVBQ1pDLGNBQWMsSUFFWHVrQixFQWxKc0IsR0F5SzdCYyxHQUEyQixXQU8zQixTQUFTQSxFQUFVL1AsRUFBV2dRLEVBQW1Cek8sRUFBVTBPLEdBQ3ZEcm9CLEtBQUtvWSxVQUFZQSxFQUNqQnBZLEtBQUtvb0Isa0JBQW9CQSxFQUN6QnBvQixLQUFLMlosU0FBV0EsRUFDaEIzWixLQUFLcW9CLFNBQVdBLEVBb0NwQixPQS9CQUYsRUFBVTNsQixVQUFVOGxCLFFBQVUsV0FDMUIsSUFBSUMsRUFBTXZvQixLQUFLMlosU0FBU3VPLFNBQ3hCLE1BQXVCLFVBQW5CbG9CLEtBQUtvWSxVQUNFbVEsRUFBSXZWLEtBR0p1VixFQUFJQyxZQUFZeFYsTUFNL0JtVixFQUFVM2xCLFVBQVVpbUIsYUFBZSxXQUMvQixPQUFPem9CLEtBQUtvWSxXQUtoQitQLEVBQVUzbEIsVUFBVWttQixlQUFpQixXQUNqQyxPQUFPMW9CLEtBQUtvb0Isa0JBQWtCTSxlQUFlMW9CLE9BS2pEbW9CLEVBQVUzbEIsVUFBVWlJLFNBQVcsV0FDM0IsT0FBUXpLLEtBQUtzb0IsVUFBVTdkLFdBQ25CLElBQ0F6SyxLQUFLb1ksVUFDTCxLQUNBLFFBQVVwWSxLQUFLMlosU0FBUzhOLGNBRXpCVSxFQS9DbUIsR0FpRDFCUSxHQUE2QixXQU03QixTQUFTQSxFQUFZUCxFQUFtQjVvQixFQUFPd1QsR0FDM0NoVCxLQUFLb29CLGtCQUFvQkEsRUFDekJwb0IsS0FBS1IsTUFBUUEsRUFDYlEsS0FBS2dULEtBQU9BLEVBMEJoQixPQXJCQTJWLEVBQVlubUIsVUFBVThsQixRQUFVLFdBQzVCLE9BQU90b0IsS0FBS2dULE1BS2hCMlYsRUFBWW5tQixVQUFVaW1CLGFBQWUsV0FDakMsTUFBTyxVQUtYRSxFQUFZbm1CLFVBQVVrbUIsZUFBaUIsV0FDbkMsT0FBTzFvQixLQUFLb29CLGtCQUFrQk0sZUFBZTFvQixPQUtqRDJvQixFQUFZbm1CLFVBQVVpSSxTQUFXLFdBQzdCLE9BQU96SyxLQUFLZ1QsS0FBS3ZJLFdBQWEsV0FFM0JrZSxFQW5DcUIsR0F5RDVCQyxHQUF3QyxXQU14QyxTQUFTQSxFQUF1QkMsRUFBV0MsRUFBaUJDLEdBQ3hEL29CLEtBQUs2b0IsVUFBWUEsRUFDakI3b0IsS0FBSzhvQixnQkFBa0JBLEVBQ3ZCOW9CLEtBQUsrb0IsU0FBV0EsRUFtRXBCLE9BOURBSCxFQUF1QnBtQixVQUFVd21CLFdBQWEsU0FBVTVRLEdBQ3BELE1BQXFCLFVBQWRBLEdBS1h3USxFQUF1QnBtQixVQUFVeW1CLFlBQWMsU0FBVUMsRUFBUUMsR0FDN0QsSUFBSXRNLEVBQVFzTSxFQUFNQyxpQkFBaUJDLFdBQ25DLE9BQU8sSUFBSWxCLEdBQVUsUUFBU25vQixLQUFNLElBQUlxbkIsR0FBYTZCLEVBQU9JLGFBQWNILEVBQU1qQixTQUFVckwsS0FLOUYrTCxFQUF1QnBtQixVQUFVa21CLGVBQWlCLFNBQVVhLEdBQ3hELElBQUlDLEVBQU14cEIsS0FBSytvQixTQUNmLEdBQWlDLFdBQTdCUSxFQUFVZCxlQUE2QixFQUN2QyxRQUFPem9CLEtBQUs4b0IsZ0JBQWlCLGdFQUM3QixJQUFJVyxFQUFhenBCLEtBQUs4b0IsZ0JBQ3RCLE9BQU8sV0FFSFcsRUFBV3BuQixLQUFLbW5CLEVBQUtELEVBQVUvcEIsUUFJbkMsSUFBSWtxQixFQUFPMXBCLEtBQUs2b0IsVUFDaEIsT0FBTyxXQUNIYSxFQUFLcm5CLEtBQUttbkIsRUFBS0QsRUFBVTVQLFlBT3JDaVAsRUFBdUJwbUIsVUFBVW1uQixrQkFBb0IsU0FBVW5xQixFQUFPd1QsR0FDbEUsT0FBSWhULEtBQUs4b0IsZ0JBQ0UsSUFBSUgsR0FBWTNvQixLQUFNUixFQUFPd1QsR0FHN0IsTUFNZjRWLEVBQXVCcG1CLFVBQVVvbkIsUUFBVSxTQUFVaFgsR0FDakQsT0FBTUEsYUFBaUJnVyxLQUdiaFcsRUFBTWlXLFlBQWM3b0IsS0FBSzZvQixXQUt2QmpXLEVBQU1pVyxZQUFjN29CLEtBQUs2b0IsV0FBYWpXLEVBQU1tVyxXQUFhL29CLEtBQUsrb0IsV0FNOUVILEVBQXVCcG1CLFVBQVVxbkIsZUFBaUIsV0FDOUMsT0FBMEIsT0FBbkI3cEIsS0FBSzZvQixXQUVURCxFQTVFZ0MsR0F1RnZDa0IsR0FBd0MsV0FNeEMsU0FBU0EsRUFBdUJDLEVBQVlqQixFQUFpQkMsR0FDekQvb0IsS0FBSytwQixXQUFhQSxFQUNsQi9wQixLQUFLOG9CLGdCQUFrQkEsRUFDdkI5b0IsS0FBSytvQixTQUFXQSxFQThGcEIsT0F6RkFlLEVBQXVCdG5CLFVBQVV3bUIsV0FBYSxTQUFVNVEsR0FDcEQsSUFBSTRSLEVBQTZCLG1CQUFkNVIsRUFBaUMsY0FBZ0JBLEVBR3BFLE9BRkE0UixFQUNxQixxQkFBakJBLEVBQXNDLGdCQUFrQkEsR0FDckQsUUFBU2hxQixLQUFLK3BCLFdBQVlDLElBS3JDRixFQUF1QnRuQixVQUFVbW5CLGtCQUFvQixTQUFVbnFCLEVBQU93VCxHQUNsRSxPQUFJaFQsS0FBSzhvQixnQkFDRSxJQUFJSCxHQUFZM29CLEtBQU1SLEVBQU93VCxHQUc3QixNQU1mOFcsRUFBdUJ0bkIsVUFBVXltQixZQUFjLFNBQVVDLEVBQVFDLElBQzdELFFBQTJCLE1BQXBCRCxFQUFPaE4sVUFBbUIseUNBQ2pDLElBQUlxTSxFQUFNWSxFQUFNakIsU0FBU3RXLE1BQTZCc1gsRUFBT2hOLFdBQ3pEVyxFQUFRc00sRUFBTUMsaUJBQWlCQyxXQUNuQyxPQUFPLElBQUlsQixHQUFVZSxFQUFPOWlCLEtBQU1wRyxLQUFNLElBQUlxbkIsR0FBYTZCLEVBQU9JLGFBQWNmLEVBQUsxTCxHQUFRcU0sRUFBT2IsV0FLdEd5QixFQUF1QnRuQixVQUFVa21CLGVBQWlCLFNBQVVhLEdBQ3hELElBQUlDLEVBQU14cEIsS0FBSytvQixTQUNmLEdBQWlDLFdBQTdCUSxFQUFVZCxlQUE2QixFQUN2QyxRQUFPem9CLEtBQUs4b0IsZ0JBQWlCLGdFQUM3QixJQUFJbUIsRUFBYWpxQixLQUFLOG9CLGdCQUN0QixPQUFPLFdBRUhtQixFQUFXNW5CLEtBQUttbkIsRUFBS0QsRUFBVS9wQixRQUluQyxJQUFJMHFCLEVBQU9scUIsS0FBSytwQixXQUFXUixFQUFVblIsV0FDckMsT0FBTyxXQUNIOFIsRUFBSzduQixLQUFLbW5CLEVBQUtELEVBQVU1UCxTQUFVNFAsRUFBVWxCLFlBT3pEeUIsRUFBdUJ0bkIsVUFBVW9uQixRQUFVLFNBQVVoWCxHQUNqRCxJQUFJelIsRUFBUW5CLEtBQ1osR0FBSTRTLGFBQWlCa1gsRUFBd0IsQ0FDekMsSUFBSzlwQixLQUFLK3BCLGFBQWVuWCxFQUFNbVgsV0FDM0IsT0FBTyxFQUVOLEdBQUkvcEIsS0FBSytvQixXQUFhblcsRUFBTW1XLFNBQVUsQ0FDdkMsSUFBSW9CLEVBQVk3bkIsT0FBT3NFLEtBQUtnTSxFQUFNbVgsWUFDOUJLLEVBQVc5bkIsT0FBT3NFLEtBQUs1RyxLQUFLK3BCLFlBQzVCTSxFQUFhRixFQUFVMWpCLE9BRTNCLEdBQUk0akIsSUFEWUQsRUFBUzNqQixPQUNLLENBSTFCLEdBQW1CLElBQWY0akIsRUFBa0IsQ0FDbEIsSUFBSUMsRUFBV0gsRUFBVSxHQUNyQkksRUFBVUgsRUFBUyxHQUN2QixRQUFRRyxJQUFZRCxHQUNkMVgsRUFBTW1YLFdBQVdPLElBQ2R0cUIsS0FBSytwQixXQUFXUSxJQUNqQjNYLEVBQU1tWCxXQUFXTyxLQUFjdHFCLEtBQUsrcEIsV0FBV1EsSUFJdkQsT0FBT0gsRUFBU0ksT0FBTSxTQUFVcFMsR0FDNUIsT0FBT3hGLEVBQU1tWCxXQUFXM1IsS0FBZWpYLEVBQU00b0IsV0FBVzNSLFFBTTVFLE9BQU8sR0FLWDBSLEVBQXVCdG5CLFVBQVVxbkIsZUFBaUIsV0FDOUMsT0FBMkIsT0FBcEI3cEIsS0FBSytwQixZQUVURCxFQXZHZ0MsR0FpSXZDVyxHQUF1QixXQUN2QixTQUFTQSxFQUFNQyxFQUFNMVgsRUFBTTJYLEVBQWNDLEdBQ3JDNXFCLEtBQUswcUIsS0FBT0EsRUFDWjFxQixLQUFLZ1QsS0FBT0EsRUFDWmhULEtBQUsycUIsYUFBZUEsRUFDcEIzcUIsS0FBSzRxQixlQUFpQkEsRUE4YzFCLE9BNWNBdG9CLE9BQU9DLGVBQWVrb0IsRUFBTyx5QkFBMEIsQ0FDbkRob0IsSUFBSyxXQUVELE9BREEsUUFBT2trQixHQUF3QixvQ0FDeEJBLElBRVhoa0IsSUFBSyxTQUFVQyxHQUNYK2pCLEdBQXlCL2pCLEdBRTdCQyxZQUFZLEVBQ1pDLGNBQWMsSUFPbEIybkIsRUFBTUksd0JBQTBCLFNBQVUvVixHQUN0QyxJQUFJZ1csRUFBWSxLQUNaQyxFQUFVLEtBT2QsR0FOSWpXLEVBQU9rVyxhQUNQRixFQUFZaFcsRUFBT21XLHNCQUVuQm5XLEVBQU9vVyxXQUNQSCxFQUFValcsRUFBT3FXLG9CQUVqQnJXLEVBQU91VSxhQUFlaE8sR0FBVyxDQUNqQyxJQUFJK1AsRUFBbUIsbUdBRW5CQyxFQUFvQix3R0FFeEIsR0FBSXZXLEVBQU9rVyxXQUFZLENBRW5CLEdBRGdCbFcsRUFBT3dXLHNCQUNMemUsRUFDZCxNQUFNLElBQUk5RCxNQUFNcWlCLEdBRWYsR0FBeUIsaUJBQWROLEVBQ1osTUFBTSxJQUFJL2hCLE1BQU1zaUIsR0FHeEIsR0FBSXZXLEVBQU9vVyxTQUFVLENBRWpCLEdBRGNwVyxFQUFPeVcsb0JBQ0x6ZSxFQUNaLE1BQU0sSUFBSS9ELE1BQU1xaUIsR0FFZixHQUF1QixpQkFBWkwsRUFDWixNQUFNLElBQUloaUIsTUFBTXNpQixTQUl2QixHQUFJdlcsRUFBT3VVLGFBQWV4TCxJQUMzQixHQUFrQixNQUFiaU4sSUFBc0I1VCxHQUFnQjRULElBQzNCLE1BQVhDLElBQW9CN1QsR0FBZ0I2VCxHQUNyQyxNQUFNLElBQUloaUIsTUFBTSxzS0FPcEIsSUFGQSxRQUFPK0wsRUFBT3VVLHFCQUFzQnRDLElBQ2hDalMsRUFBT3VVLGFBQWV6QyxHQUFhLHVCQUNyQixNQUFia0UsR0FBMEMsaUJBQWRBLEdBQ2pCLE1BQVhDLEdBQXNDLGlCQUFaQSxFQUMzQixNQUFNLElBQUloaUIsTUFBTSwwRkFVNUIwaEIsRUFBTWUsZUFBaUIsU0FBVTFXLEdBQzdCLEdBQUlBLEVBQU9rVyxZQUNQbFcsRUFBT29XLFVBQ1BwVyxFQUFPMlcsYUFDTjNXLEVBQU80VyxtQkFDUixNQUFNLElBQUkzaUIsTUFBTSx1R0FReEIwaEIsRUFBTWpvQixVQUFVbXBCLCtCQUFpQyxTQUFVdFUsR0FDdkQsSUFBNEIsSUFBeEJyWCxLQUFLNHFCLGVBQ0wsTUFBTSxJQUFJN2hCLE1BQU1zTyxFQUFTLGdEQU1qQ29ULEVBQU1qb0IsVUFBVTRtQixlQUFpQixXQUM3QixPQUFPcHBCLEtBQUsycUIsY0FLaEJGLEVBQU1qb0IsVUFBVTBsQixPQUFTLFdBS3JCLE9BSkEsUUFBaUIsWUFBYSxFQUFHLEVBQUdob0IsVUFBVXVHLFFBSXZDLElBQUlna0IsRUFBTTlELHVCQUF1QjNtQixLQUFLMHFCLEtBQU0xcUIsS0FBS2dULE9BUzVEeVgsRUFBTWpvQixVQUFVb3BCLEdBQUssU0FBVXhULEVBQVd5VCxFQUFVQyxFQUF5QkMsSUFDekUsUUFBaUIsV0FBWSxFQUFHLEVBQUc3ckIsVUFBVXVHLFFBQzdDMFIsR0FBa0IsV0FBWSxFQUFHQyxHQUFXLElBQzVDLFFBQWlCLFdBQVksRUFBR3lULEdBQVUsR0FDMUMsSUFBSUcsRUFBTXZCLEVBQU13Qix5QkFBeUIsV0FBWUgsRUFBeUJDLEdBQzlFLEdBQWtCLFVBQWQzVCxFQUNBcFksS0FBS2tzQixhQUFhTCxFQUFVRyxFQUFJalQsT0FBUWlULEVBQUlELGFBRTNDLENBQ0QsSUFBSUksRUFBWSxHQUNoQkEsRUFBVS9ULEdBQWF5VCxFQUN2QjdyQixLQUFLb3NCLGFBQWFELEVBQVdILEVBQUlqVCxPQUFRaVQsRUFBSUQsU0FFakQsT0FBT0YsR0FRWHBCLEVBQU1qb0IsVUFBVTBwQixhQUFlLFNBQVVMLEVBQVVRLEVBQWdCTixHQUMvRCxJQUFJcnFCLEVBQVksSUFBSWtuQixHQUF1QmlELEVBQVVRLEdBQWtCLEtBQU1OLEdBQVcsTUFDeEYvckIsS0FBSzBxQixLQUFLNEIseUJBQXlCdHNCLEtBQU0wQixJQVE3QytvQixFQUFNam9CLFVBQVU0cEIsYUFBZSxTQUFVRCxFQUFXRSxFQUFnQk4sR0FDaEUsSUFBSXJxQixFQUFZLElBQUlvb0IsR0FBdUJxQyxFQUFXRSxFQUFnQk4sR0FDdEUvckIsS0FBSzBxQixLQUFLNEIseUJBQXlCdHNCLEtBQU0wQixJQU83QytvQixFQUFNam9CLFVBQVUrcEIsSUFBTSxTQUFVblUsRUFBV3lULEVBQVVFLElBQ2pELFFBQWlCLFlBQWEsRUFBRyxFQUFHN3JCLFVBQVV1RyxRQUM5QzBSLEdBQWtCLFlBQWEsRUFBR0MsR0FBVyxJQUM3QyxRQUFpQixZQUFhLEVBQUd5VCxHQUFVLElBQzNDLFFBQXNCLFlBQWEsRUFBR0UsR0FBUyxHQUMvQyxJQUFJcnFCLEVBQVksS0FDWnlxQixFQUFZLEtBQ2hCLEdBQWtCLFVBQWQvVCxFQUF1QixDQUN2QixJQUFJb1UsRUFBZ0JYLEdBQVksS0FDaENucUIsRUFBWSxJQUFJa25CLEdBQXVCNEQsRUFBZSxLQUFNVCxHQUFXLFdBRWxFM1QsSUFDRHlULEtBQ0FNLEVBQVksSUFDRi9ULEdBQWF5VCxHQUUzQm5xQixFQUFZLElBQUlvb0IsR0FBdUJxQyxFQUFXLEtBQU1KLEdBQVcsT0FFdkUvckIsS0FBSzBxQixLQUFLK0IsNEJBQTRCenNCLEtBQU0wQixJQVVoRCtvQixFQUFNam9CLFVBQVVrcUIsS0FBTyxTQUFVdFUsRUFBV3VVLEVBQWNDLEVBQTBCYixHQUNoRixJQUFJNXFCLEVBQVFuQixNQUNaLFFBQWlCLGFBQWMsRUFBRyxFQUFHRSxVQUFVdUcsUUFDL0MwUixHQUFrQixhQUFjLEVBQUdDLEdBQVcsSUFDOUMsUUFBaUIsYUFBYyxFQUFHdVUsR0FBYyxHQUNoRCxJQUFJWCxFQUFNdkIsRUFBTXdCLHlCQUF5QixhQUFjVyxFQUEwQmIsR0FLN0VjLEdBQVksRUFDWm5rQixFQUFXLElBQUksS0FFbkJBLEVBQVNHLFFBQVFpa0IsT0FBTSxlQUN2QixJQUFJQyxFQUFlLFNBQVVwVCxHQUdyQmtULElBQ0FBLEdBQVksRUFDWjFyQixFQUFNb3JCLElBQUluVSxFQUFXMlUsR0FDakJKLEdBQ0FBLEVBQWFqbUIsS0FBS3NsQixFQUFJRCxRQUF0QlksQ0FBK0JoVCxHQUVuQ2pSLEVBQVMxSixRQUFRMmEsS0FXekIsT0FSQTNaLEtBQUs0ckIsR0FBR3hULEVBQVcyVSxHQUNQLFNBQVUzc0IsR0FDbEJlLEVBQU1vckIsSUFBSW5VLEVBQVcyVSxHQUNqQmYsRUFBSWpULFFBQ0ppVCxFQUFJalQsT0FBT3JTLEtBQUtzbEIsRUFBSUQsUUFBcEJDLENBQTZCNXJCLEdBRWpDc0ksRUFBU3pKLE9BQU9tQixNQUVic0ksRUFBU0csU0FPcEI0aEIsRUFBTWpvQixVQUFVd3FCLGFBQWUsU0FBVUMsR0FFckMsSUFEQSxRQUFpQixxQkFBc0IsRUFBRyxFQUFHL3NCLFVBQVV1RyxRQUNsQyxpQkFBVndtQixHQUNQL2QsS0FBS0ksTUFBTTJkLEtBQVdBLEdBQ3RCQSxHQUFTLEVBQ1QsTUFBTSxJQUFJbGtCLE1BQU0sa0VBRXBCLEdBQUkvSSxLQUFLMnFCLGFBQWFjLFdBQ2xCLE1BQU0sSUFBSTFpQixNQUFNLHVHQUdwQixPQUFPLElBQUkwaEIsRUFBTXpxQixLQUFLMHFCLEtBQU0xcUIsS0FBS2dULEtBQU1oVCxLQUFLMnFCLGFBQWFxQyxhQUFhQyxHQUFRanRCLEtBQUs0cUIsaUJBT3ZGSCxFQUFNam9CLFVBQVUwcUIsWUFBYyxTQUFVRCxHQUVwQyxJQURBLFFBQWlCLG9CQUFxQixFQUFHLEVBQUcvc0IsVUFBVXVHLFFBQ2pDLGlCQUFWd21CLEdBQ1AvZCxLQUFLSSxNQUFNMmQsS0FBV0EsR0FDdEJBLEdBQVMsRUFDVCxNQUFNLElBQUlsa0IsTUFBTSxpRUFFcEIsR0FBSS9JLEtBQUsycUIsYUFBYWMsV0FDbEIsTUFBTSxJQUFJMWlCLE1BQU0sc0dBR3BCLE9BQU8sSUFBSTBoQixFQUFNenFCLEtBQUswcUIsS0FBTTFxQixLQUFLZ1QsS0FBTWhULEtBQUsycUIsYUFBYXVDLFlBQVlELEdBQVFqdEIsS0FBSzRxQixpQkFPdEZILEVBQU1qb0IsVUFBVTJxQixhQUFlLFNBQVVuYSxHQUVyQyxJQURBLFFBQWlCLHFCQUFzQixFQUFHLEVBQUc5UyxVQUFVdUcsUUFDMUMsU0FBVHVNLEVBQ0EsTUFBTSxJQUFJakssTUFBTSwyRUFFZixHQUFhLGNBQVRpSyxFQUNMLE1BQU0sSUFBSWpLLE1BQU0scUZBRWYsR0FBYSxXQUFUaUssRUFDTCxNQUFNLElBQUlqSyxNQUFNLCtFQUVwQnVQLEdBQW1CLHFCQUFzQixFQUFHdEYsR0FBTSxHQUNsRGhULEtBQUsyckIsK0JBQStCLHNCQUNwQyxJQUFJeUIsRUFBYSxJQUFJMWMsRUFBS3NDLEdBQzFCLEdBQUlvYSxFQUFXcmIsVUFDWCxNQUFNLElBQUloSixNQUFNLHFGQUVwQixJQUFJOFQsRUFBUSxJQUFJa0ssR0FBVXFHLEdBQ3RCQyxFQUFZcnRCLEtBQUsycUIsYUFBYTJDLFFBQVF6USxHQUUxQyxPQURBNE4sRUFBTUksd0JBQXdCd0MsR0FDdkIsSUFBSTVDLEVBQU16cUIsS0FBSzBxQixLQUFNMXFCLEtBQUtnVCxLQUFNcWEsR0FBOEIsSUFNekU1QyxFQUFNam9CLFVBQVUrcUIsV0FBYSxZQUN6QixRQUFpQixtQkFBb0IsRUFBRyxFQUFHcnRCLFVBQVV1RyxRQUNyRHpHLEtBQUsyckIsK0JBQStCLG9CQUNwQyxJQUFJMEIsRUFBWXJ0QixLQUFLMnFCLGFBQWEyQyxRQUFRalMsSUFFMUMsT0FEQW9QLEVBQU1JLHdCQUF3QndDLEdBQ3ZCLElBQUk1QyxFQUFNenFCLEtBQUswcUIsS0FBTTFxQixLQUFLZ1QsS0FBTXFhLEdBQThCLElBTXpFNUMsRUFBTWpvQixVQUFVZ3JCLGdCQUFrQixZQUM5QixRQUFpQix3QkFBeUIsRUFBRyxFQUFHdHRCLFVBQVV1RyxRQUMxRHpHLEtBQUsyckIsK0JBQStCLHlCQUNwQyxJQUFJMEIsRUFBWXJ0QixLQUFLMnFCLGFBQWEyQyxRQUFRelAsSUFFMUMsT0FEQTRNLEVBQU1JLHdCQUF3QndDLEdBQ3ZCLElBQUk1QyxFQUFNenFCLEtBQUswcUIsS0FBTTFxQixLQUFLZ1QsS0FBTXFhLEdBQThCLElBTXpFNUMsRUFBTWpvQixVQUFVaXJCLGFBQWUsWUFDM0IsUUFBaUIscUJBQXNCLEVBQUcsRUFBR3Z0QixVQUFVdUcsUUFDdkR6RyxLQUFLMnJCLCtCQUErQixzQkFDcEMsSUFBSTBCLEVBQVlydEIsS0FBSzJxQixhQUFhMkMsUUFBUTFHLElBRTFDLE9BREE2RCxFQUFNSSx3QkFBd0J3QyxHQUN2QixJQUFJNUMsRUFBTXpxQixLQUFLMHFCLEtBQU0xcUIsS0FBS2dULEtBQU1xYSxHQUE4QixJQU96RTVDLEVBQU1qb0IsVUFBVWtyQixRQUFVLFNBQVVudUIsRUFBTytCLFFBQ3pCLElBQVYvQixJQUFvQkEsRUFBUSxPQUNoQyxRQUFpQixnQkFBaUIsRUFBRyxFQUFHVyxVQUFVdUcsUUFDbEQyUSxHQUF3QixnQkFBaUIsRUFBRzdYLEVBQU9TLEtBQUtnVCxNQUFNLEdBQzlEcUYsR0FBWSxnQkFBaUIsRUFBRy9XLEdBQU0sR0FDdEMsSUFBSStyQixFQUFZcnRCLEtBQUsycUIsYUFBYStDLFFBQVFudUIsRUFBTytCLEdBR2pELEdBRkFtcEIsRUFBTWUsZUFBZTZCLEdBQ3JCNUMsRUFBTUksd0JBQXdCd0MsR0FDMUJydEIsS0FBSzJxQixhQUFhSyxXQUNsQixNQUFNLElBQUlqaUIsTUFBTSwwRkFRcEIsWUFKYzFJLElBQVZkLElBQ0FBLEVBQVEsS0FDUitCLEVBQU8sTUFFSixJQUFJbXBCLEVBQU16cUIsS0FBSzBxQixLQUFNMXFCLEtBQUtnVCxLQUFNcWEsRUFBV3J0QixLQUFLNHFCLGlCQU8zREgsRUFBTWpvQixVQUFVbXJCLE1BQVEsU0FBVXB1QixFQUFPK0IsUUFDdkIsSUFBVi9CLElBQW9CQSxFQUFRLE9BQ2hDLFFBQWlCLGNBQWUsRUFBRyxFQUFHVyxVQUFVdUcsUUFDaEQyUSxHQUF3QixjQUFlLEVBQUc3WCxFQUFPUyxLQUFLZ1QsTUFBTSxHQUM1RHFGLEdBQVksY0FBZSxFQUFHL1csR0FBTSxHQUNwQyxJQUFJK3JCLEVBQVlydEIsS0FBSzJxQixhQUFhZ0QsTUFBTXB1QixFQUFPK0IsR0FHL0MsR0FGQW1wQixFQUFNZSxlQUFlNkIsR0FDckI1QyxFQUFNSSx3QkFBd0J3QyxHQUMxQnJ0QixLQUFLMnFCLGFBQWFPLFNBQ2xCLE1BQU0sSUFBSW5pQixNQUFNLG9GQUdwQixPQUFPLElBQUkwaEIsRUFBTXpxQixLQUFLMHFCLEtBQU0xcUIsS0FBS2dULEtBQU1xYSxFQUFXcnRCLEtBQUs0cUIsaUJBUzNESCxFQUFNam9CLFVBQVVvckIsUUFBVSxTQUFVcnVCLEVBQU8rQixHQUl2QyxJQUhBLFFBQWlCLGdCQUFpQixFQUFHLEVBQUdwQixVQUFVdUcsUUFDbEQyUSxHQUF3QixnQkFBaUIsRUFBRzdYLEVBQU9TLEtBQUtnVCxNQUFNLEdBQzlEcUYsR0FBWSxnQkFBaUIsRUFBRy9XLEdBQU0sR0FDbEN0QixLQUFLMnFCLGFBQWFLLFdBQ2xCLE1BQU0sSUFBSWppQixNQUFNLDBGQUdwQixHQUFJL0ksS0FBSzJxQixhQUFhTyxTQUNsQixNQUFNLElBQUluaUIsTUFBTSxzRkFHcEIsT0FBTy9JLEtBQUswdEIsUUFBUW51QixFQUFPK0IsR0FBTXFzQixNQUFNcHVCLEVBQU8rQixJQUtsRG1wQixFQUFNam9CLFVBQVVpSSxTQUFXLFdBRXZCLE9BREEsUUFBaUIsaUJBQWtCLEVBQUcsRUFBR3ZLLFVBQVV1RyxRQUM1Q3pHLEtBQUswcUIsS0FBS2pnQixXQUFhekssS0FBS2dULEtBQUsxQixzQkFJNUNtWixFQUFNam9CLFVBQVVvWCxPQUFTLFdBR3JCLE9BREEsUUFBaUIsZUFBZ0IsRUFBRyxFQUFHMVosVUFBVXVHLFFBQzFDekcsS0FBS3lLLFlBTWhCZ2dCLEVBQU1qb0IsVUFBVXFyQixZQUFjLFdBQzFCLE9BQU83dEIsS0FBSzJxQixhQUFhbUQsa0JBSzdCckQsRUFBTWpvQixVQUFVdXJCLGdCQUFrQixXQUM5QixJQUFJeGdCLEVBQU12TixLQUFLNnRCLGNBQ1g5akIsRUFBS3lELEVBQWtCRCxHQUMzQixNQUFjLE9BQVB4RCxFQUFjLFVBQVlBLEdBT3JDMGdCLEVBQU1qb0IsVUFBVXdyQixRQUFVLFNBQVVwYixHQUVoQyxJQURBLFFBQWlCLGdCQUFpQixFQUFHLEVBQUcxUyxVQUFVdUcsVUFDNUNtTSxhQUFpQjZYLEdBQVEsQ0FDM0IsSUFBSWpyQixFQUFRLHVGQUNaLE1BQU0sSUFBSXVKLE1BQU12SixHQUVwQixJQUFJeXVCLEVBQVdqdUIsS0FBSzBxQixPQUFTOVgsRUFBTThYLEtBQy9Cd0QsRUFBV2x1QixLQUFLZ1QsS0FBS0wsT0FBT0MsRUFBTUksTUFDbENtYixFQUFzQm51QixLQUFLK3RCLG9CQUFzQm5iLEVBQU1tYixrQkFDM0QsT0FBT0UsR0FBWUMsR0FBWUMsR0FVbkMxRCxFQUFNd0IseUJBQTJCLFNBQVU1VSxFQUFRK1csRUFBaUJyQyxHQUNoRSxJQUFJQyxFQUFNLENBQUVqVCxPQUFRLEtBQU1nVCxRQUFTLE1BQ25DLEdBQUlxQyxHQUFtQnJDLEVBQ25CQyxFQUFJalQsT0FBU3FWLEdBQ2IsUUFBaUIvVyxFQUFRLEVBQUcyVSxFQUFJalQsUUFBUSxHQUN4Q2lULEVBQUlELFFBQVVBLEdBQ2QsUUFBc0IxVSxFQUFRLEVBQUcyVSxFQUFJRCxTQUFTLFFBRTdDLEdBQUlxQyxFQUVMLEdBQStCLGlCQUFwQkEsR0FBb0QsT0FBcEJBLEVBRXZDcEMsRUFBSUQsUUFBVXFDLE1BRWIsSUFBK0IsbUJBQXBCQSxFQUlaLE1BQU0sSUFBSXJsQixPQUFNLFFBQVlzTyxFQUFRLEdBQUcsR0FDbkMsMERBSkoyVSxFQUFJalQsT0FBU3FWLEVBT3JCLE9BQU9wQyxHQUVYMXBCLE9BQU9DLGVBQWVrb0IsRUFBTWpvQixVQUFXLE1BQU8sQ0FDMUNDLElBQUssV0FDRCxPQUFPekMsS0FBS2tvQixVQUVoQnJsQixZQUFZLEVBQ1pDLGNBQWMsSUFFWDJuQixFQW5kZSxHQXNldEI0RCxHQUF1QyxXQUN2QyxTQUFTQSxFQUFzQi9HLEdBQzNCdG5CLEtBQUtzbkIsTUFBUUEsRUFTakIsT0FQQStHLEVBQXNCN3JCLFVBQVV5WixrQkFBb0IsU0FBVUMsR0FFMUQsT0FBTyxJQUFJbVMsRUFEQ3J1QixLQUFLc25CLE1BQU1yTCxrQkFBa0JDLEtBRzdDbVMsRUFBc0I3ckIsVUFBVTJYLEtBQU8sV0FDbkMsT0FBT25hLEtBQUtzbkIsT0FFVCtHLEVBWCtCLEdBYXRDQyxHQUF1QyxXQUN2QyxTQUFTQSxFQUFzQkMsRUFBVXZiLEdBQ3JDaFQsS0FBS3d1QixVQUFZRCxFQUNqQnZ1QixLQUFLeVgsTUFBUXpFLEVBU2pCLE9BUEFzYixFQUFzQjlyQixVQUFVeVosa0JBQW9CLFNBQVVDLEdBQzFELElBQUkwTCxFQUFZNW5CLEtBQUt5WCxNQUFNN0YsTUFBTXNLLEdBQ2pDLE9BQU8sSUFBSW9TLEVBQXNCdHVCLEtBQUt3dUIsVUFBVzVHLElBRXJEMEcsRUFBc0I5ckIsVUFBVTJYLEtBQU8sV0FDbkMsT0FBT25hLEtBQUt3dUIsVUFBVUMsdUJBQXVCenVCLEtBQUt5WCxRQUUvQzZXLEVBWitCLEdBK0J0Q0ksR0FBMkIsU0FBVW52QixFQUFPb3ZCLEVBQWFDLEdBQ3pELE9BQUtydkIsR0FBMEIsaUJBQVZBLElBR3JCLFFBQU8sUUFBU0EsRUFBTyw2Q0FDSyxpQkFBakJBLEVBQU0sT0FDTnN2QixHQUEyQnR2QixFQUFNLE9BQVFvdkIsRUFBYUMsR0FFaEMsaUJBQWpCcnZCLEVBQU0sT0FDWHV2QixHQUE0QnZ2QixFQUFNLE9BQVFvdkIsUUFHakQsU0FBTyxFQUFPLDRCQUE4QkksS0FBS0MsVUFBVXp2QixFQUFPLEtBQU0sS0FWakVBLEdBYVhzdkIsR0FBNkIsU0FBVUksRUFBSUMsRUFBVU4sR0FDckQsT0FBUUssR0FDSixJQUFLLFlBQ0QsT0FBT0wsRUFBd0IsVUFDbkMsU0FDSSxTQUFPLEVBQU8sNEJBQThCSyxLQUdwREgsR0FBOEIsU0FBVUcsRUFBSUMsRUFBVUMsR0FDakRGLEVBQUcvZ0IsZUFBZSxlQUNuQixTQUFPLEVBQU8sNEJBQThCNmdCLEtBQUtDLFVBQVVDLEVBQUksS0FBTSxJQUV6RSxJQUFJRyxFQUFRSCxFQUFjLFVBQ0wsaUJBQVZHLElBQ1AsU0FBTyxFQUFPLCtCQUFpQ0EsR0FFbkQsSUFBSUMsRUFBZUgsRUFBUy9VLE9BRzVCLElBRkEsUUFBT2tWLFFBQThELCtDQUVoRUEsRUFBYTVULGFBQ2QsT0FBTzJULEVBRVgsSUFDSVQsRUFET1UsRUFDWXJTLFdBQ3ZCLE1BQTJCLGlCQUFoQjJSLEVBQ0FTLEVBR0pULEVBQWNTLEdBV3JCRSxHQUEyQixTQUFVdGMsRUFBTW1ILEVBQU1vVSxFQUFVSyxHQUMzRCxPQUFPVyxHQUFxQnBWLEVBQU0sSUFBSW1VLEdBQXNCQyxFQUFVdmIsR0FBTzRiLElBVTdFWSxHQUErQixTQUFVclYsRUFBTStVLEVBQVVOLEdBQ3pELE9BQU9XLEdBQXFCcFYsRUFBTSxJQUFJa1UsR0FBc0JhLEdBQVdOLElBRTNFLFNBQVNXLEdBQXFCcFYsRUFBTXdVLEVBQWFDLEdBQzdDLElBRUlsVSxFQUZBK1UsRUFBU3RWLEVBQUt1QixjQUFjOVksTUFDNUJ1VSxFQUFXdVgsR0FBeUJlLEVBQVFkLEVBQVkxUyxrQkFBa0IsYUFBYzJTLEdBRTVGLEdBQUl6VSxFQUFLc0IsYUFBYyxDQUNuQixJQUFJaVUsRUFBV3ZWLEVBQ1g1YSxFQUFRbXZCLEdBQXlCZ0IsRUFBUzFTLFdBQVkyUixFQUFhQyxHQUN2RSxPQUFJcnZCLElBQVVtd0IsRUFBUzFTLFlBQ25CN0YsSUFBYXVZLEVBQVNoVSxjQUFjOVksTUFDN0IsSUFBSStZLEdBQVNwYyxFQUFPeW1CLEdBQWU3TyxJQUduQ2dELEVBSVgsSUFBSTROLEVBQWU1TixFQVduQixPQVZBTyxFQUFVcU4sRUFDTjVRLElBQWE0USxFQUFhck0sY0FBYzlZLFFBQ3hDOFgsRUFBVUEsRUFBUXFCLGVBQWUsSUFBSUosR0FBU3hFLEtBRWxENFEsRUFBYW5MLGFBQWFpQixJQUFnQixTQUFVM0IsRUFBV0ksR0FDM0QsSUFBSUUsRUFBZStTLEdBQXFCalQsRUFBV3FTLEVBQVkxUyxrQkFBa0JDLEdBQVkwUyxHQUN6RnBTLElBQWlCRixJQUNqQjVCLEVBQVVBLEVBQVE2QixxQkFBcUJMLEVBQVdNLE9BR25EOUIsRUF1QmYsSUFzSklpVixHQXRKQUMsR0FBb0MsV0FDcEMsU0FBU0EsSUFDTDV2QixLQUFLVCxNQUFRLEtBQ2JTLEtBQUs2dkIsU0FBVyxJQUFJbnJCLElBNEh4QixPQXBIQWtyQixFQUFtQnB0QixVQUFVc3RCLEtBQU8sU0FBVTljLEdBQzFDLEdBQWtCLE1BQWRoVCxLQUFLVCxNQUNMLE9BQU9TLEtBQUtULE1BQU00YyxTQUFTbkosR0FFMUIsSUFBS0EsRUFBS2pCLFdBQWEvUixLQUFLNnZCLFNBQVNFLEtBQU8sRUFBRyxDQUNoRCxJQUFJQyxFQUFXaGQsRUFBSy9CLFdBRXBCLE9BREErQixFQUFPQSxFQUFLN0IsV0FDUm5SLEtBQUs2dkIsU0FBUzFwQixJQUFJNnBCLEdBQ0Zod0IsS0FBSzZ2QixTQUFTcHRCLElBQUl1dEIsR0FDakJGLEtBQUs5YyxHQUdmLEtBSVgsT0FBTyxNQVVmNGMsRUFBbUJwdEIsVUFBVXl0QixTQUFXLFNBQVVqZCxFQUFNdkcsR0FDcEQsR0FBSXVHLEVBQUtqQixVQUNML1IsS0FBS1QsTUFBUWtOLEVBQ2J6TSxLQUFLNnZCLFNBQVNLLGFBRWIsR0FBbUIsT0FBZmx3QixLQUFLVCxNQUNWUyxLQUFLVCxNQUFRUyxLQUFLVCxNQUFNa2QsWUFBWXpKLEVBQU12RyxPQUV6QyxDQUNELElBQUl1akIsRUFBV2hkLEVBQUsvQixXQUNmalIsS0FBSzZ2QixTQUFTMXBCLElBQUk2cEIsSUFDbkJod0IsS0FBSzZ2QixTQUFTbHRCLElBQUlxdEIsRUFBVSxJQUFJSixHQUVwQyxJQUFJaGUsRUFBUTVSLEtBQUs2dkIsU0FBU3B0QixJQUFJdXRCLEdBQzlCaGQsRUFBT0EsRUFBSzdCLFdBQ1pTLEVBQU1xZSxTQUFTamQsRUFBTXZHLEtBUzdCbWpCLEVBQW1CcHRCLFVBQVUydEIsT0FBUyxTQUFVbmQsR0FDNUMsR0FBSUEsRUFBS2pCLFVBR0wsT0FGQS9SLEtBQUtULE1BQVEsS0FDYlMsS0FBSzZ2QixTQUFTSyxTQUNQLEVBR1AsR0FBbUIsT0FBZmx3QixLQUFLVCxNQUFnQixDQUNyQixHQUFJUyxLQUFLVCxNQUFNa2MsYUFFWCxPQUFPLEVBR1AsSUFBSWxjLEVBQVFTLEtBQUtULE1BQ2pCUyxLQUFLVCxNQUFRLEtBQ2IsSUFBSTZ3QixFQUFTcHdCLEtBSWIsT0FIQVQsRUFBTXFkLGFBQWFpQixJQUFnQixTQUFVemUsRUFBS2l4QixHQUM5Q0QsRUFBT0gsU0FBUyxJQUFJdmYsRUFBS3RSLEdBQU1peEIsTUFFNUJyd0IsS0FBS213QixPQUFPbmQsR0FHdEIsR0FBSWhULEtBQUs2dkIsU0FBU0UsS0FBTyxFQUFHLENBQzdCLElBQUlDLEVBQVdoZCxFQUFLL0IsV0FRcEIsT0FQQStCLEVBQU9BLEVBQUs3QixXQUNSblIsS0FBSzZ2QixTQUFTMXBCLElBQUk2cEIsSUFDQ2h3QixLQUFLNnZCLFNBQVNwdEIsSUFBSXV0QixHQUFVRyxPQUFPbmQsSUFFbERoVCxLQUFLNnZCLFNBQVM5c0IsT0FBT2l0QixHQUdDLElBQXZCaHdCLEtBQUs2dkIsU0FBU0UsS0FHckIsT0FBTyxHQVduQkgsRUFBbUJwdEIsVUFBVTh0QixZQUFjLFNBQVVDLEVBQVlDLEdBQzFDLE9BQWZ4d0IsS0FBS1QsTUFDTGl4QixFQUFLRCxFQUFZdndCLEtBQUtULE9BR3RCUyxLQUFLNGMsY0FBYSxTQUFVeGQsRUFBS2l4QixHQUM3QixJQUFJcmQsRUFBTyxJQUFJdEMsRUFBSzZmLEVBQVc5bEIsV0FBYSxJQUFNckwsR0FDbERpeEIsRUFBS0MsWUFBWXRkLEVBQU13ZCxPQVNuQ1osRUFBbUJwdEIsVUFBVW9hLGFBQWUsU0FBVTRULEdBQ2xEeHdCLEtBQUs2dkIsU0FBUy9ILFNBQVEsU0FBVXVJLEVBQU1qeEIsR0FDbENveEIsRUFBS3B4QixFQUFLaXhCLE9BR1hULEVBL0g0QixJQXVKdkMsU0FBV0QsR0FDUEEsRUFBY0EsRUFBeUIsVUFBSSxHQUFLLFlBQ2hEQSxFQUFjQSxFQUFxQixNQUFJLEdBQUssUUFDNUNBLEVBQWNBLEVBQThCLGVBQUksR0FBSyxpQkFDckRBLEVBQWNBLEVBQStCLGdCQUFJLEdBQUssa0JBSjFELENBS0dBLEtBQWtCQSxHQUFnQixLQVFyQyxJQTBHSWMsR0E2NERBQyxHQXYvREFDLEdBQWlDLFdBQ2pDLFNBQVNBLEVBQWdCQyxFQUFVQyxFQUFZQyxFQUFTQyxHQUNwRC93QixLQUFLNHdCLFNBQVdBLEVBQ2hCNXdCLEtBQUs2d0IsV0FBYUEsRUFDbEI3d0IsS0FBSzh3QixRQUFVQSxFQUNmOXdCLEtBQUsrd0IsT0FBU0EsR0FDZCxTQUFRQSxHQUFVRixFQUFZLHVDQXlCbEMsT0FuQkFGLEVBQWdCSyxLQUFPLElBQUlMLEdBQ2IsR0FBTSxFQUFPLE1BQ2YsR0FLWkEsRUFBZ0JNLE9BQVMsSUFBSU4sR0FBZ0IsR0FDN0IsRUFBTSxNQUNWLEdBS1pBLEVBQWdCTyxxQkFBdUIsU0FBVUosR0FDN0MsT0FBTyxJQUFJSCxHQUFnQixHQUNYLEVBQU1HLEdBQ1YsSUFFVEgsRUEvQnlCLEdBa0RoQ1EsR0FBOEIsV0FPOUIsU0FBU0EsRUFDVW5lLEVBQ0FvZSxFQUNBQyxHQUNmcnhCLEtBQUtnVCxLQUFPQSxFQUNaaFQsS0FBS294QixhQUFlQSxFQUNwQnB4QixLQUFLcXhCLE9BQVNBLEVBRWRyeEIsS0FBS29HLEtBQU91cEIsR0FBYzJCLGVBRTFCdHhCLEtBQUt1eEIsT0FBU1osR0FBZ0JLLEtBb0JsQyxPQWZBRyxFQUFhM3VCLFVBQVVndkIsa0JBQW9CLFNBQVV0VixHQUNqRCxHQUFLbGMsS0FBS2dULEtBQUtqQixVQUlWLElBQStCLE1BQTNCL1IsS0FBS294QixhQUFhN3hCLE1BR3ZCLE9BRkEsUUFBT1MsS0FBS294QixhQUFhdkIsU0FBUzlkLFVBQVcsNERBRXRDL1IsS0FHUCxJQUFJc2lCLEVBQVl0aUIsS0FBS294QixhQUFhSyxRQUFRLElBQUkvZ0IsRUFBS3dMLElBQ25ELE9BQU8sSUFBSWlWLEVBQWF6Z0IsRUFBS2doQixNQUFPcFAsRUFBV3RpQixLQUFLcXhCLFFBVHBELE9BREEsUUFBT3J4QixLQUFLZ1QsS0FBSy9CLGFBQWVpTCxFQUFXLGlEQUNwQyxJQUFJaVYsRUFBYW54QixLQUFLZ1QsS0FBSzdCLFdBQVluUixLQUFLb3hCLGFBQWNweEIsS0FBS3F4QixTQVl2RUYsRUFyQ3NCLEdBd0U3QlEsR0FBK0IsV0FNL0IsU0FBU0EsRUFBY3B5QixFQUFPc3dCLFFBQ1QsSUFBYkEsSUFmSFksS0FDREEsR0FBeUIsSUFBSTFSLEdBQVUxUixJQWNad2lCLEVBWnhCWSxJQWFIendCLEtBQUtULE1BQVFBLEVBQ2JTLEtBQUs2dkIsU0FBV0EsRUFtVHBCLE9BNVNBOEIsRUFBY0MsV0FBYSxTQUFVcmtCLEdBQ2pDLElBQUk4aUIsRUFBT3NCLEVBQWNELE1BSXpCLE9BSEF6akIsRUFBS1YsR0FBSyxTQUFVcWEsRUFBV2lLLEdBQzNCeEIsRUFBT0EsRUFBSzF0QixJQUFJLElBQUkrTixFQUFLa1gsR0FBWWlLLE1BRWxDeEIsR0FNWHNCLEVBQWNudkIsVUFBVXVQLFFBQVUsV0FDOUIsT0FBc0IsT0FBZi9SLEtBQUtULE9BQWtCUyxLQUFLNnZCLFNBQVM5ZCxXQWNoRDRmLEVBQWNudkIsVUFBVXN2QixpQ0FBbUMsU0FBVTlmLEVBQWMrZixHQUMvRSxHQUFrQixNQUFkL3hCLEtBQUtULE9BQWlCd3lCLEVBQVUveEIsS0FBS1QsT0FDckMsTUFBTyxDQUFFeVQsS0FBTXRDLEVBQUtnaEIsTUFBT255QixNQUFPUyxLQUFLVCxPQUd2QyxHQUFJeVMsRUFBYUQsVUFDYixPQUFPLEtBR1AsSUFBSTJLLEVBQVExSyxFQUFhZixXQUNyQlcsRUFBUTVSLEtBQUs2dkIsU0FBU3B0QixJQUFJaWEsR0FDOUIsR0FBYyxPQUFWOUssRUFBZ0IsQ0FDaEIsSUFBSW9nQixFQUE0QnBnQixFQUFNa2dCLGlDQUFpQzlmLEVBQWFiLFdBQVk0Z0IsR0FDaEcsT0FBaUMsTUFBN0JDLEVBRU8sQ0FBRWhmLEtBRE0sSUFBSXRDLEVBQUtnTSxHQUFPOUssTUFBTW9nQixFQUEwQmhmLE1BQ3RDelQsTUFBT3l5QixFQUEwQnp5QixPQUduRCxLQUlYLE9BQU8sTUFXdkJveUIsRUFBY252QixVQUFVeXZCLHlCQUEyQixTQUFVamdCLEdBQ3pELE9BQU9oUyxLQUFLOHhCLGlDQUFpQzlmLEdBQWMsV0FBYyxPQUFPLE1BTXBGMmYsRUFBY252QixVQUFVaXZCLFFBQVUsU0FBVXpmLEdBQ3hDLEdBQUlBLEVBQWFELFVBQ2IsT0FBTy9SLEtBR1AsSUFBSTBjLEVBQVExSyxFQUFhZixXQUNyQnFSLEVBQVl0aUIsS0FBSzZ2QixTQUFTcHRCLElBQUlpYSxHQUNsQyxPQUFrQixPQUFkNEYsRUFDT0EsRUFBVW1QLFFBQVF6ZixFQUFhYixZQUcvQndnQixFQUFjRCxPQVdqQ0MsRUFBY252QixVQUFVRyxJQUFNLFNBQVVxUCxFQUFja2dCLEdBQ2xELEdBQUlsZ0IsRUFBYUQsVUFDYixPQUFPLElBQUk0ZixFQUFjTyxFQUFPbHlCLEtBQUs2dkIsVUFHckMsSUFBSW5ULEVBQVExSyxFQUFhZixXQUVyQmtoQixHQURRbnlCLEtBQUs2dkIsU0FBU3B0QixJQUFJaWEsSUFBVWlWLEVBQWNELE9BQ2pDL3VCLElBQUlxUCxFQUFhYixXQUFZK2dCLEdBQzlDcE8sRUFBYzlqQixLQUFLNnZCLFNBQVN0USxPQUFPN0MsRUFBT3lWLEdBQzlDLE9BQU8sSUFBSVIsRUFBYzN4QixLQUFLVCxNQUFPdWtCLElBUzdDNk4sRUFBY252QixVQUFVZ0ksT0FBUyxTQUFVd0gsR0FDdkMsR0FBSUEsRUFBYUQsVUFDYixPQUFJL1IsS0FBSzZ2QixTQUFTOWQsVUFDUDRmLEVBQWNELE1BR2QsSUFBSUMsRUFBYyxLQUFNM3hCLEtBQUs2dkIsVUFJeEMsSUFBSW5ULEVBQVExSyxFQUFhZixXQUNyQlcsRUFBUTVSLEtBQUs2dkIsU0FBU3B0QixJQUFJaWEsR0FDOUIsR0FBSTlLLEVBQU8sQ0FDUCxJQUFJdWdCLEVBQVd2Z0IsRUFBTXBILE9BQU93SCxFQUFhYixZQUNyQzJTLE9BQWMsRUFPbEIsT0FMSUEsRUFEQXFPLEVBQVNwZ0IsVUFDSy9SLEtBQUs2dkIsU0FBU3JsQixPQUFPa1MsR0FHckIxYyxLQUFLNnZCLFNBQVN0USxPQUFPN0MsRUFBT3lWLEdBRTNCLE9BQWZueUIsS0FBS1QsT0FBa0J1a0IsRUFBWS9SLFVBQzVCNGYsRUFBY0QsTUFHZCxJQUFJQyxFQUFjM3hCLEtBQUtULE1BQU91a0IsR0FJekMsT0FBTzlqQixNQVVuQjJ4QixFQUFjbnZCLFVBQVVDLElBQU0sU0FBVXVQLEdBQ3BDLEdBQUlBLEVBQWFELFVBQ2IsT0FBTy9SLEtBQUtULE1BR1osSUFBSW1kLEVBQVExSyxFQUFhZixXQUNyQlcsRUFBUTVSLEtBQUs2dkIsU0FBU3B0QixJQUFJaWEsR0FDOUIsT0FBSTlLLEVBQ09BLEVBQU1uUCxJQUFJdVAsRUFBYWIsWUFHdkIsTUFXbkJ3Z0IsRUFBY252QixVQUFVNHZCLFFBQVUsU0FBVXBnQixFQUFjcWdCLEdBQ3RELEdBQUlyZ0IsRUFBYUQsVUFDYixPQUFPc2dCLEVBR1AsSUFHSXZPLEVBSEFwSCxFQUFRMUssRUFBYWYsV0FFckJraEIsR0FEUW55QixLQUFLNnZCLFNBQVNwdEIsSUFBSWlhLElBQVVpVixFQUFjRCxPQUNqQ1UsUUFBUXBnQixFQUFhYixXQUFZa2hCLEdBUXRELE9BTEl2TyxFQURBcU8sRUFBU3BnQixVQUNLL1IsS0FBSzZ2QixTQUFTcmxCLE9BQU9rUyxHQUdyQjFjLEtBQUs2dkIsU0FBU3RRLE9BQU83QyxFQUFPeVYsR0FFdkMsSUFBSVIsRUFBYzN4QixLQUFLVCxNQUFPdWtCLElBVzdDNk4sRUFBY252QixVQUFVOHZCLEtBQU8sU0FBVXh5QixHQUNyQyxPQUFPRSxLQUFLdXlCLE1BQU03aEIsRUFBS2doQixNQUFPNXhCLElBVWxDNnhCLEVBQWNudkIsVUFBVSt2QixNQUFRLFNBQVVDLEVBQVcxeUIsR0FDakQsSUFBSTJ5QixFQUFRLEdBSVosT0FIQXp5QixLQUFLNnZCLFNBQVMzUSxrQkFBaUIsU0FBVThRLEVBQVUxTixHQUMvQ21RLEVBQU16QyxHQUFZMU4sRUFBVWlRLE1BQU1DLEVBQVU1Z0IsTUFBTW9lLEdBQVdsd0IsTUFFMURBLEVBQUcweUIsRUFBV3h5QixLQUFLVCxNQUFPa3pCLElBU3JDZCxFQUFjbnZCLFVBQVVrd0IsV0FBYSxTQUFVMWYsRUFBTWhFLEdBQ2pELE9BQU9oUCxLQUFLMnlCLFlBQVkzZixFQUFNdEMsRUFBS2doQixNQUFPMWlCLElBRTlDMmlCLEVBQWNudkIsVUFBVW13QixZQUFjLFNBQVVDLEVBQWNKLEVBQVd4akIsR0FDckUsSUFBSXlQLElBQVN6ZSxLQUFLVCxPQUFReVAsRUFBRXdqQixFQUFXeHlCLEtBQUtULE9BQzVDLEdBQUlrZixFQUNBLE9BQU9BLEVBR1AsR0FBSW1VLEVBQWE3Z0IsVUFDYixPQUFPLEtBR1AsSUFBSTJLLEVBQVFrVyxFQUFhM2hCLFdBQ3JCNGhCLEVBQVk3eUIsS0FBSzZ2QixTQUFTcHRCLElBQUlpYSxHQUNsQyxPQUFJbVcsRUFDT0EsRUFBVUYsWUFBWUMsRUFBYXpoQixXQUFZcWhCLEVBQVU1Z0IsTUFBTThLLEdBQVExTixHQUd2RSxNQVd2QjJpQixFQUFjbnZCLFVBQVVzd0IsY0FBZ0IsU0FBVTlmLEVBQU1oRSxHQUNwRCxPQUFPaFAsS0FBSyt5QixlQUFlL2YsRUFBTXRDLEVBQUtnaEIsTUFBTzFpQixJQUVqRDJpQixFQUFjbnZCLFVBQVV1d0IsZUFBaUIsU0FBVUgsRUFBY0ksRUFBcUJoa0IsR0FDbEYsR0FBSTRqQixFQUFhN2dCLFVBQ2IsT0FBTy9SLEtBR0hBLEtBQUtULE9BQ0x5UCxFQUFFZ2tCLEVBQXFCaHpCLEtBQUtULE9BRWhDLElBQUltZCxFQUFRa1csRUFBYTNoQixXQUNyQjRoQixFQUFZN3lCLEtBQUs2dkIsU0FBU3B0QixJQUFJaWEsR0FDbEMsT0FBSW1XLEVBQ09BLEVBQVVFLGVBQWVILEVBQWF6aEIsV0FBWTZoQixFQUFvQnBoQixNQUFNOEssR0FBUTFOLEdBR3BGMmlCLEVBQWNELE9BV2pDQyxFQUFjbnZCLFVBQVV5d0IsUUFBVSxTQUFVamtCLEdBQ3hDaFAsS0FBS2t6QixTQUFTeGlCLEVBQUtnaEIsTUFBTzFpQixJQUU5QjJpQixFQUFjbnZCLFVBQVUwd0IsU0FBVyxTQUFVRixFQUFxQmhrQixHQUM5RGhQLEtBQUs2dkIsU0FBUzNRLGtCQUFpQixTQUFVaEQsRUFBV29HLEdBQ2hEQSxFQUFVNFEsU0FBU0YsRUFBb0JwaEIsTUFBTXNLLEdBQVlsTixNQUV6RGhQLEtBQUtULE9BQ0x5UCxFQUFFZ2tCLEVBQXFCaHpCLEtBQUtULFFBT3BDb3lCLEVBQWNudkIsVUFBVTJ3QixhQUFlLFNBQVVua0IsR0FDN0NoUCxLQUFLNnZCLFNBQVMzUSxrQkFBaUIsU0FBVWhELEVBQVdvRyxHQUM1Q0EsRUFBVS9pQixPQUNWeVAsRUFBRWtOLEVBQVdvRyxFQUFVL2lCLFdBS25Db3lCLEVBQWNELE1BQVEsSUFBSUMsRUFBYyxNQUNqQ0EsRUE1VHVCLEdBcVY5QnlCLEdBQWdDLFdBQ2hDLFNBQVNBLEVBQWU3QixFQUFRdmUsR0FDNUJoVCxLQUFLdXhCLE9BQVNBLEVBQ2R2eEIsS0FBS2dULEtBQU9BLEVBRVpoVCxLQUFLb0csS0FBT3VwQixHQUFjMEQsZ0JBVTlCLE9BUkFELEVBQWU1d0IsVUFBVWd2QixrQkFBb0IsU0FBVXRWLEdBQ25ELE9BQUlsYyxLQUFLZ1QsS0FBS2pCLFVBQ0gsSUFBSXFoQixFQUFlcHpCLEtBQUt1eEIsT0FBUTdnQixFQUFLZ2hCLE9BR3JDLElBQUkwQixFQUFlcHpCLEtBQUt1eEIsT0FBUXZ4QixLQUFLZ1QsS0FBSzdCLGFBR2xEaWlCLEVBZndCLEdBeUMvQkUsR0FBMkIsV0FDM0IsU0FBU0EsRUFBVS9CLEVBQVF2ZSxFQUFNa1UsR0FDN0JsbkIsS0FBS3V4QixPQUFTQSxFQUNkdnhCLEtBQUtnVCxLQUFPQSxFQUNaaFQsS0FBS2tuQixLQUFPQSxFQUVabG5CLEtBQUtvRyxLQUFPdXBCLEdBQWM0RCxVQVU5QixPQVJBRCxFQUFVOXdCLFVBQVVndkIsa0JBQW9CLFNBQVV0VixHQUM5QyxPQUFJbGMsS0FBS2dULEtBQUtqQixVQUNILElBQUl1aEIsRUFBVXR6QixLQUFLdXhCLE9BQVE3Z0IsRUFBS2doQixNQUFPMXhCLEtBQUtrbkIsS0FBS2pMLGtCQUFrQkMsSUFHbkUsSUFBSW9YLEVBQVV0ekIsS0FBS3V4QixPQUFRdnhCLEtBQUtnVCxLQUFLN0IsV0FBWW5SLEtBQUtrbkIsT0FHOURvTSxFQWhCbUIsR0EwQzFCRSxHQUF1QixXQUN2QixTQUFTQSxFQUNVakMsRUFDQXZlLEVBQ0E2YyxHQUNmN3ZCLEtBQUt1eEIsT0FBU0EsRUFDZHZ4QixLQUFLZ1QsS0FBT0EsRUFDWmhULEtBQUs2dkIsU0FBV0EsRUFFaEI3dkIsS0FBS29HLEtBQU91cEIsR0FBYzhELE1Bc0M5QixPQWpDQUQsRUFBTWh4QixVQUFVZ3ZCLGtCQUFvQixTQUFVdFYsR0FDMUMsR0FBSWxjLEtBQUtnVCxLQUFLakIsVUFBVyxDQUNyQixJQUFJdVEsRUFBWXRpQixLQUFLNnZCLFNBQVM0QixRQUFRLElBQUkvZ0IsRUFBS3dMLElBQy9DLE9BQUlvRyxFQUFVdlEsVUFFSCxLQUVGdVEsRUFBVS9pQixNQUVSLElBQUkrekIsR0FBVXR6QixLQUFLdXhCLE9BQVE3Z0IsRUFBS2doQixNQUFPcFAsRUFBVS9pQixPQUlqRCxJQUFJaTBCLEVBQU14ekIsS0FBS3V4QixPQUFRN2dCLEVBQUtnaEIsTUFBT3BQLEdBSzlDLE9BREEsUUFBT3RpQixLQUFLZ1QsS0FBSy9CLGFBQWVpTCxFQUFXLGtFQUNwQyxJQUFJc1gsRUFBTXh6QixLQUFLdXhCLE9BQVF2eEIsS0FBS2dULEtBQUs3QixXQUFZblIsS0FBSzZ2QixXQU1qRTJELEVBQU1oeEIsVUFBVWlJLFNBQVcsV0FDdkIsTUFBUSxhQUNKekssS0FBS2dULEtBQ0wsS0FDQWhULEtBQUt1eEIsT0FBTzltQixXQUNaLFdBQ0F6SyxLQUFLNnZCLFNBQVNwbEIsV0FDZCxLQUVEK29CLEVBL0NlLEdBd0V0QkUsR0FBMkIsV0FNM0IsU0FBU0EsRUFBVXBNLEVBQU9xTSxFQUFtQkMsR0FDekM1ekIsS0FBS3NuQixNQUFRQSxFQUNidG5CLEtBQUsyekIsa0JBQW9CQSxFQUN6QjN6QixLQUFLNHpCLFVBQVlBLEVBd0NyQixPQWxDQUYsRUFBVWx4QixVQUFVcXhCLG1CQUFxQixXQUNyQyxPQUFPN3pCLEtBQUsyekIsbUJBTWhCRCxFQUFVbHhCLFVBQVVzeEIsV0FBYSxXQUM3QixPQUFPOXpCLEtBQUs0ekIsV0FNaEJGLEVBQVVseEIsVUFBVXV4QixrQkFBb0IsU0FBVS9nQixHQUM5QyxHQUFJQSxFQUFLakIsVUFDTCxPQUFPL1IsS0FBSzZ6Qix1QkFBeUI3ekIsS0FBSzR6QixVQUU5QyxJQUFJNUQsRUFBV2hkLEVBQUsvQixXQUNwQixPQUFPalIsS0FBS2cwQixtQkFBbUJoRSxJQU1uQzBELEVBQVVseEIsVUFBVXd4QixtQkFBcUIsU0FBVTUwQixHQUMvQyxPQUFTWSxLQUFLNnpCLHVCQUF5Qjd6QixLQUFLNHpCLFdBQWM1ekIsS0FBS3NuQixNQUFNbEwsU0FBU2hkLElBS2xGczBCLEVBQVVseEIsVUFBVXl4QixRQUFVLFdBQzFCLE9BQU9qMEIsS0FBS3NuQixPQUVUb00sRUFqRG1CLEdBMkUxQlEsR0FBMkIsV0FNM0IsU0FBU0EsRUFBVUMsRUFBYUMsR0FDNUJwMEIsS0FBS20wQixZQUFjQSxFQUNuQm4wQixLQUFLbzBCLGFBQWVBLEVBeUR4QixPQWpEQUYsRUFBVTF4QixVQUFVNnhCLGdCQUFrQixTQUFVQyxFQUFXQyxFQUFVQyxHQUNqRSxPQUFPLElBQUlOLEVBQVUsSUFBSVIsR0FBVVksRUFBV0MsRUFBVUMsR0FBV3gwQixLQUFLbzBCLGVBUTVFRixFQUFVMXhCLFVBQVVpeUIsaUJBQW1CLFNBQVVDLEVBQVlILEVBQVVDLEdBQ25FLE9BQU8sSUFBSU4sRUFBVWwwQixLQUFLbTBCLFlBQWEsSUFBSVQsR0FBVWdCLEVBQVlILEVBQVVDLEtBSy9FTixFQUFVMXhCLFVBQVVteUIsY0FBZ0IsV0FDaEMsT0FBTzMwQixLQUFLbTBCLGFBS2hCRCxFQUFVMXhCLFVBQVVveUIscUJBQXVCLFdBQ3ZDLE9BQU81MEIsS0FBS20wQixZQUFZTixxQkFDbEI3ekIsS0FBS20wQixZQUFZRixVQUNqQixNQUtWQyxFQUFVMXhCLFVBQVVxeUIsZUFBaUIsV0FDakMsT0FBTzcwQixLQUFLbzBCLGNBS2hCRixFQUFVMXhCLFVBQVVzeUIsc0JBQXdCLFdBQ3hDLE9BQU85MEIsS0FBS28wQixhQUFhUCxxQkFDbkI3ekIsS0FBS28wQixhQUFhSCxVQUNsQixNQU1WQyxFQUFVeEMsTUFBUSxJQUFJd0MsRUFBVSxJQUFJUixHQUFVeFAsR0FBYXRWLFlBQ3JDLEdBQ1IsR0FBUSxJQUFJOGtCLEdBQVV4UCxHQUFhdFYsWUFDM0IsR0FDUixJQUNQc2xCLEVBakVtQixHQTZGMUJhLEdBQXdCLFdBQ3hCLFNBQVNBLEVBQU8zdUIsRUFBTWtqQixFQUFjcE4sRUFBVzhZLEVBQVMzTSxHQUNwRHJvQixLQUFLb0csS0FBT0EsRUFDWnBHLEtBQUtzcEIsYUFBZUEsRUFDcEJ0cEIsS0FBS2tjLFVBQVlBLEVBQ2pCbGMsS0FBS2cxQixRQUFVQSxFQUNmaDFCLEtBQUtxb0IsU0FBV0EsRUFxRHBCLE9BL0NBME0sRUFBT0UsWUFBYyxTQUFVdGIsR0FDM0IsT0FBTyxJQUFJb2IsRUFBT0EsRUFBT0csTUFBT3ZiLElBT3BDb2IsRUFBT0ksaUJBQW1CLFNBQVVuRixFQUFVclcsR0FDMUMsT0FBTyxJQUFJb2IsRUFBT0EsRUFBT0ssWUFBYXpiLEVBQVVxVyxJQU9wRCtFLEVBQU9NLG1CQUFxQixTQUFVckYsRUFBVXJXLEdBQzVDLE9BQU8sSUFBSW9iLEVBQU9BLEVBQU9PLGNBQWUzYixFQUFVcVcsSUFRdEQrRSxFQUFPUSxtQkFBcUIsU0FBVXZGLEVBQVV3RixFQUFhQyxHQUN6RCxPQUFPLElBQUlWLEVBQU9BLEVBQU9XLGNBQWVGLEVBQWF4RixFQUFVeUYsSUFPbkVWLEVBQU9ZLGlCQUFtQixTQUFVM0YsRUFBVXJXLEdBQzFDLE9BQU8sSUFBSW9iLEVBQU9BLEVBQU9hLFlBQWFqYyxFQUFVcVcsSUFJcEQrRSxFQUFPSyxZQUFjLGNBRXJCTCxFQUFPTyxjQUFnQixnQkFFdkJQLEVBQU9XLGNBQWdCLGdCQUV2QlgsRUFBT2EsWUFBYyxjQUVyQmIsRUFBT0csTUFBUSxRQUNSSCxFQTNEZ0IsR0FxRnZCYyxHQUErQixXQUMvQixTQUFTQSxFQUFjck8sR0FDbkJ4bkIsS0FBS3duQixPQUFTQSxFQWtHbEIsT0FoR0FxTyxFQUFjcnpCLFVBQVVpYSxZQUFjLFNBQVV5SyxFQUFNOW5CLEVBQUsreUIsRUFBVTJELEVBQWN2RSxFQUFRd0UsSUFDdkYsUUFBTzdPLEVBQUt0SixVQUFVNWQsS0FBS3duQixRQUFTLHFEQUNwQyxJQUFJd08sRUFBVzlPLEVBQUtqTCxrQkFBa0I3YyxHQUV0QyxPQUFJNDJCLEVBQVM3WixTQUFTMlosR0FBY25qQixPQUFPd2YsRUFBU2hXLFNBQVMyWixLQUlyREUsRUFBU2prQixZQUFjb2dCLEVBQVNwZ0IsVUFJekJtVixHQUdhLE1BQXhCNk8sSUFDSTVELEVBQVNwZ0IsVUFDTG1WLEVBQUs5SyxTQUFTaGQsR0FDZDIyQixFQUFxQkUsaUJBQWlCbEIsR0FBT00sbUJBQW1CajJCLEVBQUs0MkIsS0FHckUsUUFBTzlPLEVBQUt6TCxhQUFjLHVFQUd6QnVhLEVBQVNqa0IsVUFDZGdrQixFQUFxQkUsaUJBQWlCbEIsR0FBT0ksaUJBQWlCLzFCLEVBQUsreUIsSUFHbkU0RCxFQUFxQkUsaUJBQWlCbEIsR0FBT1EsbUJBQW1CbjJCLEVBQUsreUIsRUFBVTZELEtBR25GOU8sRUFBS3pMLGNBQWdCMFcsRUFBU3BnQixVQUN2Qm1WLEVBSUFBLEVBQUszSyxxQkFBcUJuZCxFQUFLK3lCLEdBQVV4VSxVQUFVM2QsS0FBS3duQixVQU12RXFPLEVBQWNyekIsVUFBVTB6QixlQUFpQixTQUFVbEIsRUFBU21CLEVBQVNKLEdBdUJqRSxPQXRCNEIsTUFBeEJBLElBQ0tmLEVBQVF2WixjQUNUdVosRUFBUXBZLGFBQWFpQixJQUFnQixTQUFVemUsRUFBS2tkLEdBQzNDNlosRUFBUS9aLFNBQVNoZCxJQUNsQjIyQixFQUFxQkUsaUJBQWlCbEIsR0FBT00sbUJBQW1CajJCLEVBQUtrZCxPQUk1RTZaLEVBQVExYSxjQUNUMGEsRUFBUXZaLGFBQWFpQixJQUFnQixTQUFVemUsRUFBS2tkLEdBQ2hELEdBQUkwWSxFQUFRNVksU0FBU2hkLEdBQU0sQ0FDdkIsSUFBSTQyQixFQUFXaEIsRUFBUS9ZLGtCQUFrQjdjLEdBQ3BDNDJCLEVBQVNyakIsT0FBTzJKLElBQ2pCeVosRUFBcUJFLGlCQUFpQmxCLEdBQU9RLG1CQUFtQm4yQixFQUFLa2QsRUFBVzBaLFNBSXBGRCxFQUFxQkUsaUJBQWlCbEIsR0FBT0ksaUJBQWlCLzFCLEVBQUtrZCxRQUs1RTZaLEVBQVF4WSxVQUFVM2QsS0FBS3duQixTQUtsQ3FPLEVBQWNyekIsVUFBVXVaLGVBQWlCLFNBQVVpWixFQUFTelEsR0FDeEQsT0FBSXlRLEVBQVFqakIsVUFDRG1TLEdBQWF0VixXQUdib21CLEVBQVFqWixlQUFld0ksSUFNdENzUixFQUFjcnpCLFVBQVU0ekIsYUFBZSxXQUNuQyxPQUFPLEdBS1hQLEVBQWNyekIsVUFBVTZ6QixpQkFBbUIsV0FDdkMsT0FBT3IyQixNQUtYNjFCLEVBQWNyekIsVUFBVTZtQixTQUFXLFdBQy9CLE9BQU9ycEIsS0FBS3duQixRQUVUcU8sRUFwR3VCLEdBdUg5QlMsR0FBd0MsV0FDeEMsU0FBU0EsSUFDTHQyQixLQUFLdTJCLFVBQVksSUFBSTd4QixJQTZDekIsT0EzQ0E0eEIsRUFBdUI5ekIsVUFBVXl6QixpQkFBbUIsU0FBVS9NLEdBQzFELElBQUk5aUIsRUFBTzhpQixFQUFPOWlCLEtBQ2Q0cEIsRUFBVzlHLEVBQU9oTixXQUN0QixRQUFPOVYsSUFBUzJ1QixHQUFPSyxhQUNuQmh2QixJQUFTMnVCLEdBQU9XLGVBQ2hCdHZCLElBQVMydUIsR0FBT08sY0FBZSw4Q0FDbkMsUUFBb0IsY0FBYnRGLEVBQTBCLG1EQUNqQyxJQUFJd0csRUFBWXgyQixLQUFLdTJCLFVBQVU5ekIsSUFBSXV0QixHQUNuQyxHQUFJd0csRUFBVyxDQUNYLElBQUlDLEVBQVVELEVBQVVwd0IsS0FDeEIsR0FBSUEsSUFBUzJ1QixHQUFPSyxhQUFlcUIsSUFBWTFCLEdBQU9PLGNBQ2xEdDFCLEtBQUt1MkIsVUFBVTV6QixJQUFJcXRCLEVBQVUrRSxHQUFPUSxtQkFBbUJ2RixFQUFVOUcsRUFBT0ksYUFBY2tOLEVBQVVsTixvQkFFL0YsR0FBSWxqQixJQUFTMnVCLEdBQU9PLGVBQ3JCbUIsSUFBWTFCLEdBQU9LLFlBQ25CcDFCLEtBQUt1MkIsVUFBVXh6QixPQUFPaXRCLFFBRXJCLEdBQUk1cEIsSUFBUzJ1QixHQUFPTyxlQUNyQm1CLElBQVkxQixHQUFPVyxjQUNuQjExQixLQUFLdTJCLFVBQVU1ekIsSUFBSXF0QixFQUFVK0UsR0FBT00sbUJBQW1CckYsRUFBVXdHLEVBQVV4QixlQUUxRSxHQUFJNXVCLElBQVMydUIsR0FBT1csZUFDckJlLElBQVkxQixHQUFPSyxZQUNuQnAxQixLQUFLdTJCLFVBQVU1ekIsSUFBSXF0QixFQUFVK0UsR0FBT0ksaUJBQWlCbkYsRUFBVTlHLEVBQU9JLG1CQUVyRSxJQUFJbGpCLElBQVMydUIsR0FBT1csZUFDckJlLElBQVkxQixHQUFPVyxjQUluQixNQUFNLFFBQWUsbUNBQ2pCeE0sRUFDQSxtQkFDQXNOLEdBTkp4MkIsS0FBS3UyQixVQUFVNXpCLElBQUlxdEIsRUFBVStFLEdBQU9RLG1CQUFtQnZGLEVBQVU5RyxFQUFPSSxhQUFja04sRUFBVXhCLGdCQVVwR2gxQixLQUFLdTJCLFVBQVU1ekIsSUFBSXF0QixFQUFVOUcsSUFHckNvTixFQUF1Qjl6QixVQUFVazBCLFdBQWEsV0FDMUMsT0FBT250QixNQUFNQyxLQUFLeEosS0FBS3UyQixVQUFVeDBCLFdBRTlCdTBCLEVBL0NnQyxHQWdHdkNLLEdBQTJCLElBdEJhLFdBQ3hDLFNBQVNDLEtBY1QsT0FUQUEsRUFBdUJwMEIsVUFBVXEwQixpQkFBbUIsU0FBVTdHLEdBQzFELE9BQU8sTUFLWDRHLEVBQXVCcDBCLFVBQVVzMEIsbUJBQXFCLFNBQVVqYSxFQUFPakwsRUFBT2xDLEdBQzFFLE9BQU8sTUFFSmtuQixFQWZnQyxJQThCdkNHLEdBQThDLFdBTTlDLFNBQVNBLEVBQTZCQyxFQUFTQyxFQUFZQyxRQUN2QixJQUE1QkEsSUFBc0NBLEVBQTBCLE1BQ3BFbDNCLEtBQUtnM0IsUUFBVUEsRUFDZmgzQixLQUFLaTNCLFdBQWFBLEVBQ2xCajNCLEtBQUtrM0Isd0JBQTBCQSxFQWdDbkMsT0EzQkFILEVBQTZCdjBCLFVBQVVxMEIsaUJBQW1CLFNBQVU3RyxHQUNoRSxJQUFJN1YsRUFBT25hLEtBQUtpM0IsV0FBV3RDLGdCQUMzQixHQUFJeGEsRUFBSzZaLG1CQUFtQmhFLEdBQ3hCLE9BQU83VixFQUFLOFosVUFBVWhZLGtCQUFrQitULEdBR3hDLElBQUltSCxFQUE2QyxNQUFoQ24zQixLQUFLazNCLHdCQUNoQixJQUFJeEQsR0FBVTF6QixLQUFLazNCLHlCQUF5QixHQUFNLEdBQ2xEbDNCLEtBQUtpM0IsV0FBV3BDLGlCQUN0QixPQUFPNzBCLEtBQUtnM0IsUUFBUUksa0JBQWtCcEgsRUFBVW1ILElBTXhESixFQUE2QnYwQixVQUFVczBCLG1CQUFxQixTQUFVamEsRUFBT2pMLEVBQU9sQyxHQUNoRixJQUFJMm5CLEVBQXFELE1BQWhDcjNCLEtBQUtrM0Isd0JBQ3hCbDNCLEtBQUtrM0Isd0JBQ0xsM0IsS0FBS2kzQixXQUFXbkMsd0JBQ2xCd0MsRUFBUXQzQixLQUFLZzNCLFFBQVFPLGlCQUFpQkYsRUFBb0J6bEIsRUFBTyxFQUFHbEMsRUFBU21OLEdBQ2pGLE9BQXFCLElBQWpCeWEsRUFBTTd3QixPQUNDLEtBR0E2d0IsRUFBTSxJQUdkUCxFQTFDc0MsR0FpRTdDUyxHQUtBLFNBQXlCQyxFQUFXQyxHQUNoQzEzQixLQUFLeTNCLFVBQVlBLEVBQ2pCejNCLEtBQUswM0IsUUFBVUEsR0FPbkJDLEdBQStCLFdBSS9CLFNBQVNBLEVBQWNDLEdBQ25CNTNCLEtBQUs0M0IsUUFBVUEsRUEyZ0JuQixPQXRnQkFELEVBQWNuMUIsVUFBVXExQixjQUFnQixTQUFVSixJQUM5QyxRQUFPQSxFQUFVOUMsZ0JBQWdCVixVQUFVclcsVUFBVTVkLEtBQUs0M0IsUUFBUXZPLFlBQWEsMkJBQy9FLFFBQU9vTyxFQUFVNUMsaUJBQWlCWixVQUFVclcsVUFBVTVkLEtBQUs0M0IsUUFBUXZPLFlBQWEsNEJBU3BGc08sRUFBY24xQixVQUFVczFCLGVBQWlCLFNBQVVDLEVBQWNDLEVBQVdDLEVBQWFDLEdBQ3JGLElBQ0lDLEVBQWNDLEVBRGRDLEVBQWMsSUFBSS9CLEdBRXRCLEdBQUkwQixFQUFVNXhCLE9BQVN1cEIsR0FBYzRELFVBQVcsQ0FDNUMsSUFBSStFLEVBQVlOLEVBQ1pNLEVBQVUvRyxPQUFPWCxTQUNqQnVILEVBQWVuNEIsS0FBS3U0QixvQkFBb0JSLEVBQWNPLEVBQVV0bEIsS0FBTXNsQixFQUFVcFIsS0FBTStRLEVBQWFDLEVBQWVHLEtBR2xILFFBQU9DLEVBQVUvRyxPQUFPVixXQUFZLG1CQUlwQ3VILEVBQ0lFLEVBQVUvRyxPQUFPUixRQUNaZ0gsRUFBYWxELGlCQUFpQmYsZUFDMUJ3RSxFQUFVdGxCLEtBQUtqQixVQUM1Qm9tQixFQUFlbjRCLEtBQUt3NEIsc0JBQXNCVCxFQUFjTyxFQUFVdGxCLEtBQU1zbEIsRUFBVXBSLEtBQU0rUSxFQUFhQyxFQUFlRSxFQUFrQkMsU0FHekksR0FBSUwsRUFBVTV4QixPQUFTdXBCLEdBQWM4RCxNQUFPLENBQzdDLElBQUlnRixFQUFRVCxFQUNSUyxFQUFNbEgsT0FBT1gsU0FDYnVILEVBQWVuNEIsS0FBSzA0QixnQkFBZ0JYLEVBQWNVLEVBQU16bEIsS0FBTXlsQixFQUFNNUksU0FBVW9JLEVBQWFDLEVBQWVHLEtBRzFHLFFBQU9JLEVBQU1sSCxPQUFPVixXQUFZLG1CQUVoQ3VILEVBQ0lLLEVBQU1sSCxPQUFPUixRQUFVZ0gsRUFBYWxELGlCQUFpQmYsYUFDekRxRSxFQUFlbjRCLEtBQUsyNEIsa0JBQWtCWixFQUFjVSxFQUFNemxCLEtBQU15bEIsRUFBTTVJLFNBQVVvSSxFQUFhQyxFQUFlRSxFQUFrQkMsU0FHakksR0FBSUwsRUFBVTV4QixPQUFTdXBCLEdBQWMyQixlQUFnQixDQUN0RCxJQUFJc0gsRUFBZVosRUFLZkcsRUFKQ1MsRUFBYXZILE9BSUNyeEIsS0FBSzY0QixpQkFBaUJkLEVBQWNhLEVBQWE1bEIsS0FBTWlsQixFQUFhQyxFQUFlRyxHQUhuRnI0QixLQUFLODRCLGNBQWNmLEVBQWNhLEVBQWE1bEIsS0FBTTRsQixFQUFheEgsYUFBYzZHLEVBQWFDLEVBQWVHLE9BTTdILElBQUlMLEVBQVU1eEIsT0FBU3VwQixHQUFjMEQsZ0JBSXRDLE1BQU0sUUFBZSwyQkFBNkIyRSxFQUFVNXhCLE1BSDVEK3hCLEVBQWVuNEIsS0FBSys0QixnQkFBZ0JoQixFQUFjQyxFQUFVaGxCLEtBQU1pbEIsRUFBYUksR0FLbkYsSUFBSVgsRUFBVVcsRUFBWTNCLGFBRTFCLE9BREFpQixFQUFjcUIsb0JBQW9CakIsRUFBY0ksRUFBY1QsR0FDdkQsSUFBSUYsR0FBZ0JXLEVBQWNULElBUTdDQyxFQUFjcUIsb0JBQXNCLFNBQVVqQixFQUFjSSxFQUFjRSxHQUN0RSxJQUFJL0QsRUFBWTZELEVBQWF4RCxnQkFDN0IsR0FBSUwsRUFBVVQscUJBQXNCLENBQ2hDLElBQUlvRixFQUFnQjNFLEVBQVVMLFVBQVV4WSxjQUFnQjZZLEVBQVVMLFVBQVVsaUIsVUFDeEVtbkIsRUFBa0JuQixFQUFhbkQsd0JBQy9CeUQsRUFBWTV4QixPQUFTLElBQ3BCc3hCLEVBQWFwRCxnQkFBZ0JkLHNCQUM3Qm9GLElBQ0kzRSxFQUFVTCxVQUFVdGhCLE9BQTRCdW1CLEtBQ3BENUUsRUFBVUwsVUFBVXZZLGNBQWMvSSxPQUFPdW1CLEVBQWdCeGQsaUJBQzFEMmMsRUFBWTV5QixLQUFLc3ZCLEdBQU9FLFlBQ0hrRCxFQUFhdkQsMkJBYTlDK0MsRUFBY24xQixVQUFVMjJCLG9DQUFzQyxTQUFVMUIsRUFBVzJCLEVBQVluQixFQUFhMUcsRUFBUThHLEdBQ2hILElBQUlnQixFQUFlNUIsRUFBVTlDLGdCQUM3QixHQUE4QyxNQUExQ3NELEVBQVlxQixlQUFlRixHQUUzQixPQUFPM0IsRUFHUCxJQUFJOEIsT0FBZ0IsRUFBUXBDLE9BQWEsRUFDekMsR0FBSWlDLEVBQVdybkIsVUFHWCxJQURBLFFBQU8wbEIsRUFBVTVDLGlCQUFpQmhCLHFCQUFzQiw4REFDcEQ0RCxFQUFVNUMsaUJBQWlCZixhQUFjLENBSXpDLElBQUkwRixFQUFjL0IsRUFBVTNDLHdCQUN4QjJFLEVBQW1CRCxhQUF1QnRWLEdBQ3hDc1YsRUFDQXRWLEdBQWF0VixXQUNmOHFCLEVBQXdCekIsRUFBWTBCLDBCQUEwQkYsR0FDbEVGLEVBQWdCdjVCLEtBQUs0M0IsUUFBUTFCLGVBQWV1QixFQUFVOUMsZ0JBQWdCVixVQUFXeUYsRUFBdUJyQixPQUV2RyxDQUNELElBQUl1QixFQUFlM0IsRUFBWXhKLHVCQUF1QmdKLEVBQVUzQyx5QkFDaEV5RSxFQUFnQnY1QixLQUFLNDNCLFFBQVExQixlQUFldUIsRUFBVTlDLGdCQUFnQlYsVUFBVzJGLEVBQWN2QixPQUdsRyxDQUNELElBQUlySSxFQUFXb0osRUFBV25vQixXQUMxQixHQUFpQixjQUFiK2UsRUFBMEIsRUFDMUIsUUFBa0MsSUFBM0JvSixFQUFXbG9CLFlBQW1CLHlEQUNyQyxJQUFJMm9CLEVBQWVSLEVBQWFwRixVQUNoQ2tELEVBQWFNLEVBQVU1QyxpQkFBaUJaLFVBRXhDLElBQUk2RixFQUFrQjdCLEVBQVk4QixtQ0FBbUNYLEVBQVlTLEVBQWMxQyxHQUUzRm9DLEVBRG1CLE1BQW5CTyxFQUNnQjk1QixLQUFLNDNCLFFBQVE3YixlQUFlOGQsRUFBY0MsR0FJMUNULEVBQWFwRixjQUdoQyxDQUNELElBQUkrRixFQUFrQlosRUFBV2pvQixXQUU3QjhvQixPQUFnQixFQUNwQixHQUFJWixFQUFhckYsbUJBQW1CaEUsR0FBVyxDQUMzQ21ILEVBQWFNLEVBQVU1QyxpQkFBaUJaLFVBQ3hDLElBQUlpRyxFQUFtQmpDLEVBQVk4QixtQ0FBbUNYLEVBQVlDLEVBQWFwRixVQUFXa0QsR0FFdEc4QyxFQURvQixNQUFwQkMsRUFDZ0JiLEVBQ1hwRixVQUNBaFksa0JBQWtCK1QsR0FDbEJ2VCxZQUFZdWQsRUFBaUJFLEdBSWxCYixFQUNYcEYsVUFDQWhZLGtCQUFrQitULFFBSTNCaUssRUFBZ0JoQyxFQUFZYixrQkFBa0JwSCxFQUFVeUgsRUFBVTVDLGtCQUdsRTBFLEVBRGlCLE1BQWpCVSxFQUNnQmo2QixLQUFLNDNCLFFBQVFuYixZQUFZNGMsRUFBYXBGLFVBQVdqRSxFQUFVaUssRUFBZUQsRUFBaUJ6SSxFQUFROEcsR0FJbkdnQixFQUFhcEYsV0FJekMsT0FBT3dELEVBQVVwRCxnQkFBZ0JrRixFQUFlRixFQUFheEYsc0JBQXdCdUYsRUFBV3JuQixVQUFXL1IsS0FBSzQzQixRQUFReEIsaUJBY2hJdUIsRUFBY24xQixVQUFVZzJCLHNCQUF3QixTQUFVVCxFQUFjcUIsRUFBWWUsRUFBYWxDLEVBQWFDLEVBQWVFLEVBQWtCQyxHQUMzSSxJQUNJK0IsRUFEQUMsRUFBZ0J0QyxFQUFhbEQsaUJBRTdCeUYsRUFBZWxDLEVBQ2JwNEIsS0FBSzQzQixRQUNMNTNCLEtBQUs0M0IsUUFBUXZCLG1CQUNuQixHQUFJK0MsRUFBV3JuQixVQUNYcW9CLEVBQWlCRSxFQUFhcEUsZUFBZW1FLEVBQWNwRyxVQUFXa0csRUFBYSxXQUVsRixHQUFJRyxFQUFhbEUsaUJBQW1CaUUsRUFBY3ZHLGFBQWMsQ0FFakUsSUFBSXlHLEVBQWdCRixFQUNmcEcsVUFDQXhYLFlBQVkyYyxFQUFZZSxHQUM3QkMsRUFBaUJFLEVBQWFwRSxlQUFlbUUsRUFBY3BHLFVBQVdzRyxFQUFlLFVBRXBGLENBQ0QsSUFBSXZLLEVBQVdvSixFQUFXbm9CLFdBQzFCLElBQUtvcEIsRUFBY3RHLGtCQUFrQnFGLElBQ2pDQSxFQUFXbG9CLFlBQWMsRUFFekIsT0FBTzZtQixFQUVYLElBQUlpQyxFQUFrQlosRUFBV2pvQixXQUU3QnFMLEVBRFk2ZCxFQUFjcEcsVUFBVWhZLGtCQUFrQitULEdBQzdCdlQsWUFBWXVkLEVBQWlCRyxHQUV0REMsRUFEYSxjQUFicEssRUFDaUJzSyxFQUFhdmUsZUFBZXNlLEVBQWNwRyxVQUFXelgsR0FHckQ4ZCxFQUFhN2QsWUFBWTRkLEVBQWNwRyxVQUFXakUsRUFBVXhULEVBQWN3ZCxFQUFpQnJELEdBQTBCLE1BRzlJLElBQUl3QixFQUFlSixFQUFhdEQsaUJBQWlCMkYsRUFBZ0JDLEVBQWN4RyxzQkFBd0J1RixFQUFXcm5CLFVBQVd1b0IsRUFBYWxFLGdCQUN0STdFLEVBQVMsSUFBSXdGLEdBQTZCa0IsRUFBYUUsRUFBY0QsR0FDekUsT0FBT2w0QixLQUFLbTVCLG9DQUFvQ2hCLEVBQWNpQixFQUFZbkIsRUFBYTFHLEVBQVE4RyxJQVluR1YsRUFBY24xQixVQUFVKzFCLG9CQUFzQixTQUFVUixFQUFjcUIsRUFBWWUsRUFBYWxDLEVBQWFDLEVBQWVHLEdBQ3ZILElBQ0lGLEVBQWNvQixFQURkRixFQUFldEIsRUFBYXBELGdCQUU1QnBELEVBQVMsSUFBSXdGLEdBQTZCa0IsRUFBYUYsRUFBY0csR0FDekUsR0FBSWtCLEVBQVdybkIsVUFDWHduQixFQUFnQnY1QixLQUFLNDNCLFFBQVExQixlQUFlNkIsRUFBYXBELGdCQUFnQlYsVUFBV2tHLEVBQWE5QixHQUNqR0YsRUFBZUosRUFBYTFELGdCQUFnQmtGLEdBQWUsRUFBTXY1QixLQUFLNDNCLFFBQVF4QixvQkFFN0UsQ0FDRCxJQUFJcEcsRUFBV29KLEVBQVdub0IsV0FDMUIsR0FBaUIsY0FBYitlLEVBQ0F1SixFQUFnQnY1QixLQUFLNDNCLFFBQVE3YixlQUFlZ2MsRUFBYXBELGdCQUFnQlYsVUFBV2tHLEdBQ3BGaEMsRUFBZUosRUFBYTFELGdCQUFnQmtGLEVBQWVGLEVBQWF4RixxQkFBc0J3RixFQUFhdkYsa0JBRTFHLENBQ0QsSUFBSWtHLEVBQWtCWixFQUFXam9CLFdBQzdCNmtCLEVBQVdxRCxFQUFhcEYsVUFBVWhZLGtCQUFrQitULEdBQ3BEbUMsT0FBVyxFQUNmLEdBQUk2SCxFQUFnQmpvQixVQUVoQm9nQixFQUFXZ0ksTUFFVixDQUNELElBQUk3ZCxFQUFZaVYsRUFBT3NGLGlCQUFpQjdHLEdBTWhDbUMsRUFMUyxNQUFiN1YsRUFDa0MsY0FBOUIwZCxFQUFnQjVvQixXQUNoQmtMLEVBQVVILFNBQVM2ZCxFQUFnQnRvQixVQUFVSyxVQUdsQ3VLLEVBR0FBLEVBQVVHLFlBQVl1ZCxFQUFpQkcsR0FLM0NqVyxHQUFhdFYsV0FHaEMsR0FBS29uQixFQUFTcmpCLE9BQU93ZixHQUtqQmdHLEVBQWVKLE1BTGEsQ0FDNUIsSUFBSXlDLEVBQWV4NkIsS0FBSzQzQixRQUFRbmIsWUFBWTRjLEVBQWFwRixVQUFXakUsRUFBVW1DLEVBQVU2SCxFQUFpQnpJLEVBQVE4RyxHQUNqSEYsRUFBZUosRUFBYTFELGdCQUFnQm1HLEVBQWNuQixFQUFheEYscUJBQXNCN3pCLEtBQUs0M0IsUUFBUXhCLGtCQU90SCxPQUFPK0IsR0FRWFIsRUFBYzhDLGVBQWlCLFNBQVVoRCxFQUFXekgsR0FDaEQsT0FBT3lILEVBQVU5QyxnQkFBZ0JYLG1CQUFtQmhFLElBWXhEMkgsRUFBY24xQixVQUFVazJCLGdCQUFrQixTQUFVakIsRUFBV3prQixFQUFNMG5CLEVBQWlCekMsRUFBYXVCLEVBQWFuQixHQUM1RyxJQUFJbDNCLEVBQVFuQixLQU9SMjZCLEVBQWVsRCxFQWFuQixPQVpBaUQsRUFBZ0J6SCxTQUFRLFNBQVVqaEIsRUFBY3NLLEdBQzVDLElBQUlzZSxFQUFZNW5CLEVBQUtwQixNQUFNSSxHQUN2QjJsQixFQUFjOEMsZUFBZWhELEVBQVdtRCxFQUFVM3BCLGNBQ2xEMHBCLEVBQWV4NUIsRUFBTW8zQixvQkFBb0JvQyxFQUFjQyxFQUFXdGUsRUFBVzJiLEVBQWF1QixFQUFhbkIsT0FHL0dxQyxFQUFnQnpILFNBQVEsU0FBVWpoQixFQUFjc0ssR0FDNUMsSUFBSXNlLEVBQVk1bkIsRUFBS3BCLE1BQU1JLEdBQ3RCMmxCLEVBQWM4QyxlQUFlaEQsRUFBV21ELEVBQVUzcEIsY0FDbkQwcEIsRUFBZXg1QixFQUFNbzNCLG9CQUFvQm9DLEVBQWNDLEVBQVd0ZSxFQUFXMmIsRUFBYXVCLEVBQWFuQixPQUd4R3NDLEdBUVhoRCxFQUFjbjFCLFVBQVVxNEIsWUFBYyxTQUFVMWdCLEVBQU1zZSxHQUlsRCxPQUhBQSxFQUFNeEYsU0FBUSxTQUFVamhCLEVBQWNzSyxHQUNsQ25DLEVBQU9BLEVBQUtzQyxZQUFZekssRUFBY3NLLE1BRW5DbkMsR0FhWHdkLEVBQWNuMUIsVUFBVW0yQixrQkFBb0IsU0FBVWxCLEVBQVd6a0IsRUFBTTBuQixFQUFpQnpDLEVBQWF1QixFQUFhcEIsRUFBa0JDLEdBQ2hJLElBQUlsM0IsRUFBUW5CLEtBR1osR0FBSXkzQixFQUFVNUMsaUJBQWlCWixVQUFVbGlCLFlBQ3BDMGxCLEVBQVU1QyxpQkFBaUJoQixxQkFDNUIsT0FBTzRELEVBUVgsSUFDSXFELEVBREFILEVBQWVsRCxFQUdmcUQsRUFEQTluQixFQUFLakIsVUFDVzJvQixFQUdBL0ksR0FBY0QsTUFBTVUsUUFBUXBmLEVBQU0wbkIsR0FFdEQsSUFBSXZELEVBQWFNLEVBQVU1QyxpQkFBaUJaLFVBdUI1QyxPQXRCQTZHLEVBQWNqTCxTQUFTM1Esa0JBQWlCLFNBQVU4USxFQUFVMU4sR0FDeEQsR0FBSTZVLEVBQVcvYSxTQUFTNFQsR0FBVyxDQUMvQixJQUFJK0ssRUFBY3RELEVBQ2I1QyxpQkFDQVosVUFDQWhZLGtCQUFrQitULEdBQ25CbUMsRUFBV2h4QixFQUFNMDVCLFlBQVlFLEVBQWF6WSxHQUM5Q3FZLEVBQWV4NUIsRUFBTXEzQixzQkFBc0JtQyxFQUFjLElBQUlqcUIsRUFBS3NmLEdBQVdtQyxFQUFVOEYsRUFBYXVCLEVBQWFwQixFQUFrQkMsT0FHM0l5QyxFQUFjakwsU0FBUzNRLGtCQUFpQixTQUFVOFEsRUFBVWdMLEdBQ3hELElBQUlDLEdBQXNCeEQsRUFBVTVDLGlCQUFpQmIsbUJBQW1CaEUsSUFDNUMsTUFBeEJnTCxFQUFlejdCLE1BQ25CLElBQUs0M0IsRUFBVy9hLFNBQVM0VCxLQUFjaUwsRUFBb0IsQ0FDdkQsSUFBSUYsRUFBY3RELEVBQ2I1QyxpQkFDQVosVUFDQWhZLGtCQUFrQitULEdBQ25CbUMsRUFBV2h4QixFQUFNMDVCLFlBQVlFLEVBQWFDLEdBQzlDTCxFQUFleDVCLEVBQU1xM0Isc0JBQXNCbUMsRUFBYyxJQUFJanFCLEVBQUtzZixHQUFXbUMsRUFBVThGLEVBQWF1QixFQUFhcEIsRUFBa0JDLE9BR3BJc0MsR0FZWGhELEVBQWNuMUIsVUFBVXMyQixjQUFnQixTQUFVckIsRUFBV3lELEVBQVM5SixFQUFjNkcsRUFBYUMsRUFBZUcsR0FDNUcsR0FBMkMsTUFBdkNKLEVBQVlxQixlQUFlNEIsR0FDM0IsT0FBT3pELEVBR1gsSUFBSVcsRUFBbUJYLEVBQVU1QyxpQkFBaUJmLGFBRzlDMEYsRUFBYy9CLEVBQVU1QyxpQkFDNUIsR0FBMEIsTUFBdEJ6RCxFQUFhN3hCLE1BQWUsQ0FFNUIsR0FBSzI3QixFQUFRbnBCLFdBQWF5bkIsRUFBWTNGLHNCQUNsQzJGLEVBQVl6RixrQkFBa0JtSCxHQUM5QixPQUFPbDdCLEtBQUt3NEIsc0JBQXNCZixFQUFXeUQsRUFBUzFCLEVBQVl2RixVQUFVOVgsU0FBUytlLEdBQVVqRCxFQUFhQyxFQUFlRSxFQUFrQkMsR0FFNUksR0FBSTZDLEVBQVFucEIsVUFBVyxDQUd4QixJQUFJb3BCLEVBQW9CeEosR0FBY0QsTUFJdEMsT0FIQThILEVBQVl2RixVQUFVclgsYUFBYXZCLElBQVcsU0FBVS9aLEVBQU02WSxHQUMxRGdoQixFQUFvQkEsRUFBa0J4NEIsSUFBSSxJQUFJK04sRUFBS3BQLEdBQU82WSxNQUV2RG5hLEtBQUsyNEIsa0JBQWtCbEIsRUFBV3lELEVBQVNDLEVBQW1CbEQsRUFBYUMsRUFBZUUsRUFBa0JDLEdBR25ILE9BQU9aLEVBS1gsSUFBSTJELEVBQW9CekosR0FBY0QsTUFPdEMsT0FOQU4sRUFBYTZCLFNBQVEsU0FBVW9JLEVBQVc5N0IsR0FDdEMsSUFBSSs3QixFQUFrQkosRUFBUXRwQixNQUFNeXBCLEdBQ2hDN0IsRUFBWXpGLGtCQUFrQnVILEtBQzlCRixFQUFvQkEsRUFBa0J6NEIsSUFBSTA0QixFQUFXN0IsRUFBWXZGLFVBQVU5WCxTQUFTbWYsUUFHckZ0N0IsS0FBSzI0QixrQkFBa0JsQixFQUFXeUQsRUFBU0UsRUFBbUJuRCxFQUFhQyxFQUFlRSxFQUFrQkMsSUFXM0hWLEVBQWNuMUIsVUFBVXUyQixnQkFBa0IsU0FBVXRCLEVBQVd6a0IsRUFBTWlsQixFQUFhSSxHQUM5RSxJQUFJa0QsRUFBZ0I5RCxFQUFVNUMsaUJBQzFCc0QsRUFBZVYsRUFBVWhELGlCQUFpQjhHLEVBQWN0SCxVQUFXc0gsRUFBYzFILHNCQUF3QjdnQixFQUFLakIsVUFBV3dwQixFQUFjekgsY0FDM0ksT0FBTzl6QixLQUFLbTVCLG9DQUFvQ2hCLEVBQWNubEIsRUFBTWlsQixFQUFhdEIsR0FBMEIwQixJQVcvR1YsRUFBY24xQixVQUFVcTJCLGlCQUFtQixTQUFVcEIsRUFBV3prQixFQUFNaWxCLEVBQWF1RCxFQUFxQm5ELEdBQ3BHLElBQUk5RCxFQUNKLEdBQXdDLE1BQXBDMEQsRUFBWXFCLGVBQWV0bUIsR0FDM0IsT0FBT3lrQixFQUdQLElBQUlsRyxFQUFTLElBQUl3RixHQUE2QmtCLEVBQWFSLEVBQVcrRCxHQUNsRUMsRUFBZ0JoRSxFQUFVOUMsZ0JBQWdCVixVQUMxQ3NGLE9BQWdCLEVBQ3BCLEdBQUl2bUIsRUFBS2pCLFdBQWlDLGNBQXBCaUIsRUFBSy9CLFdBQTRCLENBQ25ELElBQUl5SixPQUFVLEVBQ2QsR0FBSStjLEVBQVU1QyxpQkFBaUJoQixxQkFDM0JuWixFQUFVdWQsRUFBWXhKLHVCQUF1QmdKLEVBQVUzQyw2QkFFdEQsQ0FDRCxJQUFJNEcsRUFBaUJqRSxFQUFVNUMsaUJBQWlCWixXQUNoRCxRQUFPeUgsYUFBMEJ4WCxHQUFjLGlEQUMvQ3hKLEVBQVV1ZCxFQUFZMEIsMEJBQTBCK0IsR0FFcERoaEIsRUFBVUEsRUFDVjZlLEVBQWdCdjVCLEtBQUs0M0IsUUFBUTFCLGVBQWV1RixFQUFlL2dCLEVBQVMyZCxPQUVuRSxDQUNELElBQUlySSxFQUFXaGQsRUFBSy9CLFdBQ2hCa2hCLEVBQVc4RixFQUFZYixrQkFBa0JwSCxFQUFVeUgsRUFBVTVDLGtCQUNqRCxNQUFaMUMsR0FDQXNGLEVBQVU1QyxpQkFBaUJiLG1CQUFtQmhFLEtBQzlDbUMsRUFBV3NKLEVBQWN4ZixrQkFBa0IrVCxLQUczQ3VKLEVBRFksTUFBWnBILEVBQ2dCbnlCLEtBQUs0M0IsUUFBUW5iLFlBQVlnZixFQUFlekwsRUFBVW1DLEVBQVVuZixFQUFLN0IsV0FBWW9nQixFQUFROEcsR0FFaEdaLEVBQVU5QyxnQkFBZ0JWLFVBQVU3WCxTQUFTNFQsR0FFbENod0IsS0FBSzQzQixRQUFRbmIsWUFBWWdmLEVBQWV6TCxFQUFVOUwsR0FBYXRWLFdBQVlvRSxFQUFLN0IsV0FBWW9nQixFQUFROEcsR0FHcEdvRCxHQUVGMXBCLFdBQ2QwbEIsRUFBVTVDLGlCQUFpQmhCLHVCQUUzQlUsRUFBVzBELEVBQVl4Six1QkFBdUJnSixFQUFVM0MsMEJBQzNDclosZUFDVDhkLEVBQWdCdjVCLEtBQUs0M0IsUUFBUTFCLGVBQWVxRCxFQUFlaEYsRUFBVThELElBT2pGLE9BSEE5RCxFQUNJa0QsRUFBVTVDLGlCQUFpQmhCLHNCQUNtQixNQUExQ29FLEVBQVlxQixlQUFlNW9CLEVBQUtnaEIsT0FDakMrRixFQUFVcEQsZ0JBQWdCa0YsRUFBZWhGLEVBQVV2MEIsS0FBSzQzQixRQUFReEIsaUJBR3hFdUIsRUFoaEJ1QixHQTBpQjlCZ0UsR0FBZ0MsV0FLaEMsU0FBU0EsRUFBZUMsR0FDcEI1N0IsS0FBSzQ3QixPQUFTQSxFQUtkNTdCLEtBQUt3bkIsT0FBU3huQixLQUFLNDdCLE9BQU94UyxpQkFBaUJDLFdBdUYvQyxPQXZFQXNTLEVBQWVuNUIsVUFBVXE1Qix5QkFBMkIsU0FBVW5FLEVBQVNvRSxFQUFZQyxHQUMvRSxJQUFJNTZCLEVBQVFuQixLQUNSZzhCLEVBQVMsR0FDVEMsRUFBUSxHQVlaLE9BWEF2RSxFQUFRNVAsU0FBUSxTQUFVb0IsR0FDbEJBLEVBQU85aUIsT0FBUzJ1QixHQUFPVyxlQUN2QnYwQixFQUFNcW1CLE9BQU9oTixvQkFBb0IwTyxFQUFPOEwsUUFBUzlMLEVBQU9JLGVBQ3hEMlMsRUFBTXgyQixLQUFLc3ZCLEdBQU9ZLGlCQUFpQnpNLEVBQU9oTixVQUFXZ04sRUFBT0ksa0JBR3BFdHBCLEtBQUtrOEIsdUJBQXVCRixFQUFRakgsR0FBT08sY0FBZW9DLEVBQVNxRSxFQUFvQkQsR0FDdkY5N0IsS0FBS2s4Qix1QkFBdUJGLEVBQVFqSCxHQUFPSyxZQUFhc0MsRUFBU3FFLEVBQW9CRCxHQUNyRjk3QixLQUFLazhCLHVCQUF1QkYsRUFBUWpILEdBQU9hLFlBQWFxRyxFQUFPRixFQUFvQkQsR0FDbkY5N0IsS0FBS2s4Qix1QkFBdUJGLEVBQVFqSCxHQUFPVyxjQUFlZ0MsRUFBU3FFLEVBQW9CRCxHQUN2Rjk3QixLQUFLazhCLHVCQUF1QkYsRUFBUWpILEdBQU9HLE1BQU93QyxFQUFTcUUsRUFBb0JELEdBQ3hFRSxHQVlYTCxFQUFlbjVCLFVBQVUwNUIsdUJBQXlCLFNBQVVGLEVBQVE1akIsRUFBV3NmLEVBQVN5RSxFQUFlTCxHQUNuRyxJQUFJMzZCLEVBQVFuQixLQUNSbzhCLEVBQWtCMUUsRUFBUWx3QixRQUFPLFNBQVUwaEIsR0FBVSxPQUFPQSxFQUFPOWlCLE9BQVNnUyxLQUNoRmdrQixFQUFnQjF1QixLQUFLMU4sS0FBS3E4QixnQkFBZ0IzMUIsS0FBSzFHLE9BQy9DbzhCLEVBQWdCdFUsU0FBUSxTQUFVb0IsR0FDOUIsSUFBSW9ULEVBQXFCbjdCLEVBQU1vN0IseUJBQXlCclQsRUFBUTRTLEdBQ2hFSyxFQUFjclUsU0FBUSxTQUFVMFUsR0FDeEJBLEVBQWF4VCxXQUFXRSxFQUFPOWlCLE9BQy9CNDFCLEVBQU92MkIsS0FBSysyQixFQUFhdlQsWUFBWXFULEVBQW9CbjdCLEVBQU15NkIsZ0JBVy9FRCxFQUFlbjVCLFVBQVUrNUIseUJBQTJCLFNBQVVyVCxFQUFRNFMsR0FDbEUsTUFBb0IsVUFBaEI1UyxFQUFPOWlCLE1BQW9DLGtCQUFoQjhpQixFQUFPOWlCLE9BSWxDOGlCLEVBQU9iLFNBQVd5VCxFQUFXemYsd0JBRTdCNk0sRUFBT2hOLFVBQVdnTixFQUFPSSxhQUFjdHBCLEtBQUt3bkIsU0FMckMwQixHQWVmeVMsRUFBZW41QixVQUFVNjVCLGdCQUFrQixTQUFVcnZCLEVBQUdDLEdBQ3BELEdBQW1CLE1BQWZELEVBQUVrUCxXQUFvQyxNQUFmalAsRUFBRWlQLFVBQ3pCLE1BQU0sUUFBZSxzQ0FFekIsSUFBSXVnQixFQUFXLElBQUl2aUIsR0FBVWxOLEVBQUVrUCxVQUFXbFAsRUFBRXNjLGNBQ3hDb1QsRUFBVyxJQUFJeGlCLEdBQVVqTixFQUFFaVAsVUFBV2pQLEVBQUVxYyxjQUM1QyxPQUFPdHBCLEtBQUt3bkIsT0FBT2pOLFFBQVFraUIsRUFBVUMsSUFFbENmLEVBbEd3QixHQStIL0JnQixHQUFzQixXQU10QixTQUFTQSxFQUFLZixFQUFRZ0IsR0FDbEI1OEIsS0FBSzQ3QixPQUFTQSxFQUNkNTdCLEtBQUs2OEIsb0JBQXNCLEdBQzNCLElBQUkvbkIsRUFBUzlVLEtBQUs0N0IsT0FBT3hTLGlCQUNyQjBULEVBQWMsSUFBSWpILEdBQWMvZ0IsRUFBT3VVLFlBQ3ZDN2hCLEVBQVNzTixFQUFPaW9CLGdCQUtwQi84QixLQUFLZzlCLFdBQWEsSUFBSXJGLEdBQWNud0IsR0FDcEMsSUFBSXkxQixFQUFxQkwsRUFBaUIvSCxpQkFDdENxSSxFQUFvQk4sRUFBaUJqSSxnQkFFckNELEVBQWFvSSxFQUFZNUcsZUFBZWhTLEdBQWF0VixXQUFZcXVCLEVBQW1CaEosVUFBVyxNQUMvRkssRUFBWTlzQixFQUFPMHVCLGVBQWVoUyxHQUFhdFYsV0FBWXN1QixFQUFrQmpKLFVBQVcsTUFDeEZtRyxFQUFpQixJQUFJMUcsR0FBVWdCLEVBQVl1SSxFQUFtQnBKLHFCQUFzQmlKLEVBQVkxRyxnQkFDaEdtRCxFQUFnQixJQUFJN0YsR0FBVVksRUFBVzRJLEVBQWtCckoscUJBQXNCcnNCLEVBQU80dUIsZ0JBSzVGcDJCLEtBQUtpM0IsV0FBYSxJQUFJL0MsR0FBVXFGLEVBQWVhLEdBSy9DcDZCLEtBQUttOUIsZ0JBQWtCLElBQUl4QixHQUFlMzdCLEtBQUs0N0IsUUFxSW5ELE9BaElBZSxFQUFLbjZCLFVBQVU0NkIsU0FBVyxXQUN0QixPQUFPcDlCLEtBQUs0N0IsUUFLaEJlLEVBQUtuNkIsVUFBVXF5QixlQUFpQixXQUM1QixPQUFPNzBCLEtBQUtpM0IsV0FBV3BDLGlCQUFpQlosV0FNNUMwSSxFQUFLbjZCLFVBQVU2NkIsdUJBQXlCLFNBQVVycUIsR0FDOUMsSUFBSXNxQixFQUFRdDlCLEtBQUtpM0IsV0FBV25DLHdCQUM1QixPQUFJd0ksSUFHSXQ5QixLQUFLNDdCLE9BQU94UyxpQkFBaUJtVSxpQkFDM0J2cUIsRUFBS2pCLFlBQWN1ckIsRUFBTXJoQixrQkFBa0JqSixFQUFLL0IsWUFBWWMsV0FDdkR1ckIsRUFBTW5oQixTQUFTbkosR0FHdkIsTUFLWDJwQixFQUFLbjZCLFVBQVV1UCxRQUFVLFdBQ3JCLE9BQTJDLElBQXBDL1IsS0FBSzY4QixvQkFBb0JwMkIsUUFLcENrMkIsRUFBS242QixVQUFVZzdCLHFCQUF1QixTQUFVcFYsR0FDNUNwb0IsS0FBSzY4QixvQkFBb0JwM0IsS0FBSzJpQixJQU9sQ3VVLEVBQUtuNkIsVUFBVWk3Qix3QkFBMEIsU0FBVXJWLEVBQW1Cc1YsR0FDbEUsSUFBSUMsRUFBZSxHQUNuQixHQUFJRCxFQUFhLEVBQ2IsUUFBNEIsTUFBckJ0VixFQUEyQixtREFDbEMsSUFBSXdWLEVBQVM1OUIsS0FBSzQ3QixPQUFPNW9CLEtBQ3pCaFQsS0FBSzY4QixvQkFBb0IvVSxTQUFRLFNBQVUwVSxHQUN2Q2tCLEVBQW9DQSxFQUNwQyxJQUFJRyxFQUFhckIsRUFBYTdTLGtCQUFrQitULEVBQWFFLEdBQ3pEQyxHQUNBRixFQUFhbDRCLEtBQUtvNEIsTUFJOUIsR0FBSXpWLEVBQW1CLENBRW5CLElBREEsSUFBSTBWLEVBQVksR0FDUGh5QixFQUFJLEVBQUdBLEVBQUk5TCxLQUFLNjhCLG9CQUFvQnAyQixTQUFVcUYsRUFBRyxDQUN0RCxJQUFJb2pCLEVBQVdsdkIsS0FBSzY4QixvQkFBb0Ivd0IsR0FDeEMsR0FBS29qQixFQUFTdEYsUUFBUXhCLElBR2pCLEdBQUlBLEVBQWtCeUIsaUJBQWtCLENBRXpDaVUsRUFBWUEsRUFBVUMsT0FBTy85QixLQUFLNjhCLG9CQUFvQnJyQixNQUFNMUYsRUFBSSxJQUNoRSxZQUxBZ3lCLEVBQVVyNEIsS0FBS3lwQixHQVF2Qmx2QixLQUFLNjhCLG9CQUFzQmlCLE9BRzNCOTlCLEtBQUs2OEIsb0JBQXNCLEdBRS9CLE9BQU9jLEdBVVhoQixFQUFLbjZCLFVBQVVzMUIsZUFBaUIsU0FBVUUsRUFBV0MsRUFBYXVELEdBQzFEeEQsRUFBVTV4QixPQUFTdXBCLEdBQWM4RCxPQUNKLE9BQTdCdUUsRUFBVXpHLE9BQU9ULFdBQ2pCLFFBQU85d0IsS0FBS2kzQixXQUFXbkMsd0JBQXlCLDhEQUNoRCxRQUFPOTBCLEtBQUtpM0IsV0FBV3JDLHVCQUF3Qiw0REFFbkQsSUFBSW1ELEVBQWUvM0IsS0FBS2kzQixXQUNwQnhZLEVBQVN6ZSxLQUFLZzlCLFdBQVdsRixlQUFlQyxFQUFjQyxFQUFXQyxFQUFhdUQsR0FLbEYsT0FKQXg3QixLQUFLZzlCLFdBQVduRixjQUFjcFosRUFBT2daLFlBQ3JDLFFBQU9oWixFQUFPZ1osVUFBVTVDLGlCQUFpQmhCLHVCQUNwQ2tFLEVBQWFsRCxpQkFBaUJoQixxQkFBc0IsMkRBQ3pEN3pCLEtBQUtpM0IsV0FBYXhZLEVBQU9nWixVQUNsQnozQixLQUFLZytCLDBCQUEwQnZmLEVBQU9pWixRQUFTalosRUFBT2daLFVBQVU5QyxnQkFBZ0JWLFVBQVcsT0FNdEcwSSxFQUFLbjZCLFVBQVV5N0IsaUJBQW1CLFNBQVV6QixHQUN4QyxJQUFJbEksRUFBWXQwQixLQUFLaTNCLFdBQVd0QyxnQkFDNUJ1SixFQUFpQixHQVVyQixPQVRLNUosRUFBVUwsVUFBVXhZLGNBQ0w2WSxFQUFVTCxVQUNoQnJYLGFBQWFpQixJQUFnQixTQUFVemUsRUFBS2tkLEdBQ2xENGhCLEVBQWV6NEIsS0FBS3N2QixHQUFPSSxpQkFBaUIvMUIsRUFBS2tkLE9BR3JEZ1ksRUFBVVQsc0JBQ1ZxSyxFQUFlejRCLEtBQUtzdkIsR0FBT0UsWUFBWVgsRUFBVUwsWUFFOUNqMEIsS0FBS2crQiwwQkFBMEJFLEVBQWdCNUosRUFBVUwsVUFBV3VJLElBUy9FRyxFQUFLbjZCLFVBQVV3N0IsMEJBQTRCLFNBQVV0RyxFQUFTb0UsRUFBWTFULEdBQ3RFLElBQUkrVCxFQUFnQi9ULEVBQ2QsQ0FBQ0EsR0FDRHBvQixLQUFLNjhCLG9CQUNYLE9BQU83OEIsS0FBS205QixnQkFBZ0J0Qix5QkFBeUJuRSxFQUFTb0UsRUFBWUssSUFFdkVRLEVBdEtjLEdBb01yQndCLEdBQTJCLFdBQzNCLFNBQVNBLElBT0xuK0IsS0FBS28rQixNQUFRLElBQUkxNUIsSUEwTnJCLE9BeE5BcEMsT0FBT0MsZUFBZTQ3QixFQUFXLHlCQUEwQixDQUN2RDE3QixJQUFLLFdBRUQsT0FEQSxRQUFPaXVCLEdBQTBCLG9DQUMxQkEsSUFFWC90QixJQUFLLFNBQVVDLElBQ1gsU0FBUTh0QixHQUEwQixtREFDbENBLEdBQTJCOXRCLEdBRS9CQyxZQUFZLEVBQ1pDLGNBQWMsSUFFbEJxN0IsRUFBVTM3QixVQUFVdVAsUUFBVSxXQUMxQixPQUEyQixJQUFwQi9SLEtBQUtvK0IsTUFBTXJPLE1BRXRCb08sRUFBVTM3QixVQUFVczFCLGVBQWlCLFNBQVVFLEVBQVdDLEVBQWFvRyxHQUNuRSxJQUFJbjlCLEVBQUtaLEVBQ0x3d0IsRUFBVWtILEVBQVV6RyxPQUFPVCxRQUMvQixHQUFnQixPQUFaQSxFQUFrQixDQUNsQixJQUFJd04sRUFBT3QrQixLQUFLbytCLE1BQU0zN0IsSUFBSXF1QixHQUUxQixPQURBLFFBQWUsTUFBUndOLEVBQWMsZ0RBQ2RBLEVBQUt4RyxlQUFlRSxFQUFXQyxFQUFhb0csR0FHbkQsSUFBSXJDLEVBQVMsR0FDYixJQUNJLElBQUssSUFBSXA2QixHQUFLLFFBQVM1QixLQUFLbytCLE1BQU1yOEIsVUFBV0MsRUFBS0osRUFBR0ssUUFBU0QsRUFBR3ZDLEtBQU11QyxFQUFLSixFQUFHSyxPQUN2RXE4QixFQUFPdDhCLEVBQUd6QyxNQUNkeThCLEVBQVNBLEVBQU8rQixPQUFPTyxFQUFLeEcsZUFBZUUsRUFBV0MsRUFBYW9HLElBRzNFLE1BQU9sOEIsR0FBU2pCLEVBQU0sQ0FBRTFCLE1BQU8yQyxHQUMvQixRQUNJLElBQ1FILElBQU9BLEVBQUd2QyxPQUFTYSxFQUFLc0IsRUFBR1EsU0FBUzlCLEVBQUcrQixLQUFLVCxHQUVwRCxRQUFVLEdBQUlWLEVBQUssTUFBTUEsRUFBSTFCLE9BRWpDLE9BQU93OEIsR0FhZm1DLEVBQVUzN0IsVUFBVWc3QixxQkFBdUIsU0FBVXJVLEVBQU9mLEVBQW1CNlAsRUFBYXVCLEVBQWErRSxHQUNyRyxJQUFJek4sRUFBVTNILEVBQU00RSxrQkFDaEJ1USxFQUFPdCtCLEtBQUtvK0IsTUFBTTM3QixJQUFJcXVCLEdBQzFCLElBQUt3TixFQUFNLENBRVAsSUFBSXhDLEVBQWE3RCxFQUFZeEosdUJBQXVCOFAsRUFBc0IvRSxFQUFjLE1BQ3BGZ0YsR0FBcUIsRUFDckIxQyxFQUNBMEMsR0FBcUIsRUFFaEJoRixhQUF1QnRWLElBQzVCNFgsRUFBYTdELEVBQVkwQiwwQkFBMEJILEdBQ25EZ0YsR0FBcUIsSUFHckIxQyxFQUFhNVgsR0FBYXRWLFdBQzFCNHZCLEdBQXFCLEdBRXpCLElBQUkvRyxFQUFZLElBQUl2RCxHQUFVLElBQUlSLEdBQ2JvSSxFQUFZMEMsR0FBb0IsR0FBUSxJQUFJOUssR0FDNUM4RixFQUFhK0UsR0FBcUIsSUFDdkRELEVBQU8sSUFBSTNCLEdBQUt4VCxFQUFPc08sR0FDdkJ6M0IsS0FBS28rQixNQUFNejdCLElBQUltdUIsRUFBU3dOLEdBSTVCLE9BREFBLEVBQUtkLHFCQUFxQnBWLEdBQ25Ca1csRUFBS0wsaUJBQWlCN1YsSUFhakMrVixFQUFVMzdCLFVBQVVpN0Isd0JBQTBCLFNBQVV0VSxFQUFPZixFQUFtQnNWLEdBQzlFLElBQUllLEVBQUtuK0IsRUFDTHd3QixFQUFVM0gsRUFBTTRFLGtCQUNoQjJRLEVBQVUsR0FDVmYsRUFBZSxHQUNmZ0IsRUFBa0IzK0IsS0FBSzQrQixrQkFDM0IsR0FBZ0IsWUFBWjlOLEVBQ0EsSUFFSSxJQUFLLElBQUlsdkIsR0FBSyxRQUFTNUIsS0FBS28rQixNQUFNbDFCLFdBQVlsSCxFQUFLSixFQUFHSyxRQUFTRCxFQUFHdkMsS0FBTXVDLEVBQUtKLEVBQUdLLE9BQVEsQ0FDcEYsSUFBSWtILEdBQUssUUFBT25ILEVBQUd6QyxNQUFPLEdBQUlzL0IsRUFBYzExQixFQUFHLEdBQUltMUIsRUFBT24xQixFQUFHLEdBQzdEdzBCLEVBQWVBLEVBQWFJLE9BQU9PLEVBQUtiLHdCQUF3QnJWLEVBQW1Cc1YsSUFDL0VZLEVBQUt2c0IsWUFDTC9SLEtBQUtvK0IsTUFBTXI3QixPQUFPODdCLEdBRWJQLEVBQUtsQixXQUFXaFUsaUJBQWlCbVUsZ0JBQ2xDbUIsRUFBUWo1QixLQUFLNjRCLEVBQUtsQixjQUtsQyxNQUFPMEIsR0FBU0wsRUFBTSxDQUFFai9CLE1BQU9zL0IsR0FDL0IsUUFDSSxJQUNROThCLElBQU9BLEVBQUd2QyxPQUFTYSxFQUFLc0IsRUFBR1EsU0FBUzlCLEVBQUcrQixLQUFLVCxHQUVwRCxRQUFVLEdBQUk2OEIsRUFBSyxNQUFNQSxFQUFJai9CLFlBSzdCOCtCLEVBQU90K0IsS0FBS28rQixNQUFNMzdCLElBQUlxdUIsTUFFdEI2TSxFQUFlQSxFQUFhSSxPQUFPTyxFQUFLYix3QkFBd0JyVixFQUFtQnNWLElBQy9FWSxFQUFLdnNCLFlBQ0wvUixLQUFLbytCLE1BQU1yN0IsT0FBTyt0QixHQUVid04sRUFBS2xCLFdBQVdoVSxpQkFBaUJtVSxnQkFDbENtQixFQUFRajVCLEtBQUs2NEIsRUFBS2xCLGNBU2xDLE9BSkl1QixJQUFvQjMrQixLQUFLNCtCLG1CQUV6QkYsRUFBUWo1QixLQUFLLElBQUkwNEIsRUFBVXhYLHVCQUF1QndDLEVBQU11QixLQUFNdkIsRUFBTW5XLE9BRWpFLENBQUUwckIsUUFBU0EsRUFBUzFDLE9BQVEyQixJQUV2Q1EsRUFBVTM3QixVQUFVdThCLGNBQWdCLFdBQ2hDLElBQUlDLEVBQUsxK0IsRUFDTG1lLEVBQVMsR0FDYixJQUNJLElBQUssSUFBSTdjLEdBQUssUUFBUzVCLEtBQUtvK0IsTUFBTXI4QixVQUFXQyxFQUFLSixFQUFHSyxRQUFTRCxFQUFHdkMsS0FBTXVDLEVBQUtKLEVBQUdLLE9BQVEsQ0FDbkYsSUFBSXE4QixFQUFPdDhCLEVBQUd6QyxNQUNUKytCLEVBQUtsQixXQUFXaFUsaUJBQWlCbVUsZ0JBQ2xDOWUsRUFBT2haLEtBQUs2NEIsSUFJeEIsTUFBT1csR0FBU0QsRUFBTSxDQUFFeC9CLE1BQU95L0IsR0FDL0IsUUFDSSxJQUNRajlCLElBQU9BLEVBQUd2QyxPQUFTYSxFQUFLc0IsRUFBR1EsU0FBUzlCLEVBQUcrQixLQUFLVCxHQUVwRCxRQUFVLEdBQUlvOUIsRUFBSyxNQUFNQSxFQUFJeC9CLE9BRWpDLE9BQU9pZixHQU1YMGYsRUFBVTM3QixVQUFVNjZCLHVCQUF5QixTQUFVcnFCLEdBQ25ELElBQUlrc0IsRUFBSzUrQixFQUNMazVCLEVBQWMsS0FDbEIsSUFDSSxJQUFLLElBQUk1M0IsR0FBSyxRQUFTNUIsS0FBS28rQixNQUFNcjhCLFVBQVdDLEVBQUtKLEVBQUdLLFFBQVNELEVBQUd2QyxLQUFNdUMsRUFBS0osRUFBR0ssT0FBUSxDQUNuRixJQUFJcThCLEVBQU90OEIsRUFBR3pDLE1BQ2RpNkIsRUFBY0EsR0FBZThFLEVBQUtqQix1QkFBdUJycUIsSUFHakUsTUFBT21zQixHQUFTRCxFQUFNLENBQUUxL0IsTUFBTzIvQixHQUMvQixRQUNJLElBQ1FuOUIsSUFBT0EsRUFBR3ZDLE9BQVNhLEVBQUtzQixFQUFHUSxTQUFTOUIsRUFBRytCLEtBQUtULEdBRXBELFFBQVUsR0FBSXM5QixFQUFLLE1BQU1BLEVBQUkxL0IsT0FFakMsT0FBT2c2QixHQUVYMkUsRUFBVTM3QixVQUFVNDhCLGFBQWUsU0FBVWpXLEdBRXpDLEdBRGFBLEVBQU1DLGlCQUNSbVUsZUFDUCxPQUFPdjlCLEtBQUtxL0Isa0JBR1osSUFBSXZPLEVBQVUzSCxFQUFNNEUsa0JBQ3BCLE9BQU8vdEIsS0FBS28rQixNQUFNMzdCLElBQUlxdUIsSUFHOUJxTixFQUFVMzdCLFVBQVU4OEIsbUJBQXFCLFNBQVVuVyxHQUMvQyxPQUFtQyxNQUE1Qm5wQixLQUFLby9CLGFBQWFqVyxJQUU3QmdWLEVBQVUzN0IsVUFBVW84QixnQkFBa0IsV0FDbEMsT0FBaUMsTUFBMUI1K0IsS0FBS3EvQixtQkFFaEJsQixFQUFVMzdCLFVBQVU2OEIsZ0JBQWtCLFdBQ2xDLElBQUlFLEVBQUtqL0IsRUFDVCxJQUNJLElBQUssSUFBSXNCLEdBQUssUUFBUzVCLEtBQUtvK0IsTUFBTXI4QixVQUFXQyxFQUFLSixFQUFHSyxRQUFTRCxFQUFHdkMsS0FBTXVDLEVBQUtKLEVBQUdLLE9BQVEsQ0FDbkYsSUFBSXE4QixFQUFPdDhCLEVBQUd6QyxNQUNkLEdBQUkrK0IsRUFBS2xCLFdBQVdoVSxpQkFBaUJtVSxlQUNqQyxPQUFPZSxHQUluQixNQUFPa0IsR0FBU0QsRUFBTSxDQUFFLy9CLE1BQU9nZ0MsR0FDL0IsUUFDSSxJQUNReDlCLElBQU9BLEVBQUd2QyxPQUFTYSxFQUFLc0IsRUFBR1EsU0FBUzlCLEVBQUcrQixLQUFLVCxHQUVwRCxRQUFVLEdBQUkyOUIsRUFBSyxNQUFNQSxFQUFJLy9CLE9BRWpDLE9BQU8sTUFFSjIrQixFQWxPbUIsR0EyUDFCc0IsR0FBK0IsV0FDL0IsU0FBU0EsRUFBY0MsR0FDbkIxL0IsS0FBSzAvQixXQUFhQSxFQWlJdEIsT0EvSEFELEVBQWNqOUIsVUFBVW05QixTQUFXLFNBQVUzc0IsRUFBTW1ILEdBQy9DLEdBQUluSCxFQUFLakIsVUFDTCxPQUFPLElBQUkwdEIsRUFBYyxJQUFJOU4sR0FBY3hYLElBRzNDLElBQUl5bEIsRUFBVzUvQixLQUFLMC9CLFdBQVd6Tix5QkFBeUJqZixHQUN4RCxHQUFnQixNQUFaNHNCLEVBQWtCLENBQ2xCLElBQUlDLEVBQWVELEVBQVM1c0IsS0FDeEJ6VCxFQUFRcWdDLEVBQVNyZ0MsTUFDakJ5UyxFQUFldEIsRUFBS3NCLGFBQWE2dEIsRUFBYzdzQixHQUVuRCxPQURBelQsRUFBUUEsRUFBTWtkLFlBQVl6SyxFQUFjbUksR0FDakMsSUFBSXNsQixFQUFjei9CLEtBQUswL0IsV0FBVy84QixJQUFJazlCLEVBQWN0Z0MsSUFHM0QsSUFBSWt5QixFQUFVLElBQUlFLEdBQWN4WCxHQUVoQyxPQUFPLElBQUlzbEIsRUFEUXovQixLQUFLMC9CLFdBQVd0TixRQUFRcGYsRUFBTXllLEtBSzdEZ08sRUFBY2o5QixVQUFVczlCLFVBQVksU0FBVTlzQixFQUFNK3NCLEdBQ2hELElBQUlDLEVBQVdoZ0MsS0FJZixPQUhBaU8sRUFBSzh4QixHQUFTLFNBQVUvUCxFQUFVN1YsR0FDOUI2bEIsRUFBV0EsRUFBU0wsU0FBUzNzQixFQUFLcEIsTUFBTW9lLEdBQVc3VixNQUVoRDZsQixHQVNYUCxFQUFjajlCLFVBQVV5OUIsWUFBYyxTQUFVanRCLEdBQzVDLE9BQUlBLEVBQUtqQixVQUNFMHRCLEVBQWMvTixNQUlkLElBQUkrTixFQURRei9CLEtBQUswL0IsV0FBV3ROLFFBQVFwZixFQUFNMmUsR0FBY0QsU0FXdkUrTixFQUFjajlCLFVBQVUwOUIsaUJBQW1CLFNBQVVsdEIsR0FDakQsT0FBcUMsTUFBOUJoVCxLQUFLbWdDLGdCQUFnQm50QixJQVNoQ3lzQixFQUFjajlCLFVBQVUyOUIsZ0JBQWtCLFNBQVVudEIsR0FDaEQsSUFBSTRzQixFQUFXNS9CLEtBQUswL0IsV0FBV3pOLHlCQUF5QmpmLEdBQ3hELE9BQWdCLE1BQVo0c0IsRUFDTzUvQixLQUFLMC9CLFdBQ1BqOUIsSUFBSW05QixFQUFTNXNCLE1BQ2JtSixTQUFTekwsRUFBS3NCLGFBQWE0dEIsRUFBUzVzQixLQUFNQSxJQUd4QyxNQVFmeXNCLEVBQWNqOUIsVUFBVTQ5QixvQkFBc0IsV0FDMUMsSUFBSXZRLEVBQVcsR0FDWDFWLEVBQU9uYSxLQUFLMC9CLFdBQVduZ0MsTUFnQjNCLE9BZlksTUFBUjRhLEVBRUtBLEVBQUtzQixjQUNOdEIsRUFBS3lDLGFBQWFpQixJQUFnQixTQUFVM0IsRUFBV0ksR0FDbkR1VCxFQUFTcHFCLEtBQUssSUFBSXlVLEdBQVVnQyxFQUFXSSxPQUsvQ3RjLEtBQUswL0IsV0FBVzdQLFNBQVMzUSxrQkFBaUIsU0FBVWhELEVBQVdvRyxHQUNwQyxNQUFuQkEsRUFBVS9pQixPQUNWc3dCLEVBQVNwcUIsS0FBSyxJQUFJeVUsR0FBVWdDLEVBQVdvRyxFQUFVL2lCLFdBSXREc3dCLEdBRVg0UCxFQUFjajlCLFVBQVU2OUIsbUJBQXFCLFNBQVVydEIsR0FDbkQsR0FBSUEsRUFBS2pCLFVBQ0wsT0FBTy9SLEtBR1AsSUFBSXNnQyxFQUFnQnRnQyxLQUFLbWdDLGdCQUFnQm50QixHQUN6QyxPQUNXLElBQUl5c0IsRUFETSxNQUFqQmEsRUFDeUIsSUFBSTNPLEdBQWMyTyxHQUdsQnRnQyxLQUFLMC9CLFdBQVdqTyxRQUFRemUsS0FRN0R5c0IsRUFBY2o5QixVQUFVdVAsUUFBVSxXQUM5QixPQUFPL1IsS0FBSzAvQixXQUFXM3RCLFdBUTNCMHRCLEVBQWNqOUIsVUFBVXJDLE1BQVEsU0FBVWdhLEdBQ3RDLE9BQU9vbUIsR0FBa0I3dkIsRUFBS2doQixNQUFPMXhCLEtBQUswL0IsV0FBWXZsQixJQUUxRHNsQixFQUFjL04sTUFBUSxJQUFJK04sRUFBYyxJQUFJOU4sR0FBYyxPQUNuRDhOLEVBbkl1QixHQXFJbEMsU0FBU2MsR0FBa0J2dUIsRUFBY3d1QixFQUFXcm1CLEdBQ2hELEdBQXVCLE1BQW5CcW1CLEVBQVVqaEMsTUFFVixPQUFPNGEsRUFBS3NDLFlBQVl6SyxFQUFjd3VCLEVBQVVqaEMsT0FHaEQsSUFBSWtoQyxFQUFrQixLQWdCdEIsT0FmQUQsRUFBVTNRLFNBQVMzUSxrQkFBaUIsU0FBVThRLEVBQVUxTixHQUNuQyxjQUFiME4sSUFHQSxRQUEyQixPQUFwQjFOLEVBQVUvaUIsTUFBZ0IsNkNBQ2pDa2hDLEVBQWtCbmUsRUFBVS9pQixPQUc1QjRhLEVBQU9vbUIsR0FBa0J2dUIsRUFBYUosTUFBTW9lLEdBQVcxTixFQUFXbkksTUFJckVBLEVBQUtnQyxTQUFTbkssR0FBY0QsV0FBaUMsT0FBcEIwdUIsSUFDMUN0bUIsRUFBT0EsRUFBS3NDLFlBQVl6SyxFQUFhSixNQUFNLGFBQWM2dUIsSUFFdER0bUIsRUEyQmYsSUFBSXVtQixHQUEyQixXQUMzQixTQUFTQSxJQVFMMWdDLEtBQUsyZ0MsZUFBaUJsQixHQUFjL04sTUFTcEMxeEIsS0FBSzRnQyxXQUFhLEdBQ2xCNWdDLEtBQUs2Z0MsY0FBZ0IsRUEwYnpCLE9BbGJBSCxFQUFVbCtCLFVBQVVzK0IsWUFBYyxTQUFVOXRCLEdBQ3hDLE9BQU8sSUFBSSt0QixHQUFhL3RCLEVBQU1oVCxPQVVsQzBnQyxFQUFVbCtCLFVBQVV3K0IsYUFBZSxTQUFVaHVCLEVBQU1rVSxFQUFNK1osRUFBU0MsSUFDOUQsUUFBT0QsRUFBVWpoQyxLQUFLNmdDLGFBQWMscURBQ3BCeGdDLElBQVo2Z0MsSUFDQUEsR0FBVSxHQUVkbGhDLEtBQUs0Z0MsV0FBV243QixLQUFLLENBQ2pCdU4sS0FBTUEsRUFDTmtVLEtBQU1BLEVBQ04rWixRQUFTQSxFQUNUQyxRQUFTQSxJQUVUQSxJQUNBbGhDLEtBQUsyZ0MsZUFBaUIzZ0MsS0FBSzJnQyxlQUFlaEIsU0FBUzNzQixFQUFNa1UsSUFFN0RsbkIsS0FBSzZnQyxhQUFlSSxHQVN4QlAsRUFBVWwrQixVQUFVMitCLFNBQVcsU0FBVW51QixFQUFNMG5CLEVBQWlCdUcsSUFDNUQsUUFBT0EsRUFBVWpoQyxLQUFLNmdDLGFBQWMsZ0RBQ3BDN2dDLEtBQUs0Z0MsV0FBV243QixLQUFLLENBQ2pCdU4sS0FBTUEsRUFDTjZjLFNBQVU2SyxFQUNWdUcsUUFBU0EsRUFDVEMsU0FBUyxJQUVibGhDLEtBQUsyZ0MsZUFBaUIzZ0MsS0FBSzJnQyxlQUFlYixVQUFVOXNCLEVBQU0wbkIsR0FDMUQxNkIsS0FBSzZnQyxhQUFlSSxHQU14QlAsRUFBVWwrQixVQUFVNCtCLFNBQVcsU0FBVUgsR0FDckMsSUFBSyxJQUFJbjFCLEVBQUksRUFBR0EsRUFBSTlMLEtBQUs0Z0MsV0FBV242QixPQUFRcUYsSUFBSyxDQUM3QyxJQUFJdTFCLEVBQVNyaEMsS0FBSzRnQyxXQUFXOTBCLEdBQzdCLEdBQUl1MUIsRUFBT0osVUFBWUEsRUFDbkIsT0FBT0ksRUFHZixPQUFPLE1BVVhYLEVBQVVsK0IsVUFBVXk5QixZQUFjLFNBQVVnQixHQUt4QyxJQUFJOS9CLEVBQVFuQixLQUNSOGtCLEVBQU05a0IsS0FBSzRnQyxXQUFXVSxXQUFVLFNBQVV2eUIsR0FDMUMsT0FBT0EsRUFBRWt5QixVQUFZQSxNQUV6QixRQUFPbmMsR0FBTyxFQUFHLGdEQUNqQixJQUFJeWMsRUFBZ0J2aEMsS0FBSzRnQyxXQUFXOWIsR0FDcEM5a0IsS0FBSzRnQyxXQUFXWSxPQUFPMWMsRUFBSyxHQUk1QixJQUhBLElBQUkyYyxFQUF5QkYsRUFBY0wsUUFDdkNRLEdBQXNDLEVBQ3RDNTFCLEVBQUk5TCxLQUFLNGdDLFdBQVduNkIsT0FBUyxFQUMxQmc3QixHQUEwQjMxQixHQUFLLEdBQUcsQ0FDckMsSUFBSTYxQixFQUFlM2hDLEtBQUs0Z0MsV0FBVzkwQixHQUMvQjYxQixFQUFhVCxVQUNUcDFCLEdBQUtnWixHQUNMOWtCLEtBQUs0aEMsb0JBQW9CRCxFQUFjSixFQUFjdnVCLE1BRXJEeXVCLEdBQXlCLEVBRXBCRixFQUFjdnVCLEtBQUtGLFNBQVM2dUIsRUFBYTN1QixRQUU5QzB1QixHQUFzQyxJQUc5QzUxQixJQUVKLFFBQUsyMUIsSUFHSUMsR0FFTDFoQyxLQUFLNmhDLGNBQ0UsSUFJSE4sRUFBY3JhLEtBQ2RsbkIsS0FBSzJnQyxlQUFpQjNnQyxLQUFLMmdDLGVBQWVWLFlBQVlzQixFQUFjdnVCLE1BSXBFL0UsRUFEZXN6QixFQUFjMVIsVUFDZCxTQUFVM1QsR0FDckIvYSxFQUFNdy9CLGVBQWlCeC9CLEVBQU13L0IsZUFBZVYsWUFBWXNCLEVBQWN2dUIsS0FBS3BCLE1BQU1zSyxRQUdsRixLQVVmd2tCLEVBQVVsK0IsVUFBVXMvQixxQkFBdUIsU0FBVTl1QixHQUNqRCxPQUFPaFQsS0FBSzJnQyxlQUFlUixnQkFBZ0JudEIsSUFZL0MwdEIsRUFBVWwrQixVQUFVaXNCLHVCQUF5QixTQUFVc1QsRUFBVXZHLEVBQXFCd0csRUFBbUJDLEdBQ3JHLEdBQUtELEdBQXNCQyxFQXFCdEIsQ0FDRCxJQUFJeEosRUFBUXo0QixLQUFLMmdDLGVBQWVOLG1CQUFtQjBCLEdBQ25ELElBQUtFLEdBQXVCeEosRUFBTTFtQixVQUM5QixPQUFPeXBCLEVBSVAsR0FBS3lHLEdBQ3NCLE1BQXZCekcsR0FDQy9DLEVBQU15SCxpQkFBaUJ4dkIsRUFBS2doQixPQUc1QixDQUNELElBTUl3USxFQUFjeEIsRUFBVXlCLFdBQVduaUMsS0FBSzRnQyxZQU4vQixTQUFVd0IsR0FDbkIsT0FBU0EsRUFBTWxCLFNBQVdlLE1BQ3BCRCxLQUNJQSxFQUFrQnI2QixRQUFReTZCLEVBQU1uQixZQUNyQ21CLEVBQU1wdkIsS0FBS0YsU0FBU2l2QixJQUFhQSxFQUFTanZCLFNBQVNzdkIsRUFBTXB2QixTQUVGK3VCLEdBRWhFLE9BRElNLEVBQWU3RyxHQUF1QnRYLEdBQWF0VixXQUNoRHN6QixFQUFZL2hDLE1BQU1raUMsR0FYekIsT0FBTyxLQTlCZixJQUFJL0IsRUFBZ0J0Z0MsS0FBSzJnQyxlQUFlUixnQkFBZ0I0QixHQUN4RCxHQUFxQixNQUFqQnpCLEVBQ0EsT0FBT0EsRUFHUCxJQUFJZ0MsRUFBV3RpQyxLQUFLMmdDLGVBQWVOLG1CQUFtQjBCLEdBQ3RELEdBQUlPLEVBQVN2d0IsVUFDVCxPQUFPeXBCLEVBRU4sR0FBMkIsTUFBdkJBLEdBQ0o4RyxFQUFTcEMsaUJBQWlCeHZCLEVBQUtnaEIsT0FJL0IsQ0FDRCxJQUFJMlEsRUFBZTdHLEdBQXVCdFgsR0FBYXRWLFdBQ3ZELE9BQU8wekIsRUFBU25pQyxNQUFNa2lDLEdBSnRCLE9BQU8sTUEwQ3ZCM0IsRUFBVWwrQixVQUFVbTNCLDBCQUE0QixTQUFVb0ksRUFBVVEsR0FDaEUsSUFBSTlJLEVBQW1CdlYsR0FBYXRWLFdBQ2hDNHpCLEVBQWN4aUMsS0FBSzJnQyxlQUFlUixnQkFBZ0I0QixHQUN0RCxHQUFJUyxFQU9BLE9BTktBLEVBQVkvbUIsY0FFYittQixFQUFZNWxCLGFBQWFpQixJQUFnQixTQUFVM0IsRUFBVzJWLEdBQzFENEgsRUFBbUJBLEVBQWlCbGQscUJBQXFCTCxFQUFXMlYsTUFHckU0SCxFQUVOLEdBQUk4SSxFQUF3QixDQUc3QixJQUFJRSxFQUFVemlDLEtBQUsyZ0MsZUFBZU4sbUJBQW1CMEIsR0FXckQsT0FWQVEsRUFBdUIzbEIsYUFBYWlCLElBQWdCLFNBQVUzQixFQUFXSSxHQUNyRSxJQUFJbkMsRUFBT3NvQixFQUNOcEMsbUJBQW1CLElBQUkzdkIsRUFBS3dMLElBQzVCL2IsTUFBTW1jLEdBQ1htZCxFQUFtQkEsRUFBaUJsZCxxQkFBcUJMLEVBQVcvQixNQUd4RXNvQixFQUFRckMsc0JBQXNCdFksU0FBUSxTQUFVOUYsR0FDNUN5WCxFQUFtQkEsRUFBaUJsZCxxQkFBcUJ5RixFQUFVMWdCLEtBQU0wZ0IsRUFBVTdILFNBRWhGc2YsRUFTUCxPQUpZejVCLEtBQUsyZ0MsZUFBZU4sbUJBQW1CMEIsR0FDN0MzQixzQkFBc0J0WSxTQUFRLFNBQVU5RixHQUMxQ3lYLEVBQW1CQSxFQUFpQmxkLHFCQUFxQnlGLEVBQVUxZ0IsS0FBTTBnQixFQUFVN0gsU0FFaEZzZixHQXVCZmlILEVBQVVsK0IsVUFBVXUzQixtQ0FBcUMsU0FBVWdJLEVBQVVuYSxFQUFXOGEsRUFBbUJDLElBQ3ZHLFFBQU9ELEdBQXFCQyxFQUFvQiw2REFDaEQsSUFBSTN2QixFQUFPK3VCLEVBQVNud0IsTUFBTWdXLEdBQzFCLEdBQUk1bkIsS0FBSzJnQyxlQUFlVCxpQkFBaUJsdEIsR0FHckMsT0FBTyxLQUlQLElBQUk0dkIsRUFBYTVpQyxLQUFLMmdDLGVBQWVOLG1CQUFtQnJ0QixHQUN4RCxPQUFJNHZCLEVBQVc3d0IsVUFFSjR3QixFQUFtQnhtQixTQUFTeUwsR0FTNUJnYixFQUFXemlDLE1BQU13aUMsRUFBbUJ4bUIsU0FBU3lMLEtBYWhFOFksRUFBVWwrQixVQUFVNDBCLGtCQUFvQixTQUFVMkssRUFBVS9SLEVBQVUyUyxHQUNsRSxJQUFJM3ZCLEVBQU8rdUIsRUFBU253QixNQUFNb2UsR0FDdEJzUSxFQUFnQnRnQyxLQUFLMmdDLGVBQWVSLGdCQUFnQm50QixHQUN4RCxPQUFxQixNQUFqQnN0QixFQUNPQSxFQUdIcUMsRUFBbUIzTyxtQkFBbUJoRSxHQUNyQmh3QixLQUFLMmdDLGVBQWVOLG1CQUFtQnJ0QixHQUN0QzdTLE1BQU13aUMsRUFBbUIxTyxVQUFVaFksa0JBQWtCK1QsSUFHaEUsTUFTbkIwUSxFQUFVbCtCLFVBQVU4MkIsZUFBaUIsU0FBVXRtQixHQUMzQyxPQUFPaFQsS0FBSzJnQyxlQUFlUixnQkFBZ0JudEIsSUFNL0MwdEIsRUFBVWwrQixVQUFVKzBCLGlCQUFtQixTQUFVd0ssRUFBVTFLLEVBQW9CL1IsRUFBV3JHLEVBQU92UCxFQUFTbU4sR0FDdEcsSUFBSWdtQixFQUNBcEssRUFBUXo0QixLQUFLMmdDLGVBQWVOLG1CQUFtQjBCLEdBQy9DekIsRUFBZ0I3SCxFQUFNMEgsZ0JBQWdCenZCLEVBQUtnaEIsT0FDL0MsR0FBcUIsTUFBakI0TyxFQUNBdUMsRUFBWXZDLE1BRVgsSUFBMEIsTUFBdEJqSixFQUtMLE1BQU8sR0FKUHdMLEVBQVlwSyxFQUFNdDRCLE1BQU1rM0IsR0FPNUIsSUFEQXdMLEVBQVlBLEVBQVVsbEIsVUFBVWQsSUFDakI5SyxXQUFjOHdCLEVBQVVwbkIsYUFnQm5DLE1BQU8sR0FUUCxJQU5BLElBQUk2YixFQUFRLEdBQ1I1a0IsRUFBTW1LLEVBQU12QyxhQUNaaUosRUFBTzdULEVBQ0xtekIsRUFBVTdoQix1QkFBdUJzRSxFQUFXekksR0FDNUNnbUIsRUFBVTloQixnQkFBZ0J1RSxFQUFXekksR0FDdkM1YSxFQUFPc2hCLEVBQUsvRSxVQUNUdmMsR0FBUXExQixFQUFNN3dCLE9BQVN3WSxHQUNHLElBQXpCdk0sRUFBSXpRLEVBQU1xakIsSUFDVmdTLEVBQU03eEIsS0FBS3hELEdBRWZBLEVBQU9zaEIsRUFBSy9FLFVBRWhCLE9BQU84WSxHQU1mb0osRUFBVWwrQixVQUFVby9CLG9CQUFzQixTQUFVa0IsRUFBYTl2QixHQUM3RCxHQUFJOHZCLEVBQVk1YixLQUNaLE9BQU80YixFQUFZOXZCLEtBQUtGLFNBQVNFLEdBR2pDLElBQUssSUFBSWtKLEtBQWE0bUIsRUFBWWpULFNBQzlCLEdBQUlpVCxFQUFZalQsU0FBUzNoQixlQUFlZ08sSUFDcEM0bUIsRUFBWTl2QixLQUFLcEIsTUFBTXNLLEdBQVdwSixTQUFTRSxHQUMzQyxPQUFPLEVBR2YsT0FBTyxHQU1mMHRCLEVBQVVsK0IsVUFBVXEvQixXQUFhLFdBQzdCN2hDLEtBQUsyZ0MsZUFBaUJELEVBQVV5QixXQUFXbmlDLEtBQUs0Z0MsV0FBWUYsRUFBVXFDLGVBQWdCcnlCLEVBQUtnaEIsT0FDdkYxeEIsS0FBSzRnQyxXQUFXbjZCLE9BQVMsRUFDekJ6RyxLQUFLNmdDLGFBQWU3Z0MsS0FBSzRnQyxXQUFXNWdDLEtBQUs0Z0MsV0FBV242QixPQUFTLEdBQUd3NkIsUUFHaEVqaEMsS0FBSzZnQyxjQUFnQixHQU03QkgsRUFBVXFDLGVBQWlCLFNBQVVYLEdBQ2pDLE9BQU9BLEVBQU1sQixTQU1qQlIsRUFBVXlCLFdBQWEsU0FBVWEsRUFBUXg3QixFQUFReTdCLEdBRTdDLElBREEsSUFBSUMsRUFBZ0J6RCxHQUFjL04sTUFDekI1bEIsRUFBSSxFQUFHQSxFQUFJazNCLEVBQU92OEIsU0FBVXFGLEVBQUcsQ0FDcEMsSUFBSXMyQixFQUFRWSxFQUFPbDNCLEdBSW5CLEdBQUl0RSxFQUFPNDZCLEdBQVEsQ0FDZixJQUFJeEgsRUFBWXdILEVBQU1wdkIsS0FDbEJoQixPQUFlLEVBQ25CLEdBQUlvd0IsRUFBTWxiLEtBQ0YrYixFQUFTbndCLFNBQVM4bkIsSUFDbEI1b0IsRUFBZXRCLEVBQUtzQixhQUFhaXhCLEVBQVVySSxHQUMzQ3NJLEVBQWdCQSxFQUFjdkQsU0FBUzN0QixFQUFjb3dCLEVBQU1sYixPQUV0RDBULEVBQVU5bkIsU0FBU213QixLQUN4Qmp4QixFQUFldEIsRUFBS3NCLGFBQWE0b0IsRUFBV3FJLEdBQzVDQyxFQUFnQkEsRUFBY3ZELFNBQVNqdkIsRUFBS2doQixNQUFPMFEsRUFBTWxiLEtBQUsvSyxTQUFTbkssU0FJMUUsS0FBSW93QixFQUFNdlMsU0FzQlgsTUFBTSxRQUFlLDhDQXJCckIsR0FBSW9ULEVBQVNud0IsU0FBUzhuQixHQUNsQjVvQixFQUFldEIsRUFBS3NCLGFBQWFpeEIsRUFBVXJJLEdBQzNDc0ksRUFBZ0JBLEVBQWNwRCxVQUFVOXRCLEVBQWNvd0IsRUFBTXZTLGVBRTNELEdBQUkrSyxFQUFVOW5CLFNBQVNtd0IsR0FFeEIsSUFEQWp4QixFQUFldEIsRUFBS3NCLGFBQWE0b0IsRUFBV3FJLElBQzNCbHhCLFVBQ2JteEIsRUFBZ0JBLEVBQWNwRCxVQUFVcHZCLEVBQUtnaEIsTUFBTzBRLEVBQU12UyxjQUV6RCxDQUNELElBQUlqZSxHQUFRLFFBQVF3d0IsRUFBTXZTLFNBQVU3ZCxFQUFhZixZQUNqRCxHQUFJVyxFQUFPLENBRVAsSUFBSXV4QixFQUFXdnhCLEVBQU11SyxTQUFTbkssRUFBYWIsWUFDM0MreEIsRUFBZ0JBLEVBQWN2RCxTQUFTanZCLEVBQUtnaEIsTUFBT3lSLE9BVzNFLE9BQU9ELEdBRUp4QyxFQTdjbUIsR0FxZDFCSyxHQUE4QixXQUs5QixTQUFTQSxFQUFhL3RCLEVBQU13dEIsR0FDeEJ4Z0MsS0FBS29qQyxVQUFZcHdCLEVBQ2pCaFQsS0FBSzAvQixXQUFhYyxFQTRGdEIsT0FoRkFPLEVBQWF2K0IsVUFBVWlzQix1QkFBeUIsU0FBVStNLEVBQXFCd0csRUFBbUJDLEdBQzlGLE9BQU9qaUMsS0FBSzAvQixXQUFXalIsdUJBQXVCenVCLEtBQUtvakMsVUFBVzVILEVBQXFCd0csRUFBbUJDLElBUzFHbEIsRUFBYXYrQixVQUFVbTNCLDBCQUE0QixTQUFVNEksR0FDekQsT0FBT3ZpQyxLQUFLMC9CLFdBQVcvRiwwQkFBMEIzNUIsS0FBS29qQyxVQUFXYixJQXFCckV4QixFQUFhditCLFVBQVV1M0IsbUNBQXFDLFNBQVUvbUIsRUFBTTB2QixFQUFtQkMsR0FDM0YsT0FBTzNpQyxLQUFLMC9CLFdBQVczRixtQ0FBbUMvNUIsS0FBS29qQyxVQUFXcHdCLEVBQU0wdkIsRUFBbUJDLElBVXZHNUIsRUFBYXYrQixVQUFVODJCLGVBQWlCLFNBQVV0bUIsR0FDOUMsT0FBT2hULEtBQUswL0IsV0FBV3BHLGVBQWV0NUIsS0FBS29qQyxVQUFVeHhCLE1BQU1vQixLQWEvRCt0QixFQUFhditCLFVBQVUrMEIsaUJBQW1CLFNBQVVGLEVBQW9CL1IsRUFBV3JHLEVBQU92UCxFQUFTbU4sR0FDL0YsT0FBTzdjLEtBQUswL0IsV0FBV25JLGlCQUFpQnYzQixLQUFLb2pDLFVBQVcvTCxFQUFvQi9SLEVBQVdyRyxFQUFPdlAsRUFBU21OLElBVTNHa2tCLEVBQWF2K0IsVUFBVTQwQixrQkFBb0IsU0FBVXBILEVBQVVxVCxHQUMzRCxPQUFPcmpDLEtBQUswL0IsV0FBV3RJLGtCQUFrQnAzQixLQUFLb2pDLFVBQVdwVCxFQUFVcVQsSUFRdkV0QyxFQUFhditCLFVBQVVvUCxNQUFRLFNBQVVzSyxHQUNyQyxPQUFPLElBQUk2a0IsRUFBYS9nQyxLQUFLb2pDLFVBQVV4eEIsTUFBTXNLLEdBQVlsYyxLQUFLMC9CLGFBRTNEcUIsRUFuR3NCLEdBNEk3QnVDLEdBQTBCLFdBSzFCLFNBQVNBLEVBQVNDLEdBQ2R2akMsS0FBS3VqQyxnQkFBa0JBLEVBSXZCdmpDLEtBQUt3akMsZUFBaUI3UixHQUFjRCxNQUlwQzF4QixLQUFLeWpDLGtCQUFvQixJQUFJL0MsR0FDN0IxZ0MsS0FBSzBqQyxjQUFnQixJQUFJaC9CLElBQ3pCMUUsS0FBSzJqQyxjQUFnQixJQUFJai9CLElBb2lCN0IsT0E3aEJBNCtCLEVBQVM5Z0MsVUFBVW9oQyxtQkFBcUIsU0FBVTV3QixFQUFNNndCLEVBQVM1QyxFQUFTQyxHQUd0RSxPQURBbGhDLEtBQUt5akMsa0JBQWtCekMsYUFBYWh1QixFQUFNNndCLEVBQVM1QyxFQUFTQyxHQUN2REEsRUFJTWxoQyxLQUFLOGpDLDRCQUE0QixJQUFJeFEsR0FBVTNDLEdBQWdCSyxLQUFNaGUsRUFBTTZ3QixJQUgzRSxJQVdmUCxFQUFTOWdDLFVBQVV1aEMsZUFBaUIsU0FBVS93QixFQUFNMG5CLEVBQWlCdUcsR0FFakVqaEMsS0FBS3lqQyxrQkFBa0J0QyxTQUFTbnVCLEVBQU0wbkIsRUFBaUJ1RyxHQUN2RCxJQUFJK0MsRUFBYXJTLEdBQWNDLFdBQVc4SSxHQUMxQyxPQUFPMTZCLEtBQUs4akMsNEJBQTRCLElBQUl0USxHQUFNN0MsR0FBZ0JLLEtBQU1oZSxFQUFNZ3hCLEtBUWxGVixFQUFTOWdDLFVBQVVvMkIsYUFBZSxTQUFVcUksRUFBUzVQLFFBQ2xDLElBQVhBLElBQXFCQSxHQUFTLEdBQ2xDLElBQUkrUSxFQUFRcGlDLEtBQUt5akMsa0JBQWtCckMsU0FBU0gsR0FFNUMsR0FEdUJqaEMsS0FBS3lqQyxrQkFBa0J4RCxZQUFZZ0IsR0FJckQsQ0FDRCxJQUFJZ0QsRUFBaUJ0UyxHQUFjRCxNQVVuQyxPQVRrQixNQUFkMFEsRUFBTWxiLEtBRU4rYyxFQUFpQkEsRUFBZXRoQyxJQUFJK04sRUFBS2doQixPQUFPLEdBR2hEempCLEVBQUttMEIsRUFBTXZTLFVBQVUsU0FBVXhlLEVBQVk4SSxHQUN2QzhwQixFQUFpQkEsRUFBZXRoQyxJQUFJLElBQUkrTixFQUFLVyxHQUFhOEksTUFHM0RuYSxLQUFLOGpDLDRCQUE0QixJQUFJM1MsR0FBYWlSLEVBQU1wdkIsS0FBTWl4QixFQUFnQjVTLElBYnJGLE1BQU8sSUFxQmZpUyxFQUFTOWdDLFVBQVUwaEMscUJBQXVCLFNBQVVseEIsRUFBTTZ3QixHQUN0RCxPQUFPN2pDLEtBQUs4akMsNEJBQTRCLElBQUl4USxHQUFVM0MsR0FBZ0JNLE9BQVFqZSxFQUFNNndCLEtBT3hGUCxFQUFTOWdDLFVBQVUyaEMsaUJBQW1CLFNBQVVueEIsRUFBTTBuQixHQUNsRCxJQUFJc0osRUFBYXJTLEdBQWNDLFdBQVc4SSxHQUMxQyxPQUFPMTZCLEtBQUs4akMsNEJBQTRCLElBQUl0USxHQUFNN0MsR0FBZ0JNLE9BQVFqZSxFQUFNZ3hCLEtBT3BGVixFQUFTOWdDLFVBQVU0aEMsb0JBQXNCLFNBQVVweEIsR0FDL0MsT0FBT2hULEtBQUs4akMsNEJBQTRCLElBQUkxUSxHQUFlekMsR0FBZ0JNLE9BQVFqZSxLQU92RnN3QixFQUFTOWdDLFVBQVU2aEMsMEJBQTRCLFNBQVVyeEIsRUFBTWtVLEVBQU1vZCxHQUNqRSxJQUFJQyxFQUFXdmtDLEtBQUt3a0MsZ0JBQWdCRixHQUNwQyxHQUFnQixNQUFaQyxFQUFrQixDQUNsQixJQUFJRSxFQUFJbkIsRUFBU29CLGVBQWVILEdBQzVCSSxFQUFZRixFQUFFenhCLEtBQU04ZCxFQUFVMlQsRUFBRTNULFFBQ2hDOWUsRUFBZXRCLEVBQUtzQixhQUFhMnlCLEVBQVczeEIsR0FDNUNpYyxFQUFLLElBQUlxRSxHQUFVM0MsR0FBZ0JPLHFCQUFxQkosR0FBVTllLEVBQWNrVixHQUNwRixPQUFPbG5CLEtBQUs0a0Msc0JBQXNCRCxFQUFXMVYsR0FJN0MsTUFBTyxJQVFmcVUsRUFBUzlnQyxVQUFVcWlDLHNCQUF3QixTQUFVN3hCLEVBQU0wbkIsRUFBaUI0SixHQUN4RSxJQUFJQyxFQUFXdmtDLEtBQUt3a0MsZ0JBQWdCRixHQUNwQyxHQUFJQyxFQUFVLENBQ1YsSUFBSUUsRUFBSW5CLEVBQVNvQixlQUFlSCxHQUM1QkksRUFBWUYsRUFBRXp4QixLQUFNOGQsRUFBVTJULEVBQUUzVCxRQUNoQzllLEVBQWV0QixFQUFLc0IsYUFBYTJ5QixFQUFXM3hCLEdBQzVDZ3hCLEVBQWFyUyxHQUFjQyxXQUFXOEksR0FDdEN6TCxFQUFLLElBQUl1RSxHQUFNN0MsR0FBZ0JPLHFCQUFxQkosR0FBVTllLEVBQWNneUIsR0FDaEYsT0FBT2hrQyxLQUFLNGtDLHNCQUFzQkQsRUFBVzFWLEdBSTdDLE1BQU8sSUFRZnFVLEVBQVM5Z0MsVUFBVXNpQywwQkFBNEIsU0FBVTl4QixFQUFNc3hCLEdBQzNELElBQUlDLEVBQVd2a0MsS0FBS3drQyxnQkFBZ0JGLEdBQ3BDLEdBQUlDLEVBQVUsQ0FDVixJQUFJRSxFQUFJbkIsRUFBU29CLGVBQWVILEdBQzVCSSxFQUFZRixFQUFFenhCLEtBQU04ZCxFQUFVMlQsRUFBRTNULFFBQ2hDOWUsRUFBZXRCLEVBQUtzQixhQUFhMnlCLEVBQVczeEIsR0FDNUNpYyxFQUFLLElBQUltRSxHQUFlekMsR0FBZ0JPLHFCQUFxQkosR0FBVTllLEdBQzNFLE9BQU9oUyxLQUFLNGtDLHNCQUFzQkQsRUFBVzFWLEdBSTdDLE1BQU8sSUFRZnFVLEVBQVM5Z0MsVUFBVWc3QixxQkFBdUIsU0FBVXJVLEVBQU9mLEdBQ3ZELElBQUlwVixFQUFPbVcsRUFBTW5XLEtBQ2J3bUIsRUFBYyxLQUNkdUwsR0FBMkIsRUFHL0Iva0MsS0FBS3dqQyxlQUFlMVEsY0FBYzlmLEdBQU0sU0FBVWd5QixFQUFpQkMsR0FDL0QsSUFBSWp6QixFQUFldEIsRUFBS3NCLGFBQWFnekIsRUFBaUJoeUIsR0FDdER3bUIsRUFBY0EsR0FBZXlMLEVBQUc1SCx1QkFBdUJyckIsR0FDdkQreUIsRUFDSUEsR0FBNEJFLEVBQUdyRyxxQkFFdkMsSUFVSUwsRUFWQTJHLEVBQVlsbEMsS0FBS3dqQyxlQUFlL2dDLElBQUl1USxHQUNuQ2t5QixHQUtESCxFQUNJQSxHQUE0QkcsRUFBVXRHLGtCQUMxQ3BGLEVBQWNBLEdBQWUwTCxFQUFVN0gsdUJBQXVCM3NCLEVBQUtnaEIsU0FObkV3VCxFQUFZLElBQUkvRyxHQUNoQm4rQixLQUFLd2pDLGVBQWlCeGpDLEtBQUt3akMsZUFBZTdnQyxJQUFJcVEsRUFBTWt5QixJQVFyQyxNQUFmMUwsRUFDQStFLEdBQXNCLEdBR3RCQSxHQUFzQixFQUN0Qi9FLEVBQWN0VixHQUFhdFYsV0FDYjVPLEtBQUt3akMsZUFBZS9SLFFBQVF6ZSxHQUNsQ21nQixjQUFhLFNBQVVqWCxFQUFXaXBCLEdBQ3RDLElBQUlqTixFQUFnQmlOLEVBQWU5SCx1QkFBdUIzc0IsRUFBS2doQixPQUMzRHdHLElBQ0FzQixFQUFjQSxFQUFZamQscUJBQXFCTCxFQUFXZ2MsUUFJdEUsSUFBSWtOLEVBQW9CRixFQUFVNUYsbUJBQW1CblcsR0FDckQsSUFBS2ljLElBQXNCamMsRUFBTUMsaUJBQWlCbVUsZUFBZ0IsQ0FFOUQsSUFBSWdILEVBQVdqQixFQUFTK0IsY0FBY2xjLElBQ3RDLFNBQVFucEIsS0FBSzJqQyxjQUFjeDlCLElBQUlvK0IsR0FBVywwQ0FDMUMsSUFBSUQsRUFBTWhCLEVBQVNnQyxtQkFDbkJ0bEMsS0FBSzJqQyxjQUFjaGhDLElBQUk0aEMsRUFBVUQsR0FDakN0a0MsS0FBSzBqQyxjQUFjL2dDLElBQUkyaEMsRUFBS0MsR0FFaEMsSUFBSXRNLEVBQWNqNEIsS0FBS3lqQyxrQkFBa0IzQyxZQUFZOXRCLEdBQ2pEZ3BCLEVBQVNrSixFQUFVMUgscUJBQXFCclUsRUFBT2YsRUFBbUI2UCxFQUFhdUIsRUFBYStFLEdBQ2hHLElBQUs2RyxJQUFzQkwsRUFBMEIsQ0FDakQsSUFBSXpHLEVBQTBCNEcsRUFBVTlGLGFBQWFqVyxHQUNyRDZTLEVBQVNBLEVBQU8rQixPQUFPLzlCLEtBQUt1bEMsZUFBZXBjLEVBQU9tVixJQUV0RCxPQUFPdEMsR0FZWHNILEVBQVM5Z0MsVUFBVWk3Qix3QkFBMEIsU0FBVXRVLEVBQU9mLEVBQW1Cc1YsR0FDN0UsSUFBSXY4QixFQUFRbkIsS0FFUmdULEVBQU9tVyxFQUFNblcsS0FDYnd5QixFQUFpQnhsQyxLQUFLd2pDLGVBQWUvZ0MsSUFBSXVRLEdBQ3pDMnFCLEVBQWUsR0FJbkIsR0FBSTZILElBQzZCLFlBQTVCcmMsRUFBTTRFLG1CQUNIeVgsRUFBZWxHLG1CQUFtQm5XLElBQVMsQ0FJL0MsSUFBSXNjLEVBQW1CRCxFQUFlL0gsd0JBQXdCdFUsRUFBT2YsRUFBbUJzVixHQUNwRjhILEVBQWV6ekIsWUFDZi9SLEtBQUt3akMsZUFBaUJ4akMsS0FBS3dqQyxlQUFlaDVCLE9BQU93SSxJQUVyRCxJQUFJMHJCLEVBQVUrRyxFQUFpQi9HLFFBQy9CZixFQUFlOEgsRUFBaUJ6SixPQU9oQyxJQUFJMEosR0FBbUIsSUFDbkJoSCxFQUFRNEMsV0FBVSxTQUFVblksR0FDeEIsT0FBT0EsRUFBTUMsaUJBQWlCbVUsa0JBRWxDb0ksRUFBVTNsQyxLQUFLd2pDLGVBQWU5USxXQUFXMWYsR0FBTSxTQUFVaEIsRUFBYzR6QixHQUN2RSxPQUFPQSxFQUFnQmhILHFCQUUzQixHQUFJOEcsSUFBb0JDLEVBQVMsQ0FDN0IsSUFBSWxVLEVBQVV6eEIsS0FBS3dqQyxlQUFlL1IsUUFBUXplLEdBRzFDLElBQUt5ZSxFQUFRMWYsVUFJVCxJQUZBLElBQUk4ekIsRUFBVzdsQyxLQUFLOGxDLGdDQUFnQ3JVLEdBRTNDM2xCLEVBQUksRUFBR0EsRUFBSSs1QixFQUFTcC9CLFNBQVVxRixFQUFHLENBQ3RDLElBQUl3eUIsRUFBT3VILEVBQVMvNUIsR0FBSWk2QixFQUFXekgsRUFBS2xCLFdBQ3BDNEksRUFBV2htQyxLQUFLaW1DLHVCQUF1QjNILEdBQzNDdCtCLEtBQUt1akMsZ0JBQWdCMkMsZUFBZTVDLEVBQVM2QyxtQkFBbUJKLEdBQVcvbEMsS0FBS29tQyxhQUFhTCxHQUFXQyxFQUFTSyxPQUFRTCxFQUFTaHRCLGNBT3pJMnNCLEdBQVdqSCxFQUFRajRCLE9BQVMsSUFBTWkzQixJQUcvQmdJLEVBR0ExbEMsS0FBS3VqQyxnQkFBZ0IrQyxjQUFjaEQsRUFBUzZDLG1CQUFtQmhkLEdBRDlDLE1BSWpCdVYsRUFBUTVXLFNBQVEsU0FBVXllLEdBQ3RCLElBQUlDLEVBQWNybEMsRUFBTXdpQyxjQUFjbGhDLElBQUk2Z0MsRUFBUytCLGNBQWNrQixJQUNqRXBsQyxFQUFNb2lDLGdCQUFnQitDLGNBQWNoRCxFQUFTNkMsbUJBQW1CSSxHQUFnQkMsT0FLNUZ4bUMsS0FBS3ltQyxZQUFZL0gsR0FFckIsT0FBT2YsR0FhWDJGLEVBQVM5Z0MsVUFBVWlzQix1QkFBeUIsU0FBVXpiLEVBQU1ndkIsR0FDeEQsSUFDSXhCLEVBQVl4Z0MsS0FBS3lqQyxrQkFDakJqSyxFQUFjeDVCLEtBQUt3akMsZUFBZTlRLFdBQVcxZixHQUFNLFNBQVV3ZixFQUFXMFMsR0FDeEUsSUFBSWx6QixFQUFldEIsRUFBS3NCLGFBQWF3Z0IsRUFBV3hmLEdBQzVDd21CLEVBQWMwTCxFQUFVN0gsdUJBQXVCcnJCLEdBQ25ELEdBQUl3bkIsRUFDQSxPQUFPQSxLQUdmLE9BQU9nSCxFQUFVL1IsdUJBQXVCemIsRUFBTXdtQixFQUFhd0ksR0FUbkMsSUFlNUJzQixFQUFTOWdDLFVBQVVzakMsZ0NBQWtDLFNBQVVyVSxHQUMzRCxPQUFPQSxFQUFRYSxNQUFLLFNBQVV0Z0IsRUFBYzAwQixFQUFxQkMsR0FDN0QsR0FBSUQsR0FBdUJBLEVBQW9COUgsa0JBRTNDLE1BQU8sQ0FEWThILEVBQW9CckgsbUJBS3ZDLElBQUl1SCxFQUFVLEdBT2QsT0FOSUYsSUFDQUUsRUFBVUYsRUFBb0IzSCxpQkFFbEM5d0IsRUFBSzA0QixHQUFVLFNBQVVFLEVBQU1DLEdBQzNCRixFQUFVQSxFQUFRN0ksT0FBTytJLE1BRXRCRixNQUluQnRELEVBQVM5Z0MsVUFBVWlrQyxZQUFjLFNBQVVNLEdBQ3ZDLElBQUssSUFBSWwwQixFQUFJLEVBQUdBLEVBQUlrMEIsRUFBUXRnQyxTQUFVb00sRUFBRyxDQUNyQyxJQUFJbTBCLEVBQWVELEVBQVFsMEIsR0FDM0IsSUFBS20wQixFQUFhNWQsaUJBQWlCbVUsZUFBZ0IsQ0FFL0MsSUFBSTBKLEVBQWtCM0QsRUFBUytCLGNBQWMyQixHQUN6Q0UsRUFBa0JsbkMsS0FBSzJqQyxjQUFjbGhDLElBQUl3a0MsR0FDN0NqbkMsS0FBSzJqQyxjQUFjNWdDLE9BQU9ra0MsR0FDMUJqbkMsS0FBSzBqQyxjQUFjM2dDLE9BQU9ta0MsTUFTdEM1RCxFQUFTNkMsbUJBQXFCLFNBQVVoZCxHQUNwQyxPQUFJQSxFQUFNQyxpQkFBaUJtVSxpQkFDdEJwVSxFQUFNQyxpQkFBaUIrZCxZQUlqQmhlLEVBQU1qQixTQUdOaUIsR0FRZm1hLEVBQVM5Z0MsVUFBVStpQyxlQUFpQixTQUFVcGMsRUFBT21WLEdBQ2pELElBQUl0ckIsRUFBT21XLEVBQU1uVyxLQUNic3hCLEVBQU10a0MsS0FBS29tQyxhQUFhamQsR0FDeEI2YyxFQUFXaG1DLEtBQUtpbUMsdUJBQXVCM0gsR0FDdkN0QyxFQUFTaDhCLEtBQUt1akMsZ0JBQWdCMkMsZUFBZTVDLEVBQVM2QyxtQkFBbUJoZCxHQUFRbWIsRUFBSzBCLEVBQVNLLE9BQVFMLEVBQVNodEIsWUFDaEh5WSxFQUFVenhCLEtBQUt3akMsZUFBZS9SLFFBQVF6ZSxHQUcxQyxHQUFJc3hCLEdBQ0EsU0FBUTdTLEVBQVFseUIsTUFBTXEvQixrQkFBbUIsMERBc0J6QyxJQWxCQSxJQUFJd0ksRUFBZ0IzVixFQUFRYSxNQUFLLFNBQVV0Z0IsRUFBYzAwQixFQUFxQkMsR0FDMUUsSUFBSzMwQixFQUFhRCxXQUNkMjBCLEdBQ0FBLEVBQW9COUgsa0JBQ3BCLE1BQU8sQ0FBQzhILEVBQW9Cckgsa0JBQWtCakMsWUFJOUMsSUFBSWlLLEVBQVksR0FPaEIsT0FOSVgsSUFDQVcsRUFBWUEsRUFBVXRKLE9BQU8ySSxFQUFvQjNILGdCQUFnQjU3QixLQUFJLFNBQVVtN0IsR0FBUSxPQUFPQSxFQUFLbEIsZ0JBRXZHbnZCLEVBQUswNEIsR0FBVSxTQUFVRSxFQUFNUyxHQUMzQkQsRUFBWUEsRUFBVXRKLE9BQU91SixNQUUxQkQsS0FHTnY3QixFQUFJLEVBQUdBLEVBQUlzN0IsRUFBYzNnQyxTQUFVcUYsRUFBRyxDQUMzQyxJQUFJeTdCLEVBQWNILEVBQWN0N0IsR0FDaEM5TCxLQUFLdWpDLGdCQUFnQitDLGNBQWNoRCxFQUFTNkMsbUJBQW1Cb0IsR0FBY3ZuQyxLQUFLb21DLGFBQWFtQixJQUd2RyxPQUFPdkwsR0FFWHNILEVBQVM5Z0MsVUFBVXlqQyx1QkFBeUIsU0FBVTNILEdBQ2xELElBQUluOUIsRUFBUW5CLEtBQ1JtcEIsRUFBUW1WLEVBQUtsQixXQUNia0gsRUFBTXRrQyxLQUFLb21DLGFBQWFqZCxHQUM1QixNQUFPLENBQ0hrZCxPQUFRLFdBRUosT0FEWS9ILEVBQUt6SixrQkFBb0IzUSxHQUFhdFYsWUFDckNxTyxRQUVqQmpFLFdBQVksU0FBVXd1QixHQUNsQixHQUFlLE9BQVhBLEVBQ0EsT0FBSWxELEVBQ09uakMsRUFBTTJqQywwQkFBMEIzYixFQUFNblcsS0FBTXN4QixHQUc1Q25qQyxFQUFNaWpDLG9CQUFvQmpiLEVBQU1uVyxNQU0zQyxJQUFJeFQsRUF0dVFDLFNBQVVpb0MsRUFBTXRlLEdBQ3JDLElBQUl1ZSxFQUFTLGdCQUNBLFlBQVRELEVBQ0FDLEVBQ0ksMEZBR1Usc0JBQVRELEVBQ0xDLEVBQVMsNkRBRUssZ0JBQVRELElBQ0xDLEVBQVMsOEJBRWIsSUFBSWxvQyxFQUFRLElBQUl1SixNQUFNMCtCLEVBQU8sT0FBU3RlLEVBQU1uVyxLQUFLdkksV0FBYSxLQUFPaTlCLEdBR3JFLE9BREFsb0MsRUFBTWlvQyxLQUFPQSxFQUFLRSxjQUNYbm9DLEVBc3RRcUJvb0MsQ0FBbUJKLEVBQVFyZSxHQUN2QyxPQUFPaG9CLEVBQU1zOEIsd0JBQXdCdFUsRUFDZixLQUFNM3BCLE1BUTVDOGpDLEVBQVMrQixjQUFnQixTQUFVbGMsR0FDL0IsT0FBT0EsRUFBTW5XLEtBQUt2SSxXQUFhLElBQU0wZSxFQUFNNEUsbUJBSy9DdVYsRUFBU29CLGVBQWlCLFNBQVVILEdBQ2hDLElBQUlzRCxFQUFhdEQsRUFBUzU4QixRQUFRLEtBRWxDLE9BREEsU0FBdUIsSUFBaEJrZ0MsR0FBcUJBLEVBQWF0RCxFQUFTOTlCLE9BQVMsRUFBRyxpQkFDdkQsQ0FDSHFxQixRQUFTeVQsRUFBU3owQixPQUFPKzNCLEVBQWEsR0FDdEM3MEIsS0FBTSxJQUFJdEMsRUFBSzZ6QixFQUFTejBCLE9BQU8sRUFBRyszQixNQU0xQ3ZFLEVBQVM5Z0MsVUFBVWdpQyxnQkFBa0IsU0FBVUYsR0FDM0MsT0FBT3RrQyxLQUFLMGpDLGNBQWNqaEMsSUFBSTZoQyxJQUtsQ2hCLEVBQVM5Z0MsVUFBVTRqQyxhQUFlLFNBQVVqZCxHQUN4QyxJQUFJb2IsRUFBV2pCLEVBQVMrQixjQUFjbGMsR0FDdEMsT0FBT25wQixLQUFLMmpDLGNBQWNsaEMsSUFBSThoQyxJQUtsQ2pCLEVBQVNnQyxpQkFBbUIsV0FDeEIsT0FBT2hDLEVBQVN3RSxpQkFLcEJ4RSxFQUFTOWdDLFVBQVVvaUMsc0JBQXdCLFNBQVVELEVBQVczTSxHQUM1RCxJQUFJa04sRUFBWWxsQyxLQUFLd2pDLGVBQWUvZ0MsSUFBSWtpQyxJQUN4QyxRQUFPTyxFQUFXLHdEQUNsQixJQUFJak4sRUFBY2o0QixLQUFLeWpDLGtCQUFrQjNDLFlBQVk2RCxHQUNyRCxPQUFPTyxFQUFVcE4sZUFBZUUsRUFBV0MsRUFDMUIsT0FlckJxTCxFQUFTOWdDLFVBQVVzaEMsNEJBQThCLFNBQVU5TCxHQUN2RCxPQUFPaDRCLEtBQUsrbkMsc0JBQXNCL1AsRUFBV2g0QixLQUFLd2pDLGVBQ2pDLEtBQU14akMsS0FBS3lqQyxrQkFBa0IzQyxZQUFZcHdCLEVBQUtnaEIsU0FLbkU0UixFQUFTOWdDLFVBQVV1bEMsc0JBQXdCLFNBQVUvUCxFQUFXZ1EsRUFBZXhPLEVBQWF2QixHQUN4RixHQUFJRCxFQUFVaGxCLEtBQUtqQixVQUNmLE9BQU8vUixLQUFLaW9DLGlDQUFpQ2pRLEVBQVdnUSxFQUFleE8sRUFBYXZCLEdBR3BGLElBQUlpTixFQUFZOEMsRUFBY3ZsQyxJQUFJaU8sRUFBS2doQixPQUVwQixNQUFmOEgsR0FBb0MsTUFBYjBMLElBQ3ZCMUwsRUFBYzBMLEVBQVU3SCx1QkFBdUIzc0IsRUFBS2doQixRQUV4RCxJQUFJc0ssRUFBUyxHQUNUOWYsRUFBWThiLEVBQVVobEIsS0FBSy9CLFdBQzNCaTNCLEVBQWlCbFEsRUFBVXhHLGtCQUFrQnRWLEdBQzdDb0csRUFBWTBsQixFQUFjblksU0FBU3B0QixJQUFJeVosR0FDM0MsR0FBSW9HLEdBQWE0bEIsRUFBZ0IsQ0FDN0IsSUFBSUMsRUFBbUIzTyxFQUNqQkEsRUFBWXZkLGtCQUFrQkMsR0FDOUIsS0FDRmtzQixFQUFtQm5RLEVBQVlybUIsTUFBTXNLLEdBQ3pDOGYsRUFBU0EsRUFBTytCLE9BQU8vOUIsS0FBSytuQyxzQkFBc0JHLEVBQWdCNWxCLEVBQVc2bEIsRUFBa0JDLElBS25HLE9BSElsRCxJQUNBbEosRUFBU0EsRUFBTytCLE9BQU9tSCxFQUFVcE4sZUFBZUUsRUFBV0MsRUFBYXVCLEtBRXJFd0MsR0FNZnNILEVBQVM5Z0MsVUFBVXlsQyxpQ0FBbUMsU0FBVWpRLEVBQVdnUSxFQUFleE8sRUFBYXZCLEdBQ25HLElBQUk5MkIsRUFBUW5CLEtBQ1JrbEMsRUFBWThDLEVBQWN2bEMsSUFBSWlPLEVBQUtnaEIsT0FFcEIsTUFBZjhILEdBQW9DLE1BQWIwTCxJQUN2QjFMLEVBQWMwTCxFQUFVN0gsdUJBQXVCM3NCLEVBQUtnaEIsUUFFeEQsSUFBSXNLLEVBQVMsR0FjYixPQWJBZ00sRUFBY25ZLFNBQVMzUSxrQkFBaUIsU0FBVWhELEVBQVdvRyxHQUN6RCxJQUFJNmxCLEVBQW1CM08sRUFDakJBLEVBQVl2ZCxrQkFBa0JDLEdBQzlCLEtBQ0Zrc0IsRUFBbUJuUSxFQUFZcm1CLE1BQU1zSyxHQUNyQ2dzQixFQUFpQmxRLEVBQVV4RyxrQkFBa0J0VixHQUM3Q2dzQixJQUNBbE0sRUFBU0EsRUFBTytCLE9BQU81OEIsRUFBTThtQyxpQ0FBaUNDLEVBQWdCNWxCLEVBQVc2bEIsRUFBa0JDLFFBRy9HbEQsSUFDQWxKLEVBQVNBLEVBQU8rQixPQUFPbUgsRUFBVXBOLGVBQWVFLEVBQVdDLEVBQWF1QixLQUVyRXdDLEdBS1hzSCxFQUFTd0UsY0FBZ0IsRUFDbEJ4RSxFQXBqQmtCLEdBNGtCekIrRSxHQUFnQyxXQUNoQyxTQUFTQSxJQUNMcm9DLEtBQUtzb0MsVUFBWXBrQixHQUFhdFYsV0FRbEMsT0FOQXk1QixFQUFlN2xDLFVBQVV5eEIsUUFBVSxTQUFVamhCLEdBQ3pDLE9BQU9oVCxLQUFLc29DLFVBQVVuc0IsU0FBU25KLElBRW5DcTFCLEVBQWU3bEMsVUFBVStsQyxlQUFpQixTQUFVdjFCLEVBQU13MUIsR0FDdER4b0MsS0FBS3NvQyxVQUFZdG9DLEtBQUtzb0MsVUFBVTdyQixZQUFZekosRUFBTXcxQixJQUUvQ0gsRUFWd0IsR0FrQy9CSSxHQUFpQyxXQUNqQyxTQUFTQSxJQUNMem9DLEtBQUswb0MsVUFBWSxHQVlyQixPQVZBRCxFQUFnQmptQyxVQUFVbW1DLGlCQUFtQixTQUFVcm5DLEVBQU1zbkMsUUFDMUMsSUFBWEEsSUFBcUJBLEVBQVMsSUFDN0IsUUFBUzVvQyxLQUFLMG9DLFVBQVdwbkMsS0FDMUJ0QixLQUFLMG9DLFVBQVVwbkMsR0FBUSxHQUUzQnRCLEtBQUswb0MsVUFBVXBuQyxJQUFTc25DLEdBRTVCSCxFQUFnQmptQyxVQUFVQyxJQUFNLFdBQzVCLE9BQU8sUUFBU3pDLEtBQUswb0MsWUFFbEJELEVBZHlCLEdBaUNoQ0ksR0FBOEIsV0FDOUIsU0FBU0EsS0FrQlQsT0FoQkFBLEVBQWFDLGNBQWdCLFNBQVVyekIsR0FDbkMsSUFBSXN6QixFQUFhdHpCLEVBQVNoTCxXQUkxQixPQUhLekssS0FBS2dwQyxhQUFhRCxLQUNuQi9vQyxLQUFLZ3BDLGFBQWFELEdBQWMsSUFBSU4sSUFFakN6b0MsS0FBS2dwQyxhQUFhRCxJQUU3QkYsRUFBYUksb0JBQXNCLFNBQVV4ekIsRUFBVXl6QixHQUNuRCxJQUFJSCxFQUFhdHpCLEVBQVNoTCxXQUkxQixPQUhLekssS0FBS21wQyxXQUFXSixLQUNqQi9vQyxLQUFLbXBDLFdBQVdKLEdBQWNHLEtBRTNCbHBDLEtBQUttcEMsV0FBV0osSUFFM0JGLEVBQWFHLGFBQWUsR0FDNUJILEVBQWFNLFdBQWEsR0FDbkJOLEVBbkJzQixHQTRDN0JPLEdBQStCLFdBQy9CLFNBQVNBLEVBQWNDLEdBQ25CcnBDLEtBQUtxcEMsWUFBY0EsRUFDbkJycEMsS0FBS3NwQyxNQUFRLEtBYWpCLE9BWEFGLEVBQWM1bUMsVUFBVUMsSUFBTSxXQUMxQixJQUFJOG1DLEVBQVd2cEMsS0FBS3FwQyxZQUFZNW1DLE1BQzVCMnNCLEdBQVEsUUFBUyxHQUFJbWEsR0FPekIsT0FOSXZwQyxLQUFLc3BDLE9BQ0xyN0IsRUFBS2pPLEtBQUtzcEMsT0FBTyxTQUFVRSxFQUFNanFDLEdBQzdCNnZCLEVBQU1vYSxHQUFRcGEsRUFBTW9hLEdBQVFqcUMsS0FHcENTLEtBQUtzcEMsTUFBUUMsRUFDTm5hLEdBRUpnYSxFQWhCdUIsR0E2QzlCSyxHQUErQixXQUsvQixTQUFTQSxFQUFjQyxFQUFZQyxHQUMvQjNwQyxLQUFLMnBDLFFBQVVBLEVBQ2YzcEMsS0FBSzRwQyxlQUFpQixHQUN0QjVwQyxLQUFLNnBDLGVBQWlCLElBQUlULEdBQWNNLEdBQ3hDLElBQUlqNUIsRUFoQmUsSUFpQmYsSUFBZ0R2QixLQUFLK0ssU0FDekQxSixFQUFzQnZRLEtBQUs4cEMsYUFBYXBqQyxLQUFLMUcsTUFBT2tQLEtBQUtJLE1BQU1tQixJQXNCbkUsT0FwQkFnNUIsRUFBY2puQyxVQUFVdW5DLFlBQWMsU0FBVVAsR0FDNUN4cEMsS0FBSzRwQyxlQUFlSixJQUFRLEdBRWhDQyxFQUFjam5DLFVBQVVzbkMsYUFBZSxXQUNuQyxJQUFJM29DLEVBQVFuQixLQUNSZ3FDLEVBQVFocUMsS0FBSzZwQyxlQUFlcG5DLE1BQzVCd25DLEVBQWdCLEdBQ2hCQyxHQUFvQixFQUN4Qmo4QixFQUFLKzdCLEdBQU8sU0FBVVIsRUFBTWpxQyxHQUNwQkEsRUFBUSxJQUFLLFFBQVM0QixFQUFNeW9DLGVBQWdCSixLQUM1Q1MsRUFBY1QsR0FBUWpxQyxFQUN0QjJxQyxHQUFvQixNQUd4QkEsR0FDQWxxQyxLQUFLMnBDLFFBQVFRLFlBQVlGLEdBRzdCMTVCLEVBQXNCdlEsS0FBSzhwQyxhQUFhcGpDLEtBQUsxRyxNQUFPa1AsS0FBS0ksTUFBc0IsRUFBaEJKLEtBQUsrSyxTQW5DaEQsT0FxQ2pCd3ZCLEVBakN1QixHQWtFOUJXLEdBQTRCLFdBQzVCLFNBQVNBLElBS0xwcUMsS0FBS3FxQyxZQUFjLEdBTW5CcnFDLEtBQUtzcUMsZ0JBQWtCLEVBK0UzQixPQTFFQUYsRUFBVzVuQyxVQUFVK25DLFlBQWMsU0FBVUMsR0FHekMsSUFEQSxJQUFJQyxFQUFXLEtBQ04zK0IsRUFBSSxFQUFHQSxFQUFJMCtCLEVBQWMvakMsT0FBUXFGLElBQUssQ0FDM0MsSUFBSXlkLEVBQVlpaEIsRUFBYzErQixHQUMxQjQrQixFQUFZbmhCLEVBQVVqQixVQUNULE9BQWJtaUIsR0FBc0JDLEVBQVUvM0IsT0FBTzgzQixFQUFTbmlCLGFBQ2hEdG9CLEtBQUtxcUMsWUFBWTVrQyxLQUFLZ2xDLEdBQ3RCQSxFQUFXLE1BRUUsT0FBYkEsSUFDQUEsRUFBVyxJQUFJRSxHQUFVRCxJQUU3QkQsRUFBU0csSUFBSXJoQixHQUVia2hCLEdBQ0F6cUMsS0FBS3FxQyxZQUFZNWtDLEtBQUtnbEMsSUFZOUJMLEVBQVc1bkMsVUFBVXFvQyxrQkFBb0IsU0FBVTczQixFQUFNdzNCLEdBQ3JEeHFDLEtBQUt1cUMsWUFBWUMsR0FDakJ4cUMsS0FBSzhxQyxxQ0FBb0MsU0FBVUosR0FDL0MsT0FBT0EsRUFBVS8zQixPQUFPSyxPQVloQ28zQixFQUFXNW5DLFVBQVV1b0MsMEJBQTRCLFNBQVVDLEVBQWFSLEdBQ3BFeHFDLEtBQUt1cUMsWUFBWUMsR0FDakJ4cUMsS0FBSzhxQyxxQ0FBb0MsU0FBVUosR0FDL0MsT0FBT0EsRUFBVTUzQixTQUFTazRCLElBQWdCQSxFQUFZbDRCLFNBQVM0M0IsT0FPdkVOLEVBQVc1bkMsVUFBVXNvQyxvQ0FBc0MsU0FBVS9ZLEdBQ2pFL3hCLEtBQUtzcUMsa0JBRUwsSUFEQSxJQUFJVyxHQUFVLEVBQ0xuL0IsRUFBSSxFQUFHQSxFQUFJOUwsS0FBS3FxQyxZQUFZNWpDLE9BQVFxRixJQUFLLENBQzlDLElBQUlvL0IsRUFBWWxyQyxLQUFLcXFDLFlBQVl2K0IsR0FDN0JvL0IsSUFFSW5aLEVBRFltWixFQUFVNWlCLFlBRXRCdG9CLEtBQUtxcUMsWUFBWXYrQixHQUFHcS9CLFFBQ3BCbnJDLEtBQUtxcUMsWUFBWXYrQixHQUFLLE1BR3RCbS9CLEdBQVUsR0FJbEJBLElBQ0FqckMsS0FBS3FxQyxZQUFjLElBRXZCcnFDLEtBQUtzcUMsbUJBRUZGLEVBM0ZvQixHQWlHM0JPLEdBQTJCLFdBQzNCLFNBQVNBLEVBQVVsekIsR0FDZnpYLEtBQUt5WCxNQUFRQSxFQUtielgsS0FBS29yQyxRQUFVLEdBOEJuQixPQXpCQVQsRUFBVW5vQyxVQUFVb29DLElBQU0sU0FBVXJoQixHQUNoQ3ZwQixLQUFLb3JDLFFBQVEzbEMsS0FBSzhqQixJQUt0Qm9oQixFQUFVbm9DLFVBQVUyb0MsTUFBUSxXQUN4QixJQUFLLElBQUlyL0IsRUFBSSxFQUFHQSxFQUFJOUwsS0FBS29yQyxRQUFRM2tDLE9BQVFxRixJQUFLLENBQzFDLElBQUl5ZCxFQUFZdnBCLEtBQUtvckMsUUFBUXQvQixHQUM3QixHQUFrQixPQUFkeWQsRUFBb0IsQ0FDcEJ2cEIsS0FBS29yQyxRQUFRdC9CLEdBQUssS0FDbEIsSUFBSXUvQixFQUFVOWhCLEVBQVViLGlCQUNwQjduQixHQUNBdUQsRUFBSSxVQUFZbWxCLEVBQVU5ZSxZQUU5QjJGLEVBQWVpN0IsTUFPM0JWLEVBQVVub0MsVUFBVThsQixRQUFVLFdBQzFCLE9BQU90b0IsS0FBS3lYLE9BRVRrekIsRUFyQ21CLEdBNEQxQlcsR0FBOEIsV0FJOUIsU0FBU0EsRUFBYUMsR0FDbEJ2ckMsS0FBS3VyQyxlQUFpQkEsRUFDdEJ2ckMsS0FBS3dyQyxXQUFhLElBQ2xCLFFBQU9qaUMsTUFBTXdDLFFBQVF3L0IsSUFBbUJBLEVBQWU5a0MsT0FBUyxFQUFHLDhCQTZDdkUsT0F0Q0E2a0MsRUFBYTlvQyxVQUFVaXBDLFFBQVUsU0FBVXJ6QixHQUV2QyxJQURBLElBQUl4TSxFQUFVLEdBQ0xwRixFQUFLLEVBQUdBLEVBQUt0RyxVQUFVdUcsT0FBUUQsSUFDcENvRixFQUFRcEYsRUFBSyxHQUFLdEcsVUFBVXNHLEdBRWhDLEdBQUkrQyxNQUFNd0MsUUFBUS9MLEtBQUt3ckMsV0FBV3B6QixJQUc5QixJQURBLElBQUlzekIsR0FBWSxRQUFTMXJDLEtBQUt3ckMsV0FBV3B6QixJQUNoQ3RNLEVBQUksRUFBR0EsRUFBSTQvQixFQUFVamxDLE9BQVFxRixJQUNsQzQvQixFQUFVNS9CLEdBQUcrZixTQUFTMXJCLE1BQU11ckMsRUFBVTUvQixHQUFHaWdCLFFBQVNuZ0IsSUFJOUQwL0IsRUFBYTlvQyxVQUFVb3BCLEdBQUssU0FBVXhULEVBQVd5VCxFQUFVRSxHQUN2RC9yQixLQUFLMnJDLG1CQUFtQnZ6QixHQUN4QnBZLEtBQUt3ckMsV0FBV3B6QixHQUFhcFksS0FBS3dyQyxXQUFXcHpCLElBQWMsR0FDM0RwWSxLQUFLd3JDLFdBQVdwekIsR0FBVzNTLEtBQUssQ0FBRW9tQixTQUFVQSxFQUFVRSxRQUFTQSxJQUMvRCxJQUFJeEMsRUFBWXZwQixLQUFLNHJDLGdCQUFnQnh6QixHQUNqQ21SLEdBQ0FzQyxFQUFTMXJCLE1BQU00ckIsRUFBU3hDLElBR2hDK2hCLEVBQWE5b0MsVUFBVStwQixJQUFNLFNBQVVuVSxFQUFXeVQsRUFBVUUsR0FDeEQvckIsS0FBSzJyQyxtQkFBbUJ2ekIsR0FFeEIsSUFEQSxJQUFJc3pCLEVBQVkxckMsS0FBS3dyQyxXQUFXcHpCLElBQWMsR0FDckN0TSxFQUFJLEVBQUdBLEVBQUk0L0IsRUFBVWpsQyxPQUFRcUYsSUFDbEMsR0FBSTQvQixFQUFVNS9CLEdBQUcrZixXQUFhQSxLQUN4QkUsR0FBV0EsSUFBWTJmLEVBQVU1L0IsR0FBR2lnQixTQUV0QyxZQURBMmYsRUFBVWxLLE9BQU8xMUIsRUFBRyxJQUtoQ3cvQixFQUFhOW9DLFVBQVVtcEMsbUJBQXFCLFNBQVV2ekIsSUFDbEQsUUFBT3BZLEtBQUt1ckMsZUFBZXpiLE1BQUssU0FBVStiLEdBQ3RDLE9BQU9BLElBQU96ekIsS0FDZCxrQkFBb0JBLElBRXJCa3pCLEVBcERzQixHQTBFN0JRLEdBQW1DLFNBQVU5d0IsR0FFN0MsU0FBUzh3QixJQUNMLElBQ0lDLEVBQ0FDLEVBRkE3cUMsRUFBUTZaLEVBQU8zWSxLQUFLckMsS0FBTSxDQUFDLGFBQWVBLEtBcUM5QyxNQWxDd0Isb0JBQWJpc0MsZUFDOEIsSUFBOUJBLFNBQVNDLHdCQUNrQixJQUF2QkQsU0FBaUIsUUFFeEJELEVBQW1CLG1CQUNuQkQsRUFBUyxlQUU2QixJQUExQkUsU0FBb0IsV0FDaENELEVBQW1CLHNCQUNuQkQsRUFBUyxrQkFFNEIsSUFBekJFLFNBQW1CLFVBQy9CRCxFQUFtQixxQkFDbkJELEVBQVMsaUJBRWdDLElBQTdCRSxTQUF1QixlQUNuQ0QsRUFBbUIseUJBQ25CRCxFQUFTLGlCQU9qQjVxQyxFQUFNZ3JDLFVBQVcsRUFDYkgsR0FDQUMsU0FBU0MsaUJBQWlCRixHQUFrQixXQUN4QyxJQUFJOUssR0FBVytLLFNBQVNGLEdBQ3BCN0ssSUFBWS8vQixFQUFNZ3JDLFdBQ2xCaHJDLEVBQU1nckMsU0FBV2pMLEVBQ2pCLy9CLEVBQU1zcUMsUUFBUSxVQUFXdkssT0FFOUIsR0FFQS8vQixFQWFYLE9BcERBLFFBQVUycUMsRUFBbUI5d0IsR0F5QzdCOHdCLEVBQWtCTSxZQUFjLFdBQzVCLE9BQU8sSUFBSU4sR0FNZkEsRUFBa0J0cEMsVUFBVW9wQyxnQkFBa0IsU0FBVXh6QixHQUVwRCxPQURBLFFBQXFCLFlBQWRBLEVBQXlCLHVCQUF5QkEsR0FDbEQsQ0FBQ3BZLEtBQUttc0MsV0FFVkwsRUFyRDJCLENBc0RwQ1IsSUEyQkVlLEdBQStCLFNBQVVyeEIsR0FFekMsU0FBU3F4QixJQUNMLElBQUlsckMsRUFBUTZaLEVBQU8zWSxLQUFLckMsS0FBTSxDQUFDLFlBQWNBLEtBc0I3QyxPQXJCQW1CLEVBQU1tckMsU0FBVSxFQUtNLG9CQUFYdmhDLGFBQzRCLElBQTVCQSxPQUFPbWhDLG1CQUNiLFlBQ0RuaEMsT0FBT21oQyxpQkFBaUIsVUFBVSxXQUN6Qi9xQyxFQUFNbXJDLFVBQ1BuckMsRUFBTW1yQyxTQUFVLEVBQ2hCbnJDLEVBQU1zcUMsUUFBUSxVQUFVLE9BRTdCLEdBQ0gxZ0MsT0FBT21oQyxpQkFBaUIsV0FBVyxXQUMzQi9xQyxFQUFNbXJDLFVBQ05uckMsRUFBTW1yQyxTQUFVLEVBQ2hCbnJDLEVBQU1zcUMsUUFBUSxVQUFVLE9BRTdCLElBRUF0cUMsRUFtQlgsT0EzQ0EsUUFBVWtyQyxFQUFlcnhCLEdBMEJ6QnF4QixFQUFjRCxZQUFjLFdBQ3hCLE9BQU8sSUFBSUMsR0FNZkEsRUFBYzdwQyxVQUFVb3BDLGdCQUFrQixTQUFVeHpCLEdBRWhELE9BREEsUUFBcUIsV0FBZEEsRUFBd0IsdUJBQXlCQSxHQUNqRCxDQUFDcFksS0FBS3NzQyxVQUtqQkQsRUFBYzdwQyxVQUFVK3BDLGdCQUFrQixXQUN0QyxPQUFPdnNDLEtBQUtzc0MsU0FFVEQsRUE1Q3VCLENBNkNoQ2YsSUF1QkVrQixHQUFnQyxXQUloQyxTQUFTQSxFQUFlQyxHQUNwQnpzQyxLQUFLeXNDLFdBQWFBLEVBQ2xCenNDLEtBQUswc0MsaUJBQW1CLEdBQ3hCMXNDLEtBQUsyc0MsbUJBQXFCLEVBQzFCM3NDLEtBQUs0c0Msb0JBQXNCLEVBQzNCNXNDLEtBQUs2c0MsUUFBVSxLQWlEbkIsT0EvQ0FMLEVBQWVocUMsVUFBVXNxQyxXQUFhLFNBQVVDLEVBQWFsaEIsR0FDekQ3ckIsS0FBSzRzQyxtQkFBcUJHLEVBQzFCL3NDLEtBQUs2c0MsUUFBVWhoQixFQUNYN3JCLEtBQUs0c0MsbUJBQXFCNXNDLEtBQUsyc0MscUJBQy9CM3NDLEtBQUs2c0MsVUFDTDdzQyxLQUFLNnNDLFFBQVUsT0FVdkJMLEVBQWVocUMsVUFBVXdxQyxlQUFpQixTQUFVQyxFQUFZeGdDLEdBQzVELElBQUl0TCxFQUFRbkIsS0FDWkEsS0FBSzBzQyxpQkFBaUJPLEdBQWN4Z0MsRUF3QnBDLElBdkJBLElBQUl5Z0MsRUFBVSxXQUNWLElBQUlDLEVBQVlDLEVBQU9WLGlCQUFpQlUsRUFBT1QsMkJBQ3hDUyxFQUFPVixpQkFBaUJVLEVBQU9ULG9CQVF0QyxJQVBBLElBQUlVLEVBQVUsU0FBVXZoQyxHQUNoQnFoQyxFQUFVcmhDLElBQ1ZzRSxHQUFlLFdBQ1hqUCxFQUFNc3JDLFdBQVdVLEVBQVVyaEMsUUFJOUJBLEVBQUksRUFBR0EsRUFBSXFoQyxFQUFVMW1DLFNBQVVxRixFQUNwQ3VoQyxFQUFRdmhDLEdBRVosR0FBSXNoQyxFQUFPVCxxQkFBdUJTLEVBQU9SLG1CQUtyQyxPQUpJUSxFQUFPUCxVQUNQTyxFQUFPUCxVQUNQTyxFQUFPUCxRQUFVLE1BRWQsUUFFWE8sRUFBT1Qsc0JBRVBTLEVBQVNwdEMsS0FDTkEsS0FBSzBzQyxpQkFBaUIxc0MsS0FBSzJzQyxxQkFFZCxVQURGTyxRQUtmVixFQTFEd0IsR0E4RS9CYyxHQUFnQyxRQUNoQ0MsR0FBa0MsUUFxQ2xDQyxHQUF1QyxXQVV2QyxTQUFTQSxFQUFzQkMsRUFBUWg0QixFQUFVaTRCLEVBQWVDLEVBQW9CQyxHQUNoRjV0QyxLQUFLeXRDLE9BQVNBLEVBQ2R6dEMsS0FBS3lWLFNBQVdBLEVBQ2hCelYsS0FBSzB0QyxjQUFnQkEsRUFDckIxdEMsS0FBSzJ0QyxtQkFBcUJBLEVBQzFCM3RDLEtBQUs0dEMsY0FBZ0JBLEVBQ3JCNXRDLEtBQUs2dEMsVUFBWSxFQUNqQjd0QyxLQUFLOHRDLGNBQWdCLEVBQ3JCOXRDLEtBQUsrdEMsZ0JBQWlCLEVBQ3RCL3RDLEtBQUtndUMsS0FBTzNoQyxFQUFXb2hDLEdBQ3ZCenRDLEtBQUtpdUMsT0FBU3BGLEdBQWFDLGNBQWNyekIsR0FDekN6VixLQUFLa3VDLE1BQVEsU0FBVXA1QixHQUNuQixPQUFPVyxFQUFTWixjQUFjaEIsR0FBY2lCLElBbVBwRCxPQTNPQTA0QixFQUFzQmhyQyxVQUFVMnJDLEtBQU8sU0FBVUMsRUFBV0MsR0FDeEQsSUFBSWx0QyxFQUFRbkIsS0FDWkEsS0FBS3N1QyxjQUFnQixFQUNyQnR1QyxLQUFLdXVDLGNBQWdCRixFQUNyQnJ1QyxLQUFLd3VDLGdCQUFrQixJQUFJaEMsR0FBZTRCLEdBQzFDcHVDLEtBQUt5dUMsV0FBWSxFQUNqQnp1QyxLQUFLMHVDLHFCQUF1QnIrQixZQUFXLFdBQ25DbFAsRUFBTTZzQyxLQUFLLGdDQUVYN3NDLEVBQU13dEMsWUFDTnh0QyxFQUFNdXRDLHFCQUF1QixPQUU5QngvQixLQUFLSSxNQWpEUyxNQTEwU0MsU0FBVXhQLEdBQ2hDLElBQUksV0FBdUMsYUFBeEJtc0MsU0FBUzJDLFdBQ3hCOXVDLFFBRUMsQ0FHRCxJQUFJK3VDLEdBQVcsRUFDWEMsRUFBYyxXQUNUN0MsU0FBUzhDLEtBSVRGLElBQ0RBLEdBQVcsRUFDWC91QyxLQUxBdVEsV0FBV3krQixFQUFhNS9CLEtBQUtJLE1BQU0sTUFRdkMyOEIsU0FBU0Msa0JBQ1RELFNBQVNDLGlCQUFpQixtQkFBb0I0QyxHQUFhLEdBRTNEL2pDLE9BQU9taEMsaUJBQWlCLE9BQVE0QyxHQUFhLElBR3hDN0MsU0FBUytDLGNBR2QvQyxTQUFTK0MsWUFBWSxzQkFBc0IsV0FDWCxhQUF4Qi9DLFNBQVMyQyxZQUNURSxPQUtSL2pDLE9BQU9pa0MsWUFBWSxTQUFVRixLQTIxU2pDRyxFQUFvQixXQUNoQixJQUFJOXRDLEVBQU1zdEMsVUFBVixDQUlBdHRDLEVBQU0rdEMsZ0JBQWtCLElBQUlDLElBQTJCLFdBRW5ELElBREEsSUFBSWx2QyxFQUFPLEdBQ0Z1RyxFQUFLLEVBQUdBLEVBQUt0RyxVQUFVdUcsT0FBUUQsSUFDcEN2RyxFQUFLdUcsR0FBTXRHLFVBQVVzRyxHQUV6QixJQUFJbEcsR0FBSyxRQUFPTCxFQUFNLEdBQUltdkMsRUFBVTl1QyxFQUFHLEdBQUkrdUMsRUFBTy91QyxFQUFHLEdBQUlndkMsRUFBT2h2QyxFQUFHLEdBRW5FLEdBRjhFQSxFQUFHLEdBQVdBLEVBQUcsR0FDL0ZhLEVBQU1vdUMsd0JBQXdCdHZDLEdBQ3pCa0IsRUFBTSt0QyxnQkFRWCxHQUxJL3RDLEVBQU11dEMsdUJBQ05jLGFBQWFydUMsRUFBTXV0QyxzQkFDbkJ2dEMsRUFBTXV0QyxxQkFBdUIsTUFFakN2dEMsRUFBTTRzQyxnQkFBaUIsRUFDbkJxQixJQUFZOUIsR0FDWm5zQyxFQUFNNEksR0FBS3NsQyxFQUNYbHVDLEVBQU1zdUMsU0FBV0gsTUFFaEIsSUFBSUYsSUFBWTdCLEdBaUJqQixNQUFNLElBQUl4a0MsTUFBTSxrQ0FBb0NxbUMsR0FmaERDLEdBR0FsdUMsRUFBTSt0QyxnQkFBZ0JRLGNBQWUsRUFHckN2dUMsRUFBTXF0QyxnQkFBZ0IxQixXQUFXdUMsR0FBTSxXQUNuQ2x1QyxFQUFNd3RDLGdCQUlWeHRDLEVBQU13dEMsZ0JBTWYsV0FFQyxJQURBLElBQUkxdUMsRUFBTyxHQUNGdUcsRUFBSyxFQUFHQSxFQUFLdEcsVUFBVXVHLE9BQVFELElBQ3BDdkcsRUFBS3VHLEdBQU10RyxVQUFVc0csR0FFekIsSUFBSWxHLEdBQUssUUFBT0wsRUFBTSxHQUFJMHZDLEVBQUtydkMsRUFBRyxHQUFJbU0sRUFBT25NLEVBQUcsR0FDaERhLEVBQU1vdUMsd0JBQXdCdHZDLEdBQzlCa0IsRUFBTXF0QyxnQkFBZ0J4QixlQUFlMkMsRUFBSWxqQyxNQUMxQyxXQUNDdEwsRUFBTXd0QyxjQUNQeHRDLEVBQU0rc0MsT0FHVCxJQUFJMEIsRUFBWSxDQUNoQixNQUEyQyxLQUMzQ0EsRUFBd0MsSUFBSTFnQyxLQUFLSSxNQUFzQixJQUFoQkosS0FBSytLLFVBQ3hEOVksRUFBTSt0QyxnQkFBZ0JXLDJCQUN0QkQsRUFBNkMsR0FBSXp1QyxFQUFNK3RDLGdCQUFnQlcsMEJBRTNFRCxFQUF1QixFQXJ2UlosSUFzdlJQenVDLEVBQU13c0MscUJBQ05pQyxFQUFpQyxFQUFJenVDLEVBQU13c0Msb0JBRTNDeHNDLEVBQU15c0MsZ0JBQ05nQyxFQUE0QixHQUFJenVDLEVBQU15c0MsZUFFdEN6c0MsRUFBTXVzQyxnQkFDTmtDLEVBQThCLEVBQUl6dUMsRUFBTXVzQyxlQUVwQixvQkFBYnA0QixVQUNQQSxTQUFTdzZCLE9BQ2dDLElBQXpDeDZCLFNBQVN3NkIsS0FBS25vQyxRQUFRZ00sS0FDdEJpOEIsRUFBdUIsRUE5dlJ2QixLQWd3UkosSUFBSUcsRUFBYTV1QyxFQUFNK3NDLE1BQU0wQixHQUM3Qnp1QyxFQUFNNnNDLEtBQUssK0JBQWlDK0IsR0FDNUM1dUMsRUFBTSt0QyxnQkFBZ0JjLE9BQU9ELEdBQVksb0JBUWpEdkMsRUFBc0JockMsVUFBVXl0QyxNQUFRLFdBQ3BDandDLEtBQUtrdkMsZ0JBQWdCZ0IsY0FBY2x3QyxLQUFLK0osR0FBSS9KLEtBQUt5dkMsVUFDakR6dkMsS0FBS213Qyx1QkFBdUJud0MsS0FBSytKLEdBQUkvSixLQUFLeXZDLFdBSzlDakMsRUFBc0I0QyxXQUFhLFdBQy9CNUMsRUFBc0I2QyxhQUFjLEdBS3hDN0MsRUFBc0I4QyxjQUFnQixXQUNsQzlDLEVBQXNCK0MsZ0JBQWlCLEdBRzNDL0MsRUFBc0JnRCxZQUFjLFdBQ2hDLFNBQUksWUFHS2hELEVBQXNCNkMsY0FNbEI3QyxFQUFzQitDLGdCQUNQLG9CQUFidEUsVUFDbUIsTUFBMUJBLFNBQVN3RSxlQWp3U08saUJBQVgxbEMsUUFDYkEsT0FBZSxRQUNmQSxPQUFlLE9BQWEsWUFDM0IsVUFBVW1GLEtBQUtuRixPQUFPdUssU0FBU3c2QixPQVFWLGlCQUFaWSxTQUE4QyxpQkFBZkEsUUFBUUMsTUE4dlNyRG5ELEVBQXNCaHJDLFVBQVVvdUMsc0JBQXdCLGFBS3hEcEQsRUFBc0JockMsVUFBVXF1QyxVQUFZLFdBQ3hDN3dDLEtBQUt5dUMsV0FBWSxFQUNienVDLEtBQUtrdkMsa0JBQ0xsdkMsS0FBS2t2QyxnQkFBZ0I0QixRQUNyQjl3QyxLQUFLa3ZDLGdCQUFrQixNQUd2Qmx2QyxLQUFLK3dDLGlCQUNMOUUsU0FBUzhDLEtBQUtpQyxZQUFZaHhDLEtBQUsrd0MsZ0JBQy9CL3dDLEtBQUsrd0MsZUFBaUIsTUFFdEIvd0MsS0FBSzB1Qyx1QkFDTGMsYUFBYXh2QyxLQUFLMHVDLHNCQUNsQjF1QyxLQUFLMHVDLHFCQUF1QixPQU9wQ2xCLEVBQXNCaHJDLFVBQVVtc0MsVUFBWSxXQUNuQzN1QyxLQUFLeXVDLFlBQ056dUMsS0FBS2d1QyxLQUFLLDhCQUNWaHVDLEtBQUs2d0MsWUFDRDd3QyxLQUFLdXVDLGdCQUNMdnVDLEtBQUt1dUMsY0FBY3Z1QyxLQUFLK3RDLGdCQUN4Qi90QyxLQUFLdXVDLGNBQWdCLFFBUWpDZixFQUFzQmhyQyxVQUFVc3VDLE1BQVEsV0FDL0I5d0MsS0FBS3l1QyxZQUNOenVDLEtBQUtndUMsS0FBSyw2QkFDVmh1QyxLQUFLNndDLGNBUWJyRCxFQUFzQmhyQyxVQUFVeXVDLEtBQU8sU0FBVXhrQyxHQUM3QyxJQUFJeWtDLEdBQVUsUUFBVXprQyxHQUN4QnpNLEtBQUs2dEMsV0FBYXFELEVBQVF6cUMsT0FDMUJ6RyxLQUFLaXVDLE9BQU90RixpQkFBaUIsYUFBY3VJLEVBQVF6cUMsUUFRbkQsSUFOQSxJQUFJMHFDLEdBQWEsUUFBYUQsR0FHMUJwakMsRUFBV0gsRUFBa0J3akMsRUF2UGxCQyxNQTBQTnRsQyxFQUFJLEVBQUdBLEVBQUlnQyxFQUFTckgsT0FBUXFGLElBQ2pDOUwsS0FBS2t2QyxnQkFBZ0JtQyxlQUFlcnhDLEtBQUtzdUMsY0FBZXhnQyxFQUFTckgsT0FBUXFILEVBQVNoQyxJQUNsRjlMLEtBQUtzdUMsaUJBVWJkLEVBQXNCaHJDLFVBQVUydEMsdUJBQXlCLFNBQVVwbUMsRUFBSXVuQyxHQUNuRSxLQUFJLFVBQUosQ0FHQXR4QyxLQUFLK3dDLGVBQWlCOUUsU0FBU3dFLGNBQWMsVUFDN0MsSUFBSWIsRUFBWSxDQUNoQixPQUEyRCxLQUMzREEsRUFBb0MsR0FBSTdsQyxFQUN4QzZsQyxFQUFvQyxHQUFJMEIsRUFDeEN0eEMsS0FBSyt3QyxlQUFlUSxJQUFNdnhDLEtBQUtrdUMsTUFBTTBCLEdBQ3JDNXZDLEtBQUsrd0MsZUFBZVMsTUFBTUMsUUFBVSxPQUNwQ3hGLFNBQVM4QyxLQUFLMkMsWUFBWTF4QyxLQUFLK3dDLGtCQU9uQ3ZELEVBQXNCaHJDLFVBQVUrc0Msd0JBQTBCLFNBQVV0dkMsR0FFaEUsSUFBSTZ0QyxHQUFnQixRQUFVN3RDLEdBQU13RyxPQUNwQ3pHLEtBQUs4dEMsZUFBaUJBLEVBQ3RCOXRDLEtBQUtpdUMsT0FBT3RGLGlCQUFpQixpQkFBa0JtRixJQUU1Q04sRUF6UStCLEdBK1F0QzJCLEdBQTRDLFdBTzVDLFNBQVNBLEVBQTJCd0MsRUFBV0MsRUFBYXZELEVBQWNILEdBaUJ0RSxHQWhCQWx1QyxLQUFLcXVDLGFBQWVBLEVBQ3BCcnVDLEtBQUtrdUMsTUFBUUEsRUFHYmx1QyxLQUFLNnhDLG9CQUFzQixJQUFJQyxJQUUvQjl4QyxLQUFLK3hDLFlBQWMsR0FNbkIveEMsS0FBS2d5QyxjQUFnQjlpQyxLQUFLSSxNQUFzQixJQUFoQkosS0FBSytLLFVBR3JDamEsS0FBSzB2QyxjQUFlLEdBQ2YsVUFrQ0QxdkMsS0FBSzJ4QyxVQUFZQSxFQUNqQjN4QyxLQUFLNHhDLFlBQWNBLE1BbkNMLENBS2Q1eEMsS0FBSzZ2Qyx5QkFBMkJ6a0MsSUFDaENMLE9BalY0QixhQWlWZS9LLEtBQUs2dkMsMEJBQTRCOEIsRUFDNUU1bUMsT0FqVnlCLFVBaVZlL0ssS0FBSzZ2QywwQkFBNEIrQixFQUV6RTV4QyxLQUFLaXlDLFNBQVc5QyxFQUEyQitDLGdCQUUzQyxJQUFJQyxFQUFTLEdBR1RueUMsS0FBS2l5QyxTQUFTVixLQUN3QyxnQkFBdER2eEMsS0FBS2l5QyxTQUFTVixJQUFJemhDLE9BQU8sRUFBRyxjQUFjckosVUFFMUMwckMsRUFBUyw0QkFEV2xHLFNBQVM1M0IsT0FDMEIsZ0JBRTNELElBQUkrOUIsRUFBaUIsZUFBaUJELEVBQVMsaUJBQy9DLElBQ0lueUMsS0FBS2l5QyxTQUFTSSxJQUFJbEUsT0FDbEJudUMsS0FBS2l5QyxTQUFTSSxJQUFJalEsTUFBTWdRLEdBQ3hCcHlDLEtBQUtpeUMsU0FBU0ksSUFBSXZCLFFBRXRCLE1BQU9qdEMsR0FDSE8sRUFBSSwyQkFDQVAsRUFBRXlNLE9BQ0ZsTSxFQUFJUCxFQUFFeU0sT0FFVmxNLEVBQUlQLEtBdVBoQixPQXpPQXNyQyxFQUEyQitDLGNBQWdCLFdBQ3ZDLElBQUlJLEVBQVNyRyxTQUFTd0UsY0FBYyxVQUdwQyxHQUZBNkIsRUFBT2QsTUFBTUMsUUFBVSxRQUVuQnhGLFNBQVM4QyxLQXVCVCxLQUFNLG9HQXRCTjlDLFNBQVM4QyxLQUFLMkMsWUFBWVksR0FDMUIsSUFJWUEsRUFBT0MsY0FBY3RHLFVBR3pCN25DLEVBQUksaUNBR1osTUFBT1AsR0FDSCxJQUFJd1EsRUFBUzQzQixTQUFTNTNCLE9BQ3RCaStCLEVBQU9mLElBQ0gsZ0VBQ0lsOUIsRUFDQSwyQkFvQmhCLE9BWElpK0IsRUFBT0UsZ0JBQ1BGLEVBQU9ELElBQU1DLEVBQU9FLGdCQUVmRixFQUFPQyxjQUNaRCxFQUFPRCxJQUFNQyxFQUFPQyxjQUFjdEcsU0FHN0JxRyxFQUFPckcsV0FFWnFHLEVBQU9ELElBQU1DLEVBQU9yRyxVQUVqQnFHLEdBS1huRCxFQUEyQjNzQyxVQUFVc3VDLE1BQVEsV0FDekMsSUFBSTN2QyxFQUFRbkIsS0FFWkEsS0FBS3l5QyxPQUFRLEVBQ1R6eUMsS0FBS2l5QyxXQUlManlDLEtBQUtpeUMsU0FBU0ksSUFBSXRELEtBQUsyRCxVQUFZLEdBQ25DcmlDLFlBQVcsV0FDZ0IsT0FBbkJsUCxFQUFNOHdDLFdBQ05oRyxTQUFTOEMsS0FBS2lDLFlBQVk3dkMsRUFBTTh3QyxVQUNoQzl3QyxFQUFNOHdDLFNBQVcsUUFFdEIvaUMsS0FBS0ksTUFBTSxLQUdsQixJQUFJKytCLEVBQWVydUMsS0FBS3F1QyxhQUNwQkEsSUFDQXJ1QyxLQUFLcXVDLGFBQWUsS0FDcEJBLE1BUVJjLEVBQTJCM3NDLFVBQVUwdEMsY0FBZ0IsU0FBVW5tQyxFQUFJdW5DLEdBSy9ELElBSkF0eEMsS0FBSzJ5QyxLQUFPNW9DLEVBQ1ovSixLQUFLNHlDLEtBQU90QixFQUNadHhDLEtBQUt5eUMsT0FBUSxFQUVOenlDLEtBQUs2eUMsa0JBU2hCMUQsRUFBMkIzc0MsVUFBVXF3QyxZQUFjLFdBSS9DLEdBQUk3eUMsS0FBS3l5QyxPQUNMenlDLEtBQUswdkMsY0FDTDF2QyxLQUFLNnhDLG9CQUFvQjloQixNQUFRL3ZCLEtBQUsreEMsWUFBWXRyQyxPQUFTLEVBQUksRUFBSSxHQUFJLENBRXZFekcsS0FBS2d5QyxnQkFDTCxJQUFJcEMsRUFBWSxHQUNoQkEsRUFBb0MsR0FBSTV2QyxLQUFLMnlDLEtBQzdDL0MsRUFBb0MsR0FBSTV2QyxLQUFLNHlDLEtBQzdDaEQsRUFBd0MsSUFBSTV2QyxLQUFLZ3lDLGNBS2pELElBSkEsSUFBSWMsRUFBUzl5QyxLQUFLa3VDLE1BQU0wQixHQUVwQm1ELEVBQWdCLEdBQ2hCam5DLEVBQUksRUFDRDlMLEtBQUsreEMsWUFBWXRyQyxPQUFTLEdBRWZ6RyxLQUFLK3hDLFlBQVksR0FDbkJpQixFQUFFdnNDLE9BcmRSLEdBdWRGc3NDLEVBQWN0c0MsUUF4ZFYsTUFtZHdCLENBUTVCLElBQUl3c0MsRUFBU2p6QyxLQUFLK3hDLFlBQVltQixRQUM5QkgsRUFDSUEsU0FHSWpuQyxFQUNBLElBQ0FtbkMsRUFBT0UsSUFMWEosTUFRSWpuQyxFQUNBLElBQ0FtbkMsRUFBT0csR0FWWEwsS0FhSWpuQyxFQUNBLElBQ0FtbkMsRUFBT0QsRUFDZmxuQyxJQVFSLE9BRkFnbkMsR0FBa0JDLEVBQ2xCL3lDLEtBQUtxekMsZ0JBQWdCUCxFQUFROXlDLEtBQUtneUMsZ0JBQzNCLEVBR1AsT0FBTyxHQVNmN0MsRUFBMkIzc0MsVUFBVTZ1QyxlQUFpQixTQUFVaUMsRUFBUUMsRUFBVzltQyxHQUUvRXpNLEtBQUsreEMsWUFBWXRzQyxLQUFLLENBQUUwdEMsSUFBS0csRUFBUUYsR0FBSUcsRUFBV1AsRUFBR3ZtQyxJQUduRHpNLEtBQUt5eUMsT0FDTHp5QyxLQUFLNnlDLGVBU2IxRCxFQUEyQjNzQyxVQUFVNndDLGdCQUFrQixTQUFVRyxFQUFLQyxHQUNsRSxJQUFJdHlDLEVBQVFuQixLQUVaQSxLQUFLNnhDLG9CQUFvQmpILElBQUk2SSxHQUM3QixJQUFJQyxFQUFlLFdBQ2Z2eUMsRUFBTTB3QyxvQkFBb0I5dUMsT0FBTzB3QyxHQUNqQ3R5QyxFQUFNMHhDLGVBSU5jLEVBQW1CdGpDLFdBQVdxakMsRUFBY3hrQyxLQUFLSSxNQWhoQjVCLE9BdWhCekJ0UCxLQUFLZ3dDLE9BQU93RCxHQU5PLFdBRWZoRSxhQUFhbUUsR0FFYkQsUUFTUnZFLEVBQTJCM3NDLFVBQVV3dEMsT0FBUyxTQUFVd0QsRUFBS0ksR0FDekQsSUFBSXp5QyxFQUFRbkIsTUFDUixVQUVBQSxLQUFLNnpDLGVBQWVMLEVBQUtJLEdBR3pCdmpDLFlBQVcsV0FDUCxJQUVJLElBQUtsUCxFQUFNdXVDLGFBQ1AsT0FFSixJQUFJb0UsRUFBYzN5QyxFQUFNOHdDLFNBQVNJLElBQUk1QixjQUFjLFVBQ25EcUQsRUFBWTF0QyxLQUFPLGtCQUNuQjB0QyxFQUFZQyxPQUFRLEVBQ3BCRCxFQUFZdkMsSUFBTWlDLEVBRWxCTSxFQUFZRSxPQUFTRixFQUFZRyxtQkFBcUIsV0FFbEQsSUFBSUMsRUFBU0osRUFBWWxGLFdBQ3BCc0YsR0FBcUIsV0FBWEEsR0FBa0MsYUFBWEEsSUFFbENKLEVBQVlFLE9BQVNGLEVBQVlHLG1CQUFxQixLQUNsREgsRUFBWUssWUFDWkwsRUFBWUssV0FBV25ELFlBQVk4QyxHQUV2Q0YsTUFHUkUsRUFBWU0sUUFBVSxXQUNsQmh3QyxFQUFJLG9DQUFzQ292QyxHQUMxQ3J5QyxFQUFNdXVDLGNBQWUsRUFDckJ2dUMsRUFBTTJ2QyxTQUVWM3ZDLEVBQU04d0MsU0FBU0ksSUFBSXRELEtBQUsyQyxZQUFZb0MsR0FFeEMsTUFBT2p3QyxPQUdScUwsS0FBS0ksTUFBTSxLQUdmNi9CLEVBN1NvQyxHQWlVM0NucEMsR0FBYyxHQUVsQixTQUFTcXVDLEdBQWNudkMsR0FDbkJjLEdBQWNkLEVBbUJsQixJQUVJb3ZDLEdBQWdCLEtBQ1Esb0JBQWpCQyxhQUNQRCxHQUFnQkMsYUFFVSxvQkFBZEMsWUFDWkYsR0FBZ0JFLFdBT3BCLElBQUlDLEdBQXFDLFdBU3JDLFNBQVNBLEVBQW9CaEgsRUFBUWg0QixFQUFVaTRCLEVBQWVDLEVBQW9CQyxHQUM5RTV0QyxLQUFLeXRDLE9BQVNBLEVBQ2R6dEMsS0FBSzB0QyxjQUFnQkEsRUFDckIxdEMsS0FBSzAwQyxlQUFpQixLQUN0QjEwQyxLQUFLMjBDLE9BQVMsS0FDZDMwQyxLQUFLNDBDLFlBQWMsRUFDbkI1MEMsS0FBSzZ0QyxVQUFZLEVBQ2pCN3RDLEtBQUs4dEMsY0FBZ0IsRUFDckI5dEMsS0FBS2d1QyxLQUFPM2hDLEVBQVdyTSxLQUFLeXRDLFFBQzVCenRDLEtBQUtpdUMsT0FBU3BGLEdBQWFDLGNBQWNyekIsR0FDekN6VixLQUFLK1UsUUFBVTAvQixFQUFvQkksZUFBZXAvQixFQUFVazRCLEVBQW9CQyxHQUNoRjV0QyxLQUFLa1UsVUFBWXVCLEVBQVN2QixVQXNTOUIsT0E1UkF1Z0MsRUFBb0JJLGVBQWlCLFNBQVVwL0IsRUFBVWs0QixFQUFvQkMsR0FDekUsSUFBSWdDLEVBQVksQ0FDaEIsRUEveFNlLEtBNHlTZixRQVpLLFdBQ21CLG9CQUFidDZCLFVBQ1BBLFNBQVN3NkIsT0FDZ0MsSUFBekN4NkIsU0FBU3c2QixLQUFLbm9DLFFBQVFnTSxLQUN0Qmk4QixFQUF1QixFQWh5U25CLEtBa3lTSmpDLElBQ0FpQyxFQUFpQyxFQUFJakMsR0FFckNDLElBQ0FnQyxFQUE0QixHQUFJaEMsR0FFN0JuNEIsRUFBU1osY0FBY2pCLEVBQVdnOEIsSUFPN0M2RSxFQUFvQmp5QyxVQUFVMnJDLEtBQU8sU0FBVUMsRUFBV0MsR0FDdEQsSUFBSWx0QyxFQUFRbkIsS0FDWkEsS0FBS3F1QyxhQUFlQSxFQUNwQnJ1QyxLQUFLb3VDLFVBQVlBLEVBQ2pCcHVDLEtBQUtndUMsS0FBSywyQkFBNkJodUMsS0FBSytVLFNBQzVDL1UsS0FBSyt0QyxnQkFBaUIsRUFFdEI5aUMsRUFBa0J0SSxJQUFJLDhCQUE4QixHQUNwRCxJQUNJLElBQUksVUFBYSxDQUNiLElBQUlteUMsRUFBUzkwQyxLQUFLa1UsVUFBWSxZQUFjLE9BRXhDblQsRUFBVSxDQUNWZzBDLFFBQVMsQ0FDTCxhQUFjLGNBQXVDL3VDLEdBQWMsSUFBTWd2QyxRQUFRQyxTQUFXLElBQU1ILEVBQ2xHLG1CQUFvQjkwQyxLQUFLMHRDLGVBQWlCLEtBSTlDd0gsRUFBTUYsUUFBYSxJQUNuQkcsRUFBMkMsSUFBbkNuMUMsS0FBSytVLFFBQVFwTixRQUFRLFVBQzNCdXRDLEVBQWlCLGFBQUtBLEVBQWlCLFlBQ3ZDQSxFQUFnQixZQUFLQSxFQUFnQixXQUN2Q0MsSUFDQXAwQyxFQUFlLE1BQUksQ0FBRXEwQyxPQUFRRCxJQUVqQ24xQyxLQUFLcTFDLE9BQVMsSUFBSWYsR0FBY3QwQyxLQUFLK1UsUUFBUyxHQUFJaFUsUUFHOUNBLEVBQVUsQ0FDVmcwQyxRQUFTLENBQ0wsbUJBQW9CLzBDLEtBQUswdEMsZUFBaUIsS0FHbEQxdEMsS0FBS3ExQyxPQUFTLElBQUlmLEdBQWN0MEMsS0FBSytVLFFBQVMsR0FBSWhVLEdBRzFELE1BQU84QyxHQUNIN0QsS0FBS2d1QyxLQUFLLGtDQUNWLElBQUl4dUMsRUFBUXFFLEVBQUVnSSxTQUFXaEksRUFBRTRJLEtBSzNCLE9BSklqTixHQUNBUSxLQUFLZ3VDLEtBQUt4dUMsUUFFZFEsS0FBSzJ1QyxZQUdUM3VDLEtBQUtxMUMsT0FBT0MsT0FBUyxXQUNqQm4wQyxFQUFNNnNDLEtBQUssd0JBQ1g3c0MsRUFBTTRzQyxnQkFBaUIsR0FFM0IvdEMsS0FBS3ExQyxPQUFPRSxRQUFVLFdBQ2xCcDBDLEVBQU02c0MsS0FBSywwQ0FDWDdzQyxFQUFNazBDLE9BQVMsS0FDZmwwQyxFQUFNd3RDLGFBRVYzdUMsS0FBS3ExQyxPQUFPRyxVQUFZLFNBQVVDLEdBQzlCdDBDLEVBQU11MEMsb0JBQW9CRCxJQUU5QnoxQyxLQUFLcTFDLE9BQU9qQixRQUFVLFNBQVV2d0MsR0FDNUIxQyxFQUFNNnNDLEtBQUsseUNBRVgsSUFBSXh1QyxFQUFRcUUsRUFBRWdJLFNBQVdoSSxFQUFFNEksS0FDdkJqTixHQUNBMkIsRUFBTTZzQyxLQUFLeHVDLEdBRWYyQixFQUFNd3RDLGNBTWQ4RixFQUFvQmp5QyxVQUFVeXRDLE1BQVEsYUFDdEN3RSxFQUFvQm5FLGNBQWdCLFdBQ2hDbUUsRUFBb0JsRSxnQkFBaUIsR0FFekNrRSxFQUFvQmpFLFlBQWMsV0FDOUIsSUFBSW1GLEdBQWUsRUFDbkIsR0FBeUIsb0JBQWRDLFdBQTZCQSxVQUFVQyxVQUFXLENBQ3pELElBQ0lDLEVBQWtCRixVQUFVQyxVQUFVdndDLE1BRHBCLGtDQUVsQnd3QyxHQUFtQkEsRUFBZ0JydkMsT0FBUyxHQUN4Q3N2QyxXQUFXRCxFQUFnQixJQUFNLE1BQ2pDSCxHQUFlLEdBSTNCLE9BQVNBLEdBQ2EsT0FBbEJyQixLQUNDRyxFQUFvQmxFLGdCQU03QmtFLEVBQW9CdUIsaUJBQW1CLFdBR25DLE9BQVEvcUMsRUFBa0JMLG9CQUNrQyxJQUF4REssRUFBa0J4SSxJQUFJLCtCQUU5Qmd5QyxFQUFvQmp5QyxVQUFVb3VDLHNCQUF3QixXQUNsRDNsQyxFQUFrQlQsT0FBTywrQkFFN0JpcUMsRUFBb0JqeUMsVUFBVXl6QyxhQUFlLFNBQVV4cEMsR0FFbkQsR0FEQXpNLEtBQUsyMEMsT0FBT2x2QyxLQUFLZ0gsR0FDYnpNLEtBQUsyMEMsT0FBT2x1QyxTQUFXekcsS0FBSzQwQyxZQUFhLENBQ3pDLElBQUlzQixFQUFXbDJDLEtBQUsyMEMsT0FBT2h2QyxLQUFLLElBQ2hDM0YsS0FBSzIwQyxPQUFTLEtBQ2QsSUFBSXdCLEdBQVcsUUFBU0QsR0FFeEJsMkMsS0FBS291QyxVQUFVK0gsS0FPdkIxQixFQUFvQmp5QyxVQUFVNHpDLHFCQUF1QixTQUFVQyxHQUMzRHIyQyxLQUFLNDBDLFlBQWN5QixFQUNuQnIyQyxLQUFLMjBDLE9BQVMsSUFRbEJGLEVBQW9CanlDLFVBQVU4ekMsbUJBQXFCLFNBQVU3cEMsR0FJekQsSUFIQSxRQUF1QixPQUFoQnpNLEtBQUsyMEMsT0FBaUIsa0NBR3pCbG9DLEVBQUtoRyxRQUFVLEVBQUcsQ0FDbEIsSUFBSTR2QyxFQUFhM3BDLE9BQU9ELEdBQ3hCLElBQUs4cEMsTUFBTUYsR0FFUCxPQURBcjJDLEtBQUtvMkMscUJBQXFCQyxHQUNuQixLQUlmLE9BREFyMkMsS0FBS28yQyxxQkFBcUIsR0FDbkIzcEMsR0FNWGdvQyxFQUFvQmp5QyxVQUFVa3pDLG9CQUFzQixTQUFVYyxHQUMxRCxHQUFvQixPQUFoQngyQyxLQUFLcTFDLE9BQVQsQ0FHQSxJQUFJNW9DLEVBQU8rcEMsRUFBVyxLQUl0QixHQUhBeDJDLEtBQUs4dEMsZUFBaUJyaEMsRUFBS2hHLE9BQzNCekcsS0FBS2l1QyxPQUFPdEYsaUJBQWlCLGlCQUFrQmw4QixFQUFLaEcsUUFDcER6RyxLQUFLeTJDLGlCQUNlLE9BQWhCejJDLEtBQUsyMEMsT0FFTDMwQyxLQUFLaTJDLGFBQWF4cEMsT0FFakIsQ0FFRCxJQUFJaXFDLEVBQWdCMTJDLEtBQUtzMkMsbUJBQW1CN3BDLEdBQ3RCLE9BQWxCaXFDLEdBQ0ExMkMsS0FBS2kyQyxhQUFhUyxNQVE5QmpDLEVBQW9CanlDLFVBQVV5dUMsS0FBTyxTQUFVeGtDLEdBQzNDek0sS0FBS3kyQyxpQkFDTCxJQUFJdkYsR0FBVSxRQUFVemtDLEdBQ3hCek0sS0FBSzZ0QyxXQUFhcUQsRUFBUXpxQyxPQUMxQnpHLEtBQUtpdUMsT0FBT3RGLGlCQUFpQixhQUFjdUksRUFBUXpxQyxRQUduRCxJQUFJcUgsRUFBV0gsRUFBa0J1akMsRUFsUFYsT0FvUG5CcGpDLEVBQVNySCxPQUFTLEdBQ2xCekcsS0FBSzIyQyxZQUFZN3hDLE9BQU9nSixFQUFTckgsU0FHckMsSUFBSyxJQUFJcUYsRUFBSSxFQUFHQSxFQUFJZ0MsRUFBU3JILE9BQVFxRixJQUNqQzlMLEtBQUsyMkMsWUFBWTdvQyxFQUFTaEMsS0FHbEMyb0MsRUFBb0JqeUMsVUFBVXF1QyxVQUFZLFdBQ3RDN3dDLEtBQUt5dUMsV0FBWSxFQUNienVDLEtBQUswMEMsaUJBQ0xrQyxjQUFjNTJDLEtBQUswMEMsZ0JBQ25CMTBDLEtBQUswMEMsZUFBaUIsTUFFdEIxMEMsS0FBS3ExQyxTQUNMcjFDLEtBQUtxMUMsT0FBT3ZFLFFBQ1o5d0MsS0FBS3ExQyxPQUFTLE9BR3RCWixFQUFvQmp5QyxVQUFVbXNDLFVBQVksV0FDakMzdUMsS0FBS3l1QyxZQUNOenVDLEtBQUtndUMsS0FBSywrQkFDVmh1QyxLQUFLNndDLFlBRUQ3d0MsS0FBS3F1QyxlQUNMcnVDLEtBQUtxdUMsYUFBYXJ1QyxLQUFLK3RDLGdCQUN2Qi90QyxLQUFLcXVDLGFBQWUsUUFRaENvRyxFQUFvQmp5QyxVQUFVc3VDLE1BQVEsV0FDN0I5d0MsS0FBS3l1QyxZQUNOenVDLEtBQUtndUMsS0FBSyw2QkFDVmh1QyxLQUFLNndDLGNBT2I0RCxFQUFvQmp5QyxVQUFVaTBDLGVBQWlCLFdBQzNDLElBQUl0MUMsRUFBUW5CLEtBQ1o0MkMsY0FBYzUyQyxLQUFLMDBDLGdCQUNuQjEwQyxLQUFLMDBDLGVBQWlCbUMsYUFBWSxXQUUxQjExQyxFQUFNazBDLFFBQ05sMEMsRUFBTXcxQyxZQUFZLEtBRXRCeDFDLEVBQU1zMUMsbUJBRVB2bkMsS0FBS0ksTUF6U21CLFFBaVQvQm1sQyxFQUFvQmp5QyxVQUFVbTBDLFlBQWMsU0FBVXJyQyxHQUlsRCxJQUNJdEwsS0FBS3ExQyxPQUFPcEUsS0FBSzNsQyxHQUVyQixNQUFPekgsR0FDSDdELEtBQUtndUMsS0FBSywwQ0FBMkNucUMsRUFBRWdJLFNBQVdoSSxFQUFFNEksS0FBTSx1QkFDMUU0RCxXQUFXclEsS0FBSzJ1QyxVQUFVam9DLEtBQUsxRyxNQUFPLEtBTzlDeTBDLEVBQW9CcUMsNkJBQStCLEVBS25EckMsRUFBb0JzQyxlQUFpQixJQUM5QnRDLEVBMVQ2QixHQXFWcEN1QyxHQUFrQyxXQUlsQyxTQUFTQSxFQUFpQnZoQyxHQUN0QnpWLEtBQUtpM0MsZ0JBQWdCeGhDLEdBeUV6QixPQXZFQW5ULE9BQU9DLGVBQWV5MEMsRUFBa0IsaUJBQWtCLENBS3REdjBDLElBQUssV0FDRCxNQUFPLENBQUMrcUMsR0FBdUJpSCxLQUVuQzV4QyxZQUFZLEVBQ1pDLGNBQWMsSUFNbEJrMEMsRUFBaUJ4MEMsVUFBVXkwQyxnQkFBa0IsU0FBVXhoQyxHQUNuRCxJQUFJdlUsRUFBS1osRUFDTDQyQyxFQUF3QnpDLElBQXVCQSxHQUFpQyxjQUNoRjBDLEVBQXVCRCxJQUEwQnpDLEdBQW9CdUIsbUJBT3pFLEdBTkl2Z0MsRUFBU3hCLGdCQUNKaWpDLEdBQ0R4eEMsRUFBSyxtRkFFVHl4QyxHQUF1QixHQUV2QkEsRUFDQW4zQyxLQUFLbzNDLFlBQWMsQ0FBQzNDLFFBRW5CLENBQ0QsSUFBSTRDLEVBQWNyM0MsS0FBS28zQyxZQUFjLEdBQ3JDLElBQ0ksSUFBSyxJQUFJeDFDLEdBQUssUUFBU28xQyxFQUFpQk0sZ0JBQWlCdDFDLEVBQUtKLEVBQUdLLFFBQVNELEVBQUd2QyxLQUFNdUMsRUFBS0osRUFBR0ssT0FBUSxDQUMvRixJQUFJczFDLEVBQVl2MUMsRUFBR3pDLE1BQ2ZnNEMsR0FBYUEsRUFBdUIsZUFDcENGLEVBQVc1eEMsS0FBSzh4QyxJQUk1QixNQUFPcDFDLEdBQVNqQixFQUFNLENBQUUxQixNQUFPMkMsR0FDL0IsUUFDSSxJQUNRSCxJQUFPQSxFQUFHdkMsT0FBU2EsRUFBS3NCLEVBQUdRLFNBQVM5QixFQUFHK0IsS0FBS1QsR0FFcEQsUUFBVSxHQUFJVixFQUFLLE1BQU1BLEVBQUkxQixVQVF6Q3czQyxFQUFpQngwQyxVQUFVZzFDLGlCQUFtQixXQUMxQyxHQUFJeDNDLEtBQUtvM0MsWUFBWTN3QyxPQUFTLEVBQzFCLE9BQU96RyxLQUFLbzNDLFlBQVksR0FHeEIsTUFBTSxJQUFJcnVDLE1BQU0sNEJBT3hCaXVDLEVBQWlCeDBDLFVBQVVpMUMsaUJBQW1CLFdBQzFDLE9BQUl6M0MsS0FBS28zQyxZQUFZM3dDLE9BQVMsRUFDbkJ6RyxLQUFLbzNDLFlBQVksR0FHakIsTUFHUkosRUE5RTBCLEdBMkhqQ1UsR0FBNEIsV0FXNUIsU0FBU0EsRUFBVzN0QyxFQUFJNHRDLEVBQVdDLEVBQWdCbkwsRUFBWW9MLEVBQVV0SixFQUFldUosRUFBU2xLLEdBQzdGNXRDLEtBQUsrSixHQUFLQSxFQUNWL0osS0FBSzIzQyxVQUFZQSxFQUNqQjMzQyxLQUFLNDNDLGVBQWlCQSxFQUN0QjUzQyxLQUFLeXNDLFdBQWFBLEVBQ2xCenNDLEtBQUs2M0MsU0FBV0EsRUFDaEI3M0MsS0FBS3V1QyxjQUFnQkEsRUFDckJ2dUMsS0FBSzgzQyxRQUFVQSxFQUNmOTNDLEtBQUs0dEMsY0FBZ0JBLEVBQ3JCNXRDLEtBQUsrM0MsZ0JBQWtCLEVBQ3ZCLzNDLEtBQUtnNEMsb0JBQXNCLEdBQzNCaDRDLEtBQUtpNEMsT0FBUyxFQUNkajRDLEtBQUtndUMsS0FBTzNoQyxFQUFXLEtBQU9yTSxLQUFLK0osR0FBSyxLQUN4Qy9KLEtBQUtrNEMsa0JBQW9CLElBQUlsQixHQUFpQlcsR0FDOUMzM0MsS0FBS2d1QyxLQUFLLHNCQUNWaHVDLEtBQUttNEMsU0FrYVQsT0E1WkFULEVBQVdsMUMsVUFBVTIxQyxPQUFTLFdBQzFCLElBQUloM0MsRUFBUW5CLEtBQ1JvNEMsRUFBT3A0QyxLQUFLazRDLGtCQUFrQlYsbUJBQ2xDeDNDLEtBQUtxNEMsTUFBUSxJQUFJRCxFQUFLcDRDLEtBQUtzNEMsbUJBQW9CdDRDLEtBQUsyM0MsVUFBVzMzQyxLQUFLNDNDLG9CQUFnQnYzQyxFQUFXTCxLQUFLNHRDLGVBR3BHNXRDLEtBQUt1NEMsMEJBQTRCSCxFQUFtQyw4QkFBSyxFQUN6RSxJQUFJSSxFQUFvQng0QyxLQUFLeTRDLGNBQWN6NEMsS0FBS3E0QyxPQUM1Q0ssRUFBbUIxNEMsS0FBSzI0QyxpQkFBaUIzNEMsS0FBS3E0QyxPQUNsRHI0QyxLQUFLNDRDLElBQU01NEMsS0FBS3E0QyxNQUNoQnI0QyxLQUFLNjRDLElBQU03NEMsS0FBS3E0QyxNQUNoQnI0QyxLQUFLODRDLGVBQWlCLEtBQ3RCOTRDLEtBQUsrNEMsWUFBYSxFQU9sQjFvQyxZQUFXLFdBRVBsUCxFQUFNazNDLE9BQVNsM0MsRUFBTWszQyxNQUFNbEssS0FBS3FLLEVBQW1CRSxLQUNwRHhwQyxLQUFLSSxNQUFNLElBQ2QsSUFBSTBwQyxFQUFtQlosRUFBcUIsZ0JBQUssRUFDN0NZLEVBQW1CLElBQ25CaDVDLEtBQUtpNUMsZ0JBQWtCMW9DLEdBQXNCLFdBQ3pDcFAsRUFBTTgzQyxnQkFBa0IsS0FDbkI5M0MsRUFBTTQzQyxhQUNINTNDLEVBQU1rM0MsT0FDTmwzQyxFQUFNazNDLE1BQU12SyxjQTlFRSxRQStFZDNzQyxFQUFNNnNDLEtBQUssd0RBQ1A3c0MsRUFBTWszQyxNQUFNdkssY0FDWix3Q0FDSjNzQyxFQUFNNDNDLFlBQWEsRUFDbkI1M0MsRUFBTWszQyxNQUFNekgseUJBRVB6dkMsRUFBTWszQyxPQUNYbDNDLEVBQU1rM0MsTUFBTXhLLFVBdkZGLE1Bd0ZWMXNDLEVBQU02c0MsS0FBSyxvREFDUDdzQyxFQUFNazNDLE1BQU14SyxVQUNaLHVDQUtKMXNDLEVBQU02c0MsS0FBSywrQ0FDWDdzQyxFQUFNMnZDLFlBSWY1aEMsS0FBS0ksTUFBTTBwQyxNQU90QnRCLEVBQVdsMUMsVUFBVTgxQyxpQkFBbUIsV0FDcEMsTUFBTyxLQUFPdDRDLEtBQUsrSixHQUFLLElBQU0vSixLQUFLKzNDLG1CQUV2Q0wsRUFBV2wxQyxVQUFVbTJDLGlCQUFtQixTQUFVUCxHQUM5QyxJQUFJajNDLEVBQVFuQixLQUNaLE9BQU8sU0FBVWs1QyxHQUNUZCxJQUFTajNDLEVBQU1rM0MsTUFDZmwzQyxFQUFNZzRDLGtCQUFrQkQsR0FFbkJkLElBQVNqM0MsRUFBTTIzQyxnQkFDcEIzM0MsRUFBTTZzQyxLQUFLLDhCQUNYN3NDLEVBQU1pNEMsOEJBR05qNEMsRUFBTTZzQyxLQUFLLCtCQUl2QjBKLEVBQVdsMUMsVUFBVWkyQyxjQUFnQixTQUFVTCxHQUMzQyxJQUFJajNDLEVBQVFuQixLQUNaLE9BQU8sU0FBVTZMLEdBQ1EsSUFBakIxSyxFQUFNODJDLFNBQ0ZHLElBQVNqM0MsRUFBTTAzQyxJQUNmMTNDLEVBQU1rNEMsMEJBQTBCeHRDLEdBRTNCdXNDLElBQVNqM0MsRUFBTTIzQyxlQUNwQjMzQyxFQUFNbTRDLDRCQUE0Qnp0QyxHQUdsQzFLLEVBQU02c0MsS0FBSyxnQ0FTM0IwSixFQUFXbDFDLFVBQVUrMkMsWUFBYyxTQUFVQyxHQUV6QyxJQUFJQyxFQUFNLENBQUVDLEVBQUcsSUFBSzFHLEVBQUd3RyxHQUN2Qng1QyxLQUFLMjVDLFVBQVVGLElBRW5CL0IsRUFBV2wxQyxVQUFVbzNDLHFCQUF1QixXQUNwQzU1QyxLQUFLNDRDLE1BQVE1NEMsS0FBSzg0QyxnQkFBa0I5NEMsS0FBSzY0QyxNQUFRNzRDLEtBQUs4NEMsaUJBQ3REOTRDLEtBQUtndUMsS0FBSywyQ0FBNkNodUMsS0FBSzg0QyxlQUFlckwsUUFDM0V6dEMsS0FBS3E0QyxNQUFRcjRDLEtBQUs4NEMsZUFDbEI5NEMsS0FBSzg0QyxlQUFpQixPQUk5QnBCLEVBQVdsMUMsVUFBVXEzQyxvQkFBc0IsU0FBVUMsR0FDakQsR0E3SlcsTUE2SlNBLEVBQWEsQ0FDN0IsSUFBSUMsRUFBTUQsRUFBd0IsRUF4SjdCLE1BeUpEQyxFQUNBLzVDLEtBQUtnNkMsNkJBN0pELE1BK0pDRCxHQUVMLzVDLEtBQUtndUMsS0FBSyx3Q0FDVmh1QyxLQUFLODRDLGVBQWVoSSxRQUVoQjl3QyxLQUFLNDRDLE1BQVE1NEMsS0FBSzg0QyxnQkFDbEI5NEMsS0FBSzY0QyxNQUFRNzRDLEtBQUs4NEMsZ0JBQ2xCOTRDLEtBQUs4d0MsU0FwS04sTUF1S0VpSixJQUNMLzVDLEtBQUtndUMsS0FBSywwQkFDVmh1QyxLQUFLaTZDLDhCQUNMajZDLEtBQUtnNkMsZ0NBSWpCdEMsRUFBV2wxQyxVQUFVODJDLDRCQUE4QixTQUFVWSxHQUN6RCxJQUFJQyxFQUFRN3NDLEVBQVcsSUFBSzRzQyxHQUN4Qnp0QyxFQUFPYSxFQUFXLElBQUs0c0MsR0FDM0IsR0FBYyxNQUFWQyxFQUNBbjZDLEtBQUs2NUMsb0JBQW9CcHRDLE9BRXhCLElBQWMsTUFBVjB0QyxFQUtMLE1BQU0sSUFBSXB4QyxNQUFNLDJCQUE2Qm94QyxHQUg3Q242QyxLQUFLZzRDLG9CQUFvQnZ5QyxLQUFLZ0gsS0FNdENpckMsRUFBV2wxQyxVQUFVdzNDLDJCQUE2QixXQUMxQ2g2QyxLQUFLaTZDLDZCQUErQixHQUNwQ2o2QyxLQUFLZ3VDLEtBQUssb0NBQ1ZodUMsS0FBSys0QyxZQUFhLEVBQ2xCLzRDLEtBQUs4NEMsZUFBZWxJLHdCQUNwQjV3QyxLQUFLbzZDLHdCQUlMcDZDLEtBQUtndUMsS0FBSyw4QkFDVmh1QyxLQUFLODRDLGVBQWU3SCxLQUFLLENBQUV5SSxFQUFHLElBQUsxRyxFQUFHLENBQUUwRyxFQW5NekMsSUFtTWtEMUcsRUFBRyxRQUc1RDBFLEVBQVdsMUMsVUFBVTQzQyxvQkFBc0IsV0FFdkNwNkMsS0FBSzg0QyxlQUFlN0ksUUFFcEJqd0MsS0FBS2d1QyxLQUFLLG1DQUNWaHVDLEtBQUs4NEMsZUFBZTdILEtBQUssQ0FBRXlJLEVBQUcsSUFBSzFHLEVBQUcsQ0FBRTBHLEVBN00vQixJQTZNOEMxRyxFQUFHLE1BRzFEaHpDLEtBQUtndUMsS0FBSyxrQ0FDVmh1QyxLQUFLcTRDLE1BQU1wSCxLQUFLLENBQUV5SSxFQUFHLElBQUsxRyxFQUFHLENBQUUwRyxFQWhOaEIsSUFnTnFDMUcsRUFBRyxNQUN2RGh6QyxLQUFLNDRDLElBQU01NEMsS0FBSzg0QyxlQUNoQjk0QyxLQUFLNDVDLHdCQUVUbEMsRUFBV2wxQyxVQUFVNjJDLDBCQUE0QixTQUFVYSxHQUV2RCxJQUFJQyxFQUFRN3NDLEVBQVcsSUFBSzRzQyxHQUN4Qnp0QyxFQUFPYSxFQUFXLElBQUs0c0MsR0FDYixNQUFWQyxFQUNBbjZDLEtBQUtxNkMsV0FBVzV0QyxHQUVELE1BQVYwdEMsR0FDTG42QyxLQUFLczZDLGVBQWU3dEMsSUFHNUJpckMsRUFBV2wxQyxVQUFVODNDLGVBQWlCLFNBQVV6dUMsR0FDNUM3TCxLQUFLdTZDLHFCQUVMdjZDLEtBQUt5c0MsV0FBVzVnQyxJQUVwQjZyQyxFQUFXbDFDLFVBQVUrM0MsbUJBQXFCLFdBQ2pDdjZDLEtBQUsrNEMsYUFDTi80QyxLQUFLdTRDLDRCQUNEdjRDLEtBQUt1NEMsMkJBQTZCLElBQ2xDdjRDLEtBQUtndUMsS0FBSyxrQ0FDVmh1QyxLQUFLKzRDLFlBQWEsRUFDbEIvNEMsS0FBS3E0QyxNQUFNekgsMkJBSXZCOEcsRUFBV2wxQyxVQUFVNjNDLFdBQWEsU0FBVVAsR0FDeEMsSUFBSUMsRUFBTXpzQyxFQXRQQyxJQXNQd0J3c0MsR0FDbkMsR0F0UFcsTUFzUFNBLEVBQWEsQ0FDN0IsSUFBSVUsRUFBVVYsRUFBd0IsRUFDdEMsR0FoUE8sTUFnUEhDLEVBQ0EvNUMsS0FBS3k2QyxhQUFhRCxRQUVqQixHQXJQTSxNQXFQRlQsRUFBMEIsQ0FDL0IvNUMsS0FBS2d1QyxLQUFLLHFDQUNWaHVDLEtBQUs2NEMsSUFBTTc0QyxLQUFLODRDLGVBQ2hCLElBQUssSUFBSWh0QyxFQUFJLEVBQUdBLEVBQUk5TCxLQUFLZzRDLG9CQUFvQnZ4QyxTQUFVcUYsRUFDbkQ5TCxLQUFLczZDLGVBQWV0NkMsS0FBS2c0QyxvQkFBb0Jsc0MsSUFFakQ5TCxLQUFLZzRDLG9CQUFzQixHQUMzQmg0QyxLQUFLNDVDLDJCQWpRRSxNQW1RRkcsRUFHTC81QyxLQUFLMDZDLHNCQUFzQkYsR0FyUXZCLE1BdVFDVCxFQUVMLzVDLEtBQUsyNkMsU0FBU0gsR0F4UVYsTUEwUUNULEVBQ0x2NkMsRUFBTSxpQkFBbUJnN0MsR0ExUXRCLE1BNFFFVCxHQUNMLzVDLEtBQUtndUMsS0FBSyx3QkFDVmh1QyxLQUFLdTZDLHFCQUNMdjZDLEtBQUs0NkMsaUNBR0xwN0MsRUFBTSxtQ0FBcUN1NkMsS0FTdkRyQyxFQUFXbDFDLFVBQVVpNEMsYUFBZSxTQUFVSSxHQUMxQyxJQUFJQyxFQUFZRCxFQUFVekgsR0FDdEJsdUMsRUFBVTIxQyxFQUFVL3JDLEVBQ3BCaUYsRUFBTzhtQyxFQUFVRSxFQUNyQi82QyxLQUFLZzdDLFVBQVlILEVBQVU5ckMsRUFDM0IvTyxLQUFLMjNDLFVBQVVoakMsV0FBV1osR0FFTixJQUFoQi9ULEtBQUtpNEMsU0FDTGo0QyxLQUFLcTRDLE1BQU1wSSxRQUNYandDLEtBQUtpN0MseUJBQXlCajdDLEtBQUtxNEMsTUFBT3lDLEdBeCtUL0IsTUF5K1RjNTFDLEdBQ3JCUSxFQUFLLHNDQUdUMUYsS0FBS2s3QyxxQkFHYnhELEVBQVdsMUMsVUFBVTA0QyxpQkFBbUIsV0FDcEMsSUFBSTlDLEVBQU9wNEMsS0FBS2s0QyxrQkFBa0JULG1CQUM5QlcsR0FDQXA0QyxLQUFLbTdDLGNBQWMvQyxJQUczQlYsRUFBV2wxQyxVQUFVMjRDLGNBQWdCLFNBQVUvQyxHQUMzQyxJQUFJajNDLEVBQVFuQixLQUNaQSxLQUFLODRDLGVBQWlCLElBQUlWLEVBQUtwNEMsS0FBS3M0QyxtQkFBb0J0NEMsS0FBSzIzQyxVQUFXMzNDLEtBQUs0M0MsZUFBZ0I1M0MsS0FBS2c3QyxXQUdsR2g3QyxLQUFLaTZDLDRCQUNEN0IsRUFBbUMsOEJBQUssRUFDNUMsSUFBSWhLLEVBQVlwdUMsS0FBS3k0QyxjQUFjejRDLEtBQUs4NEMsZ0JBQ3BDekssRUFBZXJ1QyxLQUFLMjRDLGlCQUFpQjM0QyxLQUFLODRDLGdCQUM5Qzk0QyxLQUFLODRDLGVBQWUzSyxLQUFLQyxFQUFXQyxHQUVwQzk5QixHQUFzQixXQUNkcFAsRUFBTTIzQyxpQkFDTjMzQyxFQUFNNnNDLEtBQUssZ0NBQ1g3c0MsRUFBTTIzQyxlQUFlaEksV0FFMUI1aEMsS0FBS0ksTUFoVk0sT0FrVmxCb29DLEVBQVdsMUMsVUFBVW00QyxTQUFXLFNBQVU1bUMsR0FDdEMvVCxLQUFLZ3VDLEtBQUsscUNBQXVDajZCLEdBQ2pEL1QsS0FBSzIzQyxVQUFVaGpDLFdBQVdaLEdBR04sSUFBaEIvVCxLQUFLaTRDLE9BQ0xqNEMsS0FBSzh3QyxTQUlMOXdDLEtBQUtvN0Msb0JBQ0xwN0MsS0FBS200QyxXQUdiVCxFQUFXbDFDLFVBQVV5NEMseUJBQTJCLFNBQVU3QyxFQUFNMEMsR0FDNUQsSUFBSTM1QyxFQUFRbkIsS0FDWkEsS0FBS2d1QyxLQUFLLG9DQUNWaHVDLEtBQUtxNEMsTUFBUUQsRUFDYnA0QyxLQUFLaTRDLE9BQVMsRUFDVmo0QyxLQUFLNjNDLFdBQ0w3M0MsS0FBSzYzQyxTQUFTaUQsRUFBVzk2QyxLQUFLZzdDLFdBQzlCaDdDLEtBQUs2M0MsU0FBVyxNQUltQixJQUFuQzczQyxLQUFLdTRDLDJCQUNMdjRDLEtBQUtndUMsS0FBSyxrQ0FDVmh1QyxLQUFLKzRDLFlBQWEsR0FHbEJ4b0MsR0FBc0IsV0FDbEJwUCxFQUFNeTVDLGtDQUNQMXJDLEtBQUtJLE1BL1dzQixPQWtYdENvb0MsRUFBV2wxQyxVQUFVbzRDLDhCQUFnQyxXQUU1QzU2QyxLQUFLKzRDLFlBQThCLElBQWhCLzRDLEtBQUtpNEMsU0FDekJqNEMsS0FBS2d1QyxLQUFLLDRCQUNWaHVDLEtBQUsyNUMsVUFBVSxDQUFFRCxFQUFHLElBQUsxRyxFQUFHLENBQUUwRyxFQXhXL0IsSUF3V3dDMUcsRUFBRyxRQUdsRDBFLEVBQVdsMUMsVUFBVTQyQywyQkFBNkIsV0FDOUMsSUFBSWhCLEVBQU9wNEMsS0FBSzg0QyxlQUNoQjk0QyxLQUFLODRDLGVBQWlCLEtBQ2xCOTRDLEtBQUs0NEMsTUFBUVIsR0FBUXA0QyxLQUFLNjRDLE1BQVFULEdBRWxDcDRDLEtBQUs4d0MsU0FTYjRHLEVBQVdsMUMsVUFBVTIyQyxrQkFBb0IsU0FBVUQsR0FDL0NsNUMsS0FBS3E0QyxNQUFRLEtBR1JhLEdBQWlDLElBQWhCbDVDLEtBQUtpNEMsT0FTRixJQUFoQmo0QyxLQUFLaTRDLFFBQ1ZqNEMsS0FBS2d1QyxLQUFLLDhCQVRWaHVDLEtBQUtndUMsS0FBSywrQkFFTmh1QyxLQUFLMjNDLFVBQVVsakMsb0JBQ2Z4SixFQUFrQlQsT0FBTyxRQUFVeEssS0FBSzIzQyxVQUFVNWpDLE1BRWxEL1QsS0FBSzIzQyxVQUFVcmpDLGFBQWV0VSxLQUFLMjNDLFVBQVU1akMsT0FNckQvVCxLQUFLOHdDLFNBT1Q0RyxFQUFXbDFDLFVBQVVrNEMsc0JBQXdCLFNBQVVoVCxHQUNuRDFuQyxLQUFLZ3VDLEtBQUssMERBQ05odUMsS0FBSzgzQyxVQUNMOTNDLEtBQUs4M0MsUUFBUXBRLEdBQ2IxbkMsS0FBSzgzQyxRQUFVLE1BSW5COTNDLEtBQUt1dUMsY0FBZ0IsS0FDckJ2dUMsS0FBSzh3QyxTQUVUNEcsRUFBV2wxQyxVQUFVbTNDLFVBQVksU0FBVWx0QyxHQUN2QyxHQUFvQixJQUFoQnpNLEtBQUtpNEMsT0FDTCxLQUFNLDhCQUdOajRDLEtBQUs0NEMsSUFBSTNILEtBQUt4a0MsSUFNdEJpckMsRUFBV2wxQyxVQUFVc3VDLE1BQVEsV0FDTCxJQUFoQjl3QyxLQUFLaTRDLFNBQ0xqNEMsS0FBS2d1QyxLQUFLLGdDQUNWaHVDLEtBQUtpNEMsT0FBUyxFQUNkajRDLEtBQUtvN0Msb0JBQ0RwN0MsS0FBS3V1QyxnQkFDTHZ1QyxLQUFLdXVDLGdCQUNMdnVDLEtBQUt1dUMsY0FBZ0IsUUFRakNtSixFQUFXbDFDLFVBQVU0NEMsa0JBQW9CLFdBQ3JDcDdDLEtBQUtndUMsS0FBSyxpQ0FDTmh1QyxLQUFLcTRDLFFBQ0xyNEMsS0FBS3E0QyxNQUFNdkgsUUFDWDl3QyxLQUFLcTRDLE1BQVEsTUFFYnI0QyxLQUFLODRDLGlCQUNMOTRDLEtBQUs4NEMsZUFBZWhJLFFBQ3BCOXdDLEtBQUs4NEMsZUFBaUIsTUFFdEI5NEMsS0FBS2k1QyxrQkFDTHpKLGFBQWF4dkMsS0FBS2k1QyxpQkFDbEJqNUMsS0FBS2k1QyxnQkFBa0IsT0FHeEJ2QixFQTVib0IsR0FxZDNCMkQsR0FBK0IsV0FDL0IsU0FBU0EsS0EwQ1QsT0FsQ0FBLEVBQWM3NEMsVUFBVTg0QyxJQUFNLFNBQVVqcUMsRUFBWTVFLEVBQU11TSxFQUFZaUUsS0FPdEVvK0IsRUFBYzc0QyxVQUFVaTJCLE1BQVEsU0FBVXBuQixFQUFZNUUsRUFBTXVNLEVBQVlpRSxLQUt4RW8rQixFQUFjNzRDLFVBQVUrNEMsaUJBQW1CLFNBQVVDLEtBTXJESCxFQUFjNzRDLFVBQVVpNUMsZ0JBQWtCLFNBQVVwcUMsRUFBWTVFLEVBQU11TSxLQU10RXFpQyxFQUFjNzRDLFVBQVVrNUMsa0JBQW9CLFNBQVVycUMsRUFBWTVFLEVBQU11TSxLQUt4RXFpQyxFQUFjNzRDLFVBQVV5VyxtQkFBcUIsU0FBVTVILEVBQVkySCxLQUluRXFpQyxFQUFjNzRDLFVBQVUybkMsWUFBYyxTQUFVSCxLQUN6Q3FSLEVBM0N1QixHQThEOUJNLEdBQXNCLElBY3RCQyxHQUFzQyxTQUFVNWdDLEdBUWhELFNBQVM0Z0MsRUFBcUJqRSxFQUFXQyxFQUFnQmlFLEVBQWVDLEVBQWtCQyxFQUFxQkMsRUFBb0JDLEdBQy9ILElBQUk5NkMsRUFBUTZaLEVBQU8zWSxLQUFLckMsT0FBU0EsS0FrQ2pDLEdBakNBbUIsRUFBTXcyQyxVQUFZQSxFQUNsQngyQyxFQUFNeTJDLGVBQWlCQSxFQUN2QnoyQyxFQUFNMDZDLGNBQWdCQSxFQUN0QjE2QyxFQUFNMjZDLGlCQUFtQkEsRUFDekIzNkMsRUFBTTQ2QyxvQkFBc0JBLEVBQzVCNTZDLEVBQU02NkMsbUJBQXFCQSxFQUMzQjc2QyxFQUFNODZDLGNBQWdCQSxFQUV0Qjk2QyxFQUFNNEksR0FBSzZ4QyxFQUFxQk0sOEJBQ2hDLzZDLEVBQU02c0MsS0FBTzNoQyxFQUFXLEtBQU9sTCxFQUFNNEksR0FBSyxLQUMxQzVJLEVBQU1nN0Msa0JBQW9CLEdBRTFCaDdDLEVBQU1pN0MsUUFBVSxJQUFJMTNDLElBQ3BCdkQsRUFBTWs3QyxpQkFBbUIsR0FDekJsN0MsRUFBTW03QyxxQkFBdUIsRUFDN0JuN0MsRUFBTW83QywwQkFBNEIsR0FDbENwN0MsRUFBTXE3QyxZQUFhLEVBQ25CcjdDLEVBQU1zN0MsZ0JBQWtCZCxHQUN4Qng2QyxFQUFNdTdDLG1CQXpDb0IsSUEwQzFCdjdDLEVBQU13N0MsdUJBQXlCLEtBQy9CeDdDLEVBQU15c0MsY0FBZ0IsS0FDdEJ6c0MsRUFBTXk3QywwQkFBNEIsS0FDbEN6N0MsRUFBTWdyQyxVQUFXLEVBRWpCaHJDLEVBQU0wN0MsZUFBaUIsR0FDdkIxN0MsRUFBTTI3QyxlQUFpQixFQUN2QjM3QyxFQUFNNDdDLFVBQVksS0FDbEI1N0MsRUFBTTY3QyxXQUFhLEtBQ25CNzdDLEVBQU04N0Msb0JBQXFCLEVBQzNCOTdDLEVBQU0rN0MsdUJBQXlCLEVBQy9CLzdDLEVBQU1nOEMsa0JBQW1CLEVBQ3pCaDhDLEVBQU1pOEMsMkJBQTZCLEtBQ25DajhDLEVBQU1rOEMsK0JBQWlDLEtBQ25DcEIsS0FBa0IsVUFDbEIsTUFBTSxJQUFJbHpDLE1BQU0sa0ZBT3BCLE9BTEE1SCxFQUFNbThDLGlCQUFpQixHQUN2QnhSLEdBQWtCTSxjQUFjeGdCLEdBQUcsVUFBV3pxQixFQUFNbzhDLFdBQVlwOEMsSUFDckIsSUFBdkN3MkMsRUFBVTVqQyxLQUFLcE0sUUFBUSxZQUN2QjBrQyxHQUFjRCxjQUFjeGdCLEdBQUcsU0FBVXpxQixFQUFNcThDLFVBQVdyOEMsR0FFdkRBLEVBOHBCWCxPQWh0QkEsUUFBVXk2QyxFQUFzQjVnQyxHQW9EaEM0Z0MsRUFBcUJwNUMsVUFBVSsyQyxZQUFjLFNBQVV6OEIsRUFBUWl5QixFQUFNME8sR0FDakUsSUFBSUMsSUFBYzE5QyxLQUFLODhDLGVBQ25CckQsRUFBTSxDQUFFaFYsRUFBY3ozQixFQUFHOFAsRUFBUTdQLEVBQUc4aEMsR0FDeEMvdUMsS0FBS2d1QyxNQUFLLFFBQVV5TCxLQUNwQixRQUFPejVDLEtBQUt3OEMsV0FBWSwwREFDeEJ4OEMsS0FBSys4QyxVQUFVeEQsWUFBWUUsR0FDdkJnRSxJQUNBejlDLEtBQUs2OEMsZUFBZWEsR0FBYUQsSUFNekM3QixFQUFxQnA1QyxVQUFVbTdDLE9BQVMsU0FBVXgwQixFQUFPeTBCLEVBQWV0WixFQUFLdHJCLEdBQ3pFLElBQUk4WCxFQUFVM0gsRUFBTTRFLGtCQUNoQjFjLEVBQWE4WCxFQUFNblcsS0FBS3ZJLFdBQzVCekssS0FBS2d1QyxLQUFLLHFCQUF1QjM4QixFQUFhLElBQU15ZixHQUMvQzl3QixLQUFLbzhDLFFBQVFqMkMsSUFBSWtMLElBQ2xCclIsS0FBS284QyxRQUFRejVDLElBQUkwTyxFQUFZLElBQUkzTSxNQUVyQyxRQUFPeWtCLEVBQU1DLGlCQUFpQitkLGNBQ3pCaGUsRUFBTUMsaUJBQWlCbVUsZUFBZ0IsdURBQzVDLFNBQVF2OUIsS0FBS284QyxRQUFRMzVDLElBQUk0TyxHQUFZbEwsSUFBSTJxQixHQUFVLGdEQUNuRCxJQUFJK3NCLEVBQWEsQ0FDYjdrQyxXQUFZQSxFQUNacXRCLE9BQVF1WCxFQUNSejBCLE1BQU9BLEVBQ1BtYixJQUFLQSxHQUVUdGtDLEtBQUtvOEMsUUFBUTM1QyxJQUFJNE8sR0FBWTFPLElBQUltdUIsRUFBUytzQixHQUN0Qzc5QyxLQUFLdzhDLFlBQ0x4OEMsS0FBSzg5QyxZQUFZRCxJQUd6QmpDLEVBQXFCcDVDLFVBQVVzN0MsWUFBYyxTQUFVRCxHQUNuRCxJQUFJMThDLEVBQVFuQixLQUNSbXBCLEVBQVEwMEIsRUFBVzEwQixNQUNuQjlYLEVBQWE4WCxFQUFNblcsS0FBS3ZJLFdBQ3hCcW1CLEVBQVUzSCxFQUFNNEUsa0JBQ3BCL3RCLEtBQUtndUMsS0FBSyxhQUFlMzhCLEVBQWEsUUFBVXlmLEdBQ2hELElBQUlpdEIsRUFBTSxDQUFXQyxFQUFHM3NDLEdBR3BCd3NDLEVBQVd2WixNQUNYeVosRUFBTyxFQUFJNTBCLEVBQU0wRSxjQUNqQmt3QixFQUFPLEVBQUlGLEVBQVd2WixLQUUxQnlaLEVBQWdCLEVBQUlGLEVBQVd4WCxTQUMvQnJtQyxLQUFLdTVDLFlBUFEsSUFPWXdFLEdBQUssU0FBVWx5QyxHQUNwQyxJQUFJMnVDLEVBQVUzdUMsRUFBb0IsRUFDOUIyN0IsRUFBUzM3QixFQUFzQixFQUVuQyt2QyxFQUFxQnFDLHNCQUFzQnpELEVBQVNyeEIsSUFDNUJob0IsRUFBTWk3QyxRQUFRMzVDLElBQUk0TyxJQUN0Q2xRLEVBQU1pN0MsUUFBUTM1QyxJQUFJNE8sR0FBWTVPLElBQUlxdUIsTUFFWitzQixJQUN0QjE4QyxFQUFNNnNDLEtBQUssa0JBQW1CbmlDLEdBQ2YsT0FBWDI3QixHQUNBcm1DLEVBQU0rOEMsY0FBYzdzQyxFQUFZeWYsR0FFaEMrc0IsRUFBVzdrQyxZQUNYNmtDLEVBQVc3a0MsV0FBV3d1QixFQUFRZ1QsUUFLOUNvQixFQUFxQnFDLHNCQUF3QixTQUFVekQsRUFBU3J4QixHQUM1RCxHQUFJcXhCLEdBQThCLGlCQUFaQSxJQUF3QixRQUFTQSxFQUFTLEtBQU0sQ0FFbEUsSUFBSTJELEdBQVcsUUFBUTNELEVBQVMsS0FDaEMsR0FBSWp4QyxNQUFNd0MsUUFBUW95QyxLQUFjQSxFQUFTeDJDLFFBQVEsWUFBYSxDQUMxRCxJQUFJeTJDLEVBQVksZ0JBQWtCajFCLEVBQU1DLGlCQUFpQkMsV0FBVzVlLFdBQWEsSUFDN0U0ekMsRUFBWWwxQixFQUFNblcsS0FBS3ZJLFdBQzNCL0UsRUFBSyx3R0FDNkMwNEMsRUFBWSxPQUN6REMsRUFBWSxzREFPN0J6QyxFQUFxQnA1QyxVQUFVKzRDLGlCQUFtQixTQUFVQyxHQUN4RHg3QyxLQUFLZzlDLFdBQWF4QixFQUNsQng3QyxLQUFLZ3VDLEtBQUssd0JBQ05odUMsS0FBS2c5QyxXQUNMaDlDLEtBQUtzK0MsVUFLRHQrQyxLQUFLdzhDLFlBQ0x4OEMsS0FBS3U1QyxZQUFZLFNBQVUsSUFBSSxlQUd2Q3Y1QyxLQUFLdStDLHVDQUF1Qy9DLElBRWhESSxFQUFxQnA1QyxVQUFVKzdDLHVDQUF5QyxTQUFVQyxJQUd2REEsR0FBb0MsS0FBdEJBLEVBQVcvM0MsU0FDeEIsUUFBUSszQyxNQUM1QngrQyxLQUFLZ3VDLEtBQUssaUVBQ1ZodUMsS0FBSzA4QyxtQkF6S29CLE1BZ0xqQ2QsRUFBcUJwNUMsVUFBVTg3QyxRQUFVLFdBQ3JDLElBQUluOUMsRUFBUW5CLEtBQ1osR0FBSUEsS0FBS3c4QyxZQUFjeDhDLEtBQUtnOUMsV0FBWSxDQUNwQyxJQUFJeUIsRUFBVXorQyxLQUFLZzlDLFdBQ2YwQixHQUFhLFFBQWNELEdBQVcsT0FBUyxRQUMvQ0UsRUFBYyxDQUFFQyxLQUFNSCxHQUNDLE9BQXZCeitDLEtBQUtpOEMsY0FDTDBDLEVBQW9CLFFBQUksRUFFVyxpQkFBdkIzK0MsS0FBS2k4QyxnQkFDakIwQyxFQUFxQixRQUFJMytDLEtBQUtpOEMsZUFFbENqOEMsS0FBS3U1QyxZQUFZbUYsRUFBWUMsR0FBYSxTQUFVRSxHQUNoRCxJQUFJclgsRUFBU3FYLEVBQWtCLEVBQzNCcHlDLEVBQU9veUMsRUFBZ0IsR0FBSyxRQUM1QjE5QyxFQUFNNjdDLGFBQWV5QixJQUNOLE9BQVhqWCxFQUNBcm1DLEVBQU0rN0MsdUJBQXlCLEVBSS9CLzdDLEVBQU0yOUMsZUFBZXRYLEVBQVEvNkIsU0FTakRtdkMsRUFBcUJwNUMsVUFBVXU4QyxTQUFXLFNBQVU1MUIsRUFBT21iLEdBQ3ZELElBQUlqekIsRUFBYThYLEVBQU1uVyxLQUFLdkksV0FDeEJxbUIsRUFBVTNILEVBQU00RSxrQkFDcEIvdEIsS0FBS2d1QyxLQUFLLHVCQUF5QjM4QixFQUFhLElBQU15ZixJQUN0RCxRQUFPM0gsRUFBTUMsaUJBQWlCK2QsY0FDekJoZSxFQUFNQyxpQkFBaUJtVSxlQUFnQix3REFDL0J2OUIsS0FBS2srQyxjQUFjN3NDLEVBQVl5ZixJQUM5Qjl3QixLQUFLdzhDLFlBQ2Z4OEMsS0FBS2cvQyxjQUFjM3RDLEVBQVl5ZixFQUFTM0gsRUFBTTBFLGNBQWV5VyxJQUdyRXNYLEVBQXFCcDVDLFVBQVV3OEMsY0FBZ0IsU0FBVTN0QyxFQUFZeWYsRUFBU211QixFQUFVM2EsR0FDcEZ0a0MsS0FBS2d1QyxLQUFLLGVBQWlCMzhCLEVBQWEsUUFBVXlmLEdBQ2xELElBQUlpdEIsRUFBTSxDQUFXQyxFQUFHM3NDLEdBR3BCaXpCLElBQ0F5WixFQUFPLEVBQUlrQixFQUNYbEIsRUFBTyxFQUFJelosR0FFZnRrQyxLQUFLdTVDLFlBTlEsSUFNWXdFLElBSzdCbkMsRUFBcUJwNUMsVUFBVWk1QyxnQkFBa0IsU0FBVXBxQyxFQUFZNUUsRUFBTXVNLEdBQ3JFaFosS0FBS3c4QyxXQUNMeDhDLEtBQUtrL0Msa0JBQWtCLElBQUs3dEMsRUFBWTVFLEVBQU11TSxHQUc5Q2haLEtBQUt1OEMsMEJBQTBCOTJDLEtBQUssQ0FDaEM0TCxXQUFZQSxFQUNaeUwsT0FBUSxJQUNSclEsS0FBTUEsRUFDTnVNLFdBQVlBLEtBT3hCNGlDLEVBQXFCcDVDLFVBQVVrNUMsa0JBQW9CLFNBQVVycUMsRUFBWTVFLEVBQU11TSxHQUN2RWhaLEtBQUt3OEMsV0FDTHg4QyxLQUFLay9DLGtCQUFrQixLQUFNN3RDLEVBQVk1RSxFQUFNdU0sR0FHL0NoWixLQUFLdThDLDBCQUEwQjkyQyxLQUFLLENBQ2hDNEwsV0FBWUEsRUFDWnlMLE9BQVEsS0FDUnJRLEtBQU1BLEVBQ051TSxXQUFZQSxLQU94QjRpQyxFQUFxQnA1QyxVQUFVeVcsbUJBQXFCLFNBQVU1SCxFQUFZMkgsR0FDbEVoWixLQUFLdzhDLFdBQ0x4OEMsS0FBS2svQyxrQkFBa0IsS0FBTTd0QyxFQUFZLEtBQU0ySCxHQUcvQ2haLEtBQUt1OEMsMEJBQTBCOTJDLEtBQUssQ0FDaEM0TCxXQUFZQSxFQUNaeUwsT0FBUSxLQUNSclEsS0FBTSxLQUNOdU0sV0FBWUEsS0FJeEI0aUMsRUFBcUJwNUMsVUFBVTA4QyxrQkFBb0IsU0FBVXBpQyxFQUFRekwsRUFBWTVFLEVBQU11TSxHQUNuRixJQUFJbW1DLEVBQVUsQ0FBV25CLEVBQUczc0MsRUFBcUIyaEMsRUFBR3ZtQyxHQUNwRHpNLEtBQUtndUMsS0FBSyxnQkFBa0JseEIsRUFBUXFpQyxHQUNwQ24vQyxLQUFLdTVDLFlBQVl6OEIsRUFBUXFpQyxHQUFTLFNBQVVDLEdBQ3BDcG1DLEdBQ0EzSSxZQUFXLFdBQ1AySSxFQUFXb21DLEVBQXVCLEVBQUdBLEVBQXVCLEtBQzdEbHdDLEtBQUtJLE1BQU0sUUFPMUJzc0MsRUFBcUJwNUMsVUFBVTg0QyxJQUFNLFNBQVVqcUMsRUFBWTVFLEVBQU11TSxFQUFZaUUsR0FDekVqZCxLQUFLcS9DLFlBQVksSUFBS2h1QyxFQUFZNUUsRUFBTXVNLEVBQVlpRSxJQUt4RDIrQixFQUFxQnA1QyxVQUFVaTJCLE1BQVEsU0FBVXBuQixFQUFZNUUsRUFBTXVNLEVBQVlpRSxHQUMzRWpkLEtBQUtxL0MsWUFBWSxJQUFLaHVDLEVBQVk1RSxFQUFNdU0sRUFBWWlFLElBRXhEMitCLEVBQXFCcDVDLFVBQVU2OEMsWUFBYyxTQUFVdmlDLEVBQVF6TCxFQUFZNUUsRUFBTXVNLEVBQVlpRSxHQUN6RixJQUFJa2lDLEVBQVUsQ0FDRG5CLEVBQUczc0MsRUFDSDJoQyxFQUFHdm1DLFFBRUhwTSxJQUFUNGMsSUFDQWtpQyxFQUFvQixFQUFJbGlDLEdBRzVCamQsS0FBS3E4QyxpQkFBaUI1MkMsS0FBSyxDQUN2QnFYLE9BQVFBLEVBQ1JxaUMsUUFBU0EsRUFDVG5tQyxXQUFZQSxJQUVoQmhaLEtBQUtzOEMsdUJBQ0wsSUFBSXovQixFQUFRN2MsS0FBS3E4QyxpQkFBaUI1MUMsT0FBUyxFQUN2Q3pHLEtBQUt3OEMsV0FDTHg4QyxLQUFLcy9DLFNBQVN6aUMsR0FHZDdjLEtBQUtndUMsS0FBSyxrQkFBb0IzOEIsSUFHdEN1cUMsRUFBcUJwNUMsVUFBVTg4QyxTQUFXLFNBQVV6aUMsR0FDaEQsSUFBSTFiLEVBQVFuQixLQUNSOGMsRUFBUzljLEtBQUtxOEMsaUJBQWlCeC9CLEdBQU9DLE9BQ3RDcWlDLEVBQVVuL0MsS0FBS3E4QyxpQkFBaUJ4L0IsR0FBT3NpQyxRQUN2Q25tQyxFQUFhaFosS0FBS3E4QyxpQkFBaUJ4L0IsR0FBTzdELFdBQzlDaFosS0FBS3E4QyxpQkFBaUJ4L0IsR0FBTzBpQyxPQUFTdi9DLEtBQUt3OEMsV0FDM0N4OEMsS0FBS3U1QyxZQUFZejhCLEVBQVFxaUMsR0FBUyxTQUFVdHpDLEdBQ3hDMUssRUFBTTZzQyxLQUFLbHhCLEVBQVMsWUFBYWpSLFVBQzFCMUssRUFBTWs3QyxpQkFBaUJ4L0IsR0FDOUIxYixFQUFNbTdDLHVCQUU2QixJQUEvQm43QyxFQUFNbTdDLHVCQUNObjdDLEVBQU1rN0MsaUJBQW1CLElBRXpCcmpDLEdBQ0FBLEVBQVduTixFQUFzQixFQUFHQSxFQUFzQixPQU90RSt2QyxFQUFxQnA1QyxVQUFVMm5DLFlBQWMsU0FBVUgsR0FDbkQsSUFBSTdvQyxFQUFRbkIsS0FFWixHQUFJQSxLQUFLdzhDLFdBQVksQ0FDakIsSUFBSTJDLEVBQVUsQ0FBZXB4QyxFQUFHaThCLEdBQ2hDaHFDLEtBQUtndUMsS0FBSyxjQUFlbVIsR0FDekJuL0MsS0FBS3U1QyxZQUFzQixJQUFLNEYsR0FBUyxTQUFVMWdDLEdBRS9DLEdBQWUsT0FERkEsRUFBcUIsRUFDYixDQUNqQixJQUFJK2dDLEVBQWMvZ0MsRUFBcUIsRUFDdkN0ZCxFQUFNNnNDLEtBQUssY0FBZSx3QkFBMEJ3UixTQUtwRTVELEVBQXFCcDVDLFVBQVU4M0MsZUFBaUIsU0FBVXp1QyxHQUN0RCxHQUFJLE1BQU9BLEVBQVMsQ0FFaEI3TCxLQUFLZ3VDLEtBQUssaUJBQWtCLFFBQVVuaUMsSUFDdEMsSUFBSTR6QyxFQUFTNXpDLEVBQVcsRUFDcEI0eEMsRUFBYXo5QyxLQUFLNjhDLGVBQWU0QyxHQUNqQ2hDLFdBQ096OUMsS0FBSzY4QyxlQUFlNEMsR0FDM0JoQyxFQUFXNXhDLEVBQW9CLFFBR2xDLElBQUksVUFBV0EsRUFDaEIsS0FBTSxxQ0FBdUNBLEVBQWUsTUFFdkQsTUFBT0EsR0FFWjdMLEtBQUswL0MsWUFBWTd6QyxFQUFXLEVBQUdBLEVBQVcsS0FHbEQrdkMsRUFBcUJwNUMsVUFBVWs5QyxZQUFjLFNBQVU1aUMsRUFBUWl5QixHQUMzRC91QyxLQUFLZ3VDLEtBQUssc0JBQXVCbHhCLEVBQVFpeUIsR0FDMUIsTUFBWGp5QixFQUNBOWMsS0FBSzY3QyxjQUFjOU0sRUFBaUIsRUFBR0EsRUFBaUIsR0FDNUMsRUFBT0EsRUFBUSxHQUVYLE1BQVhqeUIsRUFDTDljLEtBQUs2N0MsY0FBYzlNLEVBQWlCLEVBQUdBLEVBQWlCLEdBQzNDLEVBQU1BLEVBQVEsR0FFWCxNQUFYanlCLEVBQ0w5YyxLQUFLMi9DLGlCQUFpQjVRLEVBQWlCLEVBQUdBLEVBQWtCLEdBRTVDLE9BQVhqeUIsRUFDTDljLEtBQUs4K0MsZUFBZS9QLEVBQXdCLEVBQUdBLEVBQTBCLEdBRXpELE9BQVhqeUIsRUFDTDljLEtBQUs0L0MsdUJBQXVCN1EsR0FHNUJ2dkMsRUFBTSw4Q0FDRixRQUFVc2QsR0FDVix1Q0FHWjgrQixFQUFxQnA1QyxVQUFVcTFDLFNBQVcsU0FBVWlELEVBQVdFLEdBQzNEaDdDLEtBQUtndUMsS0FBSyxvQkFDVmh1QyxLQUFLdzhDLFlBQWEsRUFDbEJ4OEMsS0FBS3E5QyxnQ0FBaUMsSUFBSXdDLE1BQU9DLFVBQ2pEOS9DLEtBQUsrL0MsaUJBQWlCakYsR0FDdEI5NkMsS0FBSzR0QyxjQUFnQm9OLEVBQ2pCaDdDLEtBQUttOUMsa0JBQ0xuOUMsS0FBS2dnRCxvQkFFVGhnRCxLQUFLaWdELGdCQUNMamdELEtBQUttOUMsa0JBQW1CLEVBQ3hCbjlDLEtBQUs4N0Msa0JBQWlCLElBRTFCRixFQUFxQnA1QyxVQUFVODZDLGlCQUFtQixTQUFVN3NDLEdBQ3hELElBQUl0UCxFQUFRbkIsTUFDWixTQUFRQSxLQUFLKzhDLFVBQVcsMERBQ3BCLzhDLEtBQUs0OEMsMkJBQ0xwTixhQUFheHZDLEtBQUs0OEMsMkJBSXRCNThDLEtBQUs0OEMsMEJBQTRCdnNDLFlBQVcsV0FDeENsUCxFQUFNeTdDLDBCQUE0QixLQUNsQ3o3QyxFQUFNKytDLHlCQUVQaHhDLEtBQUtJLE1BQU1tQixLQUVsQm1yQyxFQUFxQnA1QyxVQUFVKzZDLFdBQWEsU0FBVXJjLEdBRTlDQSxJQUNDbGhDLEtBQUttc0MsVUFDTm5zQyxLQUFLeThDLGtCQUFvQno4QyxLQUFLMDhDLHFCQUM5QjE4QyxLQUFLZ3VDLEtBQUssMkNBQ1ZodUMsS0FBS3k4QyxnQkFBa0JkLEdBQ2xCMzdDLEtBQUsrOEMsV0FDTi84QyxLQUFLczlDLGlCQUFpQixJQUc5QnQ5QyxLQUFLbXNDLFNBQVdqTCxHQUVwQjBhLEVBQXFCcDVDLFVBQVVnN0MsVUFBWSxTQUFVMkMsR0FDN0NBLEdBQ0FuZ0QsS0FBS2d1QyxLQUFLLHdCQUNWaHVDLEtBQUt5OEMsZ0JBQWtCZCxHQUNsQjM3QyxLQUFLKzhDLFdBQ04vOEMsS0FBS3M5QyxpQkFBaUIsS0FJMUJ0OUMsS0FBS2d1QyxLQUFLLDhDQUNOaHVDLEtBQUsrOEMsV0FDTC84QyxLQUFLKzhDLFVBQVVqTSxVQUkzQjhLLEVBQXFCcDVDLFVBQVU0OUMsc0JBQXdCLFdBUW5ELEdBUEFwZ0QsS0FBS2d1QyxLQUFLLDRCQUNWaHVDLEtBQUt3OEMsWUFBYSxFQUNsQng4QyxLQUFLKzhDLFVBQVksS0FFakIvOEMsS0FBS3FnRCwwQkFFTHJnRCxLQUFLNjhDLGVBQWlCLEdBQ2xCNzhDLEtBQUtzZ0QsbUJBQW9CLENBQ3BCdGdELEtBQUttc0MsU0FLRG5zQyxLQUFLcTlDLGtDQUUwQixJQUFJd0MsTUFBT0MsVUFBWTkvQyxLQUFLcTlDLCtCQXhkNUMsTUEwZGhCcjlDLEtBQUt5OEMsZ0JBQWtCZCxJQUUzQjM3QyxLQUFLcTlDLCtCQUFpQyxPQVZ0Q3I5QyxLQUFLZ3VDLEtBQUssOENBQ1ZodUMsS0FBS3k4QyxnQkFBa0J6OEMsS0FBSzA4QyxtQkFDNUIxOEMsS0FBS285Qyw0QkFBNkIsSUFBSXlDLE1BQU9DLFdBVWpELElBQUlTLEdBQThCLElBQUlWLE1BQU9DLFVBQVk5L0MsS0FBS285QywyQkFDMURvRCxFQUFpQnR4QyxLQUFLa0UsSUFBSSxFQUFHcFQsS0FBS3k4QyxnQkFBa0I4RCxHQUN4REMsRUFBaUJ0eEMsS0FBSytLLFNBQVd1bUMsRUFDakN4Z0QsS0FBS2d1QyxLQUFLLDBCQUE0QndTLEVBQWlCLE1BQ3ZEeGdELEtBQUtzOUMsaUJBQWlCa0QsR0FFdEJ4Z0QsS0FBS3k4QyxnQkFBa0J2dEMsS0FBS0csSUFBSXJQLEtBQUswOEMsbUJBcmVoQixJQXFlb0MxOEMsS0FBS3k4QyxpQkFFbEV6OEMsS0FBSzg3QyxrQkFBaUIsSUFFMUJGLEVBQXFCcDVDLFVBQVUwOUMscUJBQXVCLFdBQ2xELElBQUkvK0MsRUFBUW5CLEtBQ1osR0FBSUEsS0FBS3NnRCxtQkFBb0IsQ0FDekJ0Z0QsS0FBS2d1QyxLQUFLLCtCQUNWaHVDLEtBQUtvOUMsNEJBQTZCLElBQUl5QyxNQUFPQyxVQUM3QzkvQyxLQUFLcTlDLCtCQUFpQyxLQUN0QyxJQUFJb0QsRUFBa0J6Z0QsS0FBS3M2QyxlQUFlNXpDLEtBQUsxRyxNQUMzQzBnRCxFQUFZMWdELEtBQUs2M0MsU0FBU254QyxLQUFLMUcsTUFDL0IyZ0QsRUFBaUIzZ0QsS0FBS29nRCxzQkFBc0IxNUMsS0FBSzFHLE1BQ2pENGdELEVBQVc1Z0QsS0FBSytKLEdBQUssSUFBTTZ4QyxFQUFxQmlGLG9CQUNoRHp3QixFQUFTcHdCLEtBQ1Q4Z0QsRUFBa0I5Z0QsS0FBSzR0QyxjQUN2Qm1ULEdBQWEsRUFDYkMsRUFBZSxLQUNmQyxFQUFZLFdBQ1JELEVBQ0FBLEVBQWFsUSxTQUdiaVEsR0FBYSxFQUNiSixNQU9SM2dELEtBQUsrOEMsVUFBWSxDQUNiak0sTUFBT21RLEVBQ1AxSCxZQU5nQixTQUFVRSxJQUMxQixRQUFPdUgsRUFBYywwREFDckJBLEVBQWF6SCxZQUFZRSxLQU03QixJQUFJeUgsRUFBZWxoRCxLQUFLaTlDLG1CQUN4Qmo5QyxLQUFLaTlDLG9CQUFxQixFQUUxQmo5QyxLQUFLZzhDLG1CQUNBbUYsU0FBU0QsR0FDVHZoRCxNQUFLLFNBQVU4ZSxHQUNYc2lDLEVBVUQzOEMsRUFBSSwwQ0FUSkEsRUFBSSw4Q0FDSmdzQixFQUFPNHNCLFdBQWF2K0IsR0FBVUEsRUFBTzJpQyxZQUNyQ0osRUFBZSxJQUFJdEosR0FBV2tKLEVBQVV4d0IsRUFBT3VuQixVQUFXdm5CLEVBQU93bkIsZUFBZ0I2SSxFQUFpQkMsRUFBV0MsR0FDL0YsU0FBVWpaLEdBQ3BCaGlDLEVBQUtnaUMsRUFBUyxLQUFPdFgsRUFBT3VuQixVQUFVbHRDLFdBQWEsS0FDbkQybEIsRUFBT2l4QixVQWxoQkksaUJBbWhCWlAsT0FNTm5oRCxLQUFLLE1BQU0sU0FBVUgsR0FDdEI0d0IsRUFBTzRkLEtBQUssd0JBQTBCeHVDLEdBQ2pDdWhELElBQ0c1L0MsRUFBTXcyQyxVQUFVempDLFdBSWhCeE8sRUFBS2xHLEdBRVR5aEQsVUFLaEJyRixFQUFxQnA1QyxVQUFVNitDLFVBQVksU0FBVTNaLEdBQ2pEdGpDLEVBQUksdUNBQXlDc2pDLEdBQzdDMW5DLEtBQUttOEMsa0JBQWtCelUsSUFBVSxFQUM3QjFuQyxLQUFLKzhDLFVBQ0wvOEMsS0FBSys4QyxVQUFVak0sU0FHWDl3QyxLQUFLNDhDLDRCQUNMcE4sYUFBYXh2QyxLQUFLNDhDLDJCQUNsQjU4QyxLQUFLNDhDLDBCQUE0QixNQUVqQzU4QyxLQUFLdzhDLFlBQ0x4OEMsS0FBS29nRCwwQkFJakJ4RSxFQUFxQnA1QyxVQUFVOCtDLE9BQVMsU0FBVTVaLEdBQzlDdGpDLEVBQUksbUNBQXFDc2pDLFVBQ2xDMW5DLEtBQUttOEMsa0JBQWtCelUsSUFDMUIsUUFBUTFuQyxLQUFLbThDLHFCQUNibjhDLEtBQUt5OEMsZ0JBQWtCZCxHQUNsQjM3QyxLQUFLKzhDLFdBQ04vOEMsS0FBS3M5QyxpQkFBaUIsS0FJbEMxQixFQUFxQnA1QyxVQUFVdTlDLGlCQUFtQixTQUFVakYsR0FDeEQsSUFBSTFyQixFQUFRMHJCLEdBQVksSUFBSStFLE1BQU9DLFVBQ25DOS9DLEtBQUsrN0Msb0JBQW9CLENBQUV3RixpQkFBa0JueUIsS0FFakR3c0IsRUFBcUJwNUMsVUFBVTY5Qyx3QkFBMEIsV0FDckQsSUFBSyxJQUFJdjBDLEVBQUksRUFBR0EsRUFBSTlMLEtBQUtxOEMsaUJBQWlCNTFDLE9BQVFxRixJQUFLLENBQ25ELElBQUl3dkMsRUFBTXQ3QyxLQUFLcThDLGlCQUFpQnZ3QyxHQUM1Qnd2QyxHQUFnQixNQUFPQSxFQUFJNkQsU0FBVzdELEVBQUlpRSxTQUN0Q2pFLEVBQUl0aUMsWUFDSnNpQyxFQUFJdGlDLFdBQVcscUJBRVpoWixLQUFLcThDLGlCQUFpQnZ3QyxHQUM3QjlMLEtBQUtzOEMsd0JBSXFCLElBQTlCdDhDLEtBQUtzOEMsdUJBQ0x0OEMsS0FBS3E4QyxpQkFBbUIsS0FHaENULEVBQXFCcDVDLFVBQVVtOUMsaUJBQW1CLFNBQVV0dUMsRUFBWThYLEdBRXBFLElBQUkySCxFQUtBQSxFQUpDM0gsRUFJU0EsRUFBTWhtQixLQUFJLFNBQVVxK0MsR0FBSyxPQUFPaDBDLEVBQWtCZzBDLE1BQU83N0MsS0FBSyxLQUg5RCxVQUtkLElBQUlnNEMsRUFBUzM5QyxLQUFLaytDLGNBQWM3c0MsRUFBWXlmLEdBQ3hDNnNCLEdBQVVBLEVBQU8za0MsWUFDakIya0MsRUFBTzNrQyxXQUFXLHNCQUcxQjRpQyxFQUFxQnA1QyxVQUFVMDdDLGNBQWdCLFNBQVU3c0MsRUFBWXlmLEdBQ2pFLElBQ0k2c0IsRUFEQThELEVBQXVCLElBQUkvd0MsRUFBS1csR0FBWTVHLFdBRWhELEdBQUl6SyxLQUFLbzhDLFFBQVFqMkMsSUFBSXM3QyxHQUF1QixDQUN4QyxJQUFJdCtDLEVBQU1uRCxLQUFLbzhDLFFBQVEzNUMsSUFBSWcvQyxHQUMzQjlELEVBQVN4NkMsRUFBSVYsSUFBSXF1QixHQUNqQjN0QixFQUFJSixPQUFPK3RCLEdBQ00sSUFBYjN0QixFQUFJNHNCLE1BQ0ovdkIsS0FBS284QyxRQUFRcjVDLE9BQU8wK0MsUUFLeEI5RCxPQUFTdDlDLEVBRWIsT0FBT3M5QyxHQUVYL0IsRUFBcUJwNUMsVUFBVXM4QyxlQUFpQixTQUFVNEMsRUFBWUMsR0FDbEV2OUMsRUFBSSx1QkFBeUJzOUMsRUFBYSxJQUFNQyxHQUNoRDNoRCxLQUFLZzlDLFdBQWEsS0FDbEJoOUMsS0FBS2k5QyxvQkFBcUIsRUFDMUJqOUMsS0FBSys4QyxVQUFVak0sUUFDSSxrQkFBZjRRLEdBQWlELHNCQUFmQSxJQUlsQzFoRCxLQUFLazlDLHlCQUNEbDlDLEtBQUtrOUMsd0JBNW5CYyxJQThuQm5CbDlDLEtBQUt5OEMsZ0JBbm9CZ0IsSUFzb0JyQno4QyxLQUFLZzhDLG1CQUFtQjRGLDJCQUlwQ2hHLEVBQXFCcDVDLFVBQVVvOUMsdUJBQXlCLFNBQVU3USxHQUMxRC91QyxLQUFLMjhDLHVCQUNMMzhDLEtBQUsyOEMsdUJBQXVCNU4sR0FHeEIsUUFBU0EsR0FDVDVxQyxRQUFRQyxJQUFJLGFBQWUycUMsRUFBVSxJQUFFNzRCLFFBQVEsS0FBTSxrQkFJakUwbEMsRUFBcUJwNUMsVUFBVXk5QyxjQUFnQixXQUMzQyxJQUFJLytDLEVBQUtaLEVBQUltK0IsRUFBSzc4QixFQUVsQjVCLEtBQUtzK0MsVUFDTCxJQUdJLElBQUssSUFBSXQ4QyxHQUFLLFFBQVNoQyxLQUFLbzhDLFFBQVFyNkMsVUFBV29ILEVBQUtuSCxFQUFHQyxRQUFTa0gsRUFBRzFKLEtBQU0wSixFQUFLbkgsRUFBR0MsT0FBUSxDQUNyRixJQUFJOGtDLEVBQVU1OUIsRUFBRzVKLE1BQ2pCLElBQ0ksSUFBSyxJQUFJc2lELEdBQU1wakIsT0FBTSxHQUFRLFFBQVNzSSxFQUFRaGxDLFdBQVkrL0MsRUFBS0QsRUFBRzUvQyxRQUFTNi9DLEVBQUdyaUQsS0FBTXFpRCxFQUFLRCxFQUFHNS9DLE9BQVEsQ0FDaEcsSUFBSTQ3QyxFQUFhaUUsRUFBR3ZpRCxNQUNwQlMsS0FBSzg5QyxZQUFZRCxJQUd6QixNQUFPL2UsR0FBU0wsRUFBTSxDQUFFai9CLE1BQU9zL0IsR0FDL0IsUUFDSSxJQUNRZ2pCLElBQU9BLEVBQUdyaUQsT0FBU21DLEVBQUtpZ0QsRUFBR3ovQyxTQUFTUixFQUFHUyxLQUFLdy9DLEdBRXBELFFBQVUsR0FBSXBqQixFQUFLLE1BQU1BLEVBQUlqL0IsU0FJekMsTUFBTzJDLEdBQVNqQixFQUFNLENBQUUxQixNQUFPMkMsR0FDL0IsUUFDSSxJQUNRZ0gsSUFBT0EsRUFBRzFKLE9BQVNhLEVBQUswQixFQUFHSSxTQUFTOUIsRUFBRytCLEtBQUtMLEdBRXBELFFBQVUsR0FBSWQsRUFBSyxNQUFNQSxFQUFJMUIsT0FFakMsSUFBSyxJQUFJc00sRUFBSSxFQUFHQSxFQUFJOUwsS0FBS3E4QyxpQkFBaUI1MUMsT0FBUXFGLElBQzFDOUwsS0FBS3E4QyxpQkFBaUJ2d0MsSUFDdEI5TCxLQUFLcy9DLFNBQVN4ekMsR0FHdEIsS0FBTzlMLEtBQUt1OEMsMEJBQTBCOTFDLFFBQVEsQ0FDMUMsSUFBSTA0QyxFQUFVbi9DLEtBQUt1OEMsMEJBQTBCckosUUFDN0NsekMsS0FBS2svQyxrQkFBa0JDLEVBQVFyaUMsT0FBUXFpQyxFQUFROXRDLFdBQVk4dEMsRUFBUTF5QyxLQUFNMHlDLEVBQVFubUMsY0FNekY0aUMsRUFBcUJwNUMsVUFBVXc5QyxrQkFBb0IsV0FDL0MsSUFBSWhXLEVBQVEsR0FDUitYLEVBQWEsTUFDYixZQUVJQSxFQURBL2hELEtBQUsyM0MsVUFBVXpqQyxVQUNGLGFBR0EsUUFHckI4MUIsRUFBTSxPQUFTK1gsRUFBYSxJQUFNLzdDLEdBQVlrUSxRQUFRLE1BQU8sTUFBUSxHQUNqRSxVQUNBOHpCLEVBQU0scUJBQXVCLEdBRXhCLFlBQ0xBLEVBQU0seUJBQTJCLEdBRXJDaHFDLEtBQUttcUMsWUFBWUgsSUFFckI0UixFQUFxQnA1QyxVQUFVODlDLGlCQUFtQixXQUM5QyxJQUFJSCxFQUFTOVQsR0FBY0QsY0FBY0csa0JBQ3pDLE9BQU8sUUFBUXZzQyxLQUFLbThDLG9CQUFzQmdFLEdBRTlDdkUsRUFBcUJNLDRCQUE4QixFQUluRE4sRUFBcUJpRixrQkFBb0IsRUFDbENqRixFQWp0QjhCLENBa3RCdkNQLElBdUJFMkcsR0FBb0MsU0FBVWhuQyxHQVE5QyxTQUFTZ25DLEVBQW1CckssRUFBV2tFLEVBQWVHLEdBQ2xELElBQUk3NkMsRUFBUTZaLEVBQU8zWSxLQUFLckMsT0FBU0EsS0FhakMsT0FaQW1CLEVBQU13MkMsVUFBWUEsRUFDbEJ4MkMsRUFBTTA2QyxjQUFnQkEsRUFDdEIxNkMsRUFBTTY2QyxtQkFBcUJBLEVBRTNCNzZDLEVBQU02c0MsS0FBTzNoQyxFQUFXLFdBT3hCbEwsRUFBTThnRCxTQUFXLEdBQ1Y5Z0QsRUErSFgsT0FwSkEsUUFBVTZnRCxFQUFvQmhuQyxHQXVCOUJnbkMsRUFBbUJ4L0MsVUFBVTJuQyxZQUFjLFNBQVVILEdBQ2pELE1BQU0sSUFBSWpoQyxNQUFNLDRCQVFwQmk1QyxFQUFtQkUsYUFBZSxTQUFVLzRCLEVBQU9tYixHQUMvQyxZQUFZamtDLElBQVJpa0MsRUFDTyxPQUFTQSxJQUdoQixRQUFPbmIsRUFBTUMsaUJBQWlCK2QsWUFBYSxrREFDcENoZSxFQUFNblcsS0FBS3ZJLGFBSTFCdTNDLEVBQW1CeC9DLFVBQVVtN0MsT0FBUyxTQUFVeDBCLEVBQU95MEIsRUFBZXRaLEVBQUt0ckIsR0FDdkUsSUFBSTdYLEVBQVFuQixLQUNScVIsRUFBYThYLEVBQU1uVyxLQUFLdkksV0FDNUJ6SyxLQUFLZ3VDLEtBQUsscUJBQXVCMzhCLEVBQWEsSUFBTThYLEVBQU00RSxtQkFFMUQsSUFBSW8wQixFQUFXSCxFQUFtQkUsYUFBYS80QixFQUFPbWIsR0FDbEQ4ZCxFQUFhLEdBQ2pCcGlELEtBQUtpaUQsU0FBU0UsR0FBWUMsRUFDMUIsSUFBSUMsRUFBd0JsNUIsRUFDdkJDLGlCQUNBazVCLDhCQUNMdGlELEtBQUt1aUQsYUFBYWx4QyxFQUFhLFFBQVNneEMsR0FBdUIsU0FBVTdpRCxFQUFPaWYsR0FDNUUsSUFBSWhTLEVBQU9nUyxFQUNHLE1BQVZqZixJQUNBaU4sRUFBTyxLQUNQak4sRUFBUSxNQUVFLE9BQVZBLEdBQ0EyQixFQUFNMDZDLGNBQWN4cUMsRUFBWTVFLEdBQW1CLEVBQU82M0IsSUFFMUQsUUFBUW5qQyxFQUFNOGdELFNBQVVFLEtBQWNDLEdBV3RDcHBDLEVBVEt4WixFQUdjLE1BQVZBLEVBQ00sb0JBR0EsY0FBZ0JBLEVBTmhCLEtBUU0sVUFLakN3aUQsRUFBbUJ4L0MsVUFBVXU4QyxTQUFXLFNBQVU1MUIsRUFBT21iLEdBQ3JELElBQUk2ZCxFQUFXSCxFQUFtQkUsYUFBYS80QixFQUFPbWIsVUFDL0N0a0MsS0FBS2lpRCxTQUFTRSxJQUd6QkgsRUFBbUJ4L0MsVUFBVSs0QyxpQkFBbUIsU0FBVUMsS0FZMUR3RyxFQUFtQngvQyxVQUFVKy9DLGFBQWUsU0FBVWx4QyxFQUFZZ3hDLEVBQXVCeDJCLEdBQ3JGLElBQUkxcUIsRUFBUW5CLFVBQ2tCLElBQTFCcWlELElBQW9DQSxFQUF3QixJQUNoRUEsRUFBOEIsT0FBSSxTQUNsQ3JpRCxLQUFLZzhDLG1CQUNBbUYsVUFBMkIsR0FDM0J4aEQsTUFBSyxTQUFVNmlELEdBQ2hCLElBQUlDLEVBQVlELEdBQWlCQSxFQUFjcEIsWUFDM0NxQixJQUNBSixFQUE0QixLQUFJSSxHQUVwQyxJQUFJalAsR0FBT3J5QyxFQUFNdzJDLFVBQVUzakMsT0FBUyxXQUFhLFdBQzdDN1MsRUFBTXcyQyxVQUFVNWpDLEtBQ2hCMUMsRUFGTSxPQUtObFEsRUFBTXcyQyxVQUFVcHpDLFdBQ2hCLFFBQVk4OUMsR0FDaEJsaEQsRUFBTTZzQyxLQUFLLDRCQUE4QndGLEdBQ3pDLElBQUlrUCxFQUFNLElBQUlDLGVBQ2RELEVBQUl6TyxtQkFBcUIsV0FDckIsR0FBSXBvQixHQUErQixJQUFuQjYyQixFQUFJOVQsV0FBa0IsQ0FDbEN6dEMsRUFBTTZzQyxLQUFLLHFCQUF1QndGLEVBQU0scUJBQXNCa1AsRUFBSWxiLE9BQVEsWUFBYWtiLEVBQUlFLGNBQzNGLElBQUkvRCxFQUFNLEtBQ1YsR0FBSTZELEVBQUlsYixRQUFVLEtBQU9rYixFQUFJbGIsT0FBUyxJQUFLLENBQ3ZDLElBQ0lxWCxHQUFNLFFBQVM2RCxFQUFJRSxjQUV2QixNQUFPLytDLEdBQ0g2QixFQUFLLHFDQUNEOHRDLEVBQ0EsS0FDQWtQLEVBQUlFLGNBRVovMkIsRUFBUyxLQUFNZ3pCLFFBSUksTUFBZjZELEVBQUlsYixRQUFpQyxNQUFma2IsRUFBSWxiLFFBQzFCOWhDLEVBQUssc0NBQ0Q4dEMsRUFDQSxZQUNBa1AsRUFBSWxiLFFBRVozYixFQUFTNjJCLEVBQUlsYixRQUVqQjNiLEVBQVcsT0FHbkI2MkIsRUFBSXZVLEtBQUssTUFBT3FGLEdBQXVCLEdBQ3ZDa1AsRUFBSXpSLFdBR0wrUSxFQXJKNEIsQ0FzSnJDM0csSUFrQkV3SCxHQUFtQixpQkFJbkJDLEdBQXNCLFdBQ3RCLFNBQVNBLEVBQUtuTCxFQUFXb0wsRUFBa0JoK0MsRUFBS2kzQyxHQUM1Q2g4QyxLQUFLMjNDLFVBQVlBLEVBQ2pCMzNDLEtBQUsraUQsaUJBQW1CQSxFQUN4Qi9pRCxLQUFLK0UsSUFBTUEsRUFDWC9FLEtBQUtnOEMsbUJBQXFCQSxFQUMxQmg4QyxLQUFLZ2pELGdCQUFrQixFQUN2QmhqRCxLQUFLNnBDLGVBQWlCLEtBQ3RCN3BDLEtBQUtpakQsWUFBYyxJQUFJN1ksR0FDdkJwcUMsS0FBS2tqRCxhQUFlLEVBQ3BCbGpELEtBQUttakQsNkJBQStCLEtBRXBDbmpELEtBQUt1dUMsY0FBZ0IsSUFBSTNlLEdBRXpCNXZCLEtBQUtvakQsc0JBQXdCLEtBRTdCcGpELEtBQUtaLElBQU1ZLEtBQUsyM0MsVUFBVTFpQyxjQXlZOUIsT0F2WUE2dEMsRUFBS3RnRCxVQUFVeXRDLE1BQVEsV0FDbkIsSUFBSTl1QyxFQUFRbkIsS0FFWixHQURBQSxLQUFLaXVDLE9BQVNwRixHQUFhQyxjQUFjOW9DLEtBQUsyM0MsV0FDMUMzM0MsS0FBSytpRCxtQkFqaFhzQixpQkFBWGg0QyxRQUNwQkEsT0FBa0IsV0FDbEJBLE9BQWtCLFVBQWEsV0FDL0IsSUFLY3M0QyxPQUFPLDZGQUErRixFQTBnWGhIcmpELEtBQUsycEMsUUFBVSxJQUFJcVksR0FBbUJoaUQsS0FBSzIzQyxVQUFXMzNDLEtBQUs2N0MsY0FBY24xQyxLQUFLMUcsTUFBT0EsS0FBS2c4QyxvQkFFMUYzckMsV0FBV3JRLEtBQUs4N0MsaUJBQWlCcDFDLEtBQUsxRyxNQUFNLEdBQU8sT0FFbEQsQ0FDRCxJQUFJc2pELEVBQWV0akQsS0FBSytFLElBQUloRSxRQUFzQyw2QkFFbEUsR0FBSSxNQUFPdWlELEVBQXVELENBQzlELEdBQTRCLGlCQUFqQkEsRUFDUCxNQUFNLElBQUl2NkMsTUFBTSxzRUFFcEIsS0FDSSxRQUFVdTZDLEdBRWQsTUFBT3ovQyxHQUNILE1BQU0sSUFBSWtGLE1BQU0sa0NBQW9DbEYsSUFHNUQ3RCxLQUFLb2pELHNCQUF3QixJQUFJeEgsR0FBcUI1N0MsS0FBSzIzQyxVQUFXMzNDLEtBQUsrRSxJQUFJaEUsUUFBUXdpRCxNQUFPdmpELEtBQUs2N0MsY0FBY24xQyxLQUFLMUcsTUFBT0EsS0FBSzg3QyxpQkFBaUJwMUMsS0FBSzFHLE1BQU9BLEtBQUsrN0Msb0JBQW9CcjFDLEtBQUsxRyxNQUFPQSxLQUFLZzhDLG1CQUFvQnNILEdBQzdOdGpELEtBQUsycEMsUUFBVTNwQyxLQUFLb2pELHNCQUV4QnBqRCxLQUFLZzhDLG1CQUFtQndILHdCQUF1QixTQUFVaEksR0FDckRyNkMsRUFBTXdvQyxRQUFRNFIsaUJBQWlCQyxNQUluQ3g3QyxLQUFLeWpELGVBQWlCNWEsR0FBYUksb0JBQW9CanBDLEtBQUsyM0MsV0FBVyxXQUFjLE9BQU8sSUFBSWxPLEdBQWN0b0MsRUFBTThzQyxPQUFROXNDLEVBQU13b0MsWUFDbEkzcEMsS0FBSzBqRCxvQkFFTDFqRCxLQUFLMmpELFVBQVksSUFBSXRiLEdBQ3JCcm9DLEtBQUs0akQsY0FBZ0IsSUFBSXRnQixHQUFTLENBQzlCNEMsZUFBZ0IsU0FBVS9jLEVBQU9tYixFQUFLc1osRUFBZTVrQyxHQUNqRCxJQUFJNnFDLEVBQWEsR0FDYjFwQyxFQUFPaFosRUFBTXdpRCxVQUFVMXZCLFFBQVE5SyxFQUFNblcsTUFTekMsT0FOS21ILEVBQUtwSSxZQUNOOHhDLEVBQWExaUQsRUFBTXlpRCxjQUFjMWYscUJBQXFCL2EsRUFBTW5XLEtBQU1tSCxHQUNsRTlKLFlBQVcsV0FDUDJJLEVBQVcsUUFDWixJQUVBNnFDLEdBRVh2ZCxjQUFlLGVBRW5CdG1DLEtBQUs4akQsWUFBWSxhQUFhLEdBQzlCOWpELEtBQUsrakQsZ0JBQWtCLElBQUl6Z0IsR0FBUyxDQUNoQzRDLGVBQWdCLFNBQVUvYyxFQUFPbWIsRUFBS3NaLEVBQWU1a0MsR0FNakQsT0FMQTdYLEVBQU13b0MsUUFBUWdVLE9BQU94MEIsRUFBT3kwQixFQUFldFosR0FBSyxTQUFVa0QsRUFBUS82QixHQUM5RCxJQUFJdXZCLEVBQVNoakIsRUFBV3d1QixFQUFRLzZCLEdBQ2hDdEwsRUFBTThoRCxZQUFZbFksMEJBQTBCNWhCLEVBQU1uVyxLQUFNZ3BCLE1BR3JELElBRVhzSyxjQUFlLFNBQVVuZCxFQUFPbWIsR0FDNUJuakMsRUFBTXdvQyxRQUFRb1YsU0FBUzUxQixFQUFPbWIsT0FPMUN3ZSxFQUFLdGdELFVBQVVpSSxTQUFXLFdBQ3RCLE9BQVN6SyxLQUFLMjNDLFVBQVUzakMsT0FBUyxXQUFhLFdBQWFoVSxLQUFLMjNDLFVBQVU1akMsTUFLOUUrdUMsRUFBS3RnRCxVQUFVbEIsS0FBTyxXQUNsQixPQUFPdEIsS0FBSzIzQyxVQUFVcHpDLFdBSzFCdStDLEVBQUt0Z0QsVUFBVXdoRCxXQUFhLFdBQ3hCLElBQ0lDLEVBRGFqa0QsS0FBSzJqRCxVQUFVMXZCLFFBQVEsSUFBSXZqQixFQUFLLDJCQUN6QjlOLE9BQVMsRUFDakMsT0FBTyxJQUFJaTlDLE1BQU9DLFVBQVltRSxHQUtsQ25CLEVBQUt0Z0QsVUFBVTBoRCxxQkFBdUIsV0FDbEMsT0F4ck9KbmlELEdBRCtCQSxFQXlyT0QsQ0FDdEIrNEMsVUFBVzk2QyxLQUFLZ2tELGdCQXpyT0wsSUFDRCxVQUFJamlELEVBQWtCLFlBQUssSUFBSTg5QyxNQUFPQyxVQUNqRC85QyxFQUhjLElBQVVBLEdBZ3NPL0IrZ0QsRUFBS3RnRCxVQUFVcTVDLGNBQWdCLFNBQVV4cUMsRUFBWTVFLEVBQU0wM0MsRUFBUzdmLEdBRWhFdGtDLEtBQUtnakQsa0JBQ0wsSUFBSWh3QyxFQUFPLElBQUl0QyxFQUFLVyxHQUNwQjVFLEVBQU96TSxLQUFLbWpELDZCQUNObmpELEtBQUttakQsNkJBQTZCOXhDLEVBQVk1RSxHQUM5Q0EsRUFDTixJQUFJdXZCLEVBQVMsR0FDYixHQUFJc0ksRUFDQSxHQUFJNmYsRUFBUyxDQUNULElBQUlDLEdBQWlCLFFBQUkzM0MsR0FBTSxTQUFVNDNDLEdBQU8sT0FBT3IrQixHQUFlcStCLE1BQ3RFcm9CLEVBQVNoOEIsS0FBSytqRCxnQkFBZ0JsZixzQkFBc0I3eEIsRUFBTW94QyxFQUFnQjlmLE9BRXpFLENBQ0QsSUFBSWdnQixFQUFhdCtCLEdBQWV2WixHQUNoQ3V2QixFQUFTaDhCLEtBQUsrakQsZ0JBQWdCMWYsMEJBQTBCcnhCLEVBQU1zeEMsRUFBWWhnQixRQUc3RSxHQUFJNmYsRUFBUyxDQUNkLElBQUl6cEIsR0FBa0IsUUFBSWp1QixHQUFNLFNBQVU0M0MsR0FBTyxPQUFPcitCLEdBQWVxK0IsTUFDdkVyb0IsRUFBU2g4QixLQUFLK2pELGdCQUFnQjVmLGlCQUFpQm54QixFQUFNMG5CLE9BRXBELENBQ0QsSUFBSXhULEVBQU9sQixHQUFldlosR0FDMUJ1dkIsRUFBU2g4QixLQUFLK2pELGdCQUFnQjdmLHFCQUFxQmx4QixFQUFNa1UsR0FFN0QsSUFBSTRPLEVBQWU5aUIsRUFDZmdwQixFQUFPdjFCLE9BQVMsSUFHaEJxdkIsRUFBZTkxQixLQUFLdWtELG1CQUFtQnZ4QyxJQUUzQ2hULEtBQUtpakQsWUFBWWxZLDBCQUEwQmpWLEVBQWNrRyxJQUc3RDhtQixFQUFLdGdELFVBQVVnaUQscUJBQXVCLFNBQVUzNEIsR0FDNUM3ckIsS0FBS21qRCw2QkFBK0J0M0IsR0FFeENpM0IsRUFBS3RnRCxVQUFVczVDLGlCQUFtQixTQUFVMkksR0FDeEN6a0QsS0FBSzhqRCxZQUFZLFlBQWFXLElBQ1IsSUFBbEJBLEdBQ0F6a0QsS0FBSzBrRCwwQkFHYjVCLEVBQUt0Z0QsVUFBVXU1QyxvQkFBc0IsU0FBVWhjLEdBQzNDLElBQUk1K0IsRUFBUW5CLEtBQ1ppTyxFQUFLOHhCLEdBQVMsU0FBVTNnQyxFQUFLRyxHQUN6QjRCLEVBQU0yaUQsWUFBWTFrRCxFQUFLRyxPQUcvQnVqRCxFQUFLdGdELFVBQVVzaEQsWUFBYyxTQUFVenlDLEVBQVk5UixHQUMvQyxJQUFJeVQsRUFBTyxJQUFJdEMsRUFBSyxVQUFZVyxHQUM1QnFKLEVBQVVzTCxHQUFlem1CLEdBQzdCUyxLQUFLMmpELFVBQVVwYixlQUFldjFCLEVBQU0wSCxHQUNwQyxJQUFJc2hCLEVBQVNoOEIsS0FBSzRqRCxjQUFjMWYscUJBQXFCbHhCLEVBQU0wSCxHQUMzRDFhLEtBQUtpakQsWUFBWWxZLDBCQUEwQi8zQixFQUFNZ3BCLElBRXJEOG1CLEVBQUt0Z0QsVUFBVW1pRCxnQkFBa0IsV0FDN0IsT0FBTzNrRCxLQUFLa2pELGdCQUVoQkosRUFBS3RnRCxVQUFVNFcsZ0JBQWtCLFNBQVVwRyxFQUFNNHhDLEVBQVFyZ0MsRUFBYXZMLEdBQ2xFLElBQUk3WCxFQUFRbkIsS0FDWkEsS0FBS2d1QyxLQUFLLE1BQU8sQ0FDYmg3QixLQUFNQSxFQUFLdkksV0FDWGxMLE1BQU9xbEQsRUFDUHp0QyxTQUFVb04sSUFJZCxJQUFJcUssRUFBZTV1QixLQUFLa2tELHVCQUNwQlcsRUFBb0I3K0IsR0FBZTQrQixFQUFRcmdDLEdBQzNDMkssRUFBV2x2QixLQUFLK2pELGdCQUFnQnQxQix1QkFBdUJ6YixHQUN2RDBILEVBQVU4VSxHQUE2QnExQixFQUFtQjMxQixFQUFVTixHQUNwRXFTLEVBQVVqaEMsS0FBSzJrRCxrQkFDZjNvQixFQUFTaDhCLEtBQUsrakQsZ0JBQWdCbmdCLG1CQUFtQjV3QixFQUFNMEgsRUFBU3VtQixHQUFTLEdBQzdFamhDLEtBQUtpakQsWUFBWTFZLFlBQVl2TyxHQUM3Qmg4QixLQUFLMnBDLFFBQVEyUixJQUFJdG9DLEVBQUt2SSxXQUFZbzZDLEVBQWtCamlELEtBQWdCLElBQU8sU0FBVTRrQyxFQUFRZ1ksR0FDekYsSUFBSXNGLEVBQXFCLE9BQVh0ZCxFQUNUc2QsR0FDRHAvQyxFQUFLLFVBQVlzTixFQUFPLFlBQWN3MEIsR0FFMUMsSUFBSXVkLEVBQWM1akQsRUFBTTRpRCxnQkFBZ0JuckIsYUFBYXFJLEdBQVU2akIsR0FDL0QzakQsRUFBTThoRCxZQUFZbFksMEJBQTBCLzNCLEVBQU0reEMsR0FDbEQ1akQsRUFBTTZqRCx1QkFBdUJoc0MsRUFBWXd1QixFQUFRZ1ksTUFFckQsSUFBSTFwQixFQUFlOTFCLEtBQUtpbEQsbUJBQW1CanlDLEdBQzNDaFQsS0FBS3VrRCxtQkFBbUJ6dUIsR0FFeEI5MUIsS0FBS2lqRCxZQUFZbFksMEJBQTBCalYsRUFBYyxLQUU3RGd0QixFQUFLdGdELFVBQVVnSixPQUFTLFNBQVV3SCxFQUFNa3lDLEVBQWlCbHNDLEdBQ3JELElBQUk3WCxFQUFRbkIsS0FDWkEsS0FBS2d1QyxLQUFLLFNBQVUsQ0FBRWg3QixLQUFNQSxFQUFLdkksV0FBWWxMLE1BQU8ybEQsSUFFcEQsSUFBSUMsR0FBUSxFQUNSdjJCLEVBQWU1dUIsS0FBS2trRCx1QkFDcEJ4cEIsRUFBa0IsR0FLdEIsR0FKQXpzQixFQUFLaTNDLEdBQWlCLFNBQVVFLEVBQVlDLEdBQ3hDRixHQUFRLEVBQ1J6cUIsRUFBZ0IwcUIsR0FBYzkxQixHQUF5QnRjLEVBQUtwQixNQUFNd3pDLEdBQWFwL0IsR0FBZXEvQixHQUFlbGtELEVBQU00aUQsZ0JBQWlCbjFCLE1BRW5JdTJCLEVBc0JEL2dELEVBQUksd0RBQ0pwRSxLQUFLZ2xELHVCQUF1QmhzQyxFQUFZLFVBdkJoQyxDQUNSLElBQUlzc0MsRUFBWXRsRCxLQUFLMmtELGtCQUNqQjNvQixFQUFTaDhCLEtBQUsrakQsZ0JBQWdCaGdCLGVBQWUvd0IsRUFBTTBuQixFQUFpQjRxQixHQUN4RXRsRCxLQUFLaWpELFlBQVkxWSxZQUFZdk8sR0FDN0JoOEIsS0FBSzJwQyxRQUFRbFIsTUFBTXpsQixFQUFLdkksV0FBWXk2QyxHQUFpQixTQUFVMWQsRUFBUWdZLEdBQ25FLElBQUlzRixFQUFxQixPQUFYdGQsRUFDVHNkLEdBQ0RwL0MsRUFBSyxhQUFlc04sRUFBTyxZQUFjdzBCLEdBRTdDLElBQUl1ZCxFQUFjNWpELEVBQU00aUQsZ0JBQWdCbnJCLGFBQWEwc0IsR0FBWVIsR0FDN0RodkIsRUFBZWl2QixFQUFZdCtDLE9BQVMsRUFBSXRGLEVBQU1vakQsbUJBQW1CdnhDLEdBQVFBLEVBQzdFN1IsRUFBTThoRCxZQUFZbFksMEJBQTBCalYsRUFBY2l2QixHQUMxRDVqRCxFQUFNNmpELHVCQUF1QmhzQyxFQUFZd3VCLEVBQVFnWSxNQUVyRHZ4QyxFQUFLaTNDLEdBQWlCLFNBQVVsYSxHQUM1QixJQUFJbFYsRUFBZTMwQixFQUFNOGpELG1CQUFtQmp5QyxFQUFLcEIsTUFBTW81QixJQUN2RDdwQyxFQUFNb2pELG1CQUFtQnp1QixNQUc3QjkxQixLQUFLaWpELFlBQVlsWSwwQkFBMEIvM0IsRUFBTSxNQVV6RDh2QyxFQUFLdGdELFVBQVVraUQsdUJBQXlCLFdBQ3BDLElBQUl2akQsRUFBUW5CLEtBQ1pBLEtBQUtndUMsS0FBSyxzQkFDVixJQUFJcGYsRUFBZTV1QixLQUFLa2tELHVCQUNwQnFCLEVBQTJCLElBQUkzMUIsR0FDbkM1dkIsS0FBS3V1QyxjQUFjamUsWUFBWTVmLEVBQUtnaEIsT0FBTyxTQUFVMWUsRUFBTW1ILEdBQ3ZELElBQUlxckMsRUFBV2wyQixHQUF5QnRjLEVBQU1tSCxFQUFNaFosRUFBTTRpRCxnQkFBaUJuMUIsR0FDM0UyMkIsRUFBeUJ0MUIsU0FBU2pkLEVBQU13eUMsTUFFNUMsSUFBSXhwQixFQUFTLEdBQ2J1cEIsRUFBeUJqMUIsWUFBWTVmLEVBQUtnaEIsT0FBTyxTQUFVMWUsRUFBTWtVLEdBQzdEOFUsRUFBU0EsRUFBTytCLE9BQU81OEIsRUFBTTRpRCxnQkFBZ0I3ZixxQkFBcUJseEIsRUFBTWtVLElBQ3hFLElBQUk0TyxFQUFlMzBCLEVBQU04akQsbUJBQW1CanlDLEdBQzVDN1IsRUFBTW9qRCxtQkFBbUJ6dUIsTUFFN0I5MUIsS0FBS3V1QyxjQUFnQixJQUFJM2UsR0FDekI1dkIsS0FBS2lqRCxZQUFZbFksMEJBQTBCcjZCLEVBQUtnaEIsTUFBT3NLLElBRTNEOG1CLEVBQUt0Z0QsVUFBVXlXLG1CQUFxQixTQUFVakcsRUFBTWdHLEdBQ2hELElBQUk3WCxFQUFRbkIsS0FDWkEsS0FBSzJwQyxRQUFRMXdCLG1CQUFtQmpHLEVBQUt2SSxZQUFZLFNBQVUrOEIsRUFBUWdZLEdBQ2hELE9BQVhoWSxHQUNBcm1DLEVBQU1vdEMsY0FBY3BlLE9BQU9uZCxHQUUvQjdSLEVBQU02akQsdUJBQXVCaHNDLEVBQVl3dUIsRUFBUWdZLE9BR3pEc0QsRUFBS3RnRCxVQUFVMlcsZ0JBQWtCLFNBQVVuRyxFQUFNelQsRUFBT3laLEdBQ3BELElBQUk3WCxFQUFRbkIsS0FDUjBhLEVBQVVzTCxHQUFlem1CLEdBQzdCUyxLQUFLMnBDLFFBQVE4UixnQkFBZ0J6b0MsRUFBS3ZJLFdBQVlpUSxFQUFROVgsS0FBZ0IsSUFBTyxTQUFVNGtDLEVBQVFnWSxHQUM1RSxPQUFYaFksR0FDQXJtQyxFQUFNb3RDLGNBQWN0ZSxTQUFTamQsRUFBTTBILEdBRXZDdlosRUFBTTZqRCx1QkFBdUJoc0MsRUFBWXd1QixFQUFRZ1ksT0FHekRzRCxFQUFLdGdELFVBQVU2Vyw0QkFBOEIsU0FBVXJHLEVBQU16VCxFQUFPNFgsRUFBVTZCLEdBQzFFLElBQUk3WCxFQUFRbkIsS0FDUjBhLEVBQVVzTCxHQUFlem1CLEVBQU80WCxHQUNwQ25YLEtBQUsycEMsUUFBUThSLGdCQUFnQnpvQyxFQUFLdkksV0FBWWlRLEVBQVE5WCxLQUFnQixJQUFPLFNBQVU0a0MsRUFBUWdZLEdBQzVFLE9BQVhoWSxHQUNBcm1DLEVBQU1vdEMsY0FBY3RlLFNBQVNqZCxFQUFNMEgsR0FFdkN2WixFQUFNNmpELHVCQUF1QmhzQyxFQUFZd3VCLEVBQVFnWSxPQUd6RHNELEVBQUt0Z0QsVUFBVWdYLG1CQUFxQixTQUFVeEcsRUFBTWt5QyxFQUFpQmxzQyxHQUNqRSxJQUFJN1gsRUFBUW5CLEtBQ1osSUFBSSxRQUFRa2xELEdBR1IsT0FGQTlnRCxFQUFJLDRFQUNKcEUsS0FBS2dsRCx1QkFBdUJoc0MsRUFBWSxNQUc1Q2haLEtBQUsycEMsUUFBUStSLGtCQUFrQjFvQyxFQUFLdkksV0FBWXk2QyxHQUFpQixTQUFVMWQsRUFBUWdZLEdBQ2hFLE9BQVhoWSxHQUNBdjVCLEVBQUtpM0MsR0FBaUIsU0FBVWhwQyxFQUFXSSxHQUN2QyxJQUFJRSxFQUFld0osR0FBZTFKLEdBQ2xDbmIsRUFBTW90QyxjQUFjdGUsU0FBU2pkLEVBQUtwQixNQUFNc0ssR0FBWU0sTUFHNURyYixFQUFNNmpELHVCQUF1QmhzQyxFQUFZd3VCLEVBQVFnWSxPQUd6RHNELEVBQUt0Z0QsVUFBVThwQix5QkFBMkIsU0FBVW5ELEVBQU9mLEdBQ3ZELElBQUk0VCxFQUVBQSxFQUQwQixVQUExQjdTLEVBQU1uVyxLQUFLL0IsV0FDRmpSLEtBQUs0akQsY0FBY3BtQixxQkFBcUJyVSxFQUFPZixHQUcvQ3BvQixLQUFLK2pELGdCQUFnQnZtQixxQkFBcUJyVSxFQUFPZixHQUU5RHBvQixLQUFLaWpELFlBQVlwWSxrQkFBa0IxaEIsRUFBTW5XLEtBQU1ncEIsSUFFbkQ4bUIsRUFBS3RnRCxVQUFVaXFCLDRCQUE4QixTQUFVdEQsRUFBT2YsR0FHMUQsSUFBSTRULEVBRUFBLEVBRDBCLFVBQTFCN1MsRUFBTW5XLEtBQUsvQixXQUNGalIsS0FBSzRqRCxjQUFjbm1CLHdCQUF3QnRVLEVBQU9mLEdBR2xEcG9CLEtBQUsrakQsZ0JBQWdCdG1CLHdCQUF3QnRVLEVBQU9mLEdBRWpFcG9CLEtBQUtpakQsWUFBWXBZLGtCQUFrQjFoQixFQUFNblcsS0FBTWdwQixJQUVuRDhtQixFQUFLdGdELFVBQVU2K0MsVUFBWSxXQUNuQnJoRCxLQUFLb2pELHVCQUNMcGpELEtBQUtvakQsc0JBQXNCL0IsVUFBVXdCLEtBRzdDQyxFQUFLdGdELFVBQVU4K0MsT0FBUyxXQUNoQnRoRCxLQUFLb2pELHVCQUNMcGpELEtBQUtvakQsc0JBQXNCOUIsT0FBT3VCLEtBRzFDQyxFQUFLdGdELFVBQVV3bkMsTUFBUSxTQUFVeWIsR0FFN0IsUUFEa0IsSUFBZEEsSUFBd0JBLEdBQVksR0FDakIsb0JBQVp0aEQsUUFBWCxDQUdBLElBQUk2bEMsRUFDQXliLEdBQ0t6bEQsS0FBSzZwQyxpQkFDTjdwQyxLQUFLNnBDLGVBQWlCLElBQUlULEdBQWNwcEMsS0FBS2l1QyxTQUVqRGpFLEVBQVFocUMsS0FBSzZwQyxlQUFlcG5DLE9BRzVCdW5DLEVBQVFocUMsS0FBS2l1QyxPQUFPeHJDLE1BRXhCLElBQUlpakQsRUFBY3BqRCxPQUFPc0UsS0FBS29qQyxHQUFPMmIsUUFBTyxTQUFVQyxFQUFlQyxHQUNqRSxPQUFPMzJDLEtBQUtrRSxJQUFJeXlDLEVBQWFwL0MsT0FBUW0vQyxLQUN0QyxHQUNIMzNDLEVBQUsrN0IsR0FBTyxTQUFVUixFQUFNanFDLEdBR3hCLElBRkEsSUFBSXVtRCxFQUFhdGMsRUFFUjE5QixFQUFJMDlCLEVBQUsvaUMsT0FBUXFGLEVBQUk0NUMsRUFBYyxFQUFHNTVDLElBQzNDZzZDLEdBQWMsSUFFbEIzaEQsUUFBUUMsSUFBSTBoRCxFQUFhdm1ELFFBR2pDdWpELEVBQUt0Z0QsVUFBVXVqRCxzQkFBd0IsU0FBVUMsR0FDN0NobUQsS0FBS2l1QyxPQUFPdEYsaUJBQWlCcWQsR0FDN0JobUQsS0FBS3lqRCxlQUFlMVosWUFBWWljLElBRXBDbEQsRUFBS3RnRCxVQUFVd3JDLEtBQU8sV0FFbEIsSUFEQSxJQUFJcGlDLEVBQVUsR0FDTHBGLEVBQUssRUFBR0EsRUFBS3RHLFVBQVV1RyxPQUFRRCxJQUNwQ29GLEVBQVFwRixHQUFNdEcsVUFBVXNHLEdBRTVCLElBQUk4RixFQUFTLEdBQ1R0TSxLQUFLb2pELHdCQUNMOTJDLEVBQVN0TSxLQUFLb2pELHNCQUFzQnI1QyxHQUFLLEtBRTdDM0YsRUFBSWpFLFdBQU0sR0FBUSxRQUFTLENBQUNtTSxHQUFTVixLQUV6Q2szQyxFQUFLdGdELFVBQVV3aUQsdUJBQXlCLFNBQVVuNUIsRUFBVTJiLEVBQVFnWSxHQUM1RDN6QixHQUNBemIsR0FBZSxXQUNYLEdBQWUsT0FBWG8zQixFQUNBM2IsRUFBUyxVQUVSLENBQ0QsSUFBSTRiLEdBQVFELEdBQVUsU0FBU0csY0FDM0I5N0IsRUFBVTQ3QixFQUNWK1gsSUFDQTN6QyxHQUFXLEtBQU8yekMsR0FFdEIsSUFBSWhnRCxFQUFRLElBQUl1SixNQUFNOEMsR0FFdEJyTSxFQUFNaW9DLEtBQU9BLEVBQ2I1YixFQUFTcnNCLFFBS3pCOEMsT0FBT0MsZUFBZXVnRCxFQUFLdGdELFVBQVcsV0FBWSxDQUM5Q0MsSUFBSyxXQUNELE9BQU96QyxLQUFLaW1ELGFBQWVqbUQsS0FBS2ltRCxXQUFhLElBQUlDLEdBQVNsbUQsUUFFOUQ2QyxZQUFZLEVBQ1pDLGNBQWMsSUFFWGdnRCxFQXpaYyxHQWtickJxRCxHQUE4QixXQUk5QixTQUFTQSxFQUFhcnhDLEdBQ2xCOVUsS0FBS29tRCxlQUFpQixJQUFJdndCLEdBQWMvZ0IsRUFBT3VVLFlBQy9DcnBCLEtBQUt3bkIsT0FBUzFTLEVBQU91VSxXQUNyQnJwQixLQUFLcW1ELFdBQWFGLEVBQWFHLGNBQWN4eEMsR0FDN0M5VSxLQUFLdW1ELFNBQVdKLEVBQWFLLFlBQVkxeEMsR0F1RzdDLE9BbEdBcXhDLEVBQWEzakQsVUFBVWlrRCxhQUFlLFdBQ2xDLE9BQU96bUQsS0FBS3FtRCxZQUtoQkYsRUFBYTNqRCxVQUFVa2tELFdBQWEsV0FDaEMsT0FBTzFtRCxLQUFLdW1ELFVBTWhCSixFQUFhM2pELFVBQVVvbkIsUUFBVSxTQUFVelAsR0FDdkMsT0FBUW5hLEtBQUt3bkIsT0FBT2pOLFFBQVF2YSxLQUFLeW1ELGVBQWdCdHNDLElBQVMsR0FDdERuYSxLQUFLd25CLE9BQU9qTixRQUFRSixFQUFNbmEsS0FBSzBtRCxlQUFpQixHQUt4RFAsRUFBYTNqRCxVQUFVaWEsWUFBYyxTQUFVeUssRUFBTTluQixFQUFLK3lCLEVBQVUyRCxFQUFjdkUsRUFBUXdFLEdBSXRGLE9BSEsvMUIsS0FBSzRwQixRQUFRLElBQUkxUCxHQUFVOWEsRUFBSyt5QixNQUNqQ0EsRUFBV2pPLEdBQWF0VixZQUVyQjVPLEtBQUtvbUQsZUFBZTNwQyxZQUFZeUssRUFBTTluQixFQUFLK3lCLEVBQVUyRCxFQUFjdkUsRUFBUXdFLElBS3RGb3dCLEVBQWEzakQsVUFBVTB6QixlQUFpQixTQUFVbEIsRUFBU21CLEVBQVNKLEdBQzVESSxFQUFRMWEsZUFFUjBhLEVBQVVqUyxHQUFhdFYsWUFFM0IsSUFBSTRsQixFQUFXMkIsRUFBUXhZLFVBQVUzZCxLQUFLd25CLFFBRXRDZ04sRUFBV0EsRUFBU3pZLGVBQWVtSSxHQUFhdFYsWUFDaEQsSUFBSTdPLEVBQU9DLEtBTVgsT0FMQW0yQixFQUFRdlosYUFBYWlCLElBQWdCLFNBQVV6ZSxFQUFLa2QsR0FDM0N2YyxFQUFLNnBCLFFBQVEsSUFBSTFQLEdBQVU5YSxFQUFLa2QsTUFDakNrWSxFQUFXQSxFQUFTalkscUJBQXFCbmQsRUFBSzhrQixHQUFhdFYsZ0JBRzVENU8sS0FBS29tRCxlQUFlbHdCLGVBQWVsQixFQUFTUixFQUFVdUIsSUFLakVvd0IsRUFBYTNqRCxVQUFVdVosZUFBaUIsU0FBVWlaLEVBQVN6USxHQUV2RCxPQUFPeVEsR0FLWG14QixFQUFhM2pELFVBQVU0ekIsYUFBZSxXQUNsQyxPQUFPLEdBS1grdkIsRUFBYTNqRCxVQUFVNnpCLGlCQUFtQixXQUN0QyxPQUFPcjJCLEtBQUtvbUQsZ0JBS2hCRCxFQUFhM2pELFVBQVU2bUIsU0FBVyxXQUM5QixPQUFPcnBCLEtBQUt3bkIsUUFPaEIyK0IsRUFBYUcsY0FBZ0IsU0FBVXh4QyxHQUNuQyxHQUFJQSxFQUFPa1csV0FBWSxDQUNuQixJQUFJMjdCLEVBQVk3eEMsRUFBT3dXLG9CQUN2QixPQUFPeFcsRUFBT3VVLFdBQVdsTyxTQUFTckcsRUFBT21XLHFCQUFzQjA3QixHQUcvRCxPQUFPN3hDLEVBQU91VSxXQUFXeE8sV0FRakNzckMsRUFBYUssWUFBYyxTQUFVMXhDLEdBQ2pDLEdBQUlBLEVBQU9vVyxTQUFVLENBQ2pCLElBQUkwN0IsRUFBVTl4QyxFQUFPeVcsa0JBQ3JCLE9BQU96VyxFQUFPdVUsV0FBV2xPLFNBQVNyRyxFQUFPcVcsbUJBQW9CeTdCLEdBRzdELE9BQU85eEMsRUFBT3VVLFdBQVduTyxXQUcxQmlyQyxFQS9Hc0IsR0F3STdCVSxHQUErQixXQUkvQixTQUFTQSxFQUFjL3hDLEdBQ25COVUsS0FBSzhtRCxjQUFnQixJQUFJWCxHQUFhcnhDLEdBQ3RDOVUsS0FBS3duQixPQUFTMVMsRUFBT3VVLFdBQ3JCcnBCLEtBQUsrbUQsT0FBU2p5QyxFQUFPa3lDLFdBQ3JCaG5ELEtBQUtpbkQsVUFBWW55QyxFQUFPb3lDLGlCQTBONUIsT0FyTkFMLEVBQWNya0QsVUFBVWlhLFlBQWMsU0FBVXlLLEVBQU05bkIsRUFBSyt5QixFQUFVMkQsRUFBY3ZFLEVBQVF3RSxHQUl2RixPQUhLLzFCLEtBQUs4bUQsY0FBY2w5QixRQUFRLElBQUkxUCxHQUFVOWEsRUFBSyt5QixNQUMvQ0EsRUFBV2pPLEdBQWF0VixZQUV4QnNZLEVBQUtqTCxrQkFBa0I3YyxHQUFLdVQsT0FBT3dmLEdBRTVCakwsRUFFRkEsRUFBS3ZLLGNBQWdCM2MsS0FBSyttRCxPQUN4Qi9tRCxLQUFLOG1ELGNBQ1B6d0IsbUJBQ0E1WixZQUFZeUssRUFBTTluQixFQUFLK3lCLEVBQVUyRCxFQUFjdkUsRUFBUXdFLEdBR3JELzFCLEtBQUttbkQsc0JBQXNCamdDLEVBQU05bkIsRUFBSyt5QixFQUFVWixFQUFRd0UsSUFNdkU4d0IsRUFBY3JrRCxVQUFVMHpCLGVBQWlCLFNBQVVsQixFQUFTbUIsRUFBU0osR0FDakUsSUFBSXZCLEVBQ0osR0FBSTJCLEVBQVExYSxjQUFnQjBhLEVBQVFwa0IsVUFFaEN5aUIsRUFBV3RRLEdBQWF0VixXQUFXK08sVUFBVTNkLEtBQUt3bkIsYUFHbEQsR0FBa0IsRUFBZHhuQixLQUFLK21ELE9BQWE1d0IsRUFBUXhaLGVBQzFCd1osRUFBUXZZLFVBQVU1ZCxLQUFLd25CLFFBQVMsQ0FFaENnTixFQUFXdFEsR0FBYXRWLFdBQVcrTyxVQUFVM2QsS0FBS3duQixRQUVsRCxJQUFJakMsT0FBVyxFQUVYQSxFQURBdmxCLEtBQUtpbkQsU0FDTTl3QixFQUFRblYsdUJBQXVCaGhCLEtBQUs4bUQsY0FBY0osYUFBYzFtRCxLQUFLd25CLFFBR3JFMk8sRUFBUXBWLGdCQUFnQi9nQixLQUFLOG1ELGNBQWNMLGVBQWdCem1ELEtBQUt3bkIsUUFHL0UsSUFEQSxJQUFJdkksRUFBUSxFQUNMc0csRUFBUzdHLFdBQWFPLEVBQVFqZixLQUFLK21ELFFBQVEsQ0FDOUMsSUFBSTlrRCxFQUFPc2pCLEVBQVMvRyxVQVVwQixLQVJJeGUsS0FBS2luRCxTQUVEam5ELEtBQUt3bkIsT0FBT2pOLFFBQVF2YSxLQUFLOG1ELGNBQWNMLGVBQWdCeGtELElBQVMsRUFJaEVqQyxLQUFLd25CLE9BQU9qTixRQUFRdFksRUFBTWpDLEtBQUs4bUQsY0FBY0osZUFBaUIsR0FRbEUsTUFMQWx5QixFQUFXQSxFQUFTalkscUJBQXFCdGEsRUFBS1gsS0FBTVcsRUFBS2tZLE1BQ3pEOEUsU0FRUCxDQUlEdVYsR0FGQUEsRUFBVzJCLEVBQVF4WSxVQUFVM2QsS0FBS3duQixTQUVkekwsZUFBZW1JLEdBQWF0VixZQUNoRCxJQUFJMFcsT0FBWSxFQUNaRSxPQUFVLEVBQ1Y5UyxPQUFNLEVBRVYsR0FESTZTLE9BQVcsRUFDWHZsQixLQUFLaW5ELFNBQVUsQ0FDZjFoQyxFQUFXaVAsRUFBU3ZULG1CQUFtQmpoQixLQUFLd25CLFFBQzVDbEMsRUFBWXRsQixLQUFLOG1ELGNBQWNKLGFBQy9CbGhDLEVBQVV4bEIsS0FBSzhtRCxjQUFjTCxlQUM3QixJQUFJVyxFQUFpQnBuRCxLQUFLd25CLE9BQU9sTixhQUNqQzVILEVBQU0sU0FBVTFGLEVBQUdDLEdBQUssT0FBT202QyxFQUFlbjZDLEVBQUdELFNBR2pEdVksRUFBV2lQLEVBQVMzVCxZQUFZN2dCLEtBQUt3bkIsUUFDckNsQyxFQUFZdGxCLEtBQUs4bUQsY0FBY0wsZUFDL0JqaEMsRUFBVXhsQixLQUFLOG1ELGNBQWNKLGFBQzdCaDBDLEVBQU0xUyxLQUFLd25CLE9BQU9sTixhQUVsQjJFLEVBQVEsRUFFWixJQUZBLElBQ0lvb0MsR0FBaUIsRUFDZDloQyxFQUFTN0csV0FDUnpjLEVBQU9zakIsRUFBUy9HLFdBQ2Y2b0MsR0FBa0IzMEMsRUFBSTRTLEVBQVdyakIsSUFBUyxJQUUzQ29sRCxHQUFpQixHQUVQQSxHQUFrQnBvQyxFQUFRamYsS0FBSyttRCxRQUFVcjBDLEVBQUl6USxFQUFNdWpCLElBQVksRUFFekV2RyxJQUdBdVYsRUFBV0EsRUFBU2pZLHFCQUFxQnRhLEVBQUtYLEtBQU00aUIsR0FBYXRWLFlBS2pGLE9BQU81TyxLQUFLOG1ELGNBQ1B6d0IsbUJBQ0FILGVBQWVsQixFQUFTUixFQUFVdUIsSUFLM0M4d0IsRUFBY3JrRCxVQUFVdVosZUFBaUIsU0FBVWlaLEVBQVN6USxHQUV4RCxPQUFPeVEsR0FLWDZ4QixFQUFjcmtELFVBQVU0ekIsYUFBZSxXQUNuQyxPQUFPLEdBS1h5d0IsRUFBY3JrRCxVQUFVNnpCLGlCQUFtQixXQUN2QyxPQUFPcjJCLEtBQUs4bUQsY0FBY3p3QixvQkFLOUJ3d0IsRUFBY3JrRCxVQUFVNm1CLFNBQVcsV0FDL0IsT0FBT3JwQixLQUFLd25CLFFBV2hCcS9CLEVBQWNya0QsVUFBVTJrRCxzQkFBd0IsU0FBVWpnQyxFQUFNOEksRUFBVTZCLEVBQVdOLEVBQVErMUIsR0FFekYsSUFBSTUwQyxFQUNKLEdBQUkxUyxLQUFLaW5ELFNBQVUsQ0FDZixJQUFJTSxFQUFhdm5ELEtBQUt3bkIsT0FBT2xOLGFBQzdCNUgsRUFBTSxTQUFVMUYsRUFBR0MsR0FBSyxPQUFPczZDLEVBQVd0NkMsRUFBR0QsU0FHN0MwRixFQUFNMVMsS0FBS3duQixPQUFPbE4sYUFFdEIsSUFBSW1oQixFQUFnQnZVLEdBQ3BCLFFBQU91VSxFQUFjOWUsZ0JBQWtCM2MsS0FBSyttRCxPQUFRLElBQ3BELElBQUlTLEVBQW9CLElBQUl0dEMsR0FBVThWLEVBQVU2QixHQUM1QzQxQixFQUFpQnpuRCxLQUFLaW5ELFNBQ3BCeHJCLEVBQWN2VyxjQUFjbGxCLEtBQUt3bkIsUUFDakNpVSxFQUFjclcsYUFBYXBsQixLQUFLd25CLFFBQ2xDa2dDLEVBQVUxbkQsS0FBSzhtRCxjQUFjbDlCLFFBQVE0OUIsR0FDekMsR0FBSS9yQixFQUFjcmYsU0FBUzRULEdBQVcsQ0FHbEMsSUFGQSxJQUFJMjNCLEVBQWVsc0IsRUFBY3hmLGtCQUFrQitULEdBQy9DNkMsRUFBWXRCLEVBQU91RixtQkFBbUI5MkIsS0FBS3duQixPQUFRaWdDLEVBQWdCem5ELEtBQUtpbkQsVUFDeEQsTUFBYnAwQixJQUNGQSxFQUFVdnhCLE9BQVMwdUIsR0FBWXlMLEVBQWNyZixTQUFTeVcsRUFBVXZ4QixRQUlqRXV4QixFQUFZdEIsRUFBT3VGLG1CQUFtQjkyQixLQUFLd25CLE9BQVFxTCxFQUFXN3lCLEtBQUtpbkQsVUFFdkUsSUFBSVcsRUFBMkIsTUFBYi8wQixFQUFvQixFQUFJbmdCLEVBQUltZ0IsRUFBVzIwQixHQUV6RCxHQURzQkUsSUFBWTcxQixFQUFVOWYsV0FBYTYxQyxHQUFlLEVBS3BFLE9BSHlCLE1BQXJCTixHQUNBQSxFQUFrQnJ4QixpQkFBaUJsQixHQUFPUSxtQkFBbUJ2RixFQUFVNkIsRUFBVzgxQixJQUUvRWxzQixFQUFjbGYscUJBQXFCeVQsRUFBVTZCLEdBRzNCLE1BQXJCeTFCLEdBQ0FBLEVBQWtCcnhCLGlCQUFpQmxCLEdBQU9NLG1CQUFtQnJGLEVBQVUyM0IsSUFFM0UsSUFBSXB1QixFQUFnQmtDLEVBQWNsZixxQkFBcUJ5VCxFQUFVOUwsR0FBYXRWLFlBRTlFLE9BRG9DLE1BQWJpa0IsR0FBcUI3eUIsS0FBSzhtRCxjQUFjbDlCLFFBQVFpSixJQUUxQyxNQUFyQnkwQixHQUNBQSxFQUFrQnJ4QixpQkFBaUJsQixHQUFPSSxpQkFBaUJ0QyxFQUFVdnhCLEtBQU11eEIsRUFBVTFZLE9BRWxGb2YsRUFBY2hkLHFCQUFxQnNXLEVBQVV2eEIsS0FBTXV4QixFQUFVMVksT0FHN0RvZixFQUlkLE9BQUkxSCxFQUFVOWYsVUFFUm1WLEVBRUZ3Z0MsR0FDRGgxQyxFQUFJKzBDLEVBQWdCRCxJQUFzQixHQUNqQixNQUFyQkYsSUFDQUEsRUFBa0JyeEIsaUJBQWlCbEIsR0FBT00sbUJBQW1Cb3lCLEVBQWVubUQsS0FBTW1tRCxFQUFldHRDLE9BQ2pHbXRDLEVBQWtCcnhCLGlCQUFpQmxCLEdBQU9JLGlCQUFpQm5GLEVBQVU2QixLQUVsRTRKLEVBQ0ZsZixxQkFBcUJ5VCxFQUFVNkIsR0FDL0J0VixxQkFBcUJrckMsRUFBZW5tRCxLQUFNNGlCLEdBQWF0VixhQU96RHNZLEdBR1IyL0IsRUFsT3VCLEdBMlA5QmdCLEdBQTZCLFdBQzdCLFNBQVNBLElBQ0w3bkQsS0FBSzhuRCxXQUFZLEVBQ2pCOW5ELEtBQUsrbkQsV0FBWSxFQUNqQi9uRCxLQUFLZ29ELGVBQWdCLEVBQ3JCaG9ELEtBQUtpb0QsU0FBVSxFQUNmam9ELEtBQUtrb0QsYUFBYyxFQUNuQmxvRCxLQUFLK21ELE9BQVMsRUFDZC9tRCxLQUFLbW9ELFVBQVksR0FDakJub0QsS0FBS29vRCxpQkFBbUIsS0FDeEJwb0QsS0FBS3FvRCxnQkFBa0IsR0FDdkJyb0QsS0FBS3NvRCxlQUFpQixLQUN0QnRvRCxLQUFLdW9ELGNBQWdCLEdBQ3JCdm9ELEtBQUt3bkIsT0FBUzNKLEdBbVdsQixPQTlWQWdxQyxFQUFZcmxELFVBQVV3b0IsU0FBVyxXQUM3QixPQUFPaHJCLEtBQUsrbkQsV0FLaEJGLEVBQVlybEQsVUFBVTBrRCxlQUFpQixXQUNuQyxNQUF1QixLQUFuQmxuRCxLQUFLbW9ELFVBS0Vub0QsS0FBSytuRCxVQUdKL25ELEtBQUttb0QsWUFBY04sRUFBWVcseUJBQXlCQyxnQkFPeEVaLEVBQVlybEQsVUFBVXlvQixtQkFBcUIsV0FFdkMsT0FEQSxRQUFPanJCLEtBQUsrbkQsVUFBVyxvQ0FDaEIvbkQsS0FBS29vRCxrQkFPaEJQLEVBQVlybEQsVUFBVThvQixrQkFBb0IsV0FFdEMsT0FEQSxRQUFPdHJCLEtBQUsrbkQsVUFBVyxvQ0FDbkIvbkQsS0FBS2dvRCxjQUNFaG9ELEtBQUtxb0QsZ0JBR0x4N0MsR0FNZmc3QyxFQUFZcmxELFVBQVUwb0IsT0FBUyxXQUMzQixPQUFPbHJCLEtBQUtpb0QsU0FNaEJKLEVBQVlybEQsVUFBVTJvQixpQkFBbUIsV0FFckMsT0FEQSxRQUFPbnJCLEtBQUtpb0QsUUFBUyxrQ0FDZGpvRCxLQUFLc29ELGdCQU9oQlQsRUFBWXJsRCxVQUFVK29CLGdCQUFrQixXQUVwQyxPQURBLFFBQU92ckIsS0FBS2lvRCxRQUFTLGtDQUNqQmpvRCxLQUFLa29ELFlBQ0Vsb0QsS0FBS3VvRCxjQUdMejdDLEdBTWYrNkMsRUFBWXJsRCxVQUFVaXBCLFNBQVcsV0FDN0IsT0FBT3pyQixLQUFLOG5ELFdBS2hCRCxFQUFZcmxELFVBQVVrcEIsaUJBQW1CLFdBQ3JDLE9BQU8xckIsS0FBSzhuRCxXQUFnQyxLQUFuQjluRCxLQUFLbW9ELFdBTWxDTixFQUFZcmxELFVBQVV3a0QsU0FBVyxXQUU3QixPQURBLFFBQU9obkQsS0FBSzhuRCxVQUFXLG9DQUNoQjluRCxLQUFLK21ELFFBS2hCYyxFQUFZcmxELFVBQVU2bUIsU0FBVyxXQUM3QixPQUFPcnBCLEtBQUt3bkIsUUFNaEJxZ0MsRUFBWXJsRCxVQUFVa21ELE1BQVEsV0FDMUIsSUFBSTFwQyxFQUFPLElBQUk2b0MsRUFhZixPQVpBN29DLEVBQUs4b0MsVUFBWTluRCxLQUFLOG5ELFVBQ3RCOW9DLEVBQUsrbkMsT0FBUy9tRCxLQUFLK21ELE9BQ25CL25DLEVBQUsrb0MsVUFBWS9uRCxLQUFLK25ELFVBQ3RCL29DLEVBQUtvcEMsaUJBQW1CcG9ELEtBQUtvb0QsaUJBQzdCcHBDLEVBQUtncEMsY0FBZ0Job0QsS0FBS2dvRCxjQUMxQmhwQyxFQUFLcXBDLGdCQUFrQnJvRCxLQUFLcW9ELGdCQUM1QnJwQyxFQUFLaXBDLFFBQVVqb0QsS0FBS2lvRCxRQUNwQmpwQyxFQUFLc3BDLGVBQWlCdG9ELEtBQUtzb0QsZUFDM0J0cEMsRUFBS2twQyxZQUFjbG9ELEtBQUtrb0QsWUFDeEJscEMsRUFBS3VwQyxjQUFnQnZvRCxLQUFLdW9ELGNBQzFCdnBDLEVBQUt3SSxPQUFTeG5CLEtBQUt3bkIsT0FDbkJ4SSxFQUFLbXBDLFVBQVlub0QsS0FBS21vRCxVQUNmbnBDLEdBTVg2b0MsRUFBWXJsRCxVQUFVeXFCLE1BQVEsU0FBVTA3QixHQUNwQyxJQUFJdDdCLEVBQVlydEIsS0FBSzBvRCxRQUlyQixPQUhBcjdCLEVBQVV5NkIsV0FBWSxFQUN0Qno2QixFQUFVMDVCLE9BQVM0QixFQUNuQnQ3QixFQUFVODZCLFVBQVksR0FDZjk2QixHQU1YdzZCLEVBQVlybEQsVUFBVXdxQixhQUFlLFNBQVUyN0IsR0FDM0MsSUFBSXQ3QixFQUFZcnRCLEtBQUswb0QsUUFJckIsT0FIQXI3QixFQUFVeTZCLFdBQVksRUFDdEJ6NkIsRUFBVTA1QixPQUFTNEIsRUFDbkJ0N0IsRUFBVTg2QixVQUFZTixFQUFZVyx5QkFBeUJDLGVBQ3BEcDdCLEdBTVh3NkIsRUFBWXJsRCxVQUFVMHFCLFlBQWMsU0FBVXk3QixHQUMxQyxJQUFJdDdCLEVBQVlydEIsS0FBSzBvRCxRQUlyQixPQUhBcjdCLEVBQVV5NkIsV0FBWSxFQUN0Qno2QixFQUFVMDVCLE9BQVM0QixFQUNuQnQ3QixFQUFVODZCLFVBQVlOLEVBQVlXLHlCQUF5QkksZ0JBQ3BEdjdCLEdBT1h3NkIsRUFBWXJsRCxVQUFVa3JCLFFBQVUsU0FBVXRTLEVBQVloYyxHQUNsRCxJQUFJaXVCLEVBQVlydEIsS0FBSzBvRCxRQWNyQixPQWJBcjdCLEVBQVUwNkIsV0FBWSxPQUNIMW5ELElBQWYrYSxJQUNBQSxFQUFhLE1BRWpCaVMsRUFBVSs2QixpQkFBbUJodEMsRUFDbEIsTUFBUGhjLEdBQ0FpdUIsRUFBVTI2QixlQUFnQixFQUMxQjM2QixFQUFVZzdCLGdCQUFrQmpwRCxJQUc1Qml1QixFQUFVMjZCLGVBQWdCLEVBQzFCMzZCLEVBQVVnN0IsZ0JBQWtCLElBRXpCaDdCLEdBT1h3NkIsRUFBWXJsRCxVQUFVbXJCLE1BQVEsU0FBVXZTLEVBQVloYyxHQUNoRCxJQUFJaXVCLEVBQVlydEIsS0FBSzBvRCxRQWNyQixPQWJBcjdCLEVBQVU0NkIsU0FBVSxPQUNENW5ELElBQWYrYSxJQUNBQSxFQUFhLE1BRWpCaVMsRUFBVWk3QixlQUFpQmx0QyxPQUNmL2EsSUFBUmpCLEdBQ0FpdUIsRUFBVTY2QixhQUFjLEVBQ3hCNzZCLEVBQVVrN0IsY0FBZ0JucEQsSUFHMUJpdUIsRUFBVTY2QixhQUFjLEVBQ3hCNzZCLEVBQVVrN0IsY0FBZ0IsSUFFdkJsN0IsR0FNWHc2QixFQUFZcmxELFVBQVU4cUIsUUFBVSxTQUFVelEsR0FDdEMsSUFBSXdRLEVBQVlydEIsS0FBSzBvRCxRQUVyQixPQURBcjdCLEVBQVU3RixPQUFTM0ssRUFDWndRLEdBS1h3NkIsRUFBWXJsRCxVQUFVc3JCLGVBQWlCLFdBQ25DLElBQUkrNkIsRUFBMEJoQixFQUFZVyx5QkFDdENqN0MsRUFBTSxHQWFWLEdBWkl2TixLQUFLK25ELFlBQ0x4NkMsRUFBSXM3QyxFQUF3QkMsbUJBQXFCOW9ELEtBQUtvb0QsaUJBQ2xEcG9ELEtBQUtnb0QsZ0JBQ0x6NkMsRUFBSXM3QyxFQUF3QkUsa0JBQW9CL29ELEtBQUtxb0Qsa0JBR3pEcm9ELEtBQUtpb0QsVUFDTDE2QyxFQUFJczdDLEVBQXdCRyxpQkFBbUJocEQsS0FBS3NvRCxlQUNoRHRvRCxLQUFLa29ELGNBQ0wzNkMsRUFBSXM3QyxFQUF3QkksZ0JBQWtCanBELEtBQUt1b0QsZ0JBR3ZEdm9ELEtBQUs4bkQsVUFBVyxDQUNoQnY2QyxFQUFJczdDLEVBQXdCSyxPQUFTbHBELEtBQUsrbUQsT0FDMUMsSUFBSW9DLEVBQVducEQsS0FBS21vRCxVQUNILEtBQWJnQixJQUVJQSxFQURBbnBELEtBQUtrbkQsaUJBQ00yQixFQUF3QkosZUFHeEJJLEVBQXdCRCxpQkFHM0NyN0MsRUFBSXM3QyxFQUF3Qk8sV0FBYUQsRUFNN0MsT0FISW5wRCxLQUFLd25CLFNBQVczSixLQUNoQnRRLEVBQUlzN0MsRUFBd0JRLE9BQVNycEQsS0FBS3duQixPQUFPL2MsWUFFOUM4QyxHQUtYczZDLEVBQVlybEQsVUFBVSs2QixhQUFlLFdBQ2pDLFFBQVN2OUIsS0FBSytuRCxXQUFhL25ELEtBQUtpb0QsU0FBV2pvRCxLQUFLOG5ELFlBS3BERCxFQUFZcmxELFVBQVUya0MsVUFBWSxXQUM5QixPQUFPbm5DLEtBQUt1OUIsZ0JBQWtCdjlCLEtBQUt3bkIsU0FBVzNKLElBS2xEZ3FDLEVBQVlybEQsVUFBVXU2QixjQUFnQixXQUNsQyxPQUFJLzhCLEtBQUt1OUIsZUFDRSxJQUFJMUgsR0FBYzcxQixLQUFLcXBCLFlBRXpCcnBCLEtBQUt5ckIsV0FDSCxJQUFJbzdCLEdBQWM3bUQsTUFHbEIsSUFBSW1tRCxHQUFhbm1ELE9BUWhDNm5ELEVBQVlybEQsVUFBVTgvQyw0QkFBOEIsV0FDaEQsSUFLSWgxQixFQUxBZzhCLEVBQWlCekIsRUFBWTBCLHNCQUM3QkMsRUFBSyxHQUNULE9BQUl4cEQsS0FBS21uQyxjQUlMbm5DLEtBQUt3bkIsU0FBVzNKLEdBQ2hCeVAsRUFBVWc4QixFQUFlenJDLGVBRXBCN2QsS0FBS3duQixTQUFXWixHQUNyQjBHLEVBQVVnOEIsRUFBZTFpQyxZQUVwQjVtQixLQUFLd25CLFNBQVduTSxHQUNyQmlTLEVBQVVnOEIsRUFBZWp1QyxZQUd6QixRQUFPcmIsS0FBS3duQixrQkFBa0JULEdBQVcsNEJBQ3pDdUcsRUFBVXR0QixLQUFLd25CLE9BQU8vYyxZQUUxQisrQyxFQUFHRixFQUFlRyxXQUFZLFFBQVVuOEIsR0FDcEN0dEIsS0FBSytuRCxZQUNMeUIsRUFBR0YsRUFBZUksV0FBWSxRQUFVMXBELEtBQUtvb0Qsa0JBQ3pDcG9ELEtBQUtnb0QsZ0JBQ0x3QixFQUFHRixFQUFlSSxXQUFhLEtBQU0sUUFBVTFwRCxLQUFLcW9ELG1CQUd4RHJvRCxLQUFLaW9ELFVBQ0x1QixFQUFHRixFQUFlSyxTQUFVLFFBQVUzcEQsS0FBS3NvRCxnQkFDdkN0b0QsS0FBS2tvRCxjQUNMc0IsRUFBR0YsRUFBZUssU0FBVyxLQUFNLFFBQVUzcEQsS0FBS3VvRCxpQkFHdER2b0QsS0FBSzhuRCxZQUNEOW5ELEtBQUtrbkQsaUJBQ0xzQyxFQUFHRixFQUFlTSxnQkFBa0I1cEQsS0FBSyttRCxPQUd6Q3lDLEVBQUdGLEVBQWVPLGVBQWlCN3BELEtBQUsrbUQsU0FsQ3JDeUMsR0E2Q2YzQixFQUFZVyx5QkFBMkIsQ0FDbkNNLGtCQUFtQixLQUNuQkMsaUJBQWtCLEtBQ2xCQyxnQkFBaUIsS0FDakJDLGVBQWdCLEtBQ2hCQyxNQUFPLElBQ1BFLFVBQVcsS0FDWFgsZUFBZ0IsSUFDaEJHLGdCQUFpQixJQUNqQlMsTUFBTyxLQVFYeEIsRUFBWTBCLHNCQUF3QixDQUNoQ0UsU0FBVSxVQUNWNXJDLGVBQWdCLFlBQ2hCK0ksWUFBYSxTQUNidkwsVUFBVyxPQUNYcXVDLFNBQVUsVUFDVkMsT0FBUSxRQUNSQyxlQUFnQixlQUNoQkMsY0FBZSxlQU9uQmhDLEVBQVlpQyxRQUFVLElBQUlqQyxFQUNuQkEsRUFoWHFCLEdBbVk1QmtDLEdBQTJCLFNBQVUvdUMsR0FhckMsU0FBUyt1QyxFQUFVci9CLEVBQU0xWCxHQUVyQixLQUFNMFgsYUFBZ0JvNEIsSUFDbEIsTUFBTSxJQUFJLzVDLE1BQU0sNkRBSXBCLE9BRFFpUyxFQUFPM1ksS0FBS3JDLEtBQU0wcUIsRUFBTTFYLEVBQU02MEMsR0FBWWlDLFNBQVMsSUFBVTlwRCxLQW9QekUsT0F0UUEsUUFBVStwRCxFQUFXL3VDLEdBc0JyQit1QyxFQUFVdm5ELFVBQVV5bEIsT0FBUyxXQUV6QixPQURBLFFBQWlCLGdCQUFpQixFQUFHLEVBQUcvbkIsVUFBVXVHLFFBQzlDekcsS0FBS2dULEtBQUtqQixVQUNILEtBR0EvUixLQUFLZ1QsS0FBSzVCLFdBT3pCMjRDLEVBQVV2bkQsVUFBVW9QLE1BQVEsU0FBVVAsR0FhbEMsT0FaQSxRQUFpQixrQkFBbUIsRUFBRyxFQUFHblIsVUFBVXVHLFFBQzFCLGlCQUFmNEssRUFDUEEsRUFBYXZNLE9BQU91TSxHQUViQSxhQUFzQlgsSUFDQSxPQUF6QjFRLEtBQUtnVCxLQUFLL0IsV0FDVnNILEdBQXVCLGtCQUFtQixFQUFHbEgsR0FBWSxHQUd6RGlILEdBQW1CLGtCQUFtQixFQUFHakgsR0FBWSxJQUd0RCxJQUFJMDRDLEVBQVUvcEQsS0FBSzBxQixLQUFNMXFCLEtBQUtnVCxLQUFLcEIsTUFBTVAsS0FHcEQwNEMsRUFBVXZuRCxVQUFVZ21CLFVBQVksWUFDNUIsUUFBaUIsbUJBQW9CLEVBQUcsRUFBR3RvQixVQUFVdUcsUUFDckQsSUFBSXVqRCxFQUFhaHFELEtBQUtnVCxLQUFLdEIsU0FDM0IsT0FBc0IsT0FBZnM0QyxFQUFzQixLQUFPLElBQUlELEVBQVUvcEQsS0FBSzBxQixLQUFNcy9CLElBR2pFRCxFQUFVdm5ELFVBQVV5bkQsUUFBVSxZQUMxQixRQUFpQixpQkFBa0IsRUFBRyxFQUFHL3BELFVBQVV1RyxRQUVuRCxJQURBLElBQUk4aEIsRUFBTXZvQixLQUNpQixPQUFwQnVvQixFQUFJQyxhQUNQRCxFQUFNQSxFQUFJQyxZQUVkLE9BQU9ELEdBR1h3aEMsRUFBVXZuRCxVQUFVMG5ELGFBQWUsV0FDL0IsT0FBT2xxRCxLQUFLMHFCLEtBQUt5L0IsVUFPckJKLEVBQVV2bkQsVUFBVUcsSUFBTSxTQUFVaWlELEVBQVE1ckMsSUFDeEMsUUFBaUIsZ0JBQWlCLEVBQUcsRUFBRzlZLFVBQVV1RyxRQUNsRCtSLEdBQXFCLGdCQUFpQnhZLEtBQUtnVCxNQUMzQ29FLEdBQXdCLGdCQUFpQixFQUFHd3RDLEVBQVE1a0QsS0FBS2dULE1BQU0sSUFDL0QsUUFBaUIsZ0JBQWlCLEVBQUdnRyxHQUFZLEdBQ2pELElBQUl0USxFQUFXLElBQUksS0FHbkIsT0FGQTFJLEtBQUswcUIsS0FBS3RSLGdCQUFnQnBaLEtBQUtnVCxLQUFNNHhDLEVBQ3ZCLEtBQU1sOEMsRUFBU3dRLGFBQWFGLElBQ25DdFEsRUFBU0csU0FPcEJraEQsRUFBVXZuRCxVQUFVZ0osT0FBUyxTQUFVOE4sRUFBZU4sR0FHbEQsSUFGQSxRQUFpQixtQkFBb0IsRUFBRyxFQUFHOVksVUFBVXVHLFFBQ3JEK1IsR0FBcUIsbUJBQW9CeFksS0FBS2dULE1BQzFDekosTUFBTXdDLFFBQVF1TixHQUFnQixDQUU5QixJQURBLElBQUlDLEVBQW1CLEdBQ2R6TixFQUFJLEVBQUdBLEVBQUl3TixFQUFjN1MsU0FBVXFGLEVBQ3hDeU4sRUFBaUIsR0FBS3pOLEdBQUt3TixFQUFjeE4sR0FFN0N3TixFQUFnQkMsRUFDaEI3VCxFQUFLLHdNQUtUa1MsR0FBNkIsbUJBQW9CLEVBQUcwQixFQUFldFosS0FBS2dULE1BQU0sSUFDOUUsUUFBaUIsbUJBQW9CLEVBQUdnRyxHQUFZLEdBQ3BELElBQUl0USxFQUFXLElBQUksS0FFbkIsT0FEQTFJLEtBQUswcUIsS0FBS2xmLE9BQU94TCxLQUFLZ1QsS0FBTXNHLEVBQWU1USxFQUFTd1EsYUFBYUYsSUFDMUR0USxFQUFTRyxTQVFwQmtoRCxFQUFVdm5ELFVBQVU0VyxnQkFBa0IsU0FBVXdyQyxFQUFRcmdDLEVBQWF2TCxHQU1qRSxJQUxBLFFBQWlCLDRCQUE2QixFQUFHLEVBQUc5WSxVQUFVdUcsUUFDOUQrUixHQUFxQiw0QkFBNkJ4WSxLQUFLZ1QsTUFDdkRvRSxHQUF3Qiw0QkFBNkIsRUFBR3d0QyxFQUFRNWtELEtBQUtnVCxNQUFNLEdBQzNFa0YsR0FBaUIsNEJBQTZCLEVBQUdxTSxHQUFhLElBQzlELFFBQWlCLDRCQUE2QixFQUFHdkwsR0FBWSxHQUN2QyxZQUFsQmhaLEtBQUtpb0IsVUFBNEMsVUFBbEJqb0IsS0FBS2lvQixTQUNwQyxLQUFPLHFDQUNIam9CLEtBQUtpb0IsU0FDTCwwQkFFUixJQUFJdmYsRUFBVyxJQUFJLEtBRW5CLE9BREExSSxLQUFLMHFCLEtBQUt0UixnQkFBZ0JwWixLQUFLZ1QsS0FBTTR4QyxFQUFRcmdDLEVBQWE3YixFQUFTd1EsYUFBYUYsSUFDekV0USxFQUFTRyxTQU1wQmtoRCxFQUFVdm5ELFVBQVVnSSxPQUFTLFNBQVV3TyxHQUluQyxPQUhBLFFBQWlCLG1CQUFvQixFQUFHLEVBQUc5WSxVQUFVdUcsUUFDckQrUixHQUFxQixtQkFBb0J4WSxLQUFLZ1QsT0FDOUMsUUFBaUIsbUJBQW9CLEVBQUdnRyxHQUFZLEdBQzdDaFosS0FBSzJDLElBQUksS0FBTXFXLElBUTFCK3dDLEVBQVV2bkQsVUFBVTRuRCxZQUFjLFNBQVVDLEVBQW1CcnhDLEVBQVlzeEMsR0FRdkUsSUFQQSxRQUFpQix3QkFBeUIsRUFBRyxFQUFHcHFELFVBQVV1RyxRQUMxRCtSLEdBQXFCLHdCQUF5QnhZLEtBQUtnVCxPQUNuRCxRQUFpQix3QkFBeUIsRUFBR3EzQyxHQUFtQixJQUNoRSxRQUFpQix3QkFBeUIsRUFBR3J4QyxHQUFZLEdBR3pETCxHQUFnQix3QkFBeUIsRUFBRzJ4QyxHQUFjLEdBQ3BDLFlBQWxCdHFELEtBQUtpb0IsVUFBNEMsVUFBbEJqb0IsS0FBS2lvQixTQUNwQyxLQUFPLGlDQUNIam9CLEtBQUtpb0IsU0FDTCwrQkFFYTVuQixJQUFqQmlxRCxJQUNBQSxHQUFlLEdBRW5CLElBQUk1aEQsRUFBVyxJQUFJLEtBQ08sbUJBQWZzUSxHQUNQdFEsRUFBU0csUUFBUWlrQixPQUFNLGVBRTNCLElBQUl5OUIsRUFBa0IsU0FBVS9xRCxFQUFPa2EsRUFBV0MsR0FDMUNuYSxFQUNBa0osRUFBU3pKLE9BQU9PLEdBR2hCa0osRUFBUzFKLFFBQVEsSUFBSXlhLEdBQWtCQyxFQUFXQyxJQUU1QixtQkFBZlgsR0FDUEEsRUFBV3haLEVBQU9rYSxFQUFXQyxJQUlyQyxPQURBM1osS0FBSzBxQixLQUFLOC9CLGlCQUFpQnhxRCxLQUFLZ1QsS0FBTXEzQyxFQUFtQkUsRUFBaUJELEdBQ25FNWhELEVBQVNHLFNBT3BCa2hELEVBQVV2bkQsVUFBVWlvRCxZQUFjLFNBQVV0ekMsRUFBVTZCLElBQ2xELFFBQWlCLHdCQUF5QixFQUFHLEVBQUc5WSxVQUFVdUcsUUFDMUQrUixHQUFxQix3QkFBeUJ4WSxLQUFLZ1QsTUFDbkRrRixHQUFpQix3QkFBeUIsRUFBR2YsR0FBVSxJQUN2RCxRQUFpQix3QkFBeUIsRUFBRzZCLEdBQVksR0FDekQsSUFBSXRRLEVBQVcsSUFBSSxLQUVuQixPQURBMUksS0FBSzBxQixLQUFLdFIsZ0JBQWdCcFosS0FBS2dULEtBQUtwQixNQUFNLGFBQWN1RixFQUFVLEtBQU16TyxFQUFTd1EsYUFBYUYsSUFDdkZ0USxFQUFTRyxTQU9wQmtoRCxFQUFVdm5ELFVBQVVpRCxLQUFPLFNBQVVsRyxFQUFPeVosSUFDeEMsUUFBaUIsaUJBQWtCLEVBQUcsRUFBRzlZLFVBQVV1RyxRQUNuRCtSLEdBQXFCLGlCQUFrQnhZLEtBQUtnVCxNQUM1Q29FLEdBQXdCLGlCQUFrQixFQUFHN1gsRUFBT1MsS0FBS2dULE1BQU0sSUFDL0QsUUFBaUIsaUJBQWtCLEVBQUdnRyxHQUFZLEdBQ2xELElBU0luUSxFQVRBaVIsRUFBTTlaLEtBQUswcUIsS0FBS3M1QixhQUNoQjFpRCxFQUFPdVksR0FBV0MsR0FNbEI0d0MsRUFBbUIxcUQsS0FBSzRSLE1BQU10USxHQUM5QnFwRCxFQUFVM3FELEtBQUs0UixNQUFNdFEsR0FhekIsT0FWSXVILEVBRFMsTUFBVHRKLEVBQ1VtckQsRUFBaUIvbkQsSUFBSXBELEVBQU95WixHQUFZclosTUFBSyxXQUFjLE9BQU9nckQsS0FHbEVqckQsUUFBUVYsUUFBUTJyRCxHQUU5QkQsRUFBaUIvcUQsS0FBT2tKLEVBQVFsSixLQUFLK0csS0FBS21DLEdBQzFDNmhELEVBQWlCNTlCLE1BQVFqa0IsRUFBUWxKLEtBQUsrRyxLQUFLbUMsT0FBU3hJLEdBQzFCLG1CQUFmMlksR0FDUG5RLEVBQVFpa0IsT0FBTSxlQUVYNDlCLEdBS1hYLEVBQVV2bkQsVUFBVTZyQyxhQUFlLFdBRS9CLE9BREE3MUIsR0FBcUIseUJBQTBCeFksS0FBS2dULE1BQzdDLElBQUk2RixHQUFhN1ksS0FBSzBxQixLQUFNMXFCLEtBQUtnVCxPQUU1QzFRLE9BQU9DLGVBQWV3bkQsRUFBVXZuRCxVQUFXLFdBQVksQ0FDbkRDLElBQUssV0FDRCxPQUFPekMsS0FBS2txRCxnQkFFaEJybkQsWUFBWSxFQUNaQyxjQUFjLElBRWxCUixPQUFPQyxlQUFld25ELEVBQVV2bkQsVUFBVyxNQUFPLENBQzlDQyxJQUFLLFdBQ0QsT0FBT3pDLEtBQUtpb0IsVUFFaEJwbEIsWUFBWSxFQUNaQyxjQUFjLElBRWxCUixPQUFPQyxlQUFld25ELEVBQVV2bkQsVUFBVyxTQUFVLENBQ2pEQyxJQUFLLFdBQ0QsT0FBT3pDLEtBQUt3b0IsYUFFaEIzbEIsWUFBWSxFQUNaQyxjQUFjLElBRWxCUixPQUFPQyxlQUFld25ELEVBQVV2bkQsVUFBVyxPQUFRLENBQy9DQyxJQUFLLFdBQ0QsT0FBT3pDLEtBQUtpcUQsV0FFaEJwbkQsWUFBWSxFQUNaQyxjQUFjLElBRVhpbkQsRUF2UW1CLENBd1E1QnQvQixJQU9GQSxHQUFNOUQsdUJBQXlCb2pDLEdBQy9CNXJCLEdBQVV4WCx1QkFBeUJvakMsR0FxQm5DLElBc09JYSxHQXRPQUMsR0FDQSxXQUdJN3FELEtBQUs2dkIsU0FBVyxHQUNoQjd2QixLQUFLOHFELFdBQWEsRUFDbEI5cUQsS0FBS1QsTUFBUSxNQVNqQndyRCxHQUFzQixXQU90QixTQUFTQSxFQUFLMXBELEVBQU8ycEQsRUFBUzFqQyxRQUNaLElBQVZqbUIsSUFBb0JBLEVBQVEsU0FDaEIsSUFBWjJwRCxJQUFzQkEsRUFBVSxXQUN0QixJQUFWMWpDLElBQW9CQSxFQUFRLElBQUl1akMsSUFDcEM3cUQsS0FBS3FCLE1BQVFBLEVBQ2JyQixLQUFLZ3JELFFBQVVBLEVBQ2ZockQsS0FBS3NuQixNQUFRQSxFQWdMakIsT0F4S0F5akMsRUFBS3ZvRCxVQUFVeW9ELFFBQVUsU0FBVUMsR0FJL0IsSUFGQSxJQUFJbDRDLEVBQU9rNEMsYUFBbUJ4NkMsRUFBT3c2QyxFQUFVLElBQUl4NkMsRUFBS3c2QyxHQUNwRHQ1QyxFQUFRNVIsS0FBTWlDLEVBQU8rUSxFQUFLL0IsV0FDZCxPQUFUaFAsR0FFSDJQLEVBQVEsSUFBSW01QyxFQUFLOW9ELEVBQU0yUCxHQURQLFFBQVFBLEVBQU0wVixNQUFNdUksU0FBVTV0QixJQUFTLElBQUk0b0QsSUFHM0Q1b0QsR0FEQStRLEVBQU9BLEVBQUs3QixZQUNBRixXQUVoQixPQUFPVyxHQU9YbTVDLEVBQUt2b0QsVUFBVXdhLFNBQVcsV0FDdEIsT0FBT2hkLEtBQUtzbkIsTUFBTS9uQixPQU90QndyRCxFQUFLdm9ELFVBQVUyb0QsU0FBVyxTQUFVNXJELElBQ2hDLGFBQXdCLElBQVZBLEVBQXVCLGlDQUNyQ1MsS0FBS3NuQixNQUFNL25CLE1BQVFBLEVBQ25CUyxLQUFLb3JELGtCQUtUTCxFQUFLdm9ELFVBQVUwdEIsTUFBUSxXQUNuQmx3QixLQUFLc25CLE1BQU0vbkIsTUFBUSxLQUNuQlMsS0FBS3NuQixNQUFNdUksU0FBVyxHQUN0Qjd2QixLQUFLc25CLE1BQU13akMsV0FBYSxFQUN4QjlxRCxLQUFLb3JELGtCQUtUTCxFQUFLdm9ELFVBQVV3bEIsWUFBYyxXQUN6QixPQUFPaG9CLEtBQUtzbkIsTUFBTXdqQyxXQUFhLEdBS25DQyxFQUFLdm9ELFVBQVV1UCxRQUFVLFdBQ3JCLE9BQTJCLE9BQXBCL1IsS0FBS2dkLGFBQXdCaGQsS0FBS2dvQixlQU83QytpQyxFQUFLdm9ELFVBQVVvYSxhQUFlLFNBQVVFLEdBQ3BDLElBQUkzYixFQUFRbkIsS0FDWmlPLEVBQUtqTyxLQUFLc25CLE1BQU11SSxVQUFVLFNBQVVqZSxFQUFPMFEsR0FDdkN4RixFQUFPLElBQUlpdUMsRUFBS241QyxFQUFPelEsRUFBT21oQixRQVl0Q3lvQyxFQUFLdm9ELFVBQVU2b0Qsa0JBQW9CLFNBQVV2dUMsRUFBUXd1QyxFQUFhQyxHQUMxREQsSUFBZ0JDLEdBQ2hCenVDLEVBQU85YyxNQUVYQSxLQUFLNGMsY0FBYSxTQUFVaEwsR0FDeEJBLEVBQU15NUMsa0JBQWtCdnVDLEdBQXlCLEVBQU15dUMsTUFFdkRELEdBQWVDLEdBQ2Z6dUMsRUFBTzljLE9BV2YrcUQsRUFBS3ZvRCxVQUFVZ3BELGdCQUFrQixTQUFVMXVDLEVBQVF3dUMsR0FFL0MsSUFEQSxJQUFJbnhDLEVBQU9teEMsRUFBY3RyRCxLQUFPQSxLQUFLMFIsU0FDckIsT0FBVHlJLEdBQWUsQ0FDbEIsR0FBSTJDLEVBQU8zQyxHQUNQLE9BQU8sRUFFWEEsRUFBT0EsRUFBS3pJLFNBRWhCLE9BQU8sR0FTWHE1QyxFQUFLdm9ELFVBQVVpcEQsb0NBQXNDLFNBQVUzdUMsR0FDM0Q5YyxLQUFLNGMsY0FBYSxTQUFVaEwsR0FDQyxPQUFyQkEsRUFBTW9MLFdBQ05GLEVBQU9sTCxHQUdQQSxFQUFNNjVDLG9DQUFvQzN1QyxPQU90RGl1QyxFQUFLdm9ELFVBQVV3USxLQUFPLFdBQ2xCLE9BQU8sSUFBSXRDLEVBQXNCLE9BQWpCMVEsS0FBS2dyRCxRQUNmaHJELEtBQUtxQixNQUNMckIsS0FBS2dyRCxRQUFRaDRDLE9BQVMsSUFBTWhULEtBQUtxQixRQUszQzBwRCxFQUFLdm9ELFVBQVVsQixLQUFPLFdBQ2xCLE9BQU90QixLQUFLcUIsT0FLaEIwcEQsRUFBS3ZvRCxVQUFVa1AsT0FBUyxXQUNwQixPQUFPMVIsS0FBS2dyRCxTQU9oQkQsRUFBS3ZvRCxVQUFVNG9ELGVBQWlCLFdBQ1AsT0FBakJwckQsS0FBS2dyRCxTQUNMaHJELEtBQUtnckQsUUFBUVUsYUFBYTFyRCxLQUFLcUIsTUFBT3JCLE9BVTlDK3FELEVBQUt2b0QsVUFBVWtwRCxhQUFlLFNBQVV4dkMsRUFBV3RLLEdBQy9DLElBQUkrNUMsRUFBYS81QyxFQUFNRyxVQUNuQjY1QyxHQUFjLFFBQVM1ckQsS0FBS3NuQixNQUFNdUksU0FBVTNULEdBQzVDeXZDLEdBQWNDLFVBQ1A1ckQsS0FBS3NuQixNQUFNdUksU0FBUzNULEdBQzNCbGMsS0FBS3NuQixNQUFNd2pDLGFBQ1g5cUQsS0FBS29yRCxrQkFFQ08sR0FBZUMsSUFDckI1ckQsS0FBS3NuQixNQUFNdUksU0FBUzNULEdBQWF0SyxFQUFNMFYsTUFDdkN0bkIsS0FBS3NuQixNQUFNd2pDLGFBQ1g5cUQsS0FBS29yRCxtQkFHTkwsRUE3TGMsSUF3TnpCLFNBQVdILEdBSVBBLEVBQWtCQSxFQUF1QixJQUFJLEdBQUssTUFHbERBLEVBQWtCQSxFQUF3QixLQUFJLEdBQUssT0FHbkRBLEVBQWtCQSxFQUE2QixVQUFJLEdBQUssWUFHeERBLEVBQWtCQSxFQUFvQyxpQkFBSSxHQUFLLG1CQUUvREEsRUFBa0JBLEVBQStCLFlBQUksR0FBSyxjQWY5RCxDQWdCR0EsS0FBc0JBLEdBQW9CLEtBUzdDOUgsR0FBSytJLHlCQUEyQixHQU1oQy9JLEdBQUt0Z0QsVUFBVWtoRCxrQkFBb0IsV0FPL0IxakQsS0FBSzhyRCxzQkFBd0IsSUFBSWYsSUFVckNqSSxHQUFLdGdELFVBQVVnb0QsaUJBQW1CLFNBQVV4M0MsRUFBTXEzQyxFQUFtQnJ4QyxFQUFZc3hDLEdBQzdFdHFELEtBQUtndUMsS0FBSyxrQkFBb0JoN0IsR0FFOUIsSUFBSXdaLEVBQWdCLGFBQ2hCdS9CLEVBQVcsSUFBSWhDLEdBQVUvcEQsS0FBTWdULEdBQ25DKzRDLEVBQVNuZ0MsR0FBRyxRQUFTWSxHQUNyQixJQUlJNDlCLEVBQWMsQ0FDZHAzQyxLQUFNQSxFQUNOeEgsT0FBUTYrQyxFQUNScnhDLFdBQVlBLEVBRVp3dUIsT0FBUSxLQUVSd2tCLE1BQU81Z0QsSUFFUGsvQyxhQUFjQSxFQUVkMkIsV0FBWSxFQUVaQyxVQWpCWSxXQUNaSCxFQUFTeC9CLElBQUksUUFBU0MsSUFrQnRCMi9CLFlBQWEsS0FDYkMsZUFBZ0IsS0FDaEJDLHFCQUFzQixLQUN0QkMseUJBQTBCLEtBQzFCQyw4QkFBK0IsTUFHL0JDLEVBQWV4c0QsS0FBS3lzRCxnQkFBZ0J6NUMsR0FDeENvM0MsRUFBWWlDLHFCQUF1QkcsRUFDbkMsSUFBSTVILEVBQVN3RixFQUFZNStDLE9BQU9naEQsRUFBYTVwRCxPQUM3QyxRQUFldkMsSUFBWHVrRCxHQUtBLEdBSEF3RixFQUFZOEIsWUFDWjlCLEVBQVlrQyx5QkFBMkIsS0FDdkNsQyxFQUFZbUMsOEJBQWdDLEtBQ3hDbkMsRUFBWXB4QyxXQUFZLENBRXhCLElBQUlXLEVBQVcsSUFBSTBOLEdBQWEraUMsRUFBWWlDLHFCQUFzQixJQUFJdEMsR0FBVS9wRCxLQUFNb3FELEVBQVlwM0MsTUFBTzZLLElBQ3pHdXNDLEVBQVlweEMsV0FBVyxNQUFNLEVBQU9XLFFBR3ZDLENBQ0RwQyxHQUFxQixxQ0FBc0NxdEMsRUFBUXdGLEVBQVlwM0MsTUFFL0VvM0MsRUFBWTVpQixPQUFTb2pCLEdBQWtCOEIsSUFDdkMsSUFBSUMsRUFBWTNzRCxLQUFLOHJELHNCQUFzQmIsUUFBUWo0QyxHQUMvQzQ1QyxFQUFZRCxFQUFVM3ZDLFlBQWMsR0FDeEM0dkMsRUFBVW5uRCxLQUFLMmtELEdBQ2Z1QyxFQUFVeEIsU0FBU3lCLEdBSW5CLElBQUlDLE9BQWtCLEVBQ0EsaUJBQVhqSSxHQUNJLE9BQVhBLElBQ0EsUUFBU0EsRUFBUSxjQUVqQmlJLEdBQWtCLFFBQVFqSSxFQUFRLGNBQ2xDLFFBQU8xdEMsR0FBZ0IyMUMsR0FBa0IscUhBTXpDQSxHQUZrQjdzRCxLQUFLK2pELGdCQUFnQnQxQix1QkFBdUJ6YixJQUMxRGtSLEdBQWF0VixZQUNhOE0sY0FBYzlZLE1BRWhEaXFELEVBQW9EQSxFQUNwRCxJQUFJaitCLEVBQWU1dUIsS0FBS2trRCx1QkFDcEJXLEVBQW9CNytCLEdBQWU0K0IsRUFBUWlJLEdBQzNDbnlDLEVBQVU4VSxHQUE2QnExQixFQUFtQjJILEVBQWM1OUIsR0FDNUV3N0IsRUFBWWtDLHlCQUEyQnpILEVBQ3ZDdUYsRUFBWW1DLDhCQUFnQzd4QyxFQUM1QzB2QyxFQUFZZ0MsZUFBaUJwc0QsS0FBSzJrRCxrQkFDbEMsSUFBSTNvQixFQUFTaDhCLEtBQUsrakQsZ0JBQWdCbmdCLG1CQUFtQjV3QixFQUFNMEgsRUFBUzB2QyxFQUFZZ0MsZUFBZ0JoQyxFQUFZRSxjQUM1R3RxRCxLQUFLaWpELFlBQVlsWSwwQkFBMEIvM0IsRUFBTWdwQixHQUNqRGg4QixLQUFLOHNELDJCQVViaEssR0FBS3RnRCxVQUFVaXFELGdCQUFrQixTQUFVejVDLEVBQU0rNUMsR0FDN0MsT0FBUS9zRCxLQUFLK2pELGdCQUFnQnQxQix1QkFBdUJ6YixFQUFNKzVDLElBQ3REN29DLEdBQWF0VixZQWFyQmswQyxHQUFLdGdELFVBQVVzcUQsdUJBQXlCLFNBQVUzeUMsR0FDOUMsSUFBSWhaLEVBQVFuQixLQU1aLFFBTGEsSUFBVG1hLElBQW1CQSxFQUFPbmEsS0FBSzhyRCx1QkFFOUIzeEMsR0FDRG5hLEtBQUtndEQscUNBQXFDN3lDLEdBRXRCLE9BQXBCQSxFQUFLNkMsV0FBcUIsQ0FDMUIsSUFBSWl3QyxFQUFRanRELEtBQUtrdEQsdUJBQXVCL3lDLElBQ3hDLFFBQU84eUMsRUFBTXhtRCxPQUFTLEVBQUcseUNBQ1p3bUQsRUFBTXppQyxPQUFNLFNBQVU0L0IsR0FBZSxPQUFPQSxFQUFZNWlCLFNBQVdvakIsR0FBa0I4QixRQUc5RjFzRCxLQUFLbXRELHNCQUFzQmh6QyxFQUFLbkgsT0FBUWk2QyxRQUd2Qzl5QyxFQUFLNk4sZUFDVjdOLEVBQUt5QyxjQUFhLFNBQVVOLEdBQ3hCbmIsRUFBTTJyRCx1QkFBdUJ4d0MsT0FZekN3bUMsR0FBS3RnRCxVQUFVMnFELHNCQUF3QixTQUFVbjZDLEVBQU1pNkMsR0FTbkQsSUFSQSxJQUFJOXJELEVBQVFuQixLQUVSb3RELEVBQWVILEVBQU05cEQsS0FBSSxTQUFVa3FELEdBQ25DLE9BQU9BLEVBQUlqQixrQkFFWGtCLEVBQWN0dEQsS0FBS3lzRCxnQkFBZ0J6NUMsRUFBTW82QyxHQUN6Q0csRUFBYUQsRUFDYkUsRUFBYUYsRUFBWXJ3QyxPQUNwQm5SLEVBQUksRUFBR0EsRUFBSW1oRCxFQUFNeG1ELE9BQVFxRixJQUFLLENBQ25DLElBQUl1aEQsRUFBTUosRUFBTW5oRCxJQUNoQixRQUFPdWhELEVBQUk3bEIsU0FBV29qQixHQUFrQjhCLElBQUssaUVBQzdDVyxFQUFJN2xCLE9BQVNvakIsR0FBa0I2QyxLQUMvQkosRUFBSXBCLGFBQ0osSUFBSWo2QyxFQUFldEIsRUFBS3NCLGFBQWFnQixFQUFNcTZDLEVBQUlyNkMsTUFFL0N1NkMsRUFBYUEsRUFBVzl3QyxZQUFZekssRUFBbUNxN0MsRUFBSWYsMEJBRS9FLElBQUlvQixFQUFhSCxFQUFXM3FELEtBQUksR0FDNUIrcUQsRUFBYTM2QyxFQUVqQmhULEtBQUsycEMsUUFBUTJSLElBQUlxUyxFQUFXbGpELFdBQVlpakQsR0FBWSxTQUFVbG1CLEdBQzFEcm1DLEVBQU02c0MsS0FBSywyQkFBNEIsQ0FDbkNoN0IsS0FBTTI2QyxFQUFXbGpELFdBQ2pCKzhCLE9BQVFBLElBRVosSUFBSXhMLEVBQVMsR0FDYixHQUFlLE9BQVh3TCxFQUFpQixDQUlqQixJQURBLElBQUlyYixFQUFZLEdBQ1ByZ0IsRUFBSSxFQUFHQSxFQUFJbWhELEVBQU14bUQsT0FBUXFGLElBQUssQ0FHbkMsR0FGQW1oRCxFQUFNbmhELEdBQUcwN0IsT0FBU29qQixHQUFrQmdELFVBQ3BDNXhCLEVBQVNBLEVBQU8rQixPQUFPNThCLEVBQU00aUQsZ0JBQWdCbnJCLGFBQWFxMEIsRUFBTW5oRCxHQUFHc2dELGlCQUMvRGEsRUFBTW5oRCxHQUFHa04sV0FBWSxDQUVyQixJQUFJbUIsRUFBTzh5QyxFQUFNbmhELEdBQUd5Z0QsOEJBQ2hCaGtDLEVBQU0sSUFBSXdoQyxHQUFVNW9ELEVBQU84ckQsRUFBTW5oRCxHQUFHa0gsTUFDcEMyRyxFQUFXLElBQUkwTixHQUFhbE4sRUFBTW9PLEVBQUsxSyxJQUMzQ3NPLEVBQVUxbUIsS0FBS3duRCxFQUFNbmhELEdBQUdrTixXQUFXdFMsS0FBSyxLQUFNLE1BQU0sRUFBTWlULElBRTlEc3pDLEVBQU1uaEQsR0FBR29nRCxZQVFiLElBTEEvcUQsRUFBTTZyRCxxQ0FBcUM3ckQsRUFBTTJxRCxzQkFBc0JiLFFBQVFqNEMsSUFFL0U3UixFQUFNMnJELHlCQUNOM3JELEVBQU04aEQsWUFBWWxZLDBCQUEwQi8zQixFQUFNZ3BCLEdBRXpDbHdCLEVBQUksRUFBR0EsRUFBSXFnQixFQUFVMWxCLE9BQVFxRixJQUNsQ3NFLEVBQWUrYixFQUFVcmdCLFFBRzVCLENBRUQsR0FBZSxjQUFYMDdCLEVBQ0EsSUFBUzE3QixFQUFJLEVBQUdBLEVBQUltaEQsRUFBTXhtRCxPQUFRcUYsSUFDMUJtaEQsRUFBTW5oRCxHQUFHMDdCLFNBQVdvakIsR0FBa0JpRCxpQkFDdENaLEVBQU1uaEQsR0FBRzA3QixPQUFTb2pCLEdBQWtCa0QsWUFHcENiLEVBQU1uaEQsR0FBRzA3QixPQUFTb2pCLEdBQWtCOEIsU0FNNUMsSUFEQWhuRCxFQUFLLGtCQUFvQmlvRCxFQUFXbGpELFdBQWEsWUFBYys4QixHQUN0RDE3QixFQUFJLEVBQUdBLEVBQUltaEQsRUFBTXhtRCxPQUFRcUYsSUFDOUJtaEQsRUFBTW5oRCxHQUFHMDdCLE9BQVNvakIsR0FBa0JrRCxZQUNwQ2IsRUFBTW5oRCxHQUFHcWdELFlBQWMza0IsRUFHL0JybUMsRUFBTW9qRCxtQkFBbUJ2eEMsTUFFOUJ3NkMsSUFlUDFLLEdBQUt0Z0QsVUFBVStoRCxtQkFBcUIsU0FBVXZaLEdBQzFDLElBQUkraUIsRUFBMEIvdEQsS0FBS2d1RCw0QkFBNEJoakIsR0FDM0RoNEIsRUFBTys2QyxFQUF3Qi82QyxPQUMvQmk2QyxFQUFRanRELEtBQUtrdEQsdUJBQXVCYSxHQUV4QyxPQURBL3RELEtBQUtpdUQsdUJBQXVCaEIsRUFBT2o2QyxHQUM1QkEsR0FVWDh2QyxHQUFLdGdELFVBQVV5ckQsdUJBQXlCLFNBQVVoQixFQUFPajZDLEdBQ3JELEdBQXFCLElBQWpCaTZDLEVBQU14bUQsT0FBVixDQWNBLElBVEEsSUFrRW1CeWxELEVBbEVmLy9CLEVBQVksR0FDWjZQLEVBQVMsR0FLVG94QixFQUhjSCxFQUFNemxELFFBQU8sU0FBVWc2QyxHQUNyQyxPQUFPQSxFQUFFaGEsU0FBV29qQixHQUFrQjhCLE9BRVh2cEQsS0FBSSxTQUFVcStDLEdBQ3pDLE9BQU9BLEVBQUU0SyxrQkFFSnRnRCxFQUFJLEVBQUdBLEVBQUltaEQsRUFBTXhtRCxPQUFRcUYsSUFBSyxDQUNuQyxJQUFJcytDLEVBQWM2QyxFQUFNbmhELEdBQ3BCa0csRUFBZXRCLEVBQUtzQixhQUFhZ0IsRUFBTW8zQyxFQUFZcDNDLE1BQ25EazdDLEdBQW1CLEVBQU8vQixPQUFjLEVBRTVDLElBREEsUUFBd0IsT0FBakJuNkMsRUFBdUIsaUVBQzFCbzRDLEVBQVk1aUIsU0FBV29qQixHQUFrQmtELFlBQ3pDSSxHQUFtQixFQUNuQi9CLEVBQWMvQixFQUFZK0IsWUFDMUJud0IsRUFBU0EsRUFBTytCLE9BQU8vOUIsS0FBSytqRCxnQkFBZ0JuckIsYUFBYXd4QixFQUFZZ0MsZ0JBQWdCLFNBRXBGLEdBQUloQyxFQUFZNWlCLFNBQVdvakIsR0FBa0I4QixJQUU5QyxHQUFJdEMsRUFBWTZCLFlBQWNuSixHQUFLK0kseUJBQy9CcUMsR0FBbUIsRUFDbkIvQixFQUFjLFdBQ2Rud0IsRUFBU0EsRUFBTytCLE9BQU8vOUIsS0FBSytqRCxnQkFBZ0JuckIsYUFBYXd4QixFQUFZZ0MsZ0JBQWdCLFFBRXBGLENBRUQsSUFBSStCLEVBQWNudUQsS0FBS3lzRCxnQkFBZ0JyQyxFQUFZcDNDLEtBQU1vNkMsR0FDekRoRCxFQUFZaUMscUJBQXVCOEIsRUFDbkMsSUFBSXRxQixFQUFVb3BCLEVBQU1uaEQsR0FBR04sT0FBTzJpRCxFQUFZdnJELE9BQzFDLFFBQWdCdkMsSUFBWndqQyxFQUF1QixDQUN2QnRzQixHQUFxQixxQ0FBc0Nzc0IsRUFBU3VtQixFQUFZcDNDLE1BQ2hGLElBQUlvN0MsRUFBY3BvQyxHQUFlNmQsR0FDWSxpQkFBWkEsR0FDbEIsTUFBWEEsSUFDQSxRQUFTQSxFQUFTLGVBR2xCdXFCLEVBQWNBLEVBQVlyeUMsZUFBZW95QyxFQUFZenlDLGdCQUV6RCxJQUFJMnlDLEVBQWFqRSxFQUFZZ0MsZUFDekJ4OUIsRUFBZTV1QixLQUFLa2tELHVCQUNwQm9LLEVBQWtCOStCLEdBQTZCNCtCLEVBQWFELEVBQWF2L0IsR0FDN0V3N0IsRUFBWWtDLHlCQUEyQjhCLEVBQ3ZDaEUsRUFBWW1DLDhCQUFnQytCLEVBQzVDbEUsRUFBWWdDLGVBQWlCcHNELEtBQUsya0Qsa0JBRWxDeUksRUFBYTVyQixPQUFPNHJCLEVBQWF6bEQsUUFBUTBtRCxHQUFhLEdBRXREcnlCLEdBREFBLEVBQVNBLEVBQU8rQixPQUFPLzlCLEtBQUsrakQsZ0JBQWdCbmdCLG1CQUFtQndtQixFQUFZcDNDLEtBQU1zN0MsRUFBaUJsRSxFQUFZZ0MsZUFBZ0JoQyxFQUFZRSxnQkFDMUh2c0IsT0FBTy85QixLQUFLK2pELGdCQUFnQm5yQixhQUFheTFCLEdBQVksU0FHckVILEdBQW1CLEVBQ25CL0IsRUFBYyxTQUNkbndCLEVBQVNBLEVBQU8rQixPQUFPLzlCLEtBQUsrakQsZ0JBQWdCbnJCLGFBQWF3eEIsRUFBWWdDLGdCQUFnQixJQU1qRyxHQUZBcHNELEtBQUtpakQsWUFBWWxZLDBCQUEwQi8zQixFQUFNZ3BCLEdBQ2pEQSxFQUFTLEdBQ0xreUIsSUFFQWpCLEVBQU1uaEQsR0FBRzA3QixPQUFTb2pCLEdBQWtCZ0QsVUFHekIxQixFQUVSZSxFQUFNbmhELEdBQUdvZ0QsVUFEUjc3QyxXQUFXNjdDLEVBQVdoOUMsS0FBS0ksTUFBTSxJQUVqQzI5QyxFQUFNbmhELEdBQUdrTixZQUNULEdBQW9CLFdBQWhCbXpDLEVBQTBCLENBQzFCLElBQUk1akMsRUFBTSxJQUFJd2hDLEdBQVUvcEQsS0FBTWl0RCxFQUFNbmhELEdBQUdrSCxNQUVuQ3U3QyxFQUFpQ3RCLEVBQU1uaEQsR0FBR3VnRCxxQkFDMUMxeUMsRUFBVyxJQUFJME4sR0FBYWtuQyxFQUFXaG1DLEVBQUsxSyxJQUNoRHNPLEVBQVUxbUIsS0FBS3duRCxFQUFNbmhELEdBQUdrTixXQUFXdFMsS0FBSyxLQUFNLE1BQU0sRUFBT2lULFNBRzNEd1MsRUFBVTFtQixLQUFLd25ELEVBQU1uaEQsR0FBR2tOLFdBQVd0UyxLQUFLLEtBQU0sSUFBSXFDLE1BQU1vakQsSUFBYyxFQUFPLE9BUTdGLElBRkFuc0QsS0FBS2d0RCxxQ0FBcUNodEQsS0FBSzhyRCx1QkFFdENoZ0QsRUFBSSxFQUFHQSxFQUFJcWdCLEVBQVUxbEIsT0FBUXFGLElBQ2xDc0UsRUFBZStiLEVBQVVyZ0IsSUFHN0I5TCxLQUFLOHNELDJCQVdUaEssR0FBS3RnRCxVQUFVd3JELDRCQUE4QixTQUFVaDdDLEdBQ25ELElBQUkwSixFQUVBOHhDLEVBQWtCeHVELEtBQUs4ckQsc0JBRTNCLElBREFwdkMsRUFBUTFKLEVBQUsvQixXQUNJLE9BQVZ5TCxHQUFpRCxPQUEvQjh4QyxFQUFnQnh4QyxZQUNyQ3d4QyxFQUFrQkEsRUFBZ0J2RCxRQUFRdnVDLEdBRTFDQSxHQURBMUosRUFBT0EsRUFBSzdCLFlBQ0NGLFdBRWpCLE9BQU91OUMsR0FVWDFMLEdBQUt0Z0QsVUFBVTBxRCx1QkFBeUIsU0FBVXNCLEdBRTlDLElBQUlDLEVBQW1CLEdBTXZCLE9BTEF6dUQsS0FBSzB1RCxtQ0FBbUNGLEVBQWlCQyxHQUV6REEsRUFBaUIvZ0QsTUFBSyxTQUFVVixFQUFHQyxHQUMvQixPQUFPRCxFQUFFZy9DLE1BQVEvK0MsRUFBRSsrQyxTQUVoQnlDLEdBUVgzTCxHQUFLdGdELFVBQVVrc0QsbUNBQXFDLFNBQVV2MEMsRUFBTTh5QyxHQUNoRSxJQUFJOXJELEVBQVFuQixLQUNSNHNELEVBQVl6eUMsRUFBSzZDLFdBQ3JCLEdBQWtCLE9BQWQ0dkMsRUFDQSxJQUFLLElBQUk5Z0QsRUFBSSxFQUFHQSxFQUFJOGdELEVBQVVubUQsT0FBUXFGLElBQ2xDbWhELEVBQU14bkQsS0FBS21uRCxFQUFVOWdELElBRzdCcU8sRUFBS3lDLGNBQWEsU0FBVWhMLEdBQ3hCelEsRUFBTXV0RCxtQ0FBbUM5OEMsRUFBT3E3QyxPQVV4RG5LLEdBQUt0Z0QsVUFBVXdxRCxxQ0FBdUMsU0FBVTd5QyxHQUM1RCxJQUFJaFosRUFBUW5CLEtBQ1JpdEQsRUFBUTl5QyxFQUFLNkMsV0FDakIsR0FBSWl3QyxFQUFPLENBRVAsSUFEQSxJQUFJMEIsRUFBSyxFQUNBbmxELEVBQU8sRUFBR0EsRUFBT3lqRCxFQUFNeG1ELE9BQVErQyxJQUNoQ3lqRCxFQUFNempELEdBQU1nK0IsU0FBV29qQixHQUFrQmdELFlBQ3pDWCxFQUFNMEIsR0FBTTFCLEVBQU16akQsR0FDbEJtbEQsS0FHUjFCLEVBQU14bUQsT0FBU2tvRCxFQUNmeDBDLEVBQUtneEMsU0FBUzhCLEVBQU14bUQsT0FBUyxFQUFJd21ELEVBQVEsTUFFN0M5eUMsRUFBS3lDLGNBQWEsU0FBVU4sR0FDeEJuYixFQUFNNnJELHFDQUFxQzF3QyxPQVluRHdtQyxHQUFLdGdELFVBQVV5aUQsbUJBQXFCLFNBQVVqeUMsR0FDMUMsSUFBSTdSLEVBQVFuQixLQUNSODFCLEVBQWU5MUIsS0FBS2d1RCw0QkFBNEJoN0MsR0FBTUEsT0FDdER3N0MsRUFBa0J4dUQsS0FBSzhyRCxzQkFBc0JiLFFBQVFqNEMsR0FRekQsT0FQQXc3QyxFQUFnQmhELGlCQUFnQixTQUFVcnhDLEdBQ3RDaFosRUFBTXl0RCx5QkFBeUJ6MEMsTUFFbkNuYSxLQUFLNHVELHlCQUF5QkosR0FDOUJBLEVBQWdCbkQsbUJBQWtCLFNBQVVseEMsR0FDeENoWixFQUFNeXRELHlCQUF5QnowQyxNQUU1QjJiLEdBU1hndEIsR0FBS3RnRCxVQUFVb3NELHlCQUEyQixTQUFVejBDLEdBQ2hELElBQUk4eUMsRUFBUTl5QyxFQUFLNkMsV0FDakIsR0FBYyxPQUFWaXdDLEVBQWdCLENBUWhCLElBTEEsSUFBSTlnQyxFQUFZLEdBR1o2UCxFQUFTLEdBQ1Q2eUIsR0FBWSxFQUNQL2lELEVBQUksRUFBR0EsRUFBSW1oRCxFQUFNeG1ELE9BQVFxRixJQUMxQm1oRCxFQUFNbmhELEdBQUcwN0IsU0FBV29qQixHQUFrQmlELG1CQUNqQ1osRUFBTW5oRCxHQUFHMDdCLFNBQVdvakIsR0FBa0I2QyxPQUMzQyxRQUFPb0IsSUFBYS9pRCxFQUFJLEVBQUcsbURBQzNCK2lELEVBQVcvaUQsRUFFWG1oRCxFQUFNbmhELEdBQUcwN0IsT0FBU29qQixHQUFrQmlELGlCQUNwQ1osRUFBTW5oRCxHQUFHcWdELFlBQWMsU0FHdkIsUUFBT2MsRUFBTW5oRCxHQUFHMDdCLFNBQVdvakIsR0FBa0I4QixJQUFLLDBDQUVsRE8sRUFBTW5oRCxHQUFHb2dELFlBQ1Rsd0IsRUFBU0EsRUFBTytCLE9BQU8vOUIsS0FBSytqRCxnQkFBZ0JuckIsYUFBYXEwQixFQUFNbmhELEdBQUdzZ0QsZ0JBQWdCLElBQzlFYSxFQUFNbmhELEdBQUdrTixZQUVUbVQsRUFBVTFtQixLQUFLd25ELEVBQU1uaEQsR0FBR2tOLFdBQVd0UyxLQUFLLEtBQU0sSUFBSXFDLE1BQU0sUUFBUSxFQURqRCxTQWUzQixLQVZrQixJQUFkOGxELEVBRUExMEMsRUFBS2d4QyxTQUFTLE1BSWQ4QixFQUFNeG1ELE9BQVNvb0QsRUFBVyxFQUc5Qjd1RCxLQUFLaWpELFlBQVlsWSwwQkFBMEI1d0IsRUFBS25ILE9BQVFncEIsR0FDL0Nsd0IsRUFBSSxFQUFHQSxFQUFJcWdCLEVBQVUxbEIsT0FBUXFGLElBQ2xDc0UsRUFBZStiLEVBQVVyZ0IsTUF3QnJDLElBeUhJZ2pELEdBekhBQyxHQUEyQyxXQUMzQyxTQUFTQSxFQUEwQkMsRUFBTUMsR0FDckMsSUFBSTl0RCxFQUFRbkIsS0FDWkEsS0FBS2d2RCxLQUFPQSxFQUNaaHZELEtBQUtpdkQsY0FBZ0JBLEVBQ3JCanZELEtBQUtrdkQsTUFBUSxLQUNibHZELEtBQUtrdkQsTUFBUUQsRUFBY3pyRCxhQUFhLENBQUVzRixVQUFVLElBQy9DOUksS0FBS2t2RCxPQUNORCxFQUFjeHNELE1BQU05QyxNQUFLLFNBQVV3dkQsR0FBUSxPQUFRaHVELEVBQU0rdEQsTUFBUUMsS0FrRXpFLE9BM0RBSixFQUEwQnZzRCxVQUFVMitDLFNBQVcsU0FBVUQsR0FDckQsT0FBS2xoRCxLQUFLa3ZELE1BR0hsdkQsS0FBS2t2RCxNQUFNL04sU0FBU0QsR0FBY3AwQixPQUFNLFNBQVV0dEIsR0FHckQsT0FBSUEsR0FBd0IsK0JBQWZBLEVBQU1pb0MsTUFDZnJqQyxFQUFJLGtFQUNHLE1BR0ExRSxRQUFRVCxPQUFPTyxNQVZuQkUsUUFBUVYsUUFBUSxPQWMvQit2RCxFQUEwQnZzRCxVQUFVZ2hELHVCQUF5QixTQUFVeGQsR0FHL0RobUMsS0FBS2t2RCxNQUNMbHZELEtBQUtrdkQsTUFBTUUscUJBQXFCcHBCLElBR2hDMzFCLFlBQVcsV0FBYyxPQUFPMjFCLEVBQVMsUUFBVSxHQUNuRGhtQyxLQUFLaXZELGNBQ0F4c0QsTUFDQTlDLE1BQUssU0FBVXd2RCxHQUFRLE9BQU9BLEVBQUtDLHFCQUFxQnBwQixRQUdyRStvQixFQUEwQnZzRCxVQUFVNnNELDBCQUE0QixTQUFVcnBCLEdBQ3RFaG1DLEtBQUtpdkQsY0FDQXhzRCxNQUNBOUMsTUFBSyxTQUFVd3ZELEdBQVEsT0FBT0EsRUFBS0csd0JBQXdCdHBCLE9BRXBFK29CLEVBQTBCdnNELFVBQVVvL0Msc0JBQXdCLFdBQ3hELElBQUkyTixFQUFlLDBEQUNmdnZELEtBQUtndkQsS0FBSzF0RCxLQURLLGlGQUlmLGVBQWdCdEIsS0FBS2d2RCxLQUFLanVELFFBQzFCd3VELEdBQ0ksdUpBSUMsbUJBQW9CdnZELEtBQUtndkQsS0FBS2p1RCxRQUNuQ3d1RCxHQUNJLDJKQUtKQSxHQUNJLGtLQUlSN3BELEVBQUs2cEQsSUFFRlIsRUExRW1DLEdBNkUxQ1MsR0FBNEMsV0FDNUMsU0FBU0EsS0FlVCxPQWJBQSxFQUEyQmh0RCxVQUFVMitDLFNBQVcsU0FBVUQsR0FDdEQsT0FBT3hoRCxRQUFRVixRQUFRLENBQ25Cb2lELFlBQWFvTyxFQUEyQkMsdUJBR2hERCxFQUEyQmh0RCxVQUFVZ2hELHVCQUF5QixTQUFVeGQsR0FHcEVBLEVBQVN3cEIsRUFBMkJDLHNCQUV4Q0QsRUFBMkJodEQsVUFBVTZzRCwwQkFBNEIsU0FBVXJwQixLQUMzRXdwQixFQUEyQmh0RCxVQUFVby9DLHNCQUF3QixhQUM3RDROLEVBQTJCQyxvQkFBc0IsUUFDMUNELEVBaEJvQyxHQWdEM0NFLEdBQTZCLFdBQzdCLFNBQVNBLElBSUwxdkQsS0FBSzJ2RCxPQUFTLEdBS2QzdkQsS0FBSzR2RCxnQkFBaUIsRUFpSzFCLE9BL0pBRixFQUFZdGpCLFlBQWMsV0FJdEIsT0FISzBpQixLQUNEQSxHQUFrQixJQUFJWSxHQUVuQlosSUFHWFksRUFBWWx0RCxVQUFVNitDLFVBQVksV0FDOUIsSUFBSW5nRCxFQUFLWixFQUFJbStCLEVBQUs3OEIsRUFDbEIsSUFDSSxJQUFLLElBQUlJLEdBQUssUUFBU00sT0FBT3NFLEtBQUs1RyxLQUFLMnZELFNBQVV4bUQsRUFBS25ILEVBQUdDLFFBQVNrSCxFQUFHMUosS0FBTTBKLEVBQUtuSCxFQUFHQyxPQUFRLENBQ3hGLElBQUlpQyxFQUFVaUYsRUFBRzVKLE1BQ2pCLElBQ0ksSUFBSyxJQUFJc2lELEdBQU1wakIsT0FBTSxHQUFRLFFBQVNuOEIsT0FBT3NFLEtBQUs1RyxLQUFLMnZELE9BQU96ckQsTUFBYTQ5QyxFQUFLRCxFQUFHNS9DLFFBQVM2L0MsRUFBR3JpRCxLQUFNcWlELEVBQUtELEVBQUc1L0MsT0FBUSxDQUNqSCxJQUFJNHRELEVBQVEvTixFQUFHdmlELE1BQ2ZTLEtBQUsydkQsT0FBT3pyRCxHQUFTMnJELEdBQU94TyxhQUdwQyxNQUFPdmlCLEdBQVNMLEVBQU0sQ0FBRWovQixNQUFPcy9CLEdBQy9CLFFBQ0ksSUFDUWdqQixJQUFPQSxFQUFHcmlELE9BQVNtQyxFQUFLaWdELEVBQUd6L0MsU0FBU1IsRUFBR1MsS0FBS3cvQyxHQUVwRCxRQUFVLEdBQUlwakIsRUFBSyxNQUFNQSxFQUFJai9CLFNBSXpDLE1BQU8yQyxHQUFTakIsRUFBTSxDQUFFMUIsTUFBTzJDLEdBQy9CLFFBQ0ksSUFDUWdILElBQU9BLEVBQUcxSixPQUFTYSxFQUFLMEIsRUFBR0ksU0FBUzlCLEVBQUcrQixLQUFLTCxHQUVwRCxRQUFVLEdBQUlkLEVBQUssTUFBTUEsRUFBSTFCLFNBR3JDa3dELEVBQVlsdEQsVUFBVTgrQyxPQUFTLFdBQzNCLElBQUl0aUIsRUFBSzErQixFQUFJNCtCLEVBQUt0OUIsRUFDbEIsSUFDSSxJQUFLLElBQUlJLEdBQUssUUFBU00sT0FBT3NFLEtBQUs1RyxLQUFLMnZELFNBQVV4bUQsRUFBS25ILEVBQUdDLFFBQVNrSCxFQUFHMUosS0FBTTBKLEVBQUtuSCxFQUFHQyxPQUFRLENBQ3hGLElBQUlpQyxFQUFVaUYsRUFBRzVKLE1BQ2pCLElBQ0ksSUFBSyxJQUFJc2lELEdBQU0zaUIsT0FBTSxHQUFRLFFBQVM1OEIsT0FBT3NFLEtBQUs1RyxLQUFLMnZELE9BQU96ckQsTUFBYTQ5QyxFQUFLRCxFQUFHNS9DLFFBQVM2L0MsRUFBR3JpRCxLQUFNcWlELEVBQUtELEVBQUc1L0MsT0FBUSxDQUNqSCxJQUFJNHRELEVBQVEvTixFQUFHdmlELE1BQ2ZTLEtBQUsydkQsT0FBT3pyRCxHQUFTMnJELEdBQU92TyxVQUdwQyxNQUFPbmlCLEdBQVNELEVBQU0sQ0FBRTEvQixNQUFPMi9CLEdBQy9CLFFBQ0ksSUFDUTJpQixJQUFPQSxFQUFHcmlELE9BQVNtQyxFQUFLaWdELEVBQUd6L0MsU0FBU1IsRUFBR1MsS0FBS3cvQyxHQUVwRCxRQUFVLEdBQUkzaUIsRUFBSyxNQUFNQSxFQUFJMS9CLFNBSXpDLE1BQU95L0IsR0FBU0QsRUFBTSxDQUFFeC9CLE1BQU95L0IsR0FDL0IsUUFDSSxJQUNROTFCLElBQU9BLEVBQUcxSixPQUFTYSxFQUFLMEIsRUFBR0ksU0FBUzlCLEVBQUcrQixLQUFLTCxHQUVwRCxRQUFVLEdBQUlnOUIsRUFBSyxNQUFNQSxFQUFJeC9CLFNBTXJDa3dELEVBQVlsdEQsVUFBVXN0RCxzQkFBd0IsU0FBVXBsQyxFQUFNM1csRUFBTTRCLEdBQ2hFK1UsRUFBS2l0QixVQUFZLElBQUk3akMsR0FBU0MsRUFBTyxJQUFNNEIsR0FDN0IsRUFBTytVLEVBQUtpdEIsVUFBVXB6QyxVQUFXbW1CLEVBQUtpdEIsVUFBVTFqQyxjQUFleVcsRUFBS2l0QixVQUFVempDLFVBQVd3VyxFQUFLaXRCLFVBQVV4akMsZUFBZ0J1VyxFQUFLaXRCLFVBQVV2akMsK0JBQ2pKc1csRUFBS2l0QixVQUFVempDLFlBQ2Z3VyxFQUFLc3hCLG1CQUFxQixJQUFJd1QsS0FTdENFLEVBQVlsdEQsVUFBVXV0RCxnQkFBa0IsU0FBVWhyRCxFQUFLaXJELEVBQWN4YyxFQUFLdC9CLEdBQ3RFLElBQUkyN0MsRUFBUXJjLEdBQU96dUMsRUFBSWhFLFFBQVFrdkQsaUJBQ2pCNXZELElBQVZ3dkQsSUFDSzlxRCxFQUFJaEUsUUFBUW12RCxXQUNiM2pELEVBQU0sa0hBR1ZuSSxFQUFJLGtDQUFtQ1csRUFBSWhFLFFBQVFtdkQsV0FDbkRMLEVBQVE5cUQsRUFBSWhFLFFBQVFtdkQsVUFBWSxnQ0FFcEMsSUFFSUMsRUFGQS82QyxFQUFZRixHQUFjMjZDLEVBQU8zN0MsR0FDakN1QixFQUFXTCxFQUFVSyxTQUVyQjI2QyxPQUFpQi92RCxFQUNFLG9CQUFaMjBDLFVBQ1BvYixFQUFpQnBiLFFBQVFFLElBQXVDLGlDQUVoRWtiLEdBQ0FELEdBQWEsRUFDYk4sRUFBUSxVQUFZTyxFQUFpQixPQUFTMzZDLEVBQVNsUixVQUV2RGtSLEdBREFMLEVBQVlGLEdBQWMyNkMsRUFBTzM3QyxJQUNadUIsVUFHckIwNkMsR0FBYy82QyxFQUFVSyxTQUFTekIsT0FFckMsSUFBSXE4QyxFQUFvQm44QyxHQUFhaThDLEVBQy9CLElBQUlYLEdBQ0osSUFBSVQsR0FBMEJocUQsRUFBS2lyRCxHQU96QyxPQU5BdjNDLEdBQVksZ0NBQWlDLEVBQUdyRCxHQUMzQ0EsRUFBVXBDLEtBQUtqQixXQUNoQnhGLEVBQU0sNEZBR0N2TSxLQUFLc3dELFdBQVc3NkMsRUFBVTFRLEVBQUtzckQsR0FDOUJsRyxVQU9oQnVGLEVBQVlsdEQsVUFBVSt0RCxXQUFhLFNBQVU3bEMsR0FDekMsSUFBSThsQyxHQUFXLFFBQVF4d0QsS0FBSzJ2RCxPQUFRamxDLEVBQUszbEIsSUFBSXpELE1BRXhDa3ZELElBQVksUUFBUUEsRUFBVTlsQyxFQUFLdHJCLE9BQVNzckIsR0FDN0NuZSxFQUFNLFlBQWNtZSxFQUFLM2xCLElBQUl6RCxLQUFPLElBQU1vcEIsRUFBS2l0QixVQUFZLCtCQUUvRGp0QixFQUFLMjJCLG1CQUNFbVAsRUFBUzlsQyxFQUFLdHJCLE1BVXpCc3dELEVBQVlsdEQsVUFBVTh0RCxXQUFhLFNBQVU3NkMsRUFBVTFRLEVBQUtzckQsR0FDeEQsSUFBSUcsR0FBVyxRQUFReHdELEtBQUsydkQsT0FBUTVxRCxFQUFJekQsTUFDbkNrdkQsSUFDREEsRUFBVyxHQUNYeHdELEtBQUsydkQsT0FBTzVxRCxFQUFJekQsTUFBUWt2RCxHQUU1QixJQUFJOWxDLEdBQU8sUUFBUThsQyxFQUFVLzZDLEVBQVNSLGVBTXRDLE9BTEl5VixHQUNBbmUsRUFBTSwySEFFVm1lLEVBQU8sSUFBSW80QixHQUFLcnRDLEVBQVV6VixLQUFLNHZELGVBQWdCN3FELEVBQUtzckQsR0FDcERHLEVBQVMvNkMsRUFBU1IsZUFBaUJ5VixFQUM1QkEsR0FNWGdsQyxFQUFZbHRELFVBQVVpdUQsZ0JBQWtCLFNBQVVBLEdBQzlDendELEtBQUs0dkQsZUFBaUJhLEdBRW5CZixFQTNLcUIsR0FrTTVCeEosR0FBMEIsV0FLMUIsU0FBU0EsRUFBU3dLLEdBQ2QsSUFBSXZ2RCxFQUFRbkIsS0FDWkEsS0FBSzB3RCxjQUFnQkEsRUFFckIxd0QsS0FBSzJ3RCxrQkFBbUIsRUFDeEIzd0QsS0FBSzZCLFNBQVcsQ0FDWmtCLE9BQVEsV0FBYyxPQUFPLFFBQVU1QixPQUFPLE9BQVEsR0FBUSxXQUMxRCxPQUFPLFFBQVluQixNQUFNLFNBQVVNLEdBSy9CLE9BSkFOLEtBQUs0d0QsY0FBYyxVQUNuQmxCLEdBQVl0akIsY0FBY21rQixXQUFXdndELEtBQUs4WSxPQUMxQzlZLEtBQUswd0QsY0FBZ0IsS0FDckIxd0QsS0FBSzZ3RCxjQUFnQixLQUNkLENBQUMsV0FJZEgsYUFBeUI1TixJQUMzQnYyQyxFQUFNLHdFQWlIZCxPQTlHQWpLLE9BQU9DLGVBQWUyakQsRUFBUzFqRCxVQUFXLFFBQVMsQ0FDL0NDLElBQUssV0FLRCxPQUpLekMsS0FBSzJ3RCxtQkFDTjN3RCxLQUFLMHdELGNBQWN6Z0IsUUFDbkJqd0MsS0FBSzJ3RCxrQkFBbUIsR0FFckIzd0QsS0FBSzB3RCxlQUVoQjd0RCxZQUFZLEVBQ1pDLGNBQWMsSUFFbEJSLE9BQU9DLGVBQWUyakQsRUFBUzFqRCxVQUFXLFFBQVMsQ0FDL0NDLElBQUssV0FJRCxPQUhLekMsS0FBSzZ3RCxnQkFDTjd3RCxLQUFLNndELGNBQWdCLElBQUk5RyxHQUFVL3BELEtBQUs4WSxNQUFPcEksRUFBS2doQixRQUVqRDF4QixLQUFLNndELGVBRWhCaHVELFlBQVksRUFDWkMsY0FBYyxJQUVsQlIsT0FBT0MsZUFBZTJqRCxFQUFTMWpELFVBQVcsTUFBTyxDQUM3Q0MsSUFBSyxXQUNELE9BQU96QyxLQUFLOFksTUFBTS9ULEtBRXRCbEMsWUFBWSxFQUNaQyxjQUFjLElBVWxCb2pELEVBQVMxakQsVUFBVXN1RCxZQUFjLFNBQVUvOEMsRUFBTTRCLEdBQzdDM1YsS0FBSzR3RCxjQUFjLGVBQ2Y1d0QsS0FBSzJ3RCxpQkFDTHBrRCxFQUFNLDBFQUlWbWpELEdBQVl0akIsY0FBYzBqQixzQkFBc0I5dkQsS0FBSzB3RCxjQUFlMzhDLEVBQU00QixJQUU5RXV3QyxFQUFTMWpELFVBQVUrbEIsSUFBTSxTQUFVdlYsR0FHL0IsT0FGQWhULEtBQUs0d0QsY0FBYyxRQUNuQixRQUFpQixlQUFnQixFQUFHLEVBQUcxd0QsVUFBVXVHLFFBQzdDdU0sYUFBZ0IrMkMsR0FDVC9wRCxLQUFLK3dELFdBQVcvOUMsRUFBS3ZJLGlCQUVoQnBLLElBQVQyUyxFQUFxQmhULEtBQUswZ0IsTUFBTTlPLE1BQU1vQixHQUFRaFQsS0FBSzBnQixPQVM5RHdsQyxFQUFTMWpELFVBQVV1dUQsV0FBYSxTQUFVdmQsR0FFdEMsSUFBSXdkLEVBQVUsc0JBQ2RoeEQsS0FBSzR3RCxjQUFjSSxJQUNuQixRQUFpQkEsRUFBUyxFQUFHLEVBQUc5d0QsVUFBVXVHLFFBQzFDLElBQUl3cUQsRUFBWS83QyxHQUFjcytCLEVBQUt4ekMsS0FBSzhZLE1BQU02K0IsVUFBVXpqQyxXQUN4RHVFLEdBQVl1NEMsRUFBUyxFQUFHQyxHQUN4QixJQUFJeDdDLEVBQVd3N0MsRUFBVXg3QyxTQVV6QixPQVRLQSxFQUFTakIsZ0JBQWtCaUIsRUFBUzFCLE9BQVMvVCxLQUFLOFksTUFBTTYrQixVQUFVNWpDLE1BQ25FeEgsRUFBTXlrRCw2REFHRnY3QyxFQUFTMUIsS0FDVCxpQkFDQS9ULEtBQUs4WSxNQUFNNitCLFVBQVU1akMsS0FDckIsS0FFRC9ULEtBQUt1b0IsSUFBSTBvQyxFQUFVaitDLEtBQUt2SSxhQUtuQ3k3QyxFQUFTMWpELFVBQVVvdUQsY0FBZ0IsU0FBVUksR0FDZCxPQUF2Qmh4RCxLQUFLMHdELGVBQ0xua0QsRUFBTSxlQUFpQnlrRCxFQUFVLDRCQUl6QzlLLEVBQVMxakQsVUFBVTB1RCxVQUFZLFlBQzNCLFFBQWlCLHFCQUFzQixFQUFHLEVBQUdoeEQsVUFBVXVHLFFBQ3ZEekcsS0FBSzR3RCxjQUFjLGFBQ25CNXdELEtBQUs4WSxNQUFNdW9DLGFBRWY2RSxFQUFTMWpELFVBQVUydUQsU0FBVyxZQUMxQixRQUFpQixvQkFBcUIsRUFBRyxFQUFHanhELFVBQVV1RyxRQUN0RHpHLEtBQUs0d0QsY0FBYyxZQUNuQjV3RCxLQUFLOFksTUFBTXdvQyxVQUVmNEUsRUFBU2tMLFlBQWMsQ0FDbkJDLFVBQVcsQ0FDUCxNQUFPLGFBRVhDLFVBQVcsU0FBVWxpQyxHQUNqQixNQUFPLENBQ0gsTUFBTyxDQUNILFVBQWFBLE1BS3RCODJCLEVBdklrQixHQW9OekJya0QsR0FBd0JTLE9BQU9pdkQsT0FBTyxDQUN4Q0MsVUFBVyxLQUNYQyxpQkFyRHFCLFdBQ25CaGQsR0FBb0JuRSxnQkFDcEI5QyxHQUFzQjRDLGNBb0R4QnNoQixnQkFsRG9CLFdBQ2xCbGtCLEdBQXNCOEMsaUJBa0R4QjRHLHNCQS9DMEIsV0FDeEIsT0FBT3pDLEdBQWlDLGVBK0MxQ2tkLHlCQTdDNkIsU0FBVXBwQyxFQUFLc0QsR0FFMUN0RCxFQUFJbUMsS0FBSzA0QixzQkFBc0J6Ryx1QkFBeUI5d0IsR0E0QzFEbWUsTUExQ1UsU0FBVXpoQixFQUFLazlCLEdBQ3ZCbDlCLEVBQUltQyxLQUFLc2YsTUFBTXliLElBMENqQk0sc0JBeEMwQixTQUFVeDlCLEVBQUt5OUIsR0FDdkN6OUIsRUFBSW1DLEtBQUtxN0Isc0JBQXNCQyxJQXdDakNoRCxnQkF0Q29CLFNBQVV6NkIsR0FDNUIsT0FBT0EsRUFBSW1DLEtBQUtzNEIsaUJBc0NsQjRPLG9CQXBDd0IsU0FBVXJwQyxFQUFLc0QsR0FDckMsT0FBT3RELEVBQUltQyxLQUFLODVCLHFCQUFxQjM0QixJQW9DdkNnbUMsZUF6QkYsU0FBd0J2eEQsR0FDcEIsSUFBSXlFLEVBQU16RSxFQUFHeUUsSUFBS3l1QyxFQUFNbHpDLEVBQUdrekMsSUFBS3R1QyxFQUFVNUUsRUFBRzRFLFFBQVM0c0QsRUFBaUJ4eEQsRUFBR3d4RCxlQUFnQnZ0RCxFQUFZakUsRUFBR2lFLFVBQVczQyxFQUFLdEIsRUFBRzRULFVBQVdBLE9BQW1CLElBQVB0UyxHQUF3QkEsRUFDM0t5eUMsR0FBY252QyxHQUtkLElBQUk4cUQsRUFBZSxJQUFJLEtBQVMsZ0JBQWlCLElBQUksS0FBbUIsd0JBRXhFLE9BREFBLEVBQWFobkQsYUFBYSxJQUFJLEtBQVUsaUJBQWlCLFdBQWMsT0FBTzhvRCxJQUFtQixZQUMxRixDQUNIbnBELFNBQVUrbUQsR0FBWXRqQixjQUFjMmpCLGdCQUFnQmhyRCxFQUFLaXJELEVBQWN4YyxFQUFLdC9CLEdBQzVFM1AsVUFBV0EsTUFpQ2Z3dEQsR0FBaUJuVyxHQU1yQkEsR0FBcUJwNUMsVUFBVXd2RCxhQUFlLFNBQVUzZ0QsRUFBWTJILEdBQ2hFaFosS0FBS3U1QyxZQUFZLElBQUssQ0FBRXlFLEVBQUczc0MsR0FBYzJILElBTzdDNGlDLEdBQXFCcDVDLFVBQVV5dkQsS0FBTyxTQUFVeGxELEVBQU15bEQsR0FDbERseUQsS0FBS3U1QyxZQUFZLE9BQVEsQ0FBRXZHLEVBQUd2bUMsR0FBUXlsRCxJQUcxQyxJQUFJQyxHQUFxQnphLEdBb0JyQjBhLEdBQW1CdCtDLEdBaUJuQnUrQyxHQUEyQi92RCxPQUFPaXZELE9BQU8sQ0FDM0NDLFVBQVcsS0FDWE8sZUFBZ0JBLEdBQ2hCSSxtQkFBb0JBLEdBQ3BCRyxXQXBDZSxTQUFVQyxHQUN2QixJQUFJQyxFQUFTNVcsR0FBcUJwNUMsVUFBVTg0QyxJQU81QyxPQU5BTSxHQUFxQnA1QyxVQUFVODRDLElBQU0sU0FBVWpxQyxFQUFZNUUsRUFBTXVNLEVBQVlpRSxRQUM1RDVjLElBQVQ0YyxJQUNBQSxFQUFPczFDLEtBRVhDLEVBQU9ud0QsS0FBS3JDLEtBQU1xUixFQUFZNUUsRUFBTXVNLEVBQVlpRSxJQUU3QyxXQUNIMitCLEdBQXFCcDVDLFVBQVU4NEMsSUFBTWtYLElBNEIzQ0osaUJBQWtCQSxHQUNsQnJrQyxnQkFsQm9CLFNBQVU1RSxHQUM1QixPQUFPQSxFQUFNNEUsbUJBa0JmMGlDLGdCQVhvQixTQUFVQSxHQUM1QmYsR0FBWXRqQixjQUFjcWtCLGdCQUFnQkEsTUFnQzFDVyxHQUFjbEwsR0FBU2tMLGFBQzNCLFNBQTBCem9ELEdBRXRCMHJDLEdBQWMxckMsRUFBUzNDLGFBRXZCLElBQUl6QixFQUFZb0UsRUFBUzlHLFNBQVMrRCxrQkFBa0IsSUFBSSxLQUFVLFlBQVksU0FBVWxFLEVBQVc4eEMsR0FHL0YsSUFBSXp1QyxFQUFNckQsRUFBVTZCLFlBQVksT0FBT0MsZUFDbkN3c0QsRUFBZXR1RCxFQUFVNkIsWUFBWSxpQkFDekMsT0FBT21zRCxHQUFZdGpCLGNBQWMyakIsZ0JBQWdCaHJELEVBQUtpckQsRUFBY3hjLEtBQ3JFLFVBQ0VwckMsZ0JBRUwsQ0FDSTJoRCxVQUFXQSxHQUNYdC9CLE1BQU9BLEdBQ1B5N0IsU0FBVUEsR0FDVjcrQixhQUFjQSxHQUNkcGIsY0FBZUEsRUFDZnBLLFNBQVVBLEdBQ1Z1dkQsWUFBYUEsR0FDYmlCLFlBQWFBLEtBRVpscUQsc0JBQXFCLElBQzFCUSxFQUFTM0QsZ0JBNUNGLHFCQUNHLFVBNENOLFlBQ0FwRixFQUFPQyxRQUFVMEUsR0FHekJrdUQsQ0FBaUIsTSwyQkM1a2VqQixTQUFTQyxJQUNMLElBQUssSUFBSTNqRCxFQUFJLEVBQUdqRCxFQUFJLEVBQUc2bUQsRUFBS3p5RCxVQUFVdUcsT0FBUXFGLEVBQUk2bUQsRUFBSTdtRCxJQUFLaUQsR0FBSzdPLFVBQVU0TCxHQUFHckYsT0FDeEUsSUFBSWcrQixFQUFJbDdCLE1BQU13RixHQUFJdEIsRUFBSSxFQUEzQixJQUE4QjNCLEVBQUksRUFBR0EsRUFBSTZtRCxFQUFJN21ELElBQ3pDLElBQUssSUFBSWtCLEVBQUk5TSxVQUFVNEwsR0FBSStHLEVBQUksRUFBRysvQyxFQUFLNWxELEVBQUV2RyxPQUFRb00sRUFBSSsvQyxFQUFJLy9DLElBQUtwRixJQUMxRGczQixFQUFFaDNCLEdBQUtULEVBQUU2RixHQUNqQixPQUFPNHhCLEVBbUJYLElBQUlua0MsRSw2Q0FJSixJQVlJdXlELEVBWkF2cUQsRUFBWSxJQWFoQixTQUFXdXFELEdBQ1BBLEVBQVNBLEVBQWdCLE1BQUksR0FBSyxRQUNsQ0EsRUFBU0EsRUFBa0IsUUFBSSxHQUFLLFVBQ3BDQSxFQUFTQSxFQUFlLEtBQUksR0FBSyxPQUNqQ0EsRUFBU0EsRUFBZSxLQUFJLEdBQUssT0FDakNBLEVBQVNBLEVBQWdCLE1BQUksR0FBSyxRQUNsQ0EsRUFBU0EsRUFBaUIsT0FBSSxHQUFLLFNBTnZDLENBT0dBLElBQWFBLEVBQVcsS0FDM0IsSUFBSUMsRUFBb0IsQ0FDcEIsTUFBU0QsRUFBU0UsTUFDbEIsUUFBV0YsRUFBU0csUUFDcEIsS0FBUUgsRUFBU0ksS0FDakIsS0FBUUosRUFBU0ssS0FDakIsTUFBU0wsRUFBU00sTUFDbEIsT0FBVU4sRUFBU08sUUFLbkJDLEVBQWtCUixFQUFTSSxLQU8zQkssSUFBaUJoekQsRUFBSyxJQUNuQnV5RCxFQUFTRSxPQUFTLE1BQ3JCenlELEVBQUd1eUQsRUFBU0csU0FBVyxNQUN2QjF5RCxFQUFHdXlELEVBQVNJLE1BQVEsT0FDcEIzeUQsRUFBR3V5RCxFQUFTSyxNQUFRLE9BQ3BCNXlELEVBQUd1eUQsRUFBU00sT0FBUyxRQUNyQjd5RCxHQU1BaXpELEVBQW9CLFNBQVU1cUQsRUFBVTZxRCxHQUV4QyxJQURBLElBQUl2ekQsRUFBTyxHQUNGdUcsRUFBSyxFQUFHQSxFQUFLdEcsVUFBVXVHLE9BQVFELElBQ3BDdkcsRUFBS3VHLEVBQUssR0FBS3RHLFVBQVVzRyxHQUU3QixLQUFJZ3RELEVBQVU3cUQsRUFBU3lELFVBQXZCLENBR0EsSUFBSTBOLEdBQU0sSUFBSStsQyxNQUFPNFQsY0FDakJDLEVBQVNKLEVBQWNFLEdBQzNCLElBQUlFLEVBSUEsTUFBTSxJQUFJM3FELE1BQU0sOERBQWdFeXFELEVBQVUsS0FIMUZydkQsUUFBUXV2RCxHQUFRdnpELE1BQU1nRSxRQUFTdXVELEVBQWUsQ0FBQyxJQUFNNTRDLEVBQU0sTUFBUW5SLEVBQVNySCxLQUFPLEtBQU1yQixNQU03RjB6RCxFQUF3QixXQU94QixTQUFTQSxFQUFPcnlELEdBQ1p0QixLQUFLc0IsS0FBT0EsRUFJWnRCLEtBQUs0ekQsVUFBWVAsRUFLakJyekQsS0FBSzZ6RCxZQUFjTixFQUluQnZ6RCxLQUFLOHpELGdCQUFrQixLQUl2QnhyRCxFQUFVN0MsS0FBS3pGLE1BcUZuQixPQW5GQXNDLE9BQU9DLGVBQWVveEQsRUFBT254RCxVQUFXLFdBQVksQ0FDaERDLElBQUssV0FDRCxPQUFPekMsS0FBSzR6RCxXQUVoQmp4RCxJQUFLLFNBQVVDLEdBQ1gsS0FBTUEsS0FBT2l3RCxHQUNULE1BQU0sSUFBSWtCLFVBQVUsa0JBQXFCbnhELEVBQU0sNEJBRW5ENUMsS0FBSzR6RCxVQUFZaHhELEdBRXJCQyxZQUFZLEVBQ1pDLGNBQWMsSUFHbEI2d0QsRUFBT254RCxVQUFVcUQsWUFBYyxTQUFVakQsR0FDckM1QyxLQUFLNHpELFVBQTJCLGlCQUFSaHhELEVBQW1Ca3dELEVBQWtCbHdELEdBQU9BLEdBRXhFTixPQUFPQyxlQUFlb3hELEVBQU9ueEQsVUFBVyxhQUFjLENBQ2xEQyxJQUFLLFdBQ0QsT0FBT3pDLEtBQUs2ekQsYUFFaEJseEQsSUFBSyxTQUFVQyxHQUNYLEdBQW1CLG1CQUFSQSxFQUNQLE1BQU0sSUFBSW14RCxVQUFVLHFEQUV4Qi96RCxLQUFLNnpELFlBQWNqeEQsR0FFdkJDLFlBQVksRUFDWkMsY0FBYyxJQUVsQlIsT0FBT0MsZUFBZW94RCxFQUFPbnhELFVBQVcsaUJBQWtCLENBQ3REQyxJQUFLLFdBQ0QsT0FBT3pDLEtBQUs4ekQsaUJBRWhCbnhELElBQUssU0FBVUMsR0FDWDVDLEtBQUs4ekQsZ0JBQWtCbHhELEdBRTNCQyxZQUFZLEVBQ1pDLGNBQWMsSUFLbEI2d0QsRUFBT254RCxVQUFVc0IsTUFBUSxXQUVyQixJQURBLElBQUk3RCxFQUFPLEdBQ0Z1RyxFQUFLLEVBQUdBLEVBQUt0RyxVQUFVdUcsT0FBUUQsSUFDcEN2RyxFQUFLdUcsR0FBTXRHLFVBQVVzRyxHQUV6QnhHLEtBQUs4ekQsaUJBQW1COXpELEtBQUs4ekQsZ0JBQWdCM3pELE1BQU1ILEtBQU0weUQsRUFBZSxDQUFDMXlELEtBQU02eUQsRUFBU0UsT0FBUTl5RCxJQUNoR0QsS0FBSzZ6RCxZQUFZMXpELE1BQU1ILEtBQU0weUQsRUFBZSxDQUFDMXlELEtBQU02eUQsRUFBU0UsT0FBUTl5RCxLQUV4RTB6RCxFQUFPbnhELFVBQVU0QixJQUFNLFdBRW5CLElBREEsSUFBSW5FLEVBQU8sR0FDRnVHLEVBQUssRUFBR0EsRUFBS3RHLFVBQVV1RyxPQUFRRCxJQUNwQ3ZHLEVBQUt1RyxHQUFNdEcsVUFBVXNHLEdBRXpCeEcsS0FBSzh6RCxpQkFBbUI5ekQsS0FBSzh6RCxnQkFBZ0IzekQsTUFBTUgsS0FBTTB5RCxFQUFlLENBQUMxeUQsS0FBTTZ5RCxFQUFTRyxTQUFVL3lELElBQ2xHRCxLQUFLNnpELFlBQVkxekQsTUFBTUgsS0FBTTB5RCxFQUFlLENBQUMxeUQsS0FBTTZ5RCxFQUFTRyxTQUFVL3lELEtBRTFFMHpELEVBQU9ueEQsVUFBVWxELEtBQU8sV0FFcEIsSUFEQSxJQUFJVyxFQUFPLEdBQ0Z1RyxFQUFLLEVBQUdBLEVBQUt0RyxVQUFVdUcsT0FBUUQsSUFDcEN2RyxFQUFLdUcsR0FBTXRHLFVBQVVzRyxHQUV6QnhHLEtBQUs4ekQsaUJBQW1COXpELEtBQUs4ekQsZ0JBQWdCM3pELE1BQU1ILEtBQU0weUQsRUFBZSxDQUFDMXlELEtBQU02eUQsRUFBU0ksTUFBT2h6RCxJQUMvRkQsS0FBSzZ6RCxZQUFZMXpELE1BQU1ILEtBQU0weUQsRUFBZSxDQUFDMXlELEtBQU02eUQsRUFBU0ksTUFBT2h6RCxLQUV2RTB6RCxFQUFPbnhELFVBQVVrRCxLQUFPLFdBRXBCLElBREEsSUFBSXpGLEVBQU8sR0FDRnVHLEVBQUssRUFBR0EsRUFBS3RHLFVBQVV1RyxPQUFRRCxJQUNwQ3ZHLEVBQUt1RyxHQUFNdEcsVUFBVXNHLEdBRXpCeEcsS0FBSzh6RCxpQkFBbUI5ekQsS0FBSzh6RCxnQkFBZ0IzekQsTUFBTUgsS0FBTTB5RCxFQUFlLENBQUMxeUQsS0FBTTZ5RCxFQUFTSyxNQUFPanpELElBQy9GRCxLQUFLNnpELFlBQVkxekQsTUFBTUgsS0FBTTB5RCxFQUFlLENBQUMxeUQsS0FBTTZ5RCxFQUFTSyxNQUFPanpELEtBRXZFMHpELEVBQU9ueEQsVUFBVWhELE1BQVEsV0FFckIsSUFEQSxJQUFJUyxFQUFPLEdBQ0Z1RyxFQUFLLEVBQUdBLEVBQUt0RyxVQUFVdUcsT0FBUUQsSUFDcEN2RyxFQUFLdUcsR0FBTXRHLFVBQVVzRyxHQUV6QnhHLEtBQUs4ekQsaUJBQW1COXpELEtBQUs4ekQsZ0JBQWdCM3pELE1BQU1ILEtBQU0weUQsRUFBZSxDQUFDMXlELEtBQU02eUQsRUFBU00sT0FBUWx6RCxJQUNoR0QsS0FBSzZ6RCxZQUFZMXpELE1BQU1ILEtBQU0weUQsRUFBZSxDQUFDMXlELEtBQU02eUQsRUFBU00sT0FBUWx6RCxLQUVqRTB6RCxFQTlHZ0IsR0FnSDNCLFNBQVM5dEQsRUFBWW11RCxHQUNqQjFyRCxFQUFVd2YsU0FBUSxTQUFVbXNDLEdBQ3hCQSxFQUFLcHVELFlBQVltdUQsTUFHekIsU0FBU0UsRUFBa0JudUQsRUFBYWhGLEdBbURwQyxJQWxEQSxJQUFJbXNDLEVBQVUsU0FBVXZrQyxHQUNwQixJQUFJd3JELEVBQWlCLEtBQ2pCcHpELEdBQVdBLEVBQVFpekQsUUFDbkJHLEVBQWlCckIsRUFBa0IveEQsRUFBUWl6RCxRQUczQ3JyRCxFQUFTeXJELGVBRE8sT0FBaEJydUQsRUFDMEIsS0FHQSxTQUFVNEMsRUFBVXFyRCxHQUUxQyxJQURBLElBQUkvekQsRUFBTyxHQUNGdUcsRUFBSyxFQUFHQSxFQUFLdEcsVUFBVXVHLE9BQVFELElBQ3BDdkcsRUFBS3VHLEVBQUssR0FBS3RHLFVBQVVzRyxHQUU3QixJQUFJcUYsRUFBVTVMLEVBQ1RrRCxLQUFJLFNBQVU5RCxHQUNmLEdBQVcsTUFBUEEsRUFDQSxPQUFPLEtBRU4sR0FBbUIsaUJBQVJBLEVBQ1osT0FBT0EsRUFFTixHQUFtQixpQkFBUkEsR0FBbUMsa0JBQVJBLEVBQ3ZDLE9BQU9BLEVBQUlvTCxXQUVWLEdBQUlwTCxhQUFlMEosTUFDcEIsT0FBTzFKLEVBQUl3TSxRQUdYLElBQ0ksT0FBT2tqQixLQUFLQyxVQUFVM3ZCLEdBRTFCLE1BQU9nMUQsR0FDSCxPQUFPLFNBSWQ3c0QsUUFBTyxTQUFVbkksR0FBTyxPQUFPQSxLQUMvQnNHLEtBQUssS0FDTnF1RCxJQUFVRyxRQUF1REEsRUFBaUJ4ckQsRUFBU3lELFdBQzNGckcsRUFBWSxDQUNSaXVELE1BQU9uQixFQUFTbUIsR0FBT2prRCxjQUN2QmxFLFFBQVNBLEVBQ1Q1TCxLQUFNQSxFQUNObUcsS0FBTXVDLEVBQVNySCxTQU0xQmtGLEVBQUssRUFBRzh0RCxFQUFjaHNELEVBQVc5QixFQUFLOHRELEVBQVk3dEQsT0FBUUQsSUFFL0QwbUMsRUFEZW9uQixFQUFZOXRELE0sK1RDak8vQit0RCxFQUFTLFNBQVVDLEVBQVczb0QsR0FDOUIsSUFBSzJvRCxFQUNELE1BQU1DLEVBQWU1b0QsSUFNekI0b0QsRUFBaUIsU0FBVTVvRCxHQUMzQixPQUFPLElBQUk5QyxNQUFNLGlFQUdiOEMsSUFtQko2b0QsRUFBb0IsU0FBVXBwRCxHQUk5QixJQUZBLElBQUlxcEQsRUFBTSxHQUNOM1csRUFBSSxFQUNDbHlDLEVBQUksRUFBR0EsRUFBSVIsRUFBSTdFLE9BQVFxRixJQUFLLENBQ2pDLElBQUlpQyxFQUFJekMsRUFBSXNwRCxXQUFXOW9ELEdBQ25CaUMsRUFBSSxJQUNKNG1ELEVBQUkzVyxLQUFPandDLEVBRU5BLEVBQUksTUFDVDRtRCxFQUFJM1csS0FBUWp3QyxHQUFLLEVBQUssSUFDdEI0bUQsRUFBSTNXLEtBQVksR0FBSmp3QyxFQUFVLEtBRUEsUUFBWixNQUFKQSxJQUNOakMsRUFBSSxFQUFJUixFQUFJN0UsUUFDeUIsUUFBWixNQUF4QjZFLEVBQUlzcEQsV0FBVzlvRCxFQUFJLEtBRXBCaUMsRUFBSSxRQUFnQixLQUFKQSxJQUFlLEtBQTZCLEtBQXRCekMsRUFBSXNwRCxhQUFhOW9ELElBQ3ZENm9ELEVBQUkzVyxLQUFRandDLEdBQUssR0FBTSxJQUN2QjRtRCxFQUFJM1csS0FBU2p3QyxHQUFLLEdBQU0sR0FBTSxJQUM5QjRtRCxFQUFJM1csS0FBU2p3QyxHQUFLLEVBQUssR0FBTSxJQUM3QjRtRCxFQUFJM1csS0FBWSxHQUFKandDLEVBQVUsTUFHdEI0bUQsRUFBSTNXLEtBQVFqd0MsR0FBSyxHQUFNLElBQ3ZCNG1ELEVBQUkzVyxLQUFTandDLEdBQUssRUFBSyxHQUFNLElBQzdCNG1ELEVBQUkzVyxLQUFZLEdBQUpqd0MsRUFBVSxLQUc5QixPQUFPNG1ELEdBMENQRSxFQUFTLENBSVRDLGVBQWdCLEtBSWhCQyxlQUFnQixLQUtoQkMsc0JBQXVCLEtBS3ZCQyxzQkFBdUIsS0FLdkJDLGtCQUFtQixpRUFJbkIsbUJBQ0ksT0FBT2wxRCxLQUFLazFELGtCQUFvQixPQUtwQywyQkFDSSxPQUFPbDFELEtBQUtrMUQsa0JBQW9CLE9BU3BDQyxtQkFBb0MsbUJBQVRDLEtBVTNCQyxnQkFBaUIsU0FBVUMsRUFBT0MsR0FDOUIsSUFBS2hzRCxNQUFNd0MsUUFBUXVwRCxHQUNmLE1BQU12c0QsTUFBTSxpREFFaEIvSSxLQUFLdzFELFFBS0wsSUFKQSxJQUFJQyxFQUFnQkYsRUFDZHYxRCxLQUFLZzFELHNCQUNMaDFELEtBQUs4MEQsZUFDUFksRUFBUyxHQUNKNXBELEVBQUksRUFBR0EsRUFBSXdwRCxFQUFNN3VELE9BQVFxRixHQUFLLEVBQUcsQ0FDdEMsSUFBSTZwRCxFQUFRTCxFQUFNeHBELEdBQ2Q4cEQsRUFBWTlwRCxFQUFJLEVBQUl3cEQsRUFBTTd1RCxPQUMxQm92RCxFQUFRRCxFQUFZTixFQUFNeHBELEVBQUksR0FBSyxFQUNuQ2dxRCxFQUFZaHFELEVBQUksRUFBSXdwRCxFQUFNN3VELE9BQzFCc3ZELEVBQVFELEVBQVlSLEVBQU14cEQsRUFBSSxHQUFLLEVBQ25Da3FELEVBQVdMLEdBQVMsRUFDcEJNLEdBQXFCLEVBQVJOLElBQWlCLEVBQU1FLEdBQVMsRUFDN0NLLEdBQXFCLEdBQVJMLElBQWlCLEVBQU1FLEdBQVMsRUFDN0NJLEVBQW1CLEdBQVJKLEVBQ1ZELElBQ0RLLEVBQVcsR0FDTlAsSUFDRE0sRUFBVyxLQUduQlIsRUFBT2p3RCxLQUFLZ3dELEVBQWNPLEdBQVdQLEVBQWNRLEdBQVdSLEVBQWNTLEdBQVdULEVBQWNVLElBRXpHLE9BQU9ULEVBQU8vdkQsS0FBSyxLQVV2Qnl3RCxhQUFjLFNBQVVkLEVBQU9DLEdBRzNCLE9BQUl2MUQsS0FBS20xRCxxQkFBdUJJLEVBQ3JCYyxLQUFLZixHQUVUdDFELEtBQUtxMUQsZ0JBQWdCWCxFQUFrQlksR0FBUUMsSUFVMURlLGFBQWMsU0FBVWhCLEVBQU9DLEdBRzNCLE9BQUl2MUQsS0FBS20xRCxxQkFBdUJJLEVBQ3JCSCxLQUFLRSxHQWhKQSxTQUFVaUIsR0FJOUIsSUFGQSxJQUFJNUIsRUFBTSxHQUNONkIsRUFBTSxFQUFHem9ELEVBQUksRUFDVnlvRCxFQUFNRCxFQUFNOXZELFFBQVEsQ0FDdkIsSUFBSWd3RCxFQUFLRixFQUFNQyxLQUNmLEdBQUlDLEVBQUssSUFDTDlCLEVBQUk1bUQsS0FBT2pKLE9BQU80eEQsYUFBYUQsUUFFOUIsR0FBSUEsRUFBSyxLQUFPQSxFQUFLLElBQUssQ0FDM0IsSUFBSUUsRUFBS0osRUFBTUMsS0FDZjdCLEVBQUk1bUQsS0FBT2pKLE9BQU80eEQsY0FBb0IsR0FBTEQsSUFBWSxFQUFXLEdBQUxFLFFBRWxELEdBQUlGLEVBQUssS0FBT0EsRUFBSyxJQUFLLENBRTNCLElBR0lHLElBQVksRUFBTEgsSUFBVyxJQUFhLElBSC9CRSxFQUFLSixFQUFNQyxRQUcyQixJQUFhLElBRm5ESyxFQUFLTixFQUFNQyxRQUUrQyxFQUFXLEdBRGhFRCxFQUFNQyxNQUVYLE1BQ0o3QixFQUFJNW1ELEtBQU9qSixPQUFPNHhELGFBQWEsT0FBVUUsR0FBSyxLQUM5Q2pDLEVBQUk1bUQsS0FBT2pKLE9BQU80eEQsYUFBYSxPQUFjLEtBQUpFLFFBRXhDLENBQ0dELEVBQUtKLEVBQU1DLEtBQWYsSUFDSUssRUFBS04sRUFBTUMsS0FDZjdCLEVBQUk1bUQsS0FBT2pKLE9BQU80eEQsY0FBb0IsR0FBTEQsSUFBWSxJQUFhLEdBQUxFLElBQVksRUFBVyxHQUFMRSxJQUcvRSxPQUFPbEMsRUFBSWh2RCxLQUFLLElBcUhMbXhELENBQWtCOTJELEtBQUsrMkQsd0JBQXdCekIsRUFBT0MsS0FpQmpFd0Isd0JBQXlCLFNBQVV6QixFQUFPQyxHQUN0Q3YxRCxLQUFLdzFELFFBS0wsSUFKQSxJQUFJd0IsRUFBZ0J6QixFQUNkdjFELEtBQUtpMUQsc0JBQ0xqMUQsS0FBSyswRCxlQUNQVyxFQUFTLEdBQ0o1cEQsRUFBSSxFQUFHQSxFQUFJd3BELEVBQU03dUQsUUFBUyxDQUMvQixJQUFJa3ZELEVBQVFxQixFQUFjMUIsRUFBTS8rQyxPQUFPekssTUFFbkMrcEQsRUFEWS9wRCxFQUFJd3BELEVBQU03dUQsT0FDRnV3RCxFQUFjMUIsRUFBTS8rQyxPQUFPekssSUFBTSxFQUdyRGlxRCxJQUZGanFELEVBQ2tCd3BELEVBQU03dUQsT0FDRnV3RCxFQUFjMUIsRUFBTS8rQyxPQUFPekssSUFBTSxHQUdyRG1yRCxJQUZGbnJELEVBQ2tCd3BELEVBQU03dUQsT0FDRnV3RCxFQUFjMUIsRUFBTS8rQyxPQUFPekssSUFBTSxHQUV6RCxLQURFQSxFQUNXLE1BQVQ2cEQsR0FBMEIsTUFBVEUsR0FBMEIsTUFBVEUsR0FBMEIsTUFBVGtCLEVBQ25ELE1BQU1sdUQsUUFFVixJQUFJaXRELEVBQVlMLEdBQVMsRUFBTUUsR0FBUyxFQUV4QyxHQURBSCxFQUFPandELEtBQUt1d0QsR0FDRSxLQUFWRCxFQUFjLENBQ2QsSUFBSUUsRUFBYUosR0FBUyxFQUFLLElBQVNFLEdBQVMsRUFFakQsR0FEQUwsRUFBT2p3RCxLQUFLd3dELEdBQ0UsS0FBVmdCLEVBQWMsQ0FDZCxJQUFJZixFQUFhSCxHQUFTLEVBQUssSUFBUWtCLEVBQ3ZDdkIsRUFBT2p3RCxLQUFLeXdELEtBSXhCLE9BQU9SLEdBT1hGLE1BQU8sV0FDSCxJQUFLeDFELEtBQUs4MEQsZUFBZ0IsQ0FDdEI5MEQsS0FBSzgwRCxlQUFpQixHQUN0QjkwRCxLQUFLKzBELGVBQWlCLEdBQ3RCLzBELEtBQUtnMUQsc0JBQXdCLEdBQzdCaDFELEtBQUtpMUQsc0JBQXdCLEdBRTdCLElBQUssSUFBSW5wRCxFQUFJLEVBQUdBLEVBQUk5TCxLQUFLazNELGFBQWF6d0QsT0FBUXFGLElBQzFDOUwsS0FBSzgwRCxlQUFlaHBELEdBQUs5TCxLQUFLazNELGFBQWEzZ0QsT0FBT3pLLEdBQ2xEOUwsS0FBSyswRCxlQUFlLzBELEtBQUs4MEQsZUFBZWhwRCxJQUFNQSxFQUM5QzlMLEtBQUtnMUQsc0JBQXNCbHBELEdBQUs5TCxLQUFLbTNELHFCQUFxQjVnRCxPQUFPekssR0FDakU5TCxLQUFLaTFELHNCQUFzQmoxRCxLQUFLZzFELHNCQUFzQmxwRCxJQUFNQSxFQUV4REEsR0FBSzlMLEtBQUtrMUQsa0JBQWtCenVELFNBQzVCekcsS0FBSyswRCxlQUFlLzBELEtBQUttM0QscUJBQXFCNWdELE9BQU96SyxJQUFNQSxFQUMzRDlMLEtBQUtpMUQsc0JBQXNCajFELEtBQUtrM0QsYUFBYTNnRCxPQUFPekssSUFBTUEsTUFTMUVzckQsRUFBZSxTQUFVOXJELEdBQ3pCLElBQUlDLEVBQVltcEQsRUFBa0JwcEQsR0FDbEMsT0FBT3VwRCxFQUFPUSxnQkFBZ0I5cEQsR0FBVyxJQVd6QzhyRCxFQUFlLFNBQVUvckQsR0FDekIsSUFDSSxPQUFPdXBELEVBQU95QixhQUFhaHJELEdBQUssR0FFcEMsTUFBT3pILEdBQ0hNLFFBQVEzRSxNQUFNLHdCQUF5QnFFLEdBRTNDLE9BQU8sTUFzQlgsU0FBU3l6RCxFQUFTLzNELEdBQ2QsT0FBTzJILE9BQVc3RyxFQUFXZCxHQWdCakMsU0FBUzJILEVBQVdxd0QsRUFBUWhtQyxHQUN4QixLQUFNQSxhQUFrQmp2QixRQUNwQixPQUFPaXZCLEVBRVgsT0FBUUEsRUFBT2ltQyxhQUNYLEtBQUszWCxLQUlELE9BQU8sSUFBSUEsS0FES3R1QixFQUNVdXVCLFdBQzlCLEtBQUt4OUMsWUFDY2pDLElBQVhrM0QsSUFDQUEsRUFBUyxJQUViLE1BQ0osS0FBS2h1RCxNQUVEZ3VELEVBQVMsR0FDVCxNQUNKLFFBRUksT0FBT2htQyxFQUVmLElBQUssSUFBSWttQyxLQUFRbG1DLEVBRVJBLEVBQU9yakIsZUFBZXVwRCxJQVFoQixjQVJxQ0EsSUFHaERGLEVBQU9FLEdBQVF2d0QsRUFBV3F3RCxFQUFPRSxHQUFPbG1DLEVBQU9rbUMsS0FFbkQsT0FBT0YsRUFzQlgsSUFBSUcsRUFBMEIsV0FDMUIsU0FBU0EsSUFDTCxJQUFJdjJELEVBQVFuQixLQUNaQSxLQUFLZixPQUFTLGFBQ2RlLEtBQUtoQixRQUFVLGFBQ2ZnQixLQUFLNkksUUFBVSxJQUFJbkosU0FBUSxTQUFVVixFQUFTQyxHQUMxQ2tDLEVBQU1uQyxRQUFVQSxFQUNoQm1DLEVBQU1sQyxPQUFTQSxLQWdDdkIsT0F4QkF5NEQsRUFBU2wxRCxVQUFVMFcsYUFBZSxTQUFVMlMsR0FDeEMsSUFBSTFxQixFQUFRbkIsS0FDWixPQUFPLFNBQVVSLEVBQU9ELEdBQ2hCQyxFQUNBMkIsRUFBTWxDLE9BQU9PLEdBR2IyQixFQUFNbkMsUUFBUU8sR0FFTSxtQkFBYnNzQixJQUdQMXFCLEVBQU0wSCxRQUFRaWtCLE9BQU0sZUFHSSxJQUFwQmpCLEVBQVNwbEIsT0FDVG9sQixFQUFTcnNCLEdBR1Rxc0IsRUFBU3JzQixFQUFPRCxNQUt6Qm00RCxFQXZDa0IsR0E4RTdCLFNBQVNDLElBQ0wsTUFBMEIsb0JBQVg1c0QsV0FHUkEsT0FBZ0IsU0FBS0EsT0FBaUIsVUFBS0EsT0FBaUIsV0FDL0Qsb0RBQW9EbUYsS0FwQi9CLG9CQUFkMGxDLFdBQzJCLGlCQUEzQkEsVUFBcUIsVUFDckJBLFVBQXFCLFVBR3JCLElBdUJmLFNBQVNnaUIsSUFDTCxJQUNJLE1BQTJELHFCQUFuRHQxRCxPQUFPRSxVQUFVaUksU0FBU3BJLEtBQUssRUFBQXcxRCxFQUFPN2lCLFNBRWxELE1BQU9ueEMsR0FDSCxPQUFPLEdBTWYsU0FBU2kwRCxJQUNMLE1BQXVCLGlCQUFULzNELE1BQXFCQSxLQUFLQSxPQUFTQSxLQWVyRCxTQUFTZzRELElBQ0wsTUFBNkIsaUJBQWRuaUIsV0FBbUQsZ0JBQXpCQSxVQUFtQixRQW9CaEUsU0FBU29pQixJQUNMLE9BQXlDQyxFQTBFN0MsSUFHSUMsRUFBK0IsU0FBVWw5QyxHQUV6QyxTQUFTazlDLEVBQWN6d0IsRUFBTTU3QixFQUFTc3NELEdBQ2xDLElBQUloM0QsRUFBUTZaLEVBQU8zWSxLQUFLckMsS0FBTTZMLElBQVk3TCxLQVkxQyxPQVhBbUIsRUFBTXNtQyxLQUFPQSxFQUNidG1DLEVBQU1nM0QsV0FBYUEsRUFDbkJoM0QsRUFBTUcsS0FURyxnQkFZVGdCLE9BQU84MUQsZUFBZWozRCxFQUFPKzJELEVBQWMxMUQsV0FHdkN1RyxNQUFNc3ZELG1CQUNOdHZELE1BQU1zdkQsa0JBQWtCbDNELEVBQU84RixFQUFhekUsVUFBVXlCLFFBRW5EOUMsRUFFWCxPQWhCQSxRQUFVKzJELEVBQWVsOUMsR0FnQmxCazlDLEVBakJ1QixDQWtCaENudkQsT0FDRTlCLEVBQThCLFdBQzlCLFNBQVNBLEVBQWFNLEVBQVMrd0QsRUFBYUMsR0FDeEN2NEQsS0FBS3VILFFBQVVBLEVBQ2Z2SCxLQUFLczRELFlBQWNBLEVBQ25CdDRELEtBQUt1NEQsT0FBU0EsRUFnQmxCLE9BZEF0eEQsRUFBYXpFLFVBQVV5QixPQUFTLFNBQVV3akMsR0FFdEMsSUFEQSxJQUFJaDdCLEVBQU8sR0FDRmpHLEVBQUssRUFBR0EsRUFBS3RHLFVBQVV1RyxPQUFRRCxJQUNwQ2lHLEVBQUtqRyxFQUFLLEdBQUt0RyxVQUFVc0csR0FFN0IsSUFBSTJ4RCxFQUFhMXJELEVBQUssSUFBTSxHQUN4QityRCxFQUFXeDRELEtBQUt1SCxRQUFVLElBQU1rZ0MsRUFDaENneEIsRUFBV3o0RCxLQUFLdTRELE9BQU85d0IsR0FDdkI1N0IsRUFBVTRzRCxFQUFXQyxFQUFnQkQsRUFBVU4sR0FBYyxRQUU3RFEsRUFBYzM0RCxLQUFLczRELFlBQWMsS0FBT3pzRCxFQUFVLEtBQU8yc0QsRUFBVyxLQUNwRWg1RCxFQUFRLElBQUkwNEQsRUFBY00sRUFBVUcsRUFBYVIsR0FDckQsT0FBTzM0RCxHQUVKeUgsRUFwQnNCLEdBc0JqQyxTQUFTeXhELEVBQWdCRCxFQUFVaHNELEdBQy9CLE9BQU9nc0QsRUFBU3ZpRCxRQUFRMGlELEdBQVMsU0FBVUMsRUFBR3o1RCxHQUMxQyxJQUFJRyxFQUFRa04sRUFBS3JOLEdBQ2pCLE9BQWdCLE1BQVRHLEVBQWdCdUYsT0FBT3ZGLEdBQVMsSUFBTUgsRUFBTSxRQUczRCxJQUFJdzVELEVBQVUsZ0JBd0JkLFNBQVNFLEVBQVN4dEQsR0FDZCxPQUFPeWpCLEtBQUtncUMsTUFBTXp0RCxHQU90QixTQUFTMGpCLEVBQVV2aUIsR0FDZixPQUFPc2lCLEtBQUtDLFVBQVV2aUIsR0EwQjFCLElBQUl1c0QsRUFBUyxTQUFVeGQsR0FDbkIsSUFBSXlkLEVBQVMsR0FBSUMsRUFBUyxHQUFJenNELEVBQU8sR0FBSTBzRCxFQUFZLEdBQ3JELElBQ0ksSUFBSUMsRUFBUTVkLEVBQU0xcUMsTUFBTSxLQUN4Qm1vRCxFQUFTSCxFQUFTekIsRUFBYStCLEVBQU0sS0FBTyxJQUM1Q0YsRUFBU0osRUFBU3pCLEVBQWErQixFQUFNLEtBQU8sSUFDNUNELEVBQVlDLEVBQU0sR0FDbEIzc0QsRUFBT3lzRCxFQUFVLEdBQUssVUFDZkEsRUFBVSxFQUVyQixNQUFPcjFELElBQ1AsTUFBTyxDQUNIbzFELE9BQVFBLEVBQ1JDLE9BQVFBLEVBQ1J6c0QsS0FBTUEsRUFDTjBzRCxVQUFXQSxJQXlEZkUsRUFBZ0IsU0FBVTdkLEdBQzFCLElBQTZCMGQsRUFBZkYsRUFBT3hkLEdBQXlCMGQsT0FDOUMsUUFBU0EsR0FBNEIsaUJBQVhBLEdBQXVCQSxFQUFPaHJELGVBQWUsUUFTdkVvckQsRUFBVSxTQUFVOWQsR0FDcEIsSUFBSTBkLEVBQVNGLEVBQU94ZCxHQUFPMGQsT0FDM0IsTUFBeUIsaUJBQVhBLElBQTJDLElBQXBCQSxFQUFjLE9BbUJ2RCxTQUFTcG1ELEVBQVN2RixFQUFLbk8sR0FDbkIsT0FBT2tELE9BQU9FLFVBQVUwTCxlQUFlN0wsS0FBS2tMLEVBQUtuTyxHQUVyRCxTQUFTbTZELEVBQVFoc0QsRUFBS25PLEdBQ2xCLE9BQUlrRCxPQUFPRSxVQUFVMEwsZUFBZTdMLEtBQUtrTCxFQUFLbk8sR0FDbkNtTyxFQUFJbk8sUUFHWCxFQUdSLFNBQVMyUyxFQUFReEUsR0FDYixJQUFLLElBQUluTyxLQUFPbU8sRUFDWixHQUFJakwsT0FBT0UsVUFBVTBMLGVBQWU3TCxLQUFLa0wsRUFBS25PLEdBQzFDLE9BQU8sRUFHZixPQUFPLEVBRVgsU0FBUytELEVBQUlvSyxFQUFLek4sRUFBSTA1RCxHQUNsQixJQUFJM2EsRUFBTSxHQUNWLElBQUssSUFBSXovQyxLQUFPbU8sRUFDUmpMLE9BQU9FLFVBQVUwTCxlQUFlN0wsS0FBS2tMLEVBQUtuTyxLQUMxQ3kvQyxFQUFJei9DLEdBQU9VLEVBQUd1QyxLQUFLbTNELEVBQVlqc0QsRUFBSW5PLEdBQU1BLEVBQUttTyxJQUd0RCxPQUFPc3hDLEVBd0JYLFNBQVM0YSxFQUFZQyxHQVlqQixJQVhBLElBQUk1a0QsRUFBUyxHQUNUbzRCLEVBQVUsU0FBVTl0QyxFQUFLRyxHQUNyQmdLLE1BQU13QyxRQUFReE0sR0FDZEEsRUFBTXVvQixTQUFRLFNBQVU2eEMsR0FDcEI3a0QsRUFBT3JQLEtBQUs4TCxtQkFBbUJuUyxHQUFPLElBQU1tUyxtQkFBbUJvb0QsT0FJbkU3a0QsRUFBT3JQLEtBQUs4TCxtQkFBbUJuUyxHQUFPLElBQU1tUyxtQkFBbUJoUyxLQUc5RGlILEVBQUssRUFBR2xHLEVBQUtnQyxPQUFPNEcsUUFBUXd3RCxHQUFvQmx6RCxFQUFLbEcsRUFBR21HLE9BQVFELElBQU0sQ0FDM0UsSUFBSTVFLEVBQUt0QixFQUFHa0csR0FDWjBtQyxFQUR1QnRyQyxFQUFHLEdBQVlBLEVBQUcsSUFHN0MsT0FBT2tULEVBQU9yTyxPQUFTLElBQU1xTyxFQUFPblAsS0FBSyxLQUFPLEdBeURwRCxJQUFJaTBELEVBQXNCLFdBQ3RCLFNBQVNBLElBTUw1NUQsS0FBSzY1RCxPQUFTLEdBS2Q3NUQsS0FBSzg1RCxLQUFPLEdBTVo5NUQsS0FBSys1RCxHQUFLLEdBS1YvNUQsS0FBS2c2RCxLQUFPLEdBSVpoNkQsS0FBS2k2RCxPQUFTLEVBSWRqNkQsS0FBS2s2RCxPQUFTLEVBQ2RsNkQsS0FBS202RCxVQUFZLEdBQ2pCbjZELEtBQUtnNkQsS0FBSyxHQUFLLElBQ2YsSUFBSyxJQUFJbHVELEVBQUksRUFBR0EsRUFBSTlMLEtBQUttNkQsWUFBYXJ1RCxFQUNsQzlMLEtBQUtnNkQsS0FBS2x1RCxHQUFLLEVBRW5COUwsS0FBS282RCxRQWtMVCxPQWhMQVIsRUFBS3AzRCxVQUFVNDNELE1BQVEsV0FDbkJwNkQsS0FBSzY1RCxPQUFPLEdBQUssV0FDakI3NUQsS0FBSzY1RCxPQUFPLEdBQUssV0FDakI3NUQsS0FBSzY1RCxPQUFPLEdBQUssV0FDakI3NUQsS0FBSzY1RCxPQUFPLEdBQUssVUFDakI3NUQsS0FBSzY1RCxPQUFPLEdBQUssV0FDakI3NUQsS0FBS2k2RCxPQUFTLEVBQ2RqNkQsS0FBS2s2RCxPQUFTLEdBUWxCTixFQUFLcDNELFVBQVU2M0QsVUFBWSxTQUFVQyxFQUFLclcsR0FDakNBLElBQ0RBLEVBQVMsR0FFYixJQUFJc1csRUFBSXY2RCxLQUFLKzVELEdBRWIsR0FBbUIsaUJBQVJPLEVBQ1AsSUFBSyxJQUFJeHVELEVBQUksRUFBR0EsRUFBSSxHQUFJQSxJQVNwQnl1RCxFQUFFenVELEdBQ0d3dUQsRUFBSTFGLFdBQVczUSxJQUFXLEdBQ3RCcVcsRUFBSTFGLFdBQVczUSxFQUFTLElBQU0sR0FDOUJxVyxFQUFJMUYsV0FBVzNRLEVBQVMsSUFBTSxFQUMvQnFXLEVBQUkxRixXQUFXM1EsRUFBUyxHQUNoQ0EsR0FBVSxPQUlkLElBQVNuNEMsRUFBSSxFQUFHQSxFQUFJLEdBQUlBLElBQ3BCeXVELEVBQUV6dUQsR0FDR3d1RCxFQUFJclcsSUFBVyxHQUNYcVcsRUFBSXJXLEVBQVMsSUFBTSxHQUNuQnFXLEVBQUlyVyxFQUFTLElBQU0sRUFDcEJxVyxFQUFJclcsRUFBUyxHQUNyQkEsR0FBVSxFQUlsQixJQUFTbjRDLEVBQUksR0FBSUEsRUFBSSxHQUFJQSxJQUFLLENBQzFCLElBQUk0dEMsRUFBSTZnQixFQUFFenVELEVBQUksR0FBS3l1RCxFQUFFenVELEVBQUksR0FBS3l1RCxFQUFFenVELEVBQUksSUFBTXl1RCxFQUFFenVELEVBQUksSUFDaER5dUQsRUFBRXp1RCxHQUErQixZQUF4QjR0QyxHQUFLLEVBQU1BLElBQU0sSUFFOUIsSUFLSTFxQyxFQUFHdkIsRUFMSFQsRUFBSWhOLEtBQUs2NUQsT0FBTyxHQUNoQjVzRCxFQUFJak4sS0FBSzY1RCxPQUFPLEdBQ2hCOXJELEVBQUkvTixLQUFLNjVELE9BQU8sR0FDaEI3bUIsRUFBSWh6QyxLQUFLNjVELE9BQU8sR0FDaEJoMkQsRUFBSTdELEtBQUs2NUQsT0FBTyxHQUdwQixJQUFTL3RELEVBQUksRUFBR0EsRUFBSSxHQUFJQSxJQUNoQkEsRUFBSSxHQUNBQSxFQUFJLElBQ0prRCxFQUFJZ2tDLEVBQUsvbEMsR0FBS2MsRUFBSWlsQyxHQUNsQnZsQyxFQUFJLGFBR0p1QixFQUFJL0IsRUFBSWMsRUFBSWlsQyxFQUNadmxDLEVBQUksWUFJSjNCLEVBQUksSUFDSmtELEVBQUsvQixFQUFJYyxFQUFNaWxDLEdBQUsvbEMsRUFBSWMsR0FDeEJOLEVBQUksYUFHSnVCLEVBQUkvQixFQUFJYyxFQUFJaWxDLEVBQ1p2bEMsRUFBSSxZQUdSaXNDLEdBQU8xc0MsR0FBSyxFQUFNQSxJQUFNLElBQU9nQyxFQUFJbkwsRUFBSTRKLEVBQUk4c0QsRUFBRXp1RCxHQUFNLFdBQ3ZEakksRUFBSW12QyxFQUNKQSxFQUFJamxDLEVBQ0pBLEVBQThCLFlBQXhCZCxHQUFLLEdBQU9BLElBQU0sR0FDeEJBLEVBQUlELEVBQ0pBLEVBQUkwc0MsRUFFUjE1QyxLQUFLNjVELE9BQU8sR0FBTTc1RCxLQUFLNjVELE9BQU8sR0FBSzdzRCxFQUFLLFdBQ3hDaE4sS0FBSzY1RCxPQUFPLEdBQU03NUQsS0FBSzY1RCxPQUFPLEdBQUs1c0QsRUFBSyxXQUN4Q2pOLEtBQUs2NUQsT0FBTyxHQUFNNzVELEtBQUs2NUQsT0FBTyxHQUFLOXJELEVBQUssV0FDeEMvTixLQUFLNjVELE9BQU8sR0FBTTc1RCxLQUFLNjVELE9BQU8sR0FBSzdtQixFQUFLLFdBQ3hDaHpDLEtBQUs2NUQsT0FBTyxHQUFNNzVELEtBQUs2NUQsT0FBTyxHQUFLaDJELEVBQUssWUFFNUMrMUQsRUFBS3AzRCxVQUFVZ0osT0FBUyxTQUFVK3FELEVBQU85dkQsR0FFckMsR0FBYSxNQUFUOHZELEVBQUosTUFHZWwyRCxJQUFYb0csSUFDQUEsRUFBUzh2RCxFQUFNOXZELFFBUW5CLElBTkEsSUFBSSt6RCxFQUFtQi96RCxFQUFTekcsS0FBS202RCxVQUNqQzM2QyxFQUFJLEVBRUo4NkMsRUFBTXQ2RCxLQUFLODVELEtBQ1hXLEVBQVF6NkQsS0FBS2k2RCxPQUVWejZDLEVBQUkvWSxHQUFRLENBS2YsR0FBYyxJQUFWZzBELEVBQ0EsS0FBT2o3QyxHQUFLZzdDLEdBQ1J4NkQsS0FBS3E2RCxVQUFVOUQsRUFBTy8yQyxHQUN0QkEsR0FBS3hmLEtBQUttNkQsVUFHbEIsR0FBcUIsaUJBQVY1RCxHQUNQLEtBQU8vMkMsRUFBSS9ZLEdBSVAsR0FIQTZ6RCxFQUFJRyxHQUFTbEUsRUFBTTNCLFdBQVdwMUMsS0FFNUJBLElBREFpN0MsSUFFWXo2RCxLQUFLbTZELFVBQVcsQ0FDMUJuNkQsS0FBS3E2RCxVQUFVQyxHQUNmRyxFQUFRLEVBRVIsWUFLUixLQUFPajdDLEVBQUkvWSxHQUlQLEdBSEE2ekQsRUFBSUcsR0FBU2xFLEVBQU0vMkMsS0FFakJBLElBREFpN0MsSUFFWXo2RCxLQUFLbTZELFVBQVcsQ0FDMUJuNkQsS0FBS3E2RCxVQUFVQyxHQUNmRyxFQUFRLEVBRVIsT0FLaEJ6NkQsS0FBS2k2RCxPQUFTUSxFQUNkejZELEtBQUtrNkQsUUFBVXp6RCxJQUduQm16RCxFQUFLcDNELFVBQVVrSixPQUFTLFdBQ3BCLElBQUlBLEVBQVMsR0FDVGd2RCxFQUEwQixFQUFkMTZELEtBQUtrNkQsT0FFakJsNkQsS0FBS2k2RCxPQUFTLEdBQ2RqNkQsS0FBS3dMLE9BQU94TCxLQUFLZzZELEtBQU0sR0FBS2g2RCxLQUFLaTZELFFBR2pDajZELEtBQUt3TCxPQUFPeEwsS0FBS2c2RCxLQUFNaDZELEtBQUttNkQsV0FBYW42RCxLQUFLaTZELE9BQVMsS0FHM0QsSUFBSyxJQUFJbnVELEVBQUk5TCxLQUFLbTZELFVBQVksRUFBR3J1RCxHQUFLLEdBQUlBLElBQ3RDOUwsS0FBSzg1RCxLQUFLaHVELEdBQWlCLElBQVo0dUQsRUFDZkEsR0FBYSxJQUVqQjE2RCxLQUFLcTZELFVBQVVyNkQsS0FBSzg1RCxNQUNwQixJQUFJdDZDLEVBQUksRUFDUixJQUFTMVQsRUFBSSxFQUFHQSxFQUFJLEVBQUdBLElBQ25CLElBQUssSUFBSStHLEVBQUksR0FBSUEsR0FBSyxFQUFHQSxHQUFLLEVBQzFCbkgsRUFBTzhULEdBQU14ZixLQUFLNjVELE9BQU8vdEQsSUFBTStHLEVBQUssTUFDbEMyTSxFQUdWLE9BQU85VCxHQUVKa3VELEVBdk5jLEdBa096QixTQUFTNXlELEVBQWdCMnpELEVBQVVDLEdBQy9CLElBQUl6bEIsRUFBUSxJQUFJMGxCLEVBQWNGLEVBQVVDLEdBQ3hDLE9BQU96bEIsRUFBTTJsQixVQUFVcDBELEtBQUt5dUMsR0FNaEMsSUFBSTBsQixFQUErQixXQU0vQixTQUFTQSxFQUFjRixFQUFVQyxHQUM3QixJQUFJejVELEVBQVFuQixLQUNaQSxLQUFLKzZELFVBQVksR0FDakIvNkQsS0FBS2c3RCxhQUFlLEdBQ3BCaDdELEtBQUtpN0QsY0FBZ0IsRUFFckJqN0QsS0FBS2s3RCxLQUFPeDdELFFBQVFWLFVBQ3BCZ0IsS0FBS203RCxXQUFZLEVBQ2pCbjdELEtBQUs0NkQsY0FBZ0JBLEVBSXJCNTZELEtBQUtrN0QsS0FDQXY3RCxNQUFLLFdBQ05nN0QsRUFBU3g1RCxNQUVSMnJCLE9BQU0sU0FBVWpwQixHQUNqQjFDLEVBQU0zQixNQUFNcUUsTUFnSnBCLE9BN0lBZzNELEVBQWNyNEQsVUFBVVAsS0FBTyxTQUFVMUMsR0FDckNTLEtBQUtvN0QsaUJBQWdCLFNBQVVDLEdBQzNCQSxFQUFTcDVELEtBQUsxQyxPQUd0QnM3RCxFQUFjcjRELFVBQVVoRCxNQUFRLFNBQVVBLEdBQ3RDUSxLQUFLbzdELGlCQUFnQixTQUFVQyxHQUMzQkEsRUFBUzc3RCxNQUFNQSxNQUVuQlEsS0FBSzh3QyxNQUFNdHhDLElBRWZxN0QsRUFBY3I0RCxVQUFVK3hCLFNBQVcsV0FDL0J2MEIsS0FBS283RCxpQkFBZ0IsU0FBVUMsR0FDM0JBLEVBQVM5bUMsY0FFYnYwQixLQUFLOHdDLFNBUVQrcEIsRUFBY3I0RCxVQUFVczRELFVBQVksU0FBVVEsRUFBZ0I5N0QsRUFBTyswQixHQUNqRSxJQUNJOG1DLEVBREFsNkQsRUFBUW5CLEtBRVosUUFBdUJLLElBQW5CaTdELFFBQ1VqN0QsSUFBVmIsUUFDYWEsSUFBYmswQixFQUNBLE1BQU0sSUFBSXhyQixNQUFNLDBCQWlCRTFJLEtBTmxCZzdELEVBNkhaLFNBQThCOXRELEVBQUtndUQsR0FDL0IsR0FBbUIsaUJBQVJodUQsR0FBNEIsT0FBUkEsRUFDM0IsT0FBTyxFQUVYLElBQUssSUFBSS9HLEVBQUssRUFBR2cxRCxFQXpJNEIsQ0FDckMsT0FDQSxRQUNBLFlBc0k4QmgxRCxFQUFLZzFELEVBQVUvMEQsT0FBUUQsSUFBTSxDQUMvRCxJQUFJa3RELEVBQVM4SCxFQUFVaDFELEdBQ3ZCLEdBQUlrdEQsS0FBVW5tRCxHQUE4QixtQkFBaEJBLEVBQUltbUQsR0FDNUIsT0FBTyxFQUdmLE9BQU8sRUEvSUMrSCxDQUFxQkgsR0FLVkEsRUFHQSxDQUNQcjVELEtBQU1xNUQsRUFDTjk3RCxNQUFPQSxFQUNQKzBCLFNBQVVBLElBR0x0eUIsT0FDVG81RCxFQUFTcDVELEtBQU95NUQsUUFFR3I3RCxJQUFuQmc3RCxFQUFTNzdELFFBQ1Q2N0QsRUFBUzc3RCxNQUFRazhELFFBRUtyN0QsSUFBdEJnN0QsRUFBUzltQyxXQUNUOG1DLEVBQVM5bUMsU0FBV21uQyxHQUV4QixJQUFJQyxFQUFRMzdELEtBQUs0N0QsZUFBZWwxRCxLQUFLMUcsS0FBTUEsS0FBSys2RCxVQUFVdDBELFFBc0IxRCxPQWxCSXpHLEtBQUttN0QsV0FFTG43RCxLQUFLazdELEtBQUt2N0QsTUFBSyxXQUNYLElBQ1F3QixFQUFNMDZELFdBQ05SLEVBQVM3N0QsTUFBTTJCLEVBQU0wNkQsWUFHckJSLEVBQVM5bUMsV0FHakIsTUFBTzF3QixRQU1mN0QsS0FBSys2RCxVQUFVdDFELEtBQUs0MUQsR0FDYk0sR0FJWGQsRUFBY3I0RCxVQUFVbzVELGVBQWlCLFNBQVU5dkQsUUFDeEJ6TCxJQUFuQkwsS0FBSys2RCxnQkFBaUQxNkQsSUFBdEJMLEtBQUsrNkQsVUFBVWp2RCxZQUc1QzlMLEtBQUsrNkQsVUFBVWp2RCxHQUN0QjlMLEtBQUtpN0QsZUFBaUIsRUFDSyxJQUF2Qmo3RCxLQUFLaTdELG9CQUE4QzU2RCxJQUF2QkwsS0FBSzQ2RCxlQUNqQzU2RCxLQUFLNDZELGNBQWM1NkQsUUFHM0I2NkQsRUFBY3I0RCxVQUFVNDRELGdCQUFrQixTQUFVdDdELEdBQ2hELElBQUlFLEtBQUttN0QsVUFNVCxJQUFLLElBQUlydkQsRUFBSSxFQUFHQSxFQUFJOUwsS0FBSys2RCxVQUFVdDBELE9BQVFxRixJQUN2QzlMLEtBQUs4N0QsUUFBUWh3RCxFQUFHaE0sSUFNeEIrNkQsRUFBY3I0RCxVQUFVczVELFFBQVUsU0FBVWh3RCxFQUFHaE0sR0FDM0MsSUFBSXFCLEVBQVFuQixLQUdaQSxLQUFLazdELEtBQUt2N0QsTUFBSyxXQUNYLFFBQXdCVSxJQUFwQmMsRUFBTTQ1RCxnQkFBa0QxNkQsSUFBdkJjLEVBQU00NUQsVUFBVWp2RCxHQUNqRCxJQUNJaE0sRUFBR3FCLEVBQU00NUQsVUFBVWp2RCxJQUV2QixNQUFPakksR0FJb0Isb0JBQVpNLFNBQTJCQSxRQUFRM0UsT0FDMUMyRSxRQUFRM0UsTUFBTXFFLFFBTWxDZzNELEVBQWNyNEQsVUFBVXN1QyxNQUFRLFNBQVUxd0MsR0FDdEMsSUFBSWUsRUFBUW5CLEtBQ1JBLEtBQUttN0QsWUFHVG43RCxLQUFLbTdELFdBQVksT0FDTDk2RCxJQUFSRCxJQUNBSixLQUFLNjdELFdBQWF6N0QsR0FJdEJKLEtBQUtrN0QsS0FBS3Y3RCxNQUFLLFdBQ1h3QixFQUFNNDVELGVBQVkxNkQsRUFDbEJjLEVBQU15NUQsbUJBQWdCdjZELE9BR3ZCdzZELEVBdkt1QixHQTJNbEMsU0FBU2EsS0E2QlQsSUFBSUssRUFBbUIsU0FBVTFrRCxFQUFRMmtELEVBQVVDLEVBQVVDLEdBQ3pELElBQUlDLEVBT0osR0FOSUQsRUFBV0YsRUFDWEcsRUFBVyxZQUFjSCxFQUVwQkUsRUFBV0QsSUFDaEJFLEVBQXdCLElBQWJGLEVBQWlCLE9BQVMsZ0JBQWtCQSxHQUV2REUsRUFRQSxNQUFNLElBQUlwekQsTUFQRXNPLEVBQ1IsNEJBQ0E2a0QsR0FDYyxJQUFiQSxFQUFpQixhQUFlLGVBQ2pDLFlBQ0FDLEVBQ0EsTUFZWixTQUFTM2tELEVBQVlILEVBQVFDLEVBQWdCeE8sR0FDekMsSUFBSXN6RCxFQUFVLEdBQ2QsT0FBUTlrRCxHQUNKLEtBQUssRUFDRDhrRCxFQUFVdHpELEVBQVcsUUFBVSxRQUMvQixNQUNKLEtBQUssRUFDRHN6RCxFQUFVdHpELEVBQVcsU0FBVyxTQUNoQyxNQUNKLEtBQUssRUFDRHN6RCxFQUFVdHpELEVBQVcsUUFBVSxRQUMvQixNQUNKLEtBQUssRUFDRHN6RCxFQUFVdHpELEVBQVcsU0FBVyxTQUNoQyxNQUNKLFFBQ0ksTUFBTSxJQUFJQyxNQUFNLG1FQUl4QixPQUZZc08sRUFBUyxhQUNaK2tELEVBQVUsY0FtQnZCLFNBQVNDLEVBQWlCaGxELEVBQVFDLEVBRWxDdVUsRUFBVS9pQixHQUNOLEtBQUlBLEdBQWEraUIsSUFHTyxtQkFBYkEsRUFDUCxNQUFNLElBQUk5aUIsTUFBTXlPLEVBQVlILEVBQVFDLEVBQWdCeE8sR0FDaEQsNkJBR1osU0FBU3d6RCxFQUFzQmpsRCxFQUFRQyxFQUFnQnlVLEVBQVNqakIsR0FDNUQsS0FBSUEsR0FBYWlqQixLQUdNLGlCQUFaQSxHQUFvQyxPQUFaQSxHQUMvQixNQUFNLElBQUloakIsTUFBTXlPLEVBQVlILEVBQVFDLEVBQWdCeE8sR0FDaEQsbUNBaUNaLElBQUl5ekQsRUFBc0IsU0FBVWp4RCxHQUdoQyxJQUZBLElBQUlxcEQsRUFBTSxHQUNOM1csRUFBSSxFQUNDbHlDLEVBQUksRUFBR0EsRUFBSVIsRUFBSTdFLE9BQVFxRixJQUFLLENBQ2pDLElBQUlpQyxFQUFJekMsRUFBSXNwRCxXQUFXOW9ELEdBRXZCLEdBQUlpQyxHQUFLLE9BQVVBLEdBQUssTUFBUSxDQUM1QixJQUFJZ1UsRUFBT2hVLEVBQUksTUFDZmpDLElBQ0F5b0QsRUFBT3pvRCxFQUFJUixFQUFJN0UsT0FBUSwyQ0FFdkJzSCxFQUFJLE9BQVdnVSxHQUFRLEtBRGJ6VyxFQUFJc3BELFdBQVc5b0QsR0FBSyxPQUc5QmlDLEVBQUksSUFDSjRtRCxFQUFJM1csS0FBT2p3QyxFQUVOQSxFQUFJLE1BQ1Q0bUQsRUFBSTNXLEtBQVFqd0MsR0FBSyxFQUFLLElBQ3RCNG1ELEVBQUkzVyxLQUFZLEdBQUpqd0MsRUFBVSxLQUVqQkEsRUFBSSxPQUNUNG1ELEVBQUkzVyxLQUFRandDLEdBQUssR0FBTSxJQUN2QjRtRCxFQUFJM1csS0FBU2p3QyxHQUFLLEVBQUssR0FBTSxJQUM3QjRtRCxFQUFJM1csS0FBWSxHQUFKandDLEVBQVUsTUFHdEI0bUQsRUFBSTNXLEtBQVFqd0MsR0FBSyxHQUFNLElBQ3ZCNG1ELEVBQUkzVyxLQUFTandDLEdBQUssR0FBTSxHQUFNLElBQzlCNG1ELEVBQUkzVyxLQUFTandDLEdBQUssRUFBSyxHQUFNLElBQzdCNG1ELEVBQUkzVyxLQUFZLEdBQUpqd0MsRUFBVSxLQUc5QixPQUFPNG1ELEdBT1A2SCxFQUFlLFNBQVVseEQsR0FFekIsSUFEQSxJQUFJMHlDLEVBQUksRUFDQ2x5QyxFQUFJLEVBQUdBLEVBQUlSLEVBQUk3RSxPQUFRcUYsSUFBSyxDQUNqQyxJQUFJaUMsRUFBSXpDLEVBQUlzcEQsV0FBVzlvRCxHQUNuQmlDLEVBQUksSUFDSml3QyxJQUVLandDLEVBQUksS0FDVGl3QyxHQUFLLEVBRUFqd0MsR0FBSyxPQUFVQSxHQUFLLE9BRXpCaXdDLEdBQUssRUFDTGx5QyxLQUdBa3lDLEdBQUssRUFHYixPQUFPQSxJLFFDem1EWCxJQUFJeWUsRUFBVyxTQUFVNThELEdBQ3ZCLGFBRUEsSUFFSVEsRUFGQXE4RCxFQUFLcDZELE9BQU9FLFVBQ1ptNkQsRUFBU0QsRUFBR3h1RCxlQUVaMHVELEVBQTRCLG1CQUFYQyxPQUF3QkEsT0FBUyxHQUNsREMsRUFBaUJGLEVBQVFyM0MsVUFBWSxhQUNyQ3czQyxFQUFzQkgsRUFBUUksZUFBaUIsa0JBQy9DQyxFQUFvQkwsRUFBUU0sYUFBZSxnQkFFL0MsU0FBU0MsRUFBTzV2RCxFQUFLbk8sRUFBS0csR0FPeEIsT0FOQStDLE9BQU9DLGVBQWVnTCxFQUFLbk8sRUFBSyxDQUM5QkcsTUFBT0EsRUFDUHNELFlBQVksRUFDWkMsY0FBYyxFQUNkczZELFVBQVUsSUFFTDd2RCxFQUFJbk8sR0FFYixJQUVFKzlELEVBQU8sR0FBSSxJQUNYLE1BQU8vOEQsR0FDUCs4RCxFQUFTLFNBQVM1dkQsRUFBS25PLEVBQUtHLEdBQzFCLE9BQU9nTyxFQUFJbk8sR0FBT0csR0FJdEIsU0FBUzg5RCxFQUFLQyxFQUFTQyxFQUFTeDlELEVBQU15OUQsR0FFcEMsSUFBSUMsRUFBaUJGLEdBQVdBLEVBQVEvNkQscUJBQXFCazdELEVBQVlILEVBQVVHLEVBQy9FQyxFQUFZcjdELE9BQU8yQixPQUFPdzVELEVBQWVqN0QsV0FDekN1cEIsRUFBVSxJQUFJNnhDLEVBQVFKLEdBQWUsSUFNekMsT0FGQUcsRUFBVUUsUUFzTVosU0FBMEJQLEVBQVN2OUQsRUFBTWdzQixHQUN2QyxJQUFJK3hDLEVBQVFDLEVBRVosT0FBTyxTQUFnQnJLLEVBQVFyMEQsR0FDN0IsR0FBSXkrRCxJQUFVRSxFQUNaLE1BQU0sSUFBSWoxRCxNQUFNLGdDQUdsQixHQUFJKzBELElBQVVHLEVBQW1CLENBQy9CLEdBQWUsVUFBWHZLLEVBQ0YsTUFBTXIwRCxFQUtSLE9BQU82K0QsSUFNVCxJQUhBbnlDLEVBQVEybkMsT0FBU0EsRUFDakIzbkMsRUFBUTFzQixJQUFNQSxJQUVELENBQ1gsSUFBSTgrRCxFQUFXcHlDLEVBQVFveUMsU0FDdkIsR0FBSUEsRUFBVSxDQUNaLElBQUlDLEVBQWlCQyxFQUFvQkYsRUFBVXB5QyxHQUNuRCxHQUFJcXlDLEVBQWdCLENBQ2xCLEdBQUlBLElBQW1CRSxFQUFrQixTQUN6QyxPQUFPRixHQUlYLEdBQXVCLFNBQW5CcnlDLEVBQVEybkMsT0FHVjNuQyxFQUFRcmlCLEtBQU9xaUIsRUFBUXd5QyxNQUFReHlDLEVBQVExc0IsU0FFbEMsR0FBdUIsVUFBbkIwc0IsRUFBUTJuQyxPQUFvQixDQUNyQyxHQUFJb0ssSUFBVUMsRUFFWixNQURBRCxFQUFRRyxFQUNGbHlDLEVBQVExc0IsSUFHaEIwc0IsRUFBUXl5QyxrQkFBa0J6eUMsRUFBUTFzQixTQUVOLFdBQW5CMHNCLEVBQVEybkMsUUFDakIzbkMsRUFBUTB5QyxPQUFPLFNBQVUxeUMsRUFBUTFzQixLQUduQ3krRCxFQUFRRSxFQUVSLElBQUkzOEIsRUFBU3E5QixFQUFTcEIsRUFBU3Y5RCxFQUFNZ3NCLEdBQ3JDLEdBQW9CLFdBQWhCc1YsRUFBT2o3QixLQUFtQixDQU81QixHQUpBMDNELEVBQVEveEMsRUFBUXRzQixLQUNadytELEVBQ0FVLEVBRUF0OUIsRUFBT2hpQyxNQUFRaS9ELEVBQ2pCLFNBR0YsTUFBTyxDQUNMLytELE1BQU84aEMsRUFBT2hpQyxJQUNkSSxLQUFNc3NCLEVBQVF0c0IsTUFHUyxVQUFoQjRoQyxFQUFPajdCLE9BQ2hCMDNELEVBQVFHLEVBR1JseUMsRUFBUTJuQyxPQUFTLFFBQ2pCM25DLEVBQVExc0IsSUFBTWdpQyxFQUFPaGlDLE9BOVFQdS9ELENBQWlCdEIsRUFBU3Y5RCxFQUFNZ3NCLEdBRTdDNHhDLEVBY1QsU0FBU2UsRUFBUzUrRCxFQUFJeU4sRUFBS2xPLEdBQ3pCLElBQ0UsTUFBTyxDQUFFK0csS0FBTSxTQUFVL0csSUFBS1MsRUFBR3VDLEtBQUtrTCxFQUFLbE8sSUFDM0MsTUFBT2UsR0FDUCxNQUFPLENBQUVnRyxLQUFNLFFBQVMvRyxJQUFLZSxJQWhCakNQLEVBQVF3OUQsS0FBT0EsRUFvQmYsSUFBSVUsRUFBeUIsaUJBQ3pCWSxFQUF5QixpQkFDekJYLEVBQW9CLFlBQ3BCQyxFQUFvQixZQUlwQkssRUFBbUIsR0FNdkIsU0FBU1osS0FDVCxTQUFTbUIsS0FDVCxTQUFTQyxLQUlULElBQUlDLEVBQW9CLEdBQ3hCQSxFQUFrQmpDLEdBQWtCLFdBQ2xDLE9BQU85OEQsTUFHVCxJQUFJZy9ELEVBQVcxOEQsT0FBTzI4RCxlQUNsQkMsRUFBMEJGLEdBQVlBLEVBQVNBLEVBQVNqOUQsRUFBTyxNQUMvRG05RCxHQUNBQSxJQUE0QnhDLEdBQzVCQyxFQUFPdDZELEtBQUs2OEQsRUFBeUJwQyxLQUd2Q2lDLEVBQW9CRyxHQUd0QixJQUFJQyxFQUFLTCxFQUEyQnQ4RCxVQUNsQ2s3RCxFQUFVbDdELFVBQVlGLE9BQU8yQixPQUFPODZELEdBV3RDLFNBQVNLLEVBQXNCNThELEdBQzdCLENBQUMsT0FBUSxRQUFTLFVBQVVzbEIsU0FBUSxTQUFTNHJDLEdBQzNDeUosRUFBTzM2RCxFQUFXa3hELEdBQVEsU0FBU3IwRCxHQUNqQyxPQUFPVyxLQUFLNjlELFFBQVFuSyxFQUFRcjBELFNBa0NsQyxTQUFTZ2dFLEVBQWMxQixFQUFXMkIsR0FDaEMsU0FBU0MsRUFBTzdMLEVBQVFyMEQsRUFBS0wsRUFBU0MsR0FDcEMsSUFBSW9pQyxFQUFTcTlCLEVBQVNmLEVBQVVqSyxHQUFTaUssRUFBV3QrRCxHQUNwRCxHQUFvQixVQUFoQmdpQyxFQUFPajdCLEtBRUosQ0FDTCxJQUFJcVksRUFBUzRpQixFQUFPaGlDLElBQ2hCRSxFQUFRa2YsRUFBT2xmLE1BQ25CLE9BQUlBLEdBQ2lCLGlCQUFWQSxHQUNQbzlELEVBQU90NkQsS0FBSzlDLEVBQU8sV0FDZCsvRCxFQUFZdGdFLFFBQVFPLEVBQU1pZ0UsU0FBUzcvRCxNQUFLLFNBQVNKLEdBQ3REZ2dFLEVBQU8sT0FBUWhnRSxFQUFPUCxFQUFTQyxNQUM5QixTQUFTbUIsR0FDVm0vRCxFQUFPLFFBQVNuL0QsRUFBS3BCLEVBQVNDLE1BSTNCcWdFLEVBQVl0Z0UsUUFBUU8sR0FBT0ksTUFBSyxTQUFTOC9ELEdBSTlDaGhELEVBQU9sZixNQUFRa2dFLEVBQ2Z6Z0UsRUFBUXlmLE1BQ1AsU0FBU2pmLEdBR1YsT0FBTysvRCxFQUFPLFFBQVMvL0QsRUFBT1IsRUFBU0MsTUF2QnpDQSxFQUFPb2lDLEVBQU9oaUMsS0E0QmxCLElBQUlxZ0UsRUFnQ0oxL0QsS0FBSzY5RCxRQTlCTCxTQUFpQm5LLEVBQVFyMEQsR0FDdkIsU0FBU3NnRSxJQUNQLE9BQU8sSUFBSUwsR0FBWSxTQUFTdGdFLEVBQVNDLEdBQ3ZDc2dFLEVBQU83TCxFQUFRcjBELEVBQUtMLEVBQVNDLE1BSWpDLE9BQU95Z0UsRUFhTEEsRUFBa0JBLEVBQWdCLy9ELEtBQ2hDZ2dFLEVBR0FBLEdBQ0VBLEtBa0hWLFNBQVN0QixFQUFvQkYsRUFBVXB5QyxHQUNyQyxJQUFJMm5DLEVBQVN5SyxFQUFTNTRDLFNBQVN3RyxFQUFRMm5DLFFBQ3ZDLEdBQUlBLElBQVdyekQsRUFBVyxDQUt4QixHQUZBMHJCLEVBQVFveUMsU0FBVyxLQUVJLFVBQW5CcHlDLEVBQVEybkMsT0FBb0IsQ0FFOUIsR0FBSXlLLEVBQVM1NEMsU0FBaUIsU0FHNUJ3RyxFQUFRMm5DLE9BQVMsU0FDakIzbkMsRUFBUTFzQixJQUFNZ0IsRUFDZGcrRCxFQUFvQkYsRUFBVXB5QyxHQUVQLFVBQW5CQSxFQUFRMm5DLFFBR1YsT0FBTzRLLEVBSVh2eUMsRUFBUTJuQyxPQUFTLFFBQ2pCM25DLEVBQVExc0IsSUFBTSxJQUFJMDBELFVBQ2hCLGtEQUdKLE9BQU91SyxFQUdULElBQUlqOUIsRUFBU3E5QixFQUFTaEwsRUFBUXlLLEVBQVM1NEMsU0FBVXdHLEVBQVExc0IsS0FFekQsR0FBb0IsVUFBaEJnaUMsRUFBT2o3QixLQUlULE9BSEEybEIsRUFBUTJuQyxPQUFTLFFBQ2pCM25DLEVBQVExc0IsSUFBTWdpQyxFQUFPaGlDLElBQ3JCMHNCLEVBQVFveUMsU0FBVyxLQUNaRyxFQUdULElBQUloL0QsRUFBTytoQyxFQUFPaGlDLElBRWxCLE9BQU1DLEVBT0ZBLEVBQUtHLE1BR1Bzc0IsRUFBUW95QyxFQUFTeUIsWUFBY3RnRSxFQUFLQyxNQUdwQ3dzQixFQUFROXBCLEtBQU9rOEQsRUFBUzBCLFFBUUQsV0FBbkI5ekMsRUFBUTJuQyxTQUNWM25DLEVBQVEybkMsT0FBUyxPQUNqQjNuQyxFQUFRMXNCLElBQU1nQixHQVVsQjByQixFQUFRb3lDLFNBQVcsS0FDWkcsR0FORWgvRCxHQTNCUHlzQixFQUFRMm5DLE9BQVMsUUFDakIzbkMsRUFBUTFzQixJQUFNLElBQUkwMEQsVUFBVSxvQ0FDNUJob0MsRUFBUW95QyxTQUFXLEtBQ1pHLEdBb0RYLFNBQVN3QixFQUFhQyxHQUNwQixJQUFJQyxFQUFRLENBQUVDLE9BQVFGLEVBQUssSUFFdkIsS0FBS0EsSUFDUEMsRUFBTUUsU0FBV0gsRUFBSyxJQUdwQixLQUFLQSxJQUNQQyxFQUFNRyxXQUFhSixFQUFLLEdBQ3hCQyxFQUFNSSxTQUFXTCxFQUFLLElBR3hCLy9ELEtBQUtxZ0UsV0FBVzU2RCxLQUFLdTZELEdBR3ZCLFNBQVNNLEVBQWNOLEdBQ3JCLElBQUkzK0IsRUFBUzIrQixFQUFNTyxZQUFjLEdBQ2pDbC9CLEVBQU9qN0IsS0FBTyxnQkFDUGk3QixFQUFPaGlDLElBQ2QyZ0UsRUFBTU8sV0FBYWwvQixFQUdyQixTQUFTdThCLEVBQVFKLEdBSWZ4OUQsS0FBS3FnRSxXQUFhLENBQUMsQ0FBRUosT0FBUSxTQUM3QnpDLEVBQVkxMUMsUUFBUWc0QyxFQUFjOS9ELE1BQ2xDQSxLQUFLbzZELE9BQU0sR0E4QmIsU0FBU3I0RCxFQUFPeStELEdBQ2QsR0FBSUEsRUFBVSxDQUNaLElBQUlDLEVBQWlCRCxFQUFTMUQsR0FDOUIsR0FBSTJELEVBQ0YsT0FBT0EsRUFBZXArRCxLQUFLbStELEdBRzdCLEdBQTZCLG1CQUFsQkEsRUFBU3YrRCxLQUNsQixPQUFPdStELEVBR1QsSUFBS2pxQixNQUFNaXFCLEVBQVMvNUQsUUFBUyxDQUMzQixJQUFJcUYsR0FBSyxFQUFHN0osRUFBTyxTQUFTQSxJQUMxQixPQUFTNkosRUFBSTAwRCxFQUFTLzVELFFBQ3BCLEdBQUlrMkQsRUFBT3Q2RCxLQUFLbStELEVBQVUxMEQsR0FHeEIsT0FGQTdKLEVBQUsxQyxNQUFRaWhFLEVBQVMxMEQsR0FDdEI3SixFQUFLeEMsTUFBTyxFQUNMd0MsRUFPWCxPQUhBQSxFQUFLMUMsTUFBUWMsRUFDYjRCLEVBQUt4QyxNQUFPLEVBRUx3QyxHQUdULE9BQU9BLEVBQUtBLEtBQU9BLEdBS3ZCLE1BQU8sQ0FBRUEsS0FBTWk4RCxHQUlqQixTQUFTQSxJQUNQLE1BQU8sQ0FBRTMrRCxNQUFPYyxFQUFXWixNQUFNLEdBK01uQyxPQTVtQkFvL0QsRUFBa0JyOEQsVUFBWTI4RCxFQUFHM0gsWUFBY3NILEVBQy9DQSxFQUEyQnRILFlBQWNxSCxFQUN6Q0EsRUFBa0I2QixZQUFjdkQsRUFDOUIyQixFQUNBN0IsRUFDQSxxQkFhRnA5RCxFQUFROGdFLG9CQUFzQixTQUFTQyxHQUNyQyxJQUFJQyxFQUF5QixtQkFBWEQsR0FBeUJBLEVBQU9wSixZQUNsRCxRQUFPcUosSUFDSEEsSUFBU2hDLEdBRzJCLHVCQUFuQ2dDLEVBQUtILGFBQWVHLEVBQUt2L0QsUUFJaEN6QixFQUFRaWhFLEtBQU8sU0FBU0YsR0FRdEIsT0FQSXQrRCxPQUFPODFELGVBQ1Q5MUQsT0FBTzgxRCxlQUFld0ksRUFBUTlCLElBRTlCOEIsRUFBT3BQLFVBQVlzTixFQUNuQjNCLEVBQU95RCxFQUFRM0QsRUFBbUIsc0JBRXBDMkQsRUFBT3ArRCxVQUFZRixPQUFPMkIsT0FBT2s3RCxHQUMxQnlCLEdBT1QvZ0UsRUFBUWtoRSxNQUFRLFNBQVMxaEUsR0FDdkIsTUFBTyxDQUFFbWdFLFFBQVNuZ0UsSUFzRXBCKy9ELEVBQXNCQyxFQUFjNzhELFdBQ3BDNjhELEVBQWM3OEQsVUFBVXU2RCxHQUF1QixXQUM3QyxPQUFPLzhELE1BRVRILEVBQVF3L0QsY0FBZ0JBLEVBS3hCeC9ELEVBQVFrMEMsTUFBUSxTQUFTdXBCLEVBQVNDLEVBQVN4OUQsRUFBTXk5RCxFQUFhOEIsUUFDeEMsSUFBaEJBLElBQXdCQSxFQUFjNS9ELFNBRTFDLElBQUk2akIsRUFBTyxJQUFJODdDLEVBQ2JoQyxFQUFLQyxFQUFTQyxFQUFTeDlELEVBQU15OUQsR0FDN0I4QixHQUdGLE9BQU96L0QsRUFBUThnRSxvQkFBb0JwRCxHQUMvQmg2QyxFQUNBQSxFQUFLdGhCLE9BQU90QyxNQUFLLFNBQVM4ZSxHQUN4QixPQUFPQSxFQUFPaGYsS0FBT2dmLEVBQU9sZixNQUFRZ2tCLEVBQUt0aEIsV0F1S2pEbTlELEVBQXNCRCxHQUV0QmhDLEVBQU9nQyxFQUFJbEMsRUFBbUIsYUFPOUJrQyxFQUFHckMsR0FBa0IsV0FDbkIsT0FBTzk4RCxNQUdUbS9ELEVBQUcxMEQsU0FBVyxXQUNaLE1BQU8sc0JBa0NUNUssRUFBUStHLEtBQU8sU0FBU282RCxHQUN0QixJQUFJcDZELEVBQU8sR0FDWCxJQUFLLElBQUl4SCxLQUFPNGhFLEVBQ2RwNkQsRUFBS25CLEtBQUtyRyxHQU1aLE9BSkF3SCxFQUFLOEksVUFJRSxTQUFTek4sSUFDZCxLQUFPMkUsRUFBS0gsUUFBUSxDQUNsQixJQUFJckgsRUFBTXdILEVBQUswTSxNQUNmLEdBQUlsVSxLQUFPNGhFLEVBR1QsT0FGQS8rRCxFQUFLMUMsTUFBUUgsRUFDYjZDLEVBQUt4QyxNQUFPLEVBQ0x3QyxFQVFYLE9BREFBLEVBQUt4QyxNQUFPLEVBQ0x3QyxJQXNDWHBDLEVBQVFrQyxPQUFTQSxFQU1qQjY3RCxFQUFRcDdELFVBQVksQ0FDbEJnMUQsWUFBYW9HLEVBRWJ4RCxNQUFPLFNBQVM2RyxHQWNkLEdBYkFqaEUsS0FBS2toRSxLQUFPLEVBQ1psaEUsS0FBS2lDLEtBQU8sRUFHWmpDLEtBQUswSixLQUFPMUosS0FBS3UrRCxNQUFRbCtELEVBQ3pCTCxLQUFLUCxNQUFPLEVBQ1pPLEtBQUttK0QsU0FBVyxLQUVoQm4rRCxLQUFLMHpELE9BQVMsT0FDZDF6RCxLQUFLWCxJQUFNZ0IsRUFFWEwsS0FBS3FnRSxXQUFXdjRDLFFBQVF3NEMsSUFFbkJXLEVBQ0gsSUFBSyxJQUFJMy9ELEtBQVF0QixLQUVRLE1BQW5Cc0IsRUFBS2lWLE9BQU8sSUFDWm9tRCxFQUFPdDZELEtBQUtyQyxLQUFNc0IsS0FDakJpMUMsT0FBT2oxQyxFQUFLa1EsTUFBTSxNQUNyQnhSLEtBQUtzQixHQUFRakIsSUFNckI4Z0UsS0FBTSxXQUNKbmhFLEtBQUtQLE1BQU8sRUFFWixJQUNJMmhFLEVBRFlwaEUsS0FBS3FnRSxXQUFXLEdBQ0xFLFdBQzNCLEdBQXdCLFVBQXBCYSxFQUFXaDdELEtBQ2IsTUFBTWc3RCxFQUFXL2hFLElBR25CLE9BQU9XLEtBQUtxaEUsTUFHZDdDLGtCQUFtQixTQUFTOEMsR0FDMUIsR0FBSXRoRSxLQUFLUCxLQUNQLE1BQU02aEUsRUFHUixJQUFJdjFDLEVBQVUvckIsS0FDZCxTQUFTdWhFLEVBQU9DLEVBQUtDLEdBWW5CLE9BWEFwZ0MsRUFBT2o3QixLQUFPLFFBQ2RpN0IsRUFBT2hpQyxJQUFNaWlFLEVBQ2J2MUMsRUFBUTlwQixLQUFPdS9ELEVBRVhDLElBR0YxMUMsRUFBUTJuQyxPQUFTLE9BQ2pCM25DLEVBQVExc0IsSUFBTWdCLEtBR05vaEUsRUFHWixJQUFLLElBQUkzMUQsRUFBSTlMLEtBQUtxZ0UsV0FBVzU1RCxPQUFTLEVBQUdxRixHQUFLLElBQUtBLEVBQUcsQ0FDcEQsSUFBSWswRCxFQUFRaGdFLEtBQUtxZ0UsV0FBV3YwRCxHQUN4QnUxQixFQUFTMitCLEVBQU1PLFdBRW5CLEdBQXFCLFNBQWpCUCxFQUFNQyxPQUlSLE9BQU9zQixFQUFPLE9BR2hCLEdBQUl2QixFQUFNQyxRQUFVamdFLEtBQUtraEUsS0FBTSxDQUM3QixJQUFJUSxFQUFXL0UsRUFBT3Q2RCxLQUFLMjlELEVBQU8sWUFDOUIyQixFQUFhaEYsRUFBT3Q2RCxLQUFLMjlELEVBQU8sY0FFcEMsR0FBSTBCLEdBQVlDLEVBQVksQ0FDMUIsR0FBSTNoRSxLQUFLa2hFLEtBQU9sQixFQUFNRSxTQUNwQixPQUFPcUIsRUFBT3ZCLEVBQU1FLFVBQVUsR0FDekIsR0FBSWxnRSxLQUFLa2hFLEtBQU9sQixFQUFNRyxXQUMzQixPQUFPb0IsRUFBT3ZCLEVBQU1HLGlCQUdqQixHQUFJdUIsR0FDVCxHQUFJMWhFLEtBQUtraEUsS0FBT2xCLEVBQU1FLFNBQ3BCLE9BQU9xQixFQUFPdkIsRUFBTUUsVUFBVSxPQUczQixLQUFJeUIsRUFNVCxNQUFNLElBQUk1NEQsTUFBTSwwQ0FMaEIsR0FBSS9JLEtBQUtraEUsS0FBT2xCLEVBQU1HLFdBQ3BCLE9BQU9vQixFQUFPdkIsRUFBTUcsZ0JBVTlCMUIsT0FBUSxTQUFTcjRELEVBQU0vRyxHQUNyQixJQUFLLElBQUl5TSxFQUFJOUwsS0FBS3FnRSxXQUFXNTVELE9BQVMsRUFBR3FGLEdBQUssSUFBS0EsRUFBRyxDQUNwRCxJQUFJazBELEVBQVFoZ0UsS0FBS3FnRSxXQUFXdjBELEdBQzVCLEdBQUlrMEQsRUFBTUMsUUFBVWpnRSxLQUFLa2hFLE1BQ3JCdkUsRUFBT3Q2RCxLQUFLMjlELEVBQU8sZUFDbkJoZ0UsS0FBS2toRSxLQUFPbEIsRUFBTUcsV0FBWSxDQUNoQyxJQUFJeUIsRUFBZTVCLEVBQ25CLE9BSUE0QixJQUNVLFVBQVR4N0QsR0FDUyxhQUFUQSxJQUNEdzdELEVBQWEzQixRQUFVNWdFLEdBQ3ZCQSxHQUFPdWlFLEVBQWF6QixhQUd0QnlCLEVBQWUsTUFHakIsSUFBSXZnQyxFQUFTdWdDLEVBQWVBLEVBQWFyQixXQUFhLEdBSXRELE9BSEFsL0IsRUFBT2o3QixLQUFPQSxFQUNkaTdCLEVBQU9oaUMsSUFBTUEsRUFFVHVpRSxHQUNGNWhFLEtBQUswekQsT0FBUyxPQUNkMXpELEtBQUtpQyxLQUFPMi9ELEVBQWF6QixXQUNsQjdCLEdBR0Z0K0QsS0FBS3UwQixTQUFTOE0sSUFHdkI5TSxTQUFVLFNBQVM4TSxFQUFRKytCLEdBQ3pCLEdBQW9CLFVBQWhCLytCLEVBQU9qN0IsS0FDVCxNQUFNaTdCLEVBQU9oaUMsSUFjZixNQVhvQixVQUFoQmdpQyxFQUFPajdCLE1BQ1MsYUFBaEJpN0IsRUFBT2o3QixLQUNUcEcsS0FBS2lDLEtBQU9vL0IsRUFBT2hpQyxJQUNNLFdBQWhCZ2lDLEVBQU9qN0IsTUFDaEJwRyxLQUFLcWhFLEtBQU9yaEUsS0FBS1gsSUFBTWdpQyxFQUFPaGlDLElBQzlCVyxLQUFLMHpELE9BQVMsU0FDZDF6RCxLQUFLaUMsS0FBTyxPQUNhLFdBQWhCby9CLEVBQU9qN0IsTUFBcUJnNkQsSUFDckNwZ0UsS0FBS2lDLEtBQU9tK0QsR0FHUDlCLEdBR1R1RCxPQUFRLFNBQVMxQixHQUNmLElBQUssSUFBSXIwRCxFQUFJOUwsS0FBS3FnRSxXQUFXNTVELE9BQVMsRUFBR3FGLEdBQUssSUFBS0EsRUFBRyxDQUNwRCxJQUFJazBELEVBQVFoZ0UsS0FBS3FnRSxXQUFXdjBELEdBQzVCLEdBQUlrMEQsRUFBTUcsYUFBZUEsRUFHdkIsT0FGQW5nRSxLQUFLdTBCLFNBQVN5ckMsRUFBTU8sV0FBWVAsRUFBTUksVUFDdENFLEVBQWNOLEdBQ1AxQixJQUtiLE1BQVMsU0FBUzJCLEdBQ2hCLElBQUssSUFBSW4wRCxFQUFJOUwsS0FBS3FnRSxXQUFXNTVELE9BQVMsRUFBR3FGLEdBQUssSUFBS0EsRUFBRyxDQUNwRCxJQUFJazBELEVBQVFoZ0UsS0FBS3FnRSxXQUFXdjBELEdBQzVCLEdBQUlrMEQsRUFBTUMsU0FBV0EsRUFBUSxDQUMzQixJQUFJNStCLEVBQVMyK0IsRUFBTU8sV0FDbkIsR0FBb0IsVUFBaEJsL0IsRUFBT2o3QixLQUFrQixDQUMzQixJQUFJMDdELEVBQVN6Z0MsRUFBT2hpQyxJQUNwQmloRSxFQUFjTixHQUVoQixPQUFPOEIsR0FNWCxNQUFNLElBQUkvNEQsTUFBTSwwQkFHbEJnNUQsY0FBZSxTQUFTdkIsRUFBVVosRUFBWUMsR0FhNUMsT0FaQTcvRCxLQUFLbStELFNBQVcsQ0FDZDU0QyxTQUFVeGpCLEVBQU95K0QsR0FDakJaLFdBQVlBLEVBQ1pDLFFBQVNBLEdBR1MsU0FBaEI3L0QsS0FBSzB6RCxTQUdQMXpELEtBQUtYLElBQU1nQixHQUdOaStELElBUUp6K0QsRUE3c0JLLENBb3RCaUJELEVBQU9DLFNBR3RDLElBQ0VtaUUsbUJBQXFCdkYsRUFDckIsTUFBT3dGLEdBVVBDLFNBQVMsSUFBSyx5QkFBZEEsQ0FBd0N6RixLLG1HQzF0QjFDLElBQUkwRixFQUFnQixTQUFTbnZCLEVBQUcvbEMsR0FJNUIsT0FIQWsxRCxFQUFnQjcvRCxPQUFPODFELGdCQUNsQixDQUFFNUcsVUFBVyxjQUFnQmpvRCxPQUFTLFNBQVV5cEMsRUFBRy9sQyxHQUFLK2xDLEVBQUV3ZSxVQUFZdmtELElBQ3ZFLFNBQVUrbEMsRUFBRy9sQyxHQUFLLElBQUssSUFBSSt3QyxLQUFLL3dDLEVBQU9BLEVBQUVpQixlQUFlOHZDLEtBQUloTCxFQUFFZ0wsR0FBSy93QyxFQUFFK3dDLE1BQ3BEaEwsRUFBRy9sQyxJQUdyQixTQUFTbTFELEVBQVVwdkIsRUFBRy9sQyxHQUV6QixTQUFTbzFELElBQU9yaUUsS0FBS3czRCxZQUFjeGtCLEVBRG5DbXZCLEVBQWNudkIsRUFBRy9sQyxHQUVqQitsQyxFQUFFeHdDLFVBQWtCLE9BQU55SyxFQUFhM0ssT0FBTzJCLE9BQU9nSixJQUFNbzFELEVBQUc3L0QsVUFBWXlLLEVBQUV6SyxVQUFXLElBQUk2L0QsR0FHNUUsSUFBSUMsRUFBVyxXQVFsQixPQVBBQSxFQUFXaGdFLE9BQU9pZ0UsUUFBVSxTQUFrQjdvQixHQUMxQyxJQUFLLElBQUkzcUMsRUFBR2pELEVBQUksRUFBRzBULEVBQUl0ZixVQUFVdUcsT0FBUXFGLEVBQUkwVCxFQUFHMVQsSUFFNUMsSUFBSyxJQUFJa3lDLEtBRFRqdkMsRUFBSTdPLFVBQVU0TCxHQUNPeEosT0FBT0UsVUFBVTBMLGVBQWU3TCxLQUFLME0sRUFBR2l2QyxLQUFJdEUsRUFBRXNFLEdBQUtqdkMsRUFBRWl2QyxJQUU5RSxPQUFPdEUsSUFFS3Y1QyxNQUFNSCxLQUFNRSxZQThCekIsU0FBU3NpRSxFQUFVQyxFQUFTQyxFQUFZQyxFQUFHaEYsR0FFOUMsT0FBTyxJQUFLZ0YsSUFBTUEsRUFBSWpqRSxXQUFVLFNBQVVWLEVBQVNDLEdBQy9DLFNBQVMyakUsRUFBVXJqRSxHQUFTLElBQU1zakUsRUFBS2xGLEVBQVUxN0QsS0FBSzFDLElBQVcsTUFBT3NFLEdBQUs1RSxFQUFPNEUsSUFDcEYsU0FBU2kvRCxFQUFTdmpFLEdBQVMsSUFBTXNqRSxFQUFLbEYsRUFBaUIsTUFBRXArRCxJQUFXLE1BQU9zRSxHQUFLNUUsRUFBTzRFLElBQ3ZGLFNBQVNnL0QsRUFBS3BrRCxHQUpsQixJQUFlbGYsRUFJYWtmLEVBQU9oZixLQUFPVCxFQUFReWYsRUFBT2xmLFFBSjFDQSxFQUl5RGtmLEVBQU9sZixNQUpoREEsYUFBaUJvakUsRUFBSXBqRSxFQUFRLElBQUlvakUsR0FBRSxTQUFVM2pFLEdBQVdBLEVBQVFPLE9BSVRJLEtBQUtpakUsRUFBV0UsR0FDbEdELEdBQU1sRixFQUFZQSxFQUFVeDlELE1BQU1zaUUsRUFBU0MsR0FBYyxLQUFLemdFLFdBSS9ELFNBQVM4Z0UsRUFBWU4sRUFBUzF6QixHQUNqQyxJQUFzRy8vQixFQUFHZzBELEVBQUd0cEIsRUFBR21lLEVBQTNHZ0IsRUFBSSxDQUFFdnZELE1BQU8sRUFBR0ksS0FBTSxXQUFhLEdBQVcsRUFBUGd3QyxFQUFFLEdBQVEsTUFBTUEsRUFBRSxHQUFJLE9BQU9BLEVBQUUsSUFBT3VwQixLQUFNLEdBQUlDLElBQUssSUFDaEcsT0FBT3JMLEVBQUksQ0FBRTUxRCxLQUFNa2hFLEVBQUssR0FBSSxNQUFTQSxFQUFLLEdBQUksT0FBVUEsRUFBSyxJQUF3QixtQkFBWHRHLFNBQTBCaEYsRUFBRWdGLE9BQU90M0MsVUFBWSxXQUFhLE9BQU92bEIsT0FBVTYzRCxFQUN2SixTQUFTc0wsRUFBSzNqRCxHQUFLLE9BQU8sU0FBVTFRLEdBQUssT0FDekMsU0FBY21nQixHQUNWLEdBQUlqZ0IsRUFBRyxNQUFNLElBQUkra0QsVUFBVSxtQ0FDM0IsS0FBTzhFLE9BQ0gsR0FBSTdwRCxFQUFJLEVBQUdnMEQsSUFBTXRwQixFQUFZLEVBQVJ6cUIsRUFBRyxHQUFTK3pDLEVBQVUsT0FBSS96QyxFQUFHLEdBQUsrekMsRUFBUyxTQUFPdHBCLEVBQUlzcEIsRUFBVSxTQUFNdHBCLEVBQUVyM0MsS0FBSzJnRSxHQUFJLEdBQUtBLEVBQUUvZ0UsU0FBV3kzQyxFQUFJQSxFQUFFcjNDLEtBQUsyZ0UsRUFBRy96QyxFQUFHLEtBQUt4dkIsS0FBTSxPQUFPaTZDLEVBRTNKLE9BRElzcEIsRUFBSSxFQUFHdHBCLElBQUd6cUIsRUFBSyxDQUFTLEVBQVJBLEVBQUcsR0FBUXlxQixFQUFFbjZDLFFBQ3pCMHZCLEVBQUcsSUFDUCxLQUFLLEVBQUcsS0FBSyxFQUFHeXFCLEVBQUl6cUIsRUFBSSxNQUN4QixLQUFLLEVBQWMsT0FBWDRwQyxFQUFFdnZELFFBQWdCLENBQUUvSixNQUFPMHZCLEVBQUcsR0FBSXh2QixNQUFNLEdBQ2hELEtBQUssRUFBR281RCxFQUFFdnZELFFBQVMwNUQsRUFBSS96QyxFQUFHLEdBQUlBLEVBQUssQ0FBQyxHQUFJLFNBQ3hDLEtBQUssRUFBR0EsRUFBSzRwQyxFQUFFcUssSUFBSTV2RCxNQUFPdWxELEVBQUVvSyxLQUFLM3ZELE1BQU8sU0FDeEMsUUFDSSxNQUFrQm9tQyxHQUFaQSxFQUFJbWYsRUFBRW9LLE1BQVl4OEQsT0FBUyxHQUFLaXpDLEVBQUVBLEVBQUVqekMsT0FBUyxLQUFrQixJQUFWd29CLEVBQUcsSUFBc0IsSUFBVkEsRUFBRyxJQUFXLENBQUU0cEMsRUFBSSxFQUFHLFNBQ2pHLEdBQWMsSUFBVjVwQyxFQUFHLE1BQWN5cUIsR0FBTXpxQixFQUFHLEdBQUt5cUIsRUFBRSxJQUFNenFCLEVBQUcsR0FBS3lxQixFQUFFLElBQU0sQ0FBRW1mLEVBQUV2dkQsTUFBUTJsQixFQUFHLEdBQUksTUFDOUUsR0FBYyxJQUFWQSxFQUFHLElBQVk0cEMsRUFBRXZ2RCxNQUFRb3dDLEVBQUUsR0FBSSxDQUFFbWYsRUFBRXZ2RCxNQUFRb3dDLEVBQUUsR0FBSUEsRUFBSXpxQixFQUFJLE1BQzdELEdBQUl5cUIsR0FBS21mLEVBQUV2dkQsTUFBUW93QyxFQUFFLEdBQUksQ0FBRW1mLEVBQUV2dkQsTUFBUW93QyxFQUFFLEdBQUltZixFQUFFcUssSUFBSXo5RCxLQUFLd3BCLEdBQUssTUFDdkR5cUIsRUFBRSxJQUFJbWYsRUFBRXFLLElBQUk1dkQsTUFDaEJ1bEQsRUFBRW9LLEtBQUszdkQsTUFBTyxTQUV0QjJiLEVBQUs4ZixFQUFLMXNDLEtBQUtvZ0UsRUFBUzVKLEdBQzFCLE1BQU9oMUQsR0FBS29yQixFQUFLLENBQUMsRUFBR3ByQixHQUFJbS9ELEVBQUksRUFBSyxRQUFVaDBELEVBQUkwcUMsRUFBSSxFQUN0RCxHQUFZLEVBQVJ6cUIsRUFBRyxHQUFRLE1BQU1BLEVBQUcsR0FBSSxNQUFPLENBQUUxdkIsTUFBTzB2QixFQUFHLEdBQUtBLEVBQUcsUUFBSyxFQUFReHZCLE1BQU0sR0FyQjlCb2pFLENBQUssQ0FBQ3JqRCxFQUFHMVEsTUFrQ3RELFNBQVNzMEQsRUFBU0MsR0FDckIsSUFBSXQwRCxFQUFzQixtQkFBWDh0RCxRQUF5QkEsT0FBT3QzQyxTQUFVa3dCLEVBQUkxbUMsR0FBS3MwRCxFQUFFdDBELEdBQUlqRCxFQUFJLEVBQzVFLEdBQUkycEMsRUFBRyxPQUFPQSxFQUFFcHpDLEtBQUtnaEUsR0FDckIsR0FBSUEsR0FBeUIsaUJBQWJBLEVBQUU1OEQsT0FBcUIsTUFBTyxDQUMxQ3hFLEtBQU0sV0FFRixPQURJb2hFLEdBQUt2M0QsR0FBS3UzRCxFQUFFNThELFNBQVE0OEQsT0FBSSxHQUNyQixDQUFFOWpFLE1BQU84akUsR0FBS0EsRUFBRXYzRCxLQUFNck0sTUFBTzRqRSxLQUc1QyxNQUFNLElBQUl0UCxVQUFVaGxELEVBQUksMEJBQTRCLG1DQUdqRCxTQUFTdTBELEVBQU9ELEVBQUc3akQsR0FDdEIsSUFBSWkyQixFQUFzQixtQkFBWG9uQixRQUF5QndHLEVBQUV4RyxPQUFPdDNDLFVBQ2pELElBQUtrd0IsRUFBRyxPQUFPNHRCLEVBQ2YsSUFBbUI1K0IsRUFBWTVnQyxFQUEzQmlJLEVBQUkycEMsRUFBRXB6QyxLQUFLZ2hFLEdBQU9FLEVBQUssR0FDM0IsSUFDSSxXQUFjLElBQU4vakQsR0FBZ0JBLEtBQU0sTUFBUWlsQixFQUFJMzRCLEVBQUU3SixRQUFReEMsTUFBTThqRSxFQUFHOTlELEtBQUtnL0IsRUFBRWxsQyxPQUV4RSxNQUFPQyxHQUFTcUUsRUFBSSxDQUFFckUsTUFBT0EsR0FDN0IsUUFDSSxJQUNRaWxDLElBQU1BLEVBQUVobEMsT0FBU2cyQyxFQUFJM3BDLEVBQVUsU0FBSTJwQyxFQUFFcHpDLEtBQUt5SixHQUVsRCxRQUFVLEdBQUlqSSxFQUFHLE1BQU1BLEVBQUVyRSxPQUU3QixPQUFPK2pFLEVBR0osU0FBU0MsSUFDWixJQUFLLElBQUlELEVBQUssR0FBSXozRCxFQUFJLEVBQUdBLEVBQUk1TCxVQUFVdUcsT0FBUXFGLElBQzNDeTNELEVBQUtBLEVBQUd4bEMsT0FBT3VsQyxFQUFPcGpFLFVBQVU0TCxLQUNwQyxPQUFPeTNELEtDakpQRSxFQUEyQixHQUcvQixTQUFTQyxFQUFvQkMsR0FFNUIsR0FBR0YsRUFBeUJFLEdBQzNCLE9BQU9GLEVBQXlCRSxHQUFVOWpFLFFBRzNDLElBQUlELEVBQVM2akUsRUFBeUJFLEdBQVksQ0FDakQ1NUQsR0FBSTQ1RCxFQUNKQyxRQUFRLEVBQ1IvakUsUUFBUyxJQVVWLE9BTkFna0UsRUFBb0JGLEdBQVUvakUsRUFBUUEsRUFBT0MsUUFBUzZqRSxHQUd0RDlqRSxFQUFPZ2tFLFFBQVMsRUFHVGhrRSxFQUFPQyxRQ3RCZjZqRSxFQUFvQmxrRCxFQUFLNWYsSUFDeEIsSUFBSWtrRSxFQUFTbGtFLEdBQVVBLEVBQU8rRSxXQUM3QixJQUFNL0UsRUFBZ0IsUUFDdEIsSUFBTUEsRUFFUCxPQURBOGpFLEVBQW9CMXdCLEVBQUU4d0IsRUFBUSxDQUFFOTJELEVBQUc4MkQsSUFDNUJBLEdDTFJKLEVBQW9CMXdCLEVBQUksQ0FBQ256QyxFQUFTa2tFLEtBQ2pDLElBQUksSUFBSTNrRSxLQUFPMmtFLEVBQ1hMLEVBQW9CTCxFQUFFVSxFQUFZM2tFLEtBQVNza0UsRUFBb0JMLEVBQUV4akUsRUFBU1QsSUFDNUVrRCxPQUFPQyxlQUFlMUMsRUFBU1QsRUFBSyxDQUFFeUQsWUFBWSxFQUFNSixJQUFLc2hFLEVBQVcza0UsTUNKM0Vza0UsRUFBb0I3TCxFQUFJLFdBQ3ZCLEdBQTBCLGlCQUFmbU0sV0FBeUIsT0FBT0EsV0FDM0MsSUFDQyxPQUFPaGtFLE1BQVEsSUFBSWtpRSxTQUFTLGNBQWIsR0FDZCxNQUFPcitELEdBQ1IsR0FBc0IsaUJBQVhrSCxPQUFxQixPQUFPQSxRQUxqQixHQ0F4QjI0RCxFQUFvQk8sSUFBT3JrRSxLQUMxQkEsRUFBUzBDLE9BQU8yQixPQUFPckUsSUFDWGl3QixXQUFVandCLEVBQU9pd0IsU0FBVyxJQUN4Q3Z0QixPQUFPQyxlQUFlM0MsRUFBUSxVQUFXLENBQ3hDaUQsWUFBWSxFQUNaRixJQUFLLEtBQ0osTUFBTSxJQUFJb0csTUFBTSwwRkFBNEZuSixFQUFPbUssT0FHOUduSyxHQ1RSOGpFLEVBQW9CTCxFQUFJLENBQUM5MUQsRUFBS2txRCxJQUFTbjFELE9BQU9FLFVBQVUwTCxlQUFlN0wsS0FBS2tMLEVBQUtrcUQsRyxtRUNzQmpGLG9CQW5CVyxXQUNHLFFBa0IwQixPLE9DbkJ4Q3R6RCxRQUFRQyxJQUFJLDhCQVdaLElBQUlXLEVBQU1WLGtCQUF1QixDQUM3QjYvRCxPQUFRLDBDQUNSQyxXQUFZLDZCQUNabFUsWUFBYSxvQ0FDYkMsVUFBVyxhQUNYa1UsY0FBZSx5QkFDZkMsa0JBQW1CLGVBQ25COWdCLE1BQU8sNENBQ1ArZ0IsY0FBZSxpQixTQUdKQyxJLG1FQUFmLHVHQUNXLElBQUk3a0UsU0FBUSxTQUFBVixHQUNmLE9BQU9BLEVBQVEsVUFGdkIsNEMsMERBa0JBLFdBQXVCd2xFLEVBQU8zNEMsR0FBOUIsa0ZBQ1E0NEMsRUFBUzEvRCxFQUFJb2xELFdBQVc1aEMsTUFBTTNXLE1BQU0sU0FBU25NLE9BQU9yRyxJQUNwRHFOLEVBQU8sR0FDWHRJLFFBQVFDLElBQUksNENBSGhCLFNBSXlCbWdFLElBSnpCLE9BSVFqdkQsRUFKUixPQUtJblIsUUFBUUMsSUFBSSxxQ0FDWnFJLEVBQUssVUFBWWc0RCxHQUFVLENBQ3ZCRCxNQUFPQSxFQUNQRSxXQUFZLElBQUk3a0IsS0FDaEJ2cUMsU0FBVUEsR0FHZG5SLFFBQVFDLElBQVIsNkJBQWtDb2dFLEVBQWxDLG9CQUFtREMsRUFBbkQsU0FDQTEvRCxFQUFJb2xELFdBQVc1aEMsTUFBTS9jLE9BQU9pQixFQUFNb2YsR0FidEMsNkMsc0JBaUJBOXJCLEtBQUttc0MsaUJBQ0QsV0FDQSxTQUFBeTRCLEdBQ0ksSUFBSTU2RCxFQUFLNDZELEVBQU1sNEQsS0FBSzFDLEdBQ2hCMHZDLEVBQU1rckIsRUFBTWw0RCxLQUFLQSxLQUN2QixPQUFRZ3RDLEVBQUlNLEtBQ1YsSUFBSyxXLHNDQUNENnFCLENBQVFuckIsRUFBSWh0QyxNQUFNLFNBQUNqTixHQUNmTyxLQUFLOGtFLFlBQVksQ0FBQzk2RCxHQUFJQSxFQUFJMEMsS0FBTWpOLE9BRXBDLE1BQ0osUUFDSTJFLFFBQVEzRSxNQUFSLDZCQUFvQ2k2QyxFQUFJTSxJQUF4QyxXIiwiZmlsZSI6ImZpcmViYXNlLXN3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykge1xuICB0cnkge1xuICAgIHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTtcbiAgICB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJlamVjdChlcnJvcik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGluZm8uZG9uZSkge1xuICAgIHJlc29sdmUodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuXG4gICAgICBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwibmV4dFwiLCB2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIF90aHJvdyhlcnIpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcInRocm93XCIsIGVycik7XG4gICAgICB9XG5cbiAgICAgIF9uZXh0KHVuZGVmaW5lZCk7XG4gICAgfSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FzeW5jVG9HZW5lcmF0b3I7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZVwiKTtcbiIsImltcG9ydCB7IF9fdmFsdWVzLCBfX2Fzc2lnbiB9IGZyb20gJ3RzbGliJztcbmltcG9ydCB7IEVycm9yRmFjdG9yeSwgZGVlcENvcHksIGNvbnRhaW5zLCBkZWVwRXh0ZW5kLCBjcmVhdGVTdWJzY3JpYmUsIGlzQnJvd3NlciwgaXNOb2RlIH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuaW1wb3J0IHsgQ29tcG9uZW50Q29udGFpbmVyLCBDb21wb25lbnQgfSBmcm9tICdAZmlyZWJhc2UvY29tcG9uZW50JztcbmltcG9ydCB7IExvZ2dlciwgc2V0TG9nTGV2ZWwsIHNldFVzZXJMb2dIYW5kbGVyIH0gZnJvbSAnQGZpcmViYXNlL2xvZ2dlcic7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBfYTtcclxudmFyIEVSUk9SUyA9IChfYSA9IHt9LFxyXG4gICAgX2FbXCJuby1hcHBcIiAvKiBOT19BUFAgKi9dID0gXCJObyBGaXJlYmFzZSBBcHAgJ3skYXBwTmFtZX0nIGhhcyBiZWVuIGNyZWF0ZWQgLSBcIiArXHJcbiAgICAgICAgJ2NhbGwgRmlyZWJhc2UgQXBwLmluaXRpYWxpemVBcHAoKScsXHJcbiAgICBfYVtcImJhZC1hcHAtbmFtZVwiIC8qIEJBRF9BUFBfTkFNRSAqL10gPSBcIklsbGVnYWwgQXBwIG5hbWU6ICd7JGFwcE5hbWV9XCIsXHJcbiAgICBfYVtcImR1cGxpY2F0ZS1hcHBcIiAvKiBEVVBMSUNBVEVfQVBQICovXSA9IFwiRmlyZWJhc2UgQXBwIG5hbWVkICd7JGFwcE5hbWV9JyBhbHJlYWR5IGV4aXN0c1wiLFxyXG4gICAgX2FbXCJhcHAtZGVsZXRlZFwiIC8qIEFQUF9ERUxFVEVEICovXSA9IFwiRmlyZWJhc2UgQXBwIG5hbWVkICd7JGFwcE5hbWV9JyBhbHJlYWR5IGRlbGV0ZWRcIixcclxuICAgIF9hW1wiaW52YWxpZC1hcHAtYXJndW1lbnRcIiAvKiBJTlZBTElEX0FQUF9BUkdVTUVOVCAqL10gPSAnZmlyZWJhc2UueyRhcHBOYW1lfSgpIHRha2VzIGVpdGhlciBubyBhcmd1bWVudCBvciBhICcgK1xyXG4gICAgICAgICdGaXJlYmFzZSBBcHAgaW5zdGFuY2UuJyxcclxuICAgIF9hW1wiaW52YWxpZC1sb2ctYXJndW1lbnRcIiAvKiBJTlZBTElEX0xPR19BUkdVTUVOVCAqL10gPSAnRmlyc3QgYXJndW1lbnQgdG8gYG9uTG9nYCBtdXN0IGJlIG51bGwgb3IgYSBmdW5jdGlvbi4nLFxyXG4gICAgX2EpO1xyXG52YXIgRVJST1JfRkFDVE9SWSA9IG5ldyBFcnJvckZhY3RvcnkoJ2FwcCcsICdGaXJlYmFzZScsIEVSUk9SUyk7XG5cbnZhciBuYW1lJDEgPSBcIkBmaXJlYmFzZS9hcHBcIjtcbnZhciB2ZXJzaW9uID0gXCIwLjYuMTNcIjtcblxudmFyIG5hbWUkMiA9IFwiQGZpcmViYXNlL2FuYWx5dGljc1wiO1xuXG52YXIgbmFtZSQzID0gXCJAZmlyZWJhc2UvYXV0aFwiO1xuXG52YXIgbmFtZSQ0ID0gXCJAZmlyZWJhc2UvZGF0YWJhc2VcIjtcblxudmFyIG5hbWUkNSA9IFwiQGZpcmViYXNlL2Z1bmN0aW9uc1wiO1xuXG52YXIgbmFtZSQ2ID0gXCJAZmlyZWJhc2UvaW5zdGFsbGF0aW9uc1wiO1xuXG52YXIgbmFtZSQ3ID0gXCJAZmlyZWJhc2UvbWVzc2FnaW5nXCI7XG5cbnZhciBuYW1lJDggPSBcIkBmaXJlYmFzZS9wZXJmb3JtYW5jZVwiO1xuXG52YXIgbmFtZSQ5ID0gXCJAZmlyZWJhc2UvcmVtb3RlLWNvbmZpZ1wiO1xuXG52YXIgbmFtZSRhID0gXCJAZmlyZWJhc2Uvc3RvcmFnZVwiO1xuXG52YXIgbmFtZSRiID0gXCJAZmlyZWJhc2UvZmlyZXN0b3JlXCI7XG5cbnZhciBuYW1lJGMgPSBcImZpcmViYXNlLXdyYXBwZXJcIjtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIF9hJDE7XHJcbnZhciBERUZBVUxUX0VOVFJZX05BTUUgPSAnW0RFRkFVTFRdJztcclxudmFyIFBMQVRGT1JNX0xPR19TVFJJTkcgPSAoX2EkMSA9IHt9LFxyXG4gICAgX2EkMVtuYW1lJDFdID0gJ2ZpcmUtY29yZScsXHJcbiAgICBfYSQxW25hbWUkMl0gPSAnZmlyZS1hbmFseXRpY3MnLFxyXG4gICAgX2EkMVtuYW1lJDNdID0gJ2ZpcmUtYXV0aCcsXHJcbiAgICBfYSQxW25hbWUkNF0gPSAnZmlyZS1ydGRiJyxcclxuICAgIF9hJDFbbmFtZSQ1XSA9ICdmaXJlLWZuJyxcclxuICAgIF9hJDFbbmFtZSQ2XSA9ICdmaXJlLWlpZCcsXHJcbiAgICBfYSQxW25hbWUkN10gPSAnZmlyZS1mY20nLFxyXG4gICAgX2EkMVtuYW1lJDhdID0gJ2ZpcmUtcGVyZicsXHJcbiAgICBfYSQxW25hbWUkOV0gPSAnZmlyZS1yYycsXHJcbiAgICBfYSQxW25hbWUkYV0gPSAnZmlyZS1nY3MnLFxyXG4gICAgX2EkMVtuYW1lJGJdID0gJ2ZpcmUtZnN0JyxcclxuICAgIF9hJDFbJ2ZpcmUtanMnXSA9ICdmaXJlLWpzJyxcclxuICAgIF9hJDFbbmFtZSRjXSA9ICdmaXJlLWpzLWFsbCcsXHJcbiAgICBfYSQxKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIGxvZ2dlciA9IG5ldyBMb2dnZXIoJ0BmaXJlYmFzZS9hcHAnKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEdsb2JhbCBjb250ZXh0IG9iamVjdCBmb3IgYSBjb2xsZWN0aW9uIG9mIHNlcnZpY2VzIHVzaW5nXHJcbiAqIGEgc2hhcmVkIGF1dGhlbnRpY2F0aW9uIHN0YXRlLlxyXG4gKi9cclxudmFyIEZpcmViYXNlQXBwSW1wbCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEZpcmViYXNlQXBwSW1wbChvcHRpb25zLCBjb25maWcsIGZpcmViYXNlXykge1xyXG4gICAgICAgIHZhciBlXzEsIF9hO1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5maXJlYmFzZV8gPSBmaXJlYmFzZV87XHJcbiAgICAgICAgdGhpcy5pc0RlbGV0ZWRfID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5uYW1lXyA9IGNvbmZpZy5uYW1lO1xyXG4gICAgICAgIHRoaXMuYXV0b21hdGljRGF0YUNvbGxlY3Rpb25FbmFibGVkXyA9XHJcbiAgICAgICAgICAgIGNvbmZpZy5hdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWQgfHwgZmFsc2U7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zXyA9IGRlZXBDb3B5KG9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gbmV3IENvbXBvbmVudENvbnRhaW5lcihjb25maWcubmFtZSk7XHJcbiAgICAgICAgLy8gYWRkIGl0c2VsZiB0byBjb250YWluZXJcclxuICAgICAgICB0aGlzLl9hZGRDb21wb25lbnQobmV3IENvbXBvbmVudCgnYXBwJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXM7IH0sIFwiUFVCTElDXCIgLyogUFVCTElDICovKSk7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgLy8gcG9wdWxhdGUgQ29tcG9uZW50Q29udGFpbmVyIHdpdGggZXhpc3RpbmcgY29tcG9uZW50c1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfYiA9IF9fdmFsdWVzKHRoaXMuZmlyZWJhc2VfLklOVEVSTkFMLmNvbXBvbmVudHMudmFsdWVzKCkpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY29tcG9uZW50ID0gX2MudmFsdWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hZGRDb21wb25lbnQoY29tcG9uZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxyXG4gICAgICAgIGZpbmFsbHkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgaWYgKF9jICYmICFfYy5kb25lICYmIChfYSA9IF9iLnJldHVybikpIF9hLmNhbGwoX2IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmlyZWJhc2VBcHBJbXBsLnByb3RvdHlwZSwgXCJhdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLmNoZWNrRGVzdHJveWVkXygpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWRfO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tEZXN0cm95ZWRfKCk7XHJcbiAgICAgICAgICAgIHRoaXMuYXV0b21hdGljRGF0YUNvbGxlY3Rpb25FbmFibGVkXyA9IHZhbDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmlyZWJhc2VBcHBJbXBsLnByb3RvdHlwZSwgXCJuYW1lXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGVja0Rlc3Ryb3llZF8oKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubmFtZV87XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZpcmViYXNlQXBwSW1wbC5wcm90b3R5cGUsIFwib3B0aW9uc1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tEZXN0cm95ZWRfKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnNfO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIEZpcmViYXNlQXBwSW1wbC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XHJcbiAgICAgICAgICAgIF90aGlzLmNoZWNrRGVzdHJveWVkXygpO1xyXG4gICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfdGhpcy5maXJlYmFzZV8uSU5URVJOQUwucmVtb3ZlQXBwKF90aGlzLm5hbWVfKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKF90aGlzLmNvbnRhaW5lci5nZXRQcm92aWRlcnMoKS5tYXAoZnVuY3Rpb24gKHByb3ZpZGVyKSB7IHJldHVybiBwcm92aWRlci5kZWxldGUoKTsgfSkpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMuaXNEZWxldGVkXyA9IHRydWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm4gYSBzZXJ2aWNlIGluc3RhbmNlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGFwcCAoY3JlYXRpbmcgaXRcclxuICAgICAqIG9uIGRlbWFuZCksIGlkZW50aWZpZWQgYnkgdGhlIHBhc3NlZCBpbnN0YW5jZUlkZW50aWZpZXIuXHJcbiAgICAgKlxyXG4gICAgICogTk9URTogQ3VycmVudGx5IHN0b3JhZ2UgYW5kIGZ1bmN0aW9ucyBhcmUgdGhlIG9ubHkgb25lcyB0aGF0IGFyZSBsZXZlcmFnaW5nIHRoaXNcclxuICAgICAqIGZ1bmN0aW9uYWxpdHkuIFRoZXkgaW52b2tlIGl0IGJ5IGNhbGxpbmc6XHJcbiAgICAgKlxyXG4gICAgICogYGBgamF2YXNjcmlwdFxyXG4gICAgICogZmlyZWJhc2UuYXBwKCkuc3RvcmFnZSgnU1RPUkFHRSBCVUNLRVQgSUQnKVxyXG4gICAgICogYGBgXHJcbiAgICAgKlxyXG4gICAgICogVGhlIHNlcnZpY2UgbmFtZSBpcyBwYXNzZWQgdG8gdGhpcyBhbHJlYWR5XHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgRmlyZWJhc2VBcHBJbXBsLnByb3RvdHlwZS5fZ2V0U2VydmljZSA9IGZ1bmN0aW9uIChuYW1lLCBpbnN0YW5jZUlkZW50aWZpZXIpIHtcclxuICAgICAgICBpZiAoaW5zdGFuY2VJZGVudGlmaWVyID09PSB2b2lkIDApIHsgaW5zdGFuY2VJZGVudGlmaWVyID0gREVGQVVMVF9FTlRSWV9OQU1FOyB9XHJcbiAgICAgICAgdGhpcy5jaGVja0Rlc3Ryb3llZF8oKTtcclxuICAgICAgICAvLyBnZXRJbW1lZGlhdGUgd2lsbCBhbHdheXMgc3VjY2VlZCBiZWNhdXNlIF9nZXRTZXJ2aWNlIGlzIG9ubHkgY2FsbGVkIGZvciByZWdpc3RlcmVkIGNvbXBvbmVudHMuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyLmdldFByb3ZpZGVyKG5hbWUpLmdldEltbWVkaWF0ZSh7XHJcbiAgICAgICAgICAgIGlkZW50aWZpZXI6IGluc3RhbmNlSWRlbnRpZmllclxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlIGEgc2VydmljZSBpbnN0YW5jZSBmcm9tIHRoZSBjYWNoZSwgc28gd2Ugd2lsbCBjcmVhdGUgYSBuZXcgaW5zdGFuY2UgZm9yIHRoaXMgc2VydmljZVxyXG4gICAgICogd2hlbiBwZW9wbGUgdHJ5IHRvIGdldCB0aGlzIHNlcnZpY2UgYWdhaW4uXHJcbiAgICAgKlxyXG4gICAgICogTk9URTogY3VycmVudGx5IG9ubHkgZmlyZXN0b3JlIGlzIHVzaW5nIHRoaXMgZnVuY3Rpb25hbGl0eSB0byBzdXBwb3J0IGZpcmVzdG9yZSBzaHV0ZG93bi5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbmFtZSBUaGUgc2VydmljZSBuYW1lXHJcbiAgICAgKiBAcGFyYW0gaW5zdGFuY2VJZGVudGlmaWVyIGluc3RhbmNlIGlkZW50aWZpZXIgaW4gY2FzZSBtdWx0aXBsZSBpbnN0YW5jZXMgYXJlIGFsbG93ZWRcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBGaXJlYmFzZUFwcEltcGwucHJvdG90eXBlLl9yZW1vdmVTZXJ2aWNlSW5zdGFuY2UgPSBmdW5jdGlvbiAobmFtZSwgaW5zdGFuY2VJZGVudGlmaWVyKSB7XHJcbiAgICAgICAgaWYgKGluc3RhbmNlSWRlbnRpZmllciA9PT0gdm9pZCAwKSB7IGluc3RhbmNlSWRlbnRpZmllciA9IERFRkFVTFRfRU5UUllfTkFNRTsgfVxyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIuZ2V0UHJvdmlkZXIobmFtZSkuY2xlYXJJbnN0YW5jZShpbnN0YW5jZUlkZW50aWZpZXIpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIGNvbXBvbmVudCB0aGUgY29tcG9uZW50IGJlaW5nIGFkZGVkIHRvIHRoaXMgYXBwJ3MgY29udGFpbmVyXHJcbiAgICAgKi9cclxuICAgIEZpcmViYXNlQXBwSW1wbC5wcm90b3R5cGUuX2FkZENvbXBvbmVudCA9IGZ1bmN0aW9uIChjb21wb25lbnQpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5hZGRDb21wb25lbnQoY29tcG9uZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKFwiQ29tcG9uZW50IFwiICsgY29tcG9uZW50Lm5hbWUgKyBcIiBmYWlsZWQgdG8gcmVnaXN0ZXIgd2l0aCBGaXJlYmFzZUFwcCBcIiArIHRoaXMubmFtZSwgZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEZpcmViYXNlQXBwSW1wbC5wcm90b3R5cGUuX2FkZE9yT3ZlcndyaXRlQ29tcG9uZW50ID0gZnVuY3Rpb24gKGNvbXBvbmVudCkge1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyLmFkZE9yT3ZlcndyaXRlQ29tcG9uZW50KGNvbXBvbmVudCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHdpbGwgdGhyb3cgYW4gRXJyb3IgaWYgdGhlIEFwcCBoYXMgYWxyZWFkeSBiZWVuIGRlbGV0ZWQgLVxyXG4gICAgICogdXNlIGJlZm9yZSBwZXJmb3JtaW5nIEFQSSBhY3Rpb25zIG9uIHRoZSBBcHAuXHJcbiAgICAgKi9cclxuICAgIEZpcmViYXNlQXBwSW1wbC5wcm90b3R5cGUuY2hlY2tEZXN0cm95ZWRfID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzRGVsZXRlZF8pIHtcclxuICAgICAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJhcHAtZGVsZXRlZFwiIC8qIEFQUF9ERUxFVEVEICovLCB7IGFwcE5hbWU6IHRoaXMubmFtZV8gfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBGaXJlYmFzZUFwcEltcGw7XHJcbn0oKSk7XHJcbi8vIFByZXZlbnQgZGVhZC1jb2RlIGVsaW1pbmF0aW9uIG9mIHRoZXNlIG1ldGhvZHMgdy9vIGludmFsaWQgcHJvcGVydHlcclxuLy8gY29weWluZy5cclxuKEZpcmViYXNlQXBwSW1wbC5wcm90b3R5cGUubmFtZSAmJiBGaXJlYmFzZUFwcEltcGwucHJvdG90eXBlLm9wdGlvbnMpIHx8XHJcbiAgICBGaXJlYmFzZUFwcEltcGwucHJvdG90eXBlLmRlbGV0ZSB8fFxyXG4gICAgY29uc29sZS5sb2coJ2RjJyk7XG5cbnZhciB2ZXJzaW9uJDEgPSBcIjguMC4xXCI7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBCZWNhdXNlIGF1dGggY2FuJ3Qgc2hhcmUgY29kZSB3aXRoIG90aGVyIGNvbXBvbmVudHMsIHdlIGF0dGFjaCB0aGUgdXRpbGl0eSBmdW5jdGlvbnNcclxuICogaW4gYW4gaW50ZXJuYWwgbmFtZXNwYWNlIHRvIHNoYXJlIGNvZGUuXHJcbiAqIFRoaXMgZnVuY3Rpb24gcmV0dXJuIGEgZmlyZWJhc2UgbmFtZXNwYWNlIG9iamVjdCB3aXRob3V0XHJcbiAqIGFueSB1dGlsaXR5IGZ1bmN0aW9ucywgc28gaXQgY2FuIGJlIHNoYXJlZCBiZXR3ZWVuIHRoZSByZWd1bGFyIGZpcmViYXNlTmFtZXNwYWNlIGFuZFxyXG4gKiB0aGUgbGl0ZSB2ZXJzaW9uLlxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlRmlyZWJhc2VOYW1lc3BhY2VDb3JlKGZpcmViYXNlQXBwSW1wbCkge1xyXG4gICAgdmFyIGFwcHMgPSB7fTtcclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbiAgICB2YXIgY29tcG9uZW50cyA9IG5ldyBNYXAoKTtcclxuICAgIC8vIEEgbmFtZXNwYWNlIGlzIGEgcGxhaW4gSmF2YVNjcmlwdCBPYmplY3QuXHJcbiAgICB2YXIgbmFtZXNwYWNlID0ge1xyXG4gICAgICAgIC8vIEhhY2sgdG8gcHJldmVudCBCYWJlbCBmcm9tIG1vZGlmeWluZyB0aGUgb2JqZWN0IHJldHVybmVkXHJcbiAgICAgICAgLy8gYXMgdGhlIGZpcmViYXNlIG5hbWVzcGFjZS5cclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgX19lc01vZHVsZTogdHJ1ZSxcclxuICAgICAgICBpbml0aWFsaXplQXBwOiBpbml0aWFsaXplQXBwLFxyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBhcHA6IGFwcCxcclxuICAgICAgICByZWdpc3RlclZlcnNpb246IHJlZ2lzdGVyVmVyc2lvbixcclxuICAgICAgICBzZXRMb2dMZXZlbDogc2V0TG9nTGV2ZWwsXHJcbiAgICAgICAgb25Mb2c6IG9uTG9nLFxyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBhcHBzOiBudWxsLFxyXG4gICAgICAgIFNES19WRVJTSU9OOiB2ZXJzaW9uJDEsXHJcbiAgICAgICAgSU5URVJOQUw6IHtcclxuICAgICAgICAgICAgcmVnaXN0ZXJDb21wb25lbnQ6IHJlZ2lzdGVyQ29tcG9uZW50LFxyXG4gICAgICAgICAgICByZW1vdmVBcHA6IHJlbW92ZUFwcCxcclxuICAgICAgICAgICAgY29tcG9uZW50czogY29tcG9uZW50cyxcclxuICAgICAgICAgICAgdXNlQXNTZXJ2aWNlOiB1c2VBc1NlcnZpY2VcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLy8gSW5qZWN0IGEgY2lyY3VsYXIgZGVmYXVsdCBleHBvcnQgdG8gYWxsb3cgQmFiZWwgdXNlcnMgd2hvIHdlcmUgcHJldmlvdXNseVxyXG4gICAgLy8gdXNpbmc6XHJcbiAgICAvL1xyXG4gICAgLy8gICBpbXBvcnQgZmlyZWJhc2UgZnJvbSAnZmlyZWJhc2UnO1xyXG4gICAgLy8gICB3aGljaCBiZWNvbWVzOiB2YXIgZmlyZWJhc2UgPSByZXF1aXJlKCdmaXJlYmFzZScpLmRlZmF1bHQ7XHJcbiAgICAvL1xyXG4gICAgLy8gaW5zdGVhZCBvZlxyXG4gICAgLy9cclxuICAgIC8vICAgaW1wb3J0ICogYXMgZmlyZWJhc2UgZnJvbSAnZmlyZWJhc2UnO1xyXG4gICAgLy8gICB3aGljaCBiZWNvbWVzOiB2YXIgZmlyZWJhc2UgPSByZXF1aXJlKCdmaXJlYmFzZScpO1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgIG5hbWVzcGFjZVsnZGVmYXVsdCddID0gbmFtZXNwYWNlO1xyXG4gICAgLy8gZmlyZWJhc2UuYXBwcyBpcyBhIHJlYWQtb25seSBnZXR0ZXIuXHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobmFtZXNwYWNlLCAnYXBwcycsIHtcclxuICAgICAgICBnZXQ6IGdldEFwcHNcclxuICAgIH0pO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsZWQgYnkgQXBwLmRlbGV0ZSgpIC0gYnV0IGJlZm9yZSBhbnkgc2VydmljZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBBcHBcclxuICAgICAqIGFyZSBkZWxldGVkLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiByZW1vdmVBcHAobmFtZSkge1xyXG4gICAgICAgIGRlbGV0ZSBhcHBzW25hbWVdO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIEFwcCBvYmplY3QgZm9yIGEgZ2l2ZW4gbmFtZSAob3IgREVGQVVMVCkuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGFwcChuYW1lKSB7XHJcbiAgICAgICAgbmFtZSA9IG5hbWUgfHwgREVGQVVMVF9FTlRSWV9OQU1FO1xyXG4gICAgICAgIGlmICghY29udGFpbnMoYXBwcywgbmFtZSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJuby1hcHBcIiAvKiBOT19BUFAgKi8sIHsgYXBwTmFtZTogbmFtZSB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGFwcHNbbmFtZV07XHJcbiAgICB9XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBhcHBbJ0FwcCddID0gZmlyZWJhc2VBcHBJbXBsO1xyXG4gICAgZnVuY3Rpb24gaW5pdGlhbGl6ZUFwcChvcHRpb25zLCByYXdDb25maWcpIHtcclxuICAgICAgICBpZiAocmF3Q29uZmlnID09PSB2b2lkIDApIHsgcmF3Q29uZmlnID0ge307IH1cclxuICAgICAgICBpZiAodHlwZW9mIHJhd0NvbmZpZyAhPT0gJ29iamVjdCcgfHwgcmF3Q29uZmlnID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHZhciBuYW1lXzEgPSByYXdDb25maWc7XHJcbiAgICAgICAgICAgIHJhd0NvbmZpZyA9IHsgbmFtZTogbmFtZV8xIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBjb25maWcgPSByYXdDb25maWc7XHJcbiAgICAgICAgaWYgKGNvbmZpZy5uYW1lID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgY29uZmlnLm5hbWUgPSBERUZBVUxUX0VOVFJZX05BTUU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBuYW1lID0gY29uZmlnLm5hbWU7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJyB8fCAhbmFtZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcImJhZC1hcHAtbmFtZVwiIC8qIEJBRF9BUFBfTkFNRSAqLywge1xyXG4gICAgICAgICAgICAgICAgYXBwTmFtZTogU3RyaW5nKG5hbWUpXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY29udGFpbnMoYXBwcywgbmFtZSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJkdXBsaWNhdGUtYXBwXCIgLyogRFVQTElDQVRFX0FQUCAqLywgeyBhcHBOYW1lOiBuYW1lIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgYXBwID0gbmV3IGZpcmViYXNlQXBwSW1wbChvcHRpb25zLCBjb25maWcsIG5hbWVzcGFjZSk7XHJcbiAgICAgICAgYXBwc1tuYW1lXSA9IGFwcDtcclxuICAgICAgICByZXR1cm4gYXBwO1xyXG4gICAgfVxyXG4gICAgLypcclxuICAgICAqIFJldHVybiBhbiBhcnJheSBvZiBhbGwgdGhlIG5vbi1kZWxldGVkIEZpcmViYXNlQXBwcy5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gZ2V0QXBwcygpIHtcclxuICAgICAgICAvLyBNYWtlIGEgY29weSBzbyBjYWxsZXIgY2Fubm90IG11dGF0ZSB0aGUgYXBwcyBsaXN0LlxyXG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhhcHBzKS5tYXAoZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIGFwcHNbbmFtZV07IH0pO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcmVnaXN0ZXJDb21wb25lbnQoY29tcG9uZW50KSB7XHJcbiAgICAgICAgdmFyIGVfMSwgX2E7XHJcbiAgICAgICAgdmFyIGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnQubmFtZTtcclxuICAgICAgICBpZiAoY29tcG9uZW50cy5oYXMoY29tcG9uZW50TmFtZSkpIHtcclxuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKFwiVGhlcmUgd2VyZSBtdWx0aXBsZSBhdHRlbXB0cyB0byByZWdpc3RlciBjb21wb25lbnQgXCIgKyBjb21wb25lbnROYW1lICsgXCIuXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gY29tcG9uZW50LnR5cGUgPT09IFwiUFVCTElDXCIgLyogUFVCTElDICovXHJcbiAgICAgICAgICAgICAgICA/IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZXNwYWNlW2NvbXBvbmVudE5hbWVdXHJcbiAgICAgICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbXBvbmVudHMuc2V0KGNvbXBvbmVudE5hbWUsIGNvbXBvbmVudCk7XHJcbiAgICAgICAgLy8gY3JlYXRlIHNlcnZpY2UgbmFtZXNwYWNlIGZvciBwdWJsaWMgY29tcG9uZW50c1xyXG4gICAgICAgIGlmIChjb21wb25lbnQudHlwZSA9PT0gXCJQVUJMSUNcIiAvKiBQVUJMSUMgKi8pIHtcclxuICAgICAgICAgICAgLy8gVGhlIFNlcnZpY2UgbmFtZXNwYWNlIGlzIGFuIGFjY2Vzc29yIGZ1bmN0aW9uIC4uLlxyXG4gICAgICAgICAgICB2YXIgc2VydmljZU5hbWVzcGFjZSA9IGZ1bmN0aW9uIChhcHBBcmcpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhcHBBcmcgPT09IHZvaWQgMCkgeyBhcHBBcmcgPSBhcHAoKTsgfVxyXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXBwQXJnW2NvbXBvbmVudE5hbWVdICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gSW52YWxpZCBhcmd1bWVudC5cclxuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGhhcHBlbnMgaW4gdGhlIGZvbGxvd2luZyBjYXNlOiBmaXJlYmFzZS5zdG9yYWdlKCdnczovJylcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcImludmFsaWQtYXBwLWFyZ3VtZW50XCIgLyogSU5WQUxJRF9BUFBfQVJHVU1FTlQgKi8sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwTmFtZTogY29tcG9uZW50TmFtZVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gRm9yd2FyZCBzZXJ2aWNlIGluc3RhbmNlIGxvb2t1cCB0byB0aGUgRmlyZWJhc2VBcHAuXHJcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwcEFyZ1tjb21wb25lbnROYW1lXSgpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvLyAuLi4gYW5kIGEgY29udGFpbmVyIGZvciBzZXJ2aWNlLWxldmVsIHByb3BlcnRpZXMuXHJcbiAgICAgICAgICAgIGlmIChjb21wb25lbnQuc2VydmljZVByb3BzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGRlZXBFeHRlbmQoc2VydmljZU5hbWVzcGFjZSwgY29tcG9uZW50LnNlcnZpY2VQcm9wcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgICAgICAgICAgbmFtZXNwYWNlW2NvbXBvbmVudE5hbWVdID0gc2VydmljZU5hbWVzcGFjZTtcclxuICAgICAgICAgICAgLy8gUGF0Y2ggdGhlIEZpcmViYXNlQXBwSW1wbCBwcm90b3R5cGVcclxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgICAgICAgICAgZmlyZWJhc2VBcHBJbXBsLnByb3RvdHlwZVtjb21wb25lbnROYW1lXSA9XHJcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBUaGUgZXNsaW50IGRpc2FibGUgY2FuIGJlIHJlbW92ZWQgYW5kIHRoZSAnaWdub3JlUmVzdEFyZ3MnXHJcbiAgICAgICAgICAgICAgICAvLyBvcHRpb24gYWRkZWQgdG8gdGhlIG5vLWV4cGxpY2l0LWFueSBydWxlIHdoZW4gRVNsaW50IHJlbGVhc2VzIGl0LlxyXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlcnZpY2VGeG4gPSB0aGlzLl9nZXRTZXJ2aWNlLmJpbmQodGhpcywgY29tcG9uZW50TmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlcnZpY2VGeG4uYXBwbHkodGhpcywgY29tcG9uZW50Lm11bHRpcGxlSW5zdGFuY2VzID8gYXJncyA6IFtdKTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIC8vIGFkZCB0aGUgY29tcG9uZW50IHRvIGV4aXN0aW5nIGFwcCBpbnN0YW5jZXNcclxuICAgICAgICAgICAgZm9yICh2YXIgX2IgPSBfX3ZhbHVlcyhPYmplY3Qua2V5cyhhcHBzKSksIF9jID0gX2IubmV4dCgpOyAhX2MuZG9uZTsgX2MgPSBfYi5uZXh0KCkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhcHBOYW1lID0gX2MudmFsdWU7XHJcbiAgICAgICAgICAgICAgICBhcHBzW2FwcE5hbWVdLl9hZGRDb21wb25lbnQoY29tcG9uZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxyXG4gICAgICAgIGZpbmFsbHkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgaWYgKF9jICYmICFfYy5kb25lICYmIChfYSA9IF9iLnJldHVybikpIF9hLmNhbGwoX2IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudC50eXBlID09PSBcIlBVQkxJQ1wiIC8qIFBVQkxJQyAqL1xyXG4gICAgICAgICAgICA/IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbiAgICAgICAgICAgICAgICBuYW1lc3BhY2VbY29tcG9uZW50TmFtZV1cclxuICAgICAgICAgICAgOiBudWxsO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcmVnaXN0ZXJWZXJzaW9uKGxpYnJhcnlLZXlPck5hbWUsIHZlcnNpb24sIHZhcmlhbnQpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgLy8gVE9ETzogV2UgY2FuIHVzZSB0aGlzIGNoZWNrIHRvIHdoaXRlbGlzdCBzdHJpbmdzIHdoZW4vaWYgd2Ugc2V0IHVwXHJcbiAgICAgICAgLy8gYSBnb29kIHdoaXRlbGlzdCBzeXN0ZW0uXHJcbiAgICAgICAgdmFyIGxpYnJhcnkgPSAoX2EgPSBQTEFURk9STV9MT0dfU1RSSU5HW2xpYnJhcnlLZXlPck5hbWVdKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBsaWJyYXJ5S2V5T3JOYW1lO1xyXG4gICAgICAgIGlmICh2YXJpYW50KSB7XHJcbiAgICAgICAgICAgIGxpYnJhcnkgKz0gXCItXCIgKyB2YXJpYW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbGlicmFyeU1pc21hdGNoID0gbGlicmFyeS5tYXRjaCgvXFxzfFxcLy8pO1xyXG4gICAgICAgIHZhciB2ZXJzaW9uTWlzbWF0Y2ggPSB2ZXJzaW9uLm1hdGNoKC9cXHN8XFwvLyk7XHJcbiAgICAgICAgaWYgKGxpYnJhcnlNaXNtYXRjaCB8fCB2ZXJzaW9uTWlzbWF0Y2gpIHtcclxuICAgICAgICAgICAgdmFyIHdhcm5pbmcgPSBbXHJcbiAgICAgICAgICAgICAgICBcIlVuYWJsZSB0byByZWdpc3RlciBsaWJyYXJ5IFxcXCJcIiArIGxpYnJhcnkgKyBcIlxcXCIgd2l0aCB2ZXJzaW9uIFxcXCJcIiArIHZlcnNpb24gKyBcIlxcXCI6XCJcclxuICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgaWYgKGxpYnJhcnlNaXNtYXRjaCkge1xyXG4gICAgICAgICAgICAgICAgd2FybmluZy5wdXNoKFwibGlicmFyeSBuYW1lIFxcXCJcIiArIGxpYnJhcnkgKyBcIlxcXCIgY29udGFpbnMgaWxsZWdhbCBjaGFyYWN0ZXJzICh3aGl0ZXNwYWNlIG9yIFxcXCIvXFxcIilcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGxpYnJhcnlNaXNtYXRjaCAmJiB2ZXJzaW9uTWlzbWF0Y2gpIHtcclxuICAgICAgICAgICAgICAgIHdhcm5pbmcucHVzaCgnYW5kJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHZlcnNpb25NaXNtYXRjaCkge1xyXG4gICAgICAgICAgICAgICAgd2FybmluZy5wdXNoKFwidmVyc2lvbiBuYW1lIFxcXCJcIiArIHZlcnNpb24gKyBcIlxcXCIgY29udGFpbnMgaWxsZWdhbCBjaGFyYWN0ZXJzICh3aGl0ZXNwYWNlIG9yIFxcXCIvXFxcIilcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbG9nZ2VyLndhcm4od2FybmluZy5qb2luKCcgJykpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlZ2lzdGVyQ29tcG9uZW50KG5ldyBDb21wb25lbnQobGlicmFyeSArIFwiLXZlcnNpb25cIiwgZnVuY3Rpb24gKCkgeyByZXR1cm4gKHsgbGlicmFyeTogbGlicmFyeSwgdmVyc2lvbjogdmVyc2lvbiB9KTsgfSwgXCJWRVJTSU9OXCIgLyogVkVSU0lPTiAqLykpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gb25Mb2cobG9nQ2FsbGJhY2ssIG9wdGlvbnMpIHtcclxuICAgICAgICBpZiAobG9nQ2FsbGJhY2sgIT09IG51bGwgJiYgdHlwZW9mIGxvZ0NhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiaW52YWxpZC1sb2ctYXJndW1lbnRcIiAvKiBJTlZBTElEX0xPR19BUkdVTUVOVCAqLywge1xyXG4gICAgICAgICAgICAgICAgYXBwTmFtZTogbmFtZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2V0VXNlckxvZ0hhbmRsZXIobG9nQ2FsbGJhY2ssIG9wdGlvbnMpO1xyXG4gICAgfVxyXG4gICAgLy8gTWFwIHRoZSByZXF1ZXN0ZWQgc2VydmljZSB0byBhIHJlZ2lzdGVyZWQgc2VydmljZSBuYW1lXHJcbiAgICAvLyAodXNlZCB0byBtYXAgYXV0aCB0byBzZXJ2ZXJBdXRoIHNlcnZpY2Ugd2hlbiBuZWVkZWQpLlxyXG4gICAgZnVuY3Rpb24gdXNlQXNTZXJ2aWNlKGFwcCwgbmFtZSkge1xyXG4gICAgICAgIGlmIChuYW1lID09PSAnc2VydmVyQXV0aCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciB1c2VTZXJ2aWNlID0gbmFtZTtcclxuICAgICAgICByZXR1cm4gdXNlU2VydmljZTtcclxuICAgIH1cclxuICAgIHJldHVybiBuYW1lc3BhY2U7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFJldHVybiBhIGZpcmViYXNlIG5hbWVzcGFjZSBvYmplY3QuXHJcbiAqXHJcbiAqIEluIHByb2R1Y3Rpb24sIHRoaXMgd2lsbCBiZSBjYWxsZWQgZXhhY3RseSBvbmNlIGFuZCB0aGUgcmVzdWx0XHJcbiAqIGFzc2lnbmVkIHRvIHRoZSAnZmlyZWJhc2UnIGdsb2JhbC4gIEl0IG1heSBiZSBjYWxsZWQgbXVsdGlwbGUgdGltZXNcclxuICogaW4gdW5pdCB0ZXN0cy5cclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZUZpcmViYXNlTmFtZXNwYWNlKCkge1xyXG4gICAgdmFyIG5hbWVzcGFjZSA9IGNyZWF0ZUZpcmViYXNlTmFtZXNwYWNlQ29yZShGaXJlYmFzZUFwcEltcGwpO1xyXG4gICAgbmFtZXNwYWNlLklOVEVSTkFMID0gX19hc3NpZ24oX19hc3NpZ24oe30sIG5hbWVzcGFjZS5JTlRFUk5BTCksIHsgY3JlYXRlRmlyZWJhc2VOYW1lc3BhY2U6IGNyZWF0ZUZpcmViYXNlTmFtZXNwYWNlLFxyXG4gICAgICAgIGV4dGVuZE5hbWVzcGFjZTogZXh0ZW5kTmFtZXNwYWNlLFxyXG4gICAgICAgIGNyZWF0ZVN1YnNjcmliZTogY3JlYXRlU3Vic2NyaWJlLFxyXG4gICAgICAgIEVycm9yRmFjdG9yeTogRXJyb3JGYWN0b3J5LFxyXG4gICAgICAgIGRlZXBFeHRlbmQ6IGRlZXBFeHRlbmQgfSk7XHJcbiAgICAvKipcclxuICAgICAqIFBhdGNoIHRoZSB0b3AtbGV2ZWwgZmlyZWJhc2UgbmFtZXNwYWNlIHdpdGggYWRkaXRpb25hbCBwcm9wZXJ0aWVzLlxyXG4gICAgICpcclxuICAgICAqIGZpcmViYXNlLklOVEVSTkFMLmV4dGVuZE5hbWVzcGFjZSgpXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGV4dGVuZE5hbWVzcGFjZShwcm9wcykge1xyXG4gICAgICAgIGRlZXBFeHRlbmQobmFtZXNwYWNlLCBwcm9wcyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmFtZXNwYWNlO1xyXG59XHJcbnZhciBmaXJlYmFzZSA9IGNyZWF0ZUZpcmViYXNlTmFtZXNwYWNlKCk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBQbGF0Zm9ybUxvZ2dlclNlcnZpY2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBQbGF0Zm9ybUxvZ2dlclNlcnZpY2UoY29udGFpbmVyKSB7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XHJcbiAgICB9XHJcbiAgICAvLyBJbiBpbml0aWFsIGltcGxlbWVudGF0aW9uLCB0aGlzIHdpbGwgYmUgY2FsbGVkIGJ5IGluc3RhbGxhdGlvbnMgb25cclxuICAgIC8vIGF1dGggdG9rZW4gcmVmcmVzaCwgYW5kIGluc3RhbGxhdGlvbnMgd2lsbCBzZW5kIHRoaXMgc3RyaW5nLlxyXG4gICAgUGxhdGZvcm1Mb2dnZXJTZXJ2aWNlLnByb3RvdHlwZS5nZXRQbGF0Zm9ybUluZm9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHByb3ZpZGVycyA9IHRoaXMuY29udGFpbmVyLmdldFByb3ZpZGVycygpO1xyXG4gICAgICAgIC8vIExvb3AgdGhyb3VnaCBwcm92aWRlcnMgYW5kIGdldCBsaWJyYXJ5L3ZlcnNpb24gcGFpcnMgZnJvbSBhbnkgdGhhdCBhcmVcclxuICAgICAgICAvLyB2ZXJzaW9uIGNvbXBvbmVudHMuXHJcbiAgICAgICAgcmV0dXJuIHByb3ZpZGVyc1xyXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChwcm92aWRlcikge1xyXG4gICAgICAgICAgICBpZiAoaXNWZXJzaW9uU2VydmljZVByb3ZpZGVyKHByb3ZpZGVyKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNlcnZpY2UgPSBwcm92aWRlci5nZXRJbW1lZGlhdGUoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzZXJ2aWNlLmxpYnJhcnkgKyBcIi9cIiArIHNlcnZpY2UudmVyc2lvbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAobG9nU3RyaW5nKSB7IHJldHVybiBsb2dTdHJpbmc7IH0pXHJcbiAgICAgICAgICAgIC5qb2luKCcgJyk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFBsYXRmb3JtTG9nZ2VyU2VydmljZTtcclxufSgpKTtcclxuLyoqXHJcbiAqXHJcbiAqIEBwYXJhbSBwcm92aWRlciBjaGVjayBpZiB0aGlzIHByb3ZpZGVyIHByb3ZpZGVzIGEgVmVyc2lvblNlcnZpY2VcclxuICpcclxuICogTk9URTogVXNpbmcgUHJvdmlkZXI8J2FwcC12ZXJzaW9uJz4gaXMgYSBoYWNrIHRvIGluZGljYXRlIHRoYXQgdGhlIHByb3ZpZGVyXHJcbiAqIHByb3ZpZGVzIFZlcnNpb25TZXJ2aWNlLiBUaGUgcHJvdmlkZXIgaXMgbm90IG5lY2Vzc2FyaWx5IGEgJ2FwcC12ZXJzaW9uJ1xyXG4gKiBwcm92aWRlci5cclxuICovXHJcbmZ1bmN0aW9uIGlzVmVyc2lvblNlcnZpY2VQcm92aWRlcihwcm92aWRlcikge1xyXG4gICAgdmFyIGNvbXBvbmVudCA9IHByb3ZpZGVyLmdldENvbXBvbmVudCgpO1xyXG4gICAgcmV0dXJuIChjb21wb25lbnQgPT09IG51bGwgfHwgY29tcG9uZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb21wb25lbnQudHlwZSkgPT09IFwiVkVSU0lPTlwiIC8qIFZFUlNJT04gKi87XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gcmVnaXN0ZXJDb3JlQ29tcG9uZW50cyhmaXJlYmFzZSwgdmFyaWFudCkge1xyXG4gICAgZmlyZWJhc2UuSU5URVJOQUwucmVnaXN0ZXJDb21wb25lbnQobmV3IENvbXBvbmVudCgncGxhdGZvcm0tbG9nZ2VyJywgZnVuY3Rpb24gKGNvbnRhaW5lcikgeyByZXR1cm4gbmV3IFBsYXRmb3JtTG9nZ2VyU2VydmljZShjb250YWluZXIpOyB9LCBcIlBSSVZBVEVcIiAvKiBQUklWQVRFICovKSk7XHJcbiAgICAvLyBSZWdpc3RlciBgYXBwYCBwYWNrYWdlLlxyXG4gICAgZmlyZWJhc2UucmVnaXN0ZXJWZXJzaW9uKG5hbWUkMSwgdmVyc2lvbiwgdmFyaWFudCk7XHJcbiAgICAvLyBSZWdpc3RlciBwbGF0Zm9ybSBTREsgaWRlbnRpZmllciAobm8gdmVyc2lvbikuXHJcbiAgICBmaXJlYmFzZS5yZWdpc3RlclZlcnNpb24oJ2ZpcmUtanMnLCAnJyk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLy8gRmlyZWJhc2UgTGl0ZSBkZXRlY3Rpb24gdGVzdFxyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG5pZiAoaXNCcm93c2VyKCkgJiYgc2VsZi5maXJlYmFzZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICBsb2dnZXIud2FybihcIlxcbiAgICBXYXJuaW5nOiBGaXJlYmFzZSBpcyBhbHJlYWR5IGRlZmluZWQgaW4gdGhlIGdsb2JhbCBzY29wZS4gUGxlYXNlIG1ha2Ugc3VyZVxcbiAgICBGaXJlYmFzZSBsaWJyYXJ5IGlzIG9ubHkgbG9hZGVkIG9uY2UuXFxuICBcIik7XHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcclxuICAgIHZhciBzZGtWZXJzaW9uID0gc2VsZi5maXJlYmFzZS5TREtfVkVSU0lPTjtcclxuICAgIGlmIChzZGtWZXJzaW9uICYmIHNka1ZlcnNpb24uaW5kZXhPZignTElURScpID49IDApIHtcclxuICAgICAgICBsb2dnZXIud2FybihcIlxcbiAgICBXYXJuaW5nOiBZb3UgYXJlIHRyeWluZyB0byBsb2FkIEZpcmViYXNlIHdoaWxlIHVzaW5nIEZpcmViYXNlIFBlcmZvcm1hbmNlIHN0YW5kYWxvbmUgc2NyaXB0LlxcbiAgICBZb3Ugc2hvdWxkIGxvYWQgRmlyZWJhc2UgUGVyZm9ybWFuY2Ugd2l0aCB0aGlzIGluc3RhbmNlIG9mIEZpcmViYXNlIHRvIGF2b2lkIGxvYWRpbmcgZHVwbGljYXRlIGNvZGUuXFxuICAgIFwiKTtcclxuICAgIH1cclxufVxyXG52YXIgaW5pdGlhbGl6ZUFwcCA9IGZpcmViYXNlLmluaXRpYWxpemVBcHA7XHJcbi8vIFRPRE86IFRoaXMgZGlzYWJsZSBjYW4gYmUgcmVtb3ZlZCBhbmQgdGhlICdpZ25vcmVSZXN0QXJncycgb3B0aW9uIGFkZGVkIHRvXHJcbi8vIHRoZSBuby1leHBsaWNpdC1hbnkgcnVsZSB3aGVuIEVTbGludCByZWxlYXNlcyBpdC5cclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuZmlyZWJhc2UuaW5pdGlhbGl6ZUFwcCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBhcmdzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIC8vIEVudmlyb25tZW50IGNoZWNrIGJlZm9yZSBpbml0aWFsaXppbmcgYXBwXHJcbiAgICAvLyBEbyB0aGUgY2hlY2sgaW4gaW5pdGlhbGl6ZUFwcCwgc28gcGVvcGxlIGhhdmUgYSBjaGFuY2UgdG8gZGlzYWJsZSBpdCBieSBzZXR0aW5nIGxvZ0xldmVsXHJcbiAgICAvLyBpbiBAZmlyZWJhc2UvbG9nZ2VyXHJcbiAgICBpZiAoaXNOb2RlKCkpIHtcclxuICAgICAgICBsb2dnZXIud2FybihcIlxcbiAgICAgIFdhcm5pbmc6IFRoaXMgaXMgYSBicm93c2VyLXRhcmdldGVkIEZpcmViYXNlIGJ1bmRsZSBidXQgaXQgYXBwZWFycyBpdCBpcyBiZWluZ1xcbiAgICAgIHJ1biBpbiBhIE5vZGUgZW52aXJvbm1lbnQuICBJZiBydW5uaW5nIGluIGEgTm9kZSBlbnZpcm9ubWVudCwgbWFrZSBzdXJlIHlvdVxcbiAgICAgIGFyZSB1c2luZyB0aGUgYnVuZGxlIHNwZWNpZmllZCBieSB0aGUgXFxcIm1haW5cXFwiIGZpZWxkIGluIHBhY2thZ2UuanNvbi5cXG4gICAgICBcXG4gICAgICBJZiB5b3UgYXJlIHVzaW5nIFdlYnBhY2ssIHlvdSBjYW4gc3BlY2lmeSBcXFwibWFpblxcXCIgYXMgdGhlIGZpcnN0IGl0ZW0gaW5cXG4gICAgICBcXFwicmVzb2x2ZS5tYWluRmllbGRzXFxcIjpcXG4gICAgICBodHRwczovL3dlYnBhY2suanMub3JnL2NvbmZpZ3VyYXRpb24vcmVzb2x2ZS8jcmVzb2x2ZW1haW5maWVsZHNcXG4gICAgICBcXG4gICAgICBJZiB1c2luZyBSb2xsdXAsIHVzZSB0aGUgQHJvbGx1cC9wbHVnaW4tbm9kZS1yZXNvbHZlIHBsdWdpbiBhbmQgc3BlY2lmeSBcXFwibWFpblxcXCJcXG4gICAgICBhcyB0aGUgZmlyc3QgaXRlbSBpbiBcXFwibWFpbkZpZWxkc1xcXCIsIGUuZy4gWydtYWluJywgJ21vZHVsZSddLlxcbiAgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9yb2xsdXAvQHJvbGx1cC9wbHVnaW4tbm9kZS1yZXNvbHZlXFxuICAgICAgXCIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGluaXRpYWxpemVBcHAuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcclxufTtcclxudmFyIGZpcmViYXNlJDEgPSBmaXJlYmFzZTtcclxucmVnaXN0ZXJDb3JlQ29tcG9uZW50cyhmaXJlYmFzZSQxKTtcblxuZXhwb3J0IGRlZmF1bHQgZmlyZWJhc2UkMTtcbmV4cG9ydCB7IGZpcmViYXNlJDEgYXMgZmlyZWJhc2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzbS5qcy5tYXBcbiIsImltcG9ydCB7IF9fYXNzaWduLCBfX3ZhbHVlcywgX19yZWFkLCBfX2F3YWl0ZXIsIF9fZ2VuZXJhdG9yLCBfX3NwcmVhZCB9IGZyb20gJ3RzbGliJztcbmltcG9ydCB7IERlZmVycmVkIH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuXG4vKipcclxuICogQ29tcG9uZW50IGZvciBzZXJ2aWNlIG5hbWUgVCwgZS5nLiBgYXV0aGAsIGBhdXRoLWludGVybmFsYFxyXG4gKi9cclxudmFyIENvbXBvbmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBuYW1lIFRoZSBwdWJsaWMgc2VydmljZSBuYW1lLCBlLmcuIGFwcCwgYXV0aCwgZmlyZXN0b3JlLCBkYXRhYmFzZVxyXG4gICAgICogQHBhcmFtIGluc3RhbmNlRmFjdG9yeSBTZXJ2aWNlIGZhY3RvcnkgcmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIHRoZSBwdWJsaWMgaW50ZXJmYWNlXHJcbiAgICAgKiBAcGFyYW0gdHlwZSB3aGV0aGVyIHRoZSBzZXJ2aWNlIHByb3ZpZGVkIGJ5IHRoZSBjb21wb25lbnQgaXMgcHVibGljIG9yIHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gQ29tcG9uZW50KG5hbWUsIGluc3RhbmNlRmFjdG9yeSwgdHlwZSkge1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5pbnN0YW5jZUZhY3RvcnkgPSBpbnN0YW5jZUZhY3Rvcnk7XHJcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcclxuICAgICAgICB0aGlzLm11bHRpcGxlSW5zdGFuY2VzID0gZmFsc2U7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUHJvcGVydGllcyB0byBiZSBhZGRlZCB0byB0aGUgc2VydmljZSBuYW1lc3BhY2VcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnNlcnZpY2VQcm9wcyA9IHt9O1xyXG4gICAgICAgIHRoaXMuaW5zdGFudGlhdGlvbk1vZGUgPSBcIkxBWllcIiAvKiBMQVpZICovO1xyXG4gICAgfVxyXG4gICAgQ29tcG9uZW50LnByb3RvdHlwZS5zZXRJbnN0YW50aWF0aW9uTW9kZSA9IGZ1bmN0aW9uIChtb2RlKSB7XHJcbiAgICAgICAgdGhpcy5pbnN0YW50aWF0aW9uTW9kZSA9IG1vZGU7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgQ29tcG9uZW50LnByb3RvdHlwZS5zZXRNdWx0aXBsZUluc3RhbmNlcyA9IGZ1bmN0aW9uIChtdWx0aXBsZUluc3RhbmNlcykge1xyXG4gICAgICAgIHRoaXMubXVsdGlwbGVJbnN0YW5jZXMgPSBtdWx0aXBsZUluc3RhbmNlcztcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBDb21wb25lbnQucHJvdG90eXBlLnNldFNlcnZpY2VQcm9wcyA9IGZ1bmN0aW9uIChwcm9wcykge1xyXG4gICAgICAgIHRoaXMuc2VydmljZVByb3BzID0gcHJvcHM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIENvbXBvbmVudDtcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIERFRkFVTFRfRU5UUllfTkFNRSA9ICdbREVGQVVMVF0nO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogUHJvdmlkZXIgZm9yIGluc3RhbmNlIGZvciBzZXJ2aWNlIG5hbWUgVCwgZS5nLiAnYXV0aCcsICdhdXRoLWludGVybmFsJ1xyXG4gKiBOYW1lU2VydmljZU1hcHBpbmdbVF0gaXMgYW4gYWxpYXMgZm9yIHRoZSB0eXBlIG9mIHRoZSBpbnN0YW5jZVxyXG4gKi9cclxudmFyIFByb3ZpZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUHJvdmlkZXIobmFtZSwgY29udGFpbmVyKSB7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcclxuICAgICAgICB0aGlzLmNvbXBvbmVudCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5pbnN0YW5jZXMgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgdGhpcy5pbnN0YW5jZXNEZWZlcnJlZCA9IG5ldyBNYXAoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIGlkZW50aWZpZXIgQSBwcm92aWRlciBjYW4gcHJvdmlkZSBtdWxpdHBsZSBpbnN0YW5jZXMgb2YgYSBzZXJ2aWNlXHJcbiAgICAgKiBpZiB0aGlzLmNvbXBvbmVudC5tdWx0aXBsZUluc3RhbmNlcyBpcyB0cnVlLlxyXG4gICAgICovXHJcbiAgICBQcm92aWRlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGlkZW50aWZpZXIpIHtcclxuICAgICAgICBpZiAoaWRlbnRpZmllciA9PT0gdm9pZCAwKSB7IGlkZW50aWZpZXIgPSBERUZBVUxUX0VOVFJZX05BTUU7IH1cclxuICAgICAgICAvLyBpZiBtdWx0aXBsZUluc3RhbmNlcyBpcyBub3Qgc3VwcG9ydGVkLCB1c2UgdGhlIGRlZmF1bHQgbmFtZVxyXG4gICAgICAgIHZhciBub3JtYWxpemVkSWRlbnRpZmllciA9IHRoaXMubm9ybWFsaXplSW5zdGFuY2VJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xyXG4gICAgICAgIGlmICghdGhpcy5pbnN0YW5jZXNEZWZlcnJlZC5oYXMobm9ybWFsaXplZElkZW50aWZpZXIpKSB7XHJcbiAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xyXG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlc0RlZmVycmVkLnNldChub3JtYWxpemVkSWRlbnRpZmllciwgZGVmZXJyZWQpO1xyXG4gICAgICAgICAgICAvLyBJZiB0aGUgc2VydmljZSBpbnN0YW5jZSBpcyBhdmFpbGFibGUsIHJlc29sdmUgdGhlIHByb21pc2Ugd2l0aCBpdCBpbW1lZGlhdGVseVxyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gdGhpcy5nZXRPckluaXRpYWxpemVTZXJ2aWNlKG5vcm1hbGl6ZWRJZGVudGlmaWVyKTtcclxuICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyB3aGVuIHRoZSBpbnN0YW5jZSBmYWN0b3J5IHRocm93cyBhbiBleGNlcHRpb24gZHVyaW5nIGdldCgpLCBpdCBzaG91bGQgbm90IGNhdXNlXHJcbiAgICAgICAgICAgICAgICAvLyBhIGZhdGFsIGVycm9yLiBXZSBqdXN0IHJldHVybiB0aGUgdW5yZXNvbHZlZCBwcm9taXNlIGluIHRoaXMgY2FzZS5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5pbnN0YW5jZXNEZWZlcnJlZC5nZXQobm9ybWFsaXplZElkZW50aWZpZXIpLnByb21pc2U7XHJcbiAgICB9O1xyXG4gICAgUHJvdmlkZXIucHJvdG90eXBlLmdldEltbWVkaWF0ZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIF9hID0gX19hc3NpZ24oeyBpZGVudGlmaWVyOiBERUZBVUxUX0VOVFJZX05BTUUsIG9wdGlvbmFsOiBmYWxzZSB9LCBvcHRpb25zKSwgaWRlbnRpZmllciA9IF9hLmlkZW50aWZpZXIsIG9wdGlvbmFsID0gX2Eub3B0aW9uYWw7XHJcbiAgICAgICAgLy8gaWYgbXVsdGlwbGVJbnN0YW5jZXMgaXMgbm90IHN1cHBvcnRlZCwgdXNlIHRoZSBkZWZhdWx0IG5hbWVcclxuICAgICAgICB2YXIgbm9ybWFsaXplZElkZW50aWZpZXIgPSB0aGlzLm5vcm1hbGl6ZUluc3RhbmNlSWRlbnRpZmllcihpZGVudGlmaWVyKTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLmdldE9ySW5pdGlhbGl6ZVNlcnZpY2Uobm9ybWFsaXplZElkZW50aWZpZXIpO1xyXG4gICAgICAgICAgICBpZiAoIWluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9uYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwiU2VydmljZSBcIiArIHRoaXMubmFtZSArIFwiIGlzIG5vdCBhdmFpbGFibGVcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBpZiAob3B0aW9uYWwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBQcm92aWRlci5wcm90b3R5cGUuZ2V0Q29tcG9uZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudDtcclxuICAgIH07XHJcbiAgICBQcm92aWRlci5wcm90b3R5cGUuc2V0Q29tcG9uZW50ID0gZnVuY3Rpb24gKGNvbXBvbmVudCkge1xyXG4gICAgICAgIHZhciBlXzEsIF9hO1xyXG4gICAgICAgIGlmIChjb21wb25lbnQubmFtZSAhPT0gdGhpcy5uYW1lKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwiTWlzbWF0Y2hpbmcgQ29tcG9uZW50IFwiICsgY29tcG9uZW50Lm5hbWUgKyBcIiBmb3IgUHJvdmlkZXIgXCIgKyB0aGlzLm5hbWUgKyBcIi5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmNvbXBvbmVudCkge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIkNvbXBvbmVudCBmb3IgXCIgKyB0aGlzLm5hbWUgKyBcIiBoYXMgYWxyZWFkeSBiZWVuIHByb3ZpZGVkXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNvbXBvbmVudCA9IGNvbXBvbmVudDtcclxuICAgICAgICAvLyBpZiB0aGUgc2VydmljZSBpcyBlYWdlciwgaW5pdGlhbGl6ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZVxyXG4gICAgICAgIGlmIChpc0NvbXBvbmVudEVhZ2VyKGNvbXBvbmVudCkpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0T3JJbml0aWFsaXplU2VydmljZShERUZBVUxUX0VOVFJZX05BTUUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyB3aGVuIHRoZSBpbnN0YW5jZSBmYWN0b3J5IGZvciBhbiBlYWdlciBDb21wb25lbnQgdGhyb3dzIGFuIGV4Y2VwdGlvbiBkdXJpbmcgdGhlIGVhZ2VyXHJcbiAgICAgICAgICAgICAgICAvLyBpbml0aWFsaXphdGlvbiwgaXQgc2hvdWxkIG5vdCBjYXVzZSBhIGZhdGFsIGVycm9yLlxyXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogSW52ZXN0aWdhdGUgaWYgd2UgbmVlZCB0byBtYWtlIGl0IGNvbmZpZ3VyYWJsZSwgYmVjYXVzZSBzb21lIGNvbXBvbmVudCBtYXkgd2FudCB0byBjYXVzZVxyXG4gICAgICAgICAgICAgICAgLy8gYSBmYXRhbCBlcnJvciBpbiB0aGlzIGNhc2U/XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgLy8gQ3JlYXRlIHNlcnZpY2UgaW5zdGFuY2VzIGZvciB0aGUgcGVuZGluZyBwcm9taXNlcyBhbmQgcmVzb2x2ZSB0aGVtXHJcbiAgICAgICAgICAgIC8vIE5PVEU6IGlmIHRoaXMubXVsdGlwbGVJbnN0YW5jZXMgaXMgZmFsc2UsIG9ubHkgdGhlIGRlZmF1bHQgaW5zdGFuY2Ugd2lsbCBiZSBjcmVhdGVkXHJcbiAgICAgICAgICAgIC8vIGFuZCBhbGwgcHJvbWlzZXMgd2l0aCByZXNvbHZlIHdpdGggaXQgcmVnYXJkbGVzcyBvZiB0aGUgaWRlbnRpZmllci5cclxuICAgICAgICAgICAgZm9yICh2YXIgX2IgPSBfX3ZhbHVlcyh0aGlzLmluc3RhbmNlc0RlZmVycmVkLmVudHJpZXMoKSksIF9jID0gX2IubmV4dCgpOyAhX2MuZG9uZTsgX2MgPSBfYi5uZXh0KCkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBfZCA9IF9fcmVhZChfYy52YWx1ZSwgMiksIGluc3RhbmNlSWRlbnRpZmllciA9IF9kWzBdLCBpbnN0YW5jZURlZmVycmVkID0gX2RbMV07XHJcbiAgICAgICAgICAgICAgICB2YXIgbm9ybWFsaXplZElkZW50aWZpZXIgPSB0aGlzLm5vcm1hbGl6ZUluc3RhbmNlSWRlbnRpZmllcihpbnN0YW5jZUlkZW50aWZpZXIpO1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBgZ2V0T3JJbml0aWFsaXplU2VydmljZSgpYCBzaG91bGQgYWx3YXlzIHJldHVybiBhIHZhbGlkIGluc3RhbmNlIHNpbmNlIGEgY29tcG9uZW50IGlzIGd1YXJhbnRlZWQuIHVzZSAhIHRvIG1ha2UgdHlwZXNjcmlwdCBoYXBweS5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLmdldE9ySW5pdGlhbGl6ZVNlcnZpY2Uobm9ybWFsaXplZElkZW50aWZpZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlRGVmZXJyZWQucmVzb2x2ZShpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHdoZW4gdGhlIGluc3RhbmNlIGZhY3RvcnkgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgaXQgc2hvdWxkIG5vdCBjYXVzZVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGEgZmF0YWwgZXJyb3IuIFdlIGp1c3QgbGVhdmUgdGhlIHByb21pc2UgdW5yZXNvbHZlZC5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxyXG4gICAgICAgIGZpbmFsbHkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgaWYgKF9jICYmICFfYy5kb25lICYmIChfYSA9IF9iLnJldHVybikpIF9hLmNhbGwoX2IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgUHJvdmlkZXIucHJvdG90eXBlLmNsZWFySW5zdGFuY2UgPSBmdW5jdGlvbiAoaWRlbnRpZmllcikge1xyXG4gICAgICAgIGlmIChpZGVudGlmaWVyID09PSB2b2lkIDApIHsgaWRlbnRpZmllciA9IERFRkFVTFRfRU5UUllfTkFNRTsgfVxyXG4gICAgICAgIHRoaXMuaW5zdGFuY2VzRGVmZXJyZWQuZGVsZXRlKGlkZW50aWZpZXIpO1xyXG4gICAgICAgIHRoaXMuaW5zdGFuY2VzLmRlbGV0ZShpZGVudGlmaWVyKTtcclxuICAgIH07XHJcbiAgICAvLyBhcHAuZGVsZXRlKCkgd2lsbCBjYWxsIHRoaXMgbWV0aG9kIG9uIGV2ZXJ5IHByb3ZpZGVyIHRvIGRlbGV0ZSB0aGUgc2VydmljZXNcclxuICAgIC8vIFRPRE86IHNob3VsZCB3ZSBtYXJrIHRoZSBwcm92aWRlciBhcyBkZWxldGVkP1xyXG4gICAgUHJvdmlkZXIucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBzZXJ2aWNlcztcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZXMgPSBBcnJheS5mcm9tKHRoaXMuaW5zdGFuY2VzLnZhbHVlcygpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgUHJvbWlzZS5hbGwoX19zcHJlYWQoc2VydmljZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChzZXJ2aWNlKSB7IHJldHVybiAnSU5URVJOQUwnIGluIHNlcnZpY2U7IH0pIC8vIGxlZ2FjeSBzZXJ2aWNlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoc2VydmljZSkgeyByZXR1cm4gc2VydmljZS5JTlRFUk5BTC5kZWxldGUoKTsgfSksIHNlcnZpY2VzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoc2VydmljZSkgeyByZXR1cm4gJ19kZWxldGUnIGluIHNlcnZpY2U7IH0pIC8vIG1vZHVsYXJpemVkIHNlcnZpY2VzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChzZXJ2aWNlKSB7IHJldHVybiBzZXJ2aWNlLl9kZWxldGUoKTsgfSkpKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgUHJvdmlkZXIucHJvdG90eXBlLmlzQ29tcG9uZW50U2V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudCAhPSBudWxsO1xyXG4gICAgfTtcclxuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5nZXRPckluaXRpYWxpemVTZXJ2aWNlID0gZnVuY3Rpb24gKGlkZW50aWZpZXIpIHtcclxuICAgICAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLmluc3RhbmNlcy5nZXQoaWRlbnRpZmllcik7XHJcbiAgICAgICAgaWYgKCFpbnN0YW5jZSAmJiB0aGlzLmNvbXBvbmVudCkge1xyXG4gICAgICAgICAgICBpbnN0YW5jZSA9IHRoaXMuY29tcG9uZW50Lmluc3RhbmNlRmFjdG9yeSh0aGlzLmNvbnRhaW5lciwgbm9ybWFsaXplSWRlbnRpZmllckZvckZhY3RvcnkoaWRlbnRpZmllcikpO1xyXG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlcy5zZXQoaWRlbnRpZmllciwgaW5zdGFuY2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaW5zdGFuY2UgfHwgbnVsbDtcclxuICAgIH07XHJcbiAgICBQcm92aWRlci5wcm90b3R5cGUubm9ybWFsaXplSW5zdGFuY2VJZGVudGlmaWVyID0gZnVuY3Rpb24gKGlkZW50aWZpZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5jb21wb25lbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50Lm11bHRpcGxlSW5zdGFuY2VzID8gaWRlbnRpZmllciA6IERFRkFVTFRfRU5UUllfTkFNRTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpZGVudGlmaWVyOyAvLyBhc3N1bWUgbXVsdGlwbGUgaW5zdGFuY2VzIGFyZSBzdXBwb3J0ZWQgYmVmb3JlIHRoZSBjb21wb25lbnQgaXMgcHJvdmlkZWQuXHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBQcm92aWRlcjtcclxufSgpKTtcclxuLy8gdW5kZWZpbmVkIHNob3VsZCBiZSBwYXNzZWQgdG8gdGhlIHNlcnZpY2UgZmFjdG9yeSBmb3IgdGhlIGRlZmF1bHQgaW5zdGFuY2VcclxuZnVuY3Rpb24gbm9ybWFsaXplSWRlbnRpZmllckZvckZhY3RvcnkoaWRlbnRpZmllcikge1xyXG4gICAgcmV0dXJuIGlkZW50aWZpZXIgPT09IERFRkFVTFRfRU5UUllfTkFNRSA/IHVuZGVmaW5lZCA6IGlkZW50aWZpZXI7XHJcbn1cclxuZnVuY3Rpb24gaXNDb21wb25lbnRFYWdlcihjb21wb25lbnQpIHtcclxuICAgIHJldHVybiBjb21wb25lbnQuaW5zdGFudGlhdGlvbk1vZGUgPT09IFwiRUFHRVJcIiAvKiBFQUdFUiAqLztcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQ29tcG9uZW50Q29udGFpbmVyIHRoYXQgcHJvdmlkZXMgUHJvdmlkZXJzIGZvciBzZXJ2aWNlIG5hbWUgVCwgZS5nLiBgYXV0aGAsIGBhdXRoLWludGVybmFsYFxyXG4gKi9cclxudmFyIENvbXBvbmVudENvbnRhaW5lciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIENvbXBvbmVudENvbnRhaW5lcihuYW1lKSB7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLnByb3ZpZGVycyA9IG5ldyBNYXAoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBjb21wb25lbnQgQ29tcG9uZW50IGJlaW5nIGFkZGVkXHJcbiAgICAgKiBAcGFyYW0gb3ZlcndyaXRlIFdoZW4gYSBjb21wb25lbnQgd2l0aCB0aGUgc2FtZSBuYW1lIGhhcyBhbHJlYWR5IGJlZW4gcmVnaXN0ZXJlZCxcclxuICAgICAqIGlmIG92ZXJ3cml0ZSBpcyB0cnVlOiBvdmVyd3JpdGUgdGhlIGV4aXN0aW5nIGNvbXBvbmVudCB3aXRoIHRoZSBuZXcgY29tcG9uZW50IGFuZCBjcmVhdGUgYSBuZXdcclxuICAgICAqIHByb3ZpZGVyIHdpdGggdGhlIG5ldyBjb21wb25lbnQuIEl0IGNhbiBiZSB1c2VmdWwgaW4gdGVzdHMgd2hlcmUgeW91IHdhbnQgdG8gdXNlIGRpZmZlcmVudCBtb2Nrc1xyXG4gICAgICogZm9yIGRpZmZlcmVudCB0ZXN0cy5cclxuICAgICAqIGlmIG92ZXJ3cml0ZSBpcyBmYWxzZTogdGhyb3cgYW4gZXhjZXB0aW9uXHJcbiAgICAgKi9cclxuICAgIENvbXBvbmVudENvbnRhaW5lci5wcm90b3R5cGUuYWRkQ29tcG9uZW50ID0gZnVuY3Rpb24gKGNvbXBvbmVudCkge1xyXG4gICAgICAgIHZhciBwcm92aWRlciA9IHRoaXMuZ2V0UHJvdmlkZXIoY29tcG9uZW50Lm5hbWUpO1xyXG4gICAgICAgIGlmIChwcm92aWRlci5pc0NvbXBvbmVudFNldCgpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvbXBvbmVudCBcIiArIGNvbXBvbmVudC5uYW1lICsgXCIgaGFzIGFscmVhZHkgYmVlbiByZWdpc3RlcmVkIHdpdGggXCIgKyB0aGlzLm5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwcm92aWRlci5zZXRDb21wb25lbnQoY29tcG9uZW50KTtcclxuICAgIH07XHJcbiAgICBDb21wb25lbnRDb250YWluZXIucHJvdG90eXBlLmFkZE9yT3ZlcndyaXRlQ29tcG9uZW50ID0gZnVuY3Rpb24gKGNvbXBvbmVudCkge1xyXG4gICAgICAgIHZhciBwcm92aWRlciA9IHRoaXMuZ2V0UHJvdmlkZXIoY29tcG9uZW50Lm5hbWUpO1xyXG4gICAgICAgIGlmIChwcm92aWRlci5pc0NvbXBvbmVudFNldCgpKSB7XHJcbiAgICAgICAgICAgIC8vIGRlbGV0ZSB0aGUgZXhpc3RpbmcgcHJvdmlkZXIgZnJvbSB0aGUgY29udGFpbmVyLCBzbyB3ZSBjYW4gcmVnaXN0ZXIgdGhlIG5ldyBjb21wb25lbnRcclxuICAgICAgICAgICAgdGhpcy5wcm92aWRlcnMuZGVsZXRlKGNvbXBvbmVudC5uYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5hZGRDb21wb25lbnQoY29tcG9uZW50KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIGdldFByb3ZpZGVyIHByb3ZpZGVzIGEgdHlwZSBzYWZlIGludGVyZmFjZSB3aGVyZSBpdCBjYW4gb25seSBiZSBjYWxsZWQgd2l0aCBhIGZpZWxkIG5hbWVcclxuICAgICAqIHByZXNlbnQgaW4gTmFtZVNlcnZpY2VNYXBwaW5nIGludGVyZmFjZS5cclxuICAgICAqXHJcbiAgICAgKiBGaXJlYmFzZSBTREtzIHByb3ZpZGluZyBzZXJ2aWNlcyBzaG91bGQgZXh0ZW5kIE5hbWVTZXJ2aWNlTWFwcGluZyBpbnRlcmZhY2UgdG8gcmVnaXN0ZXJcclxuICAgICAqIHRoZW1zZWx2ZXMuXHJcbiAgICAgKi9cclxuICAgIENvbXBvbmVudENvbnRhaW5lci5wcm90b3R5cGUuZ2V0UHJvdmlkZXIgPSBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgIGlmICh0aGlzLnByb3ZpZGVycy5oYXMobmFtZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvdmlkZXJzLmdldChuYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY3JlYXRlIGEgUHJvdmlkZXIgZm9yIGEgc2VydmljZSB0aGF0IGhhc24ndCByZWdpc3RlcmVkIHdpdGggRmlyZWJhc2VcclxuICAgICAgICB2YXIgcHJvdmlkZXIgPSBuZXcgUHJvdmlkZXIobmFtZSwgdGhpcyk7XHJcbiAgICAgICAgdGhpcy5wcm92aWRlcnMuc2V0KG5hbWUsIHByb3ZpZGVyKTtcclxuICAgICAgICByZXR1cm4gcHJvdmlkZXI7XHJcbiAgICB9O1xyXG4gICAgQ29tcG9uZW50Q29udGFpbmVyLnByb3RvdHlwZS5nZXRQcm92aWRlcnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5wcm92aWRlcnMudmFsdWVzKCkpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBDb21wb25lbnRDb250YWluZXI7XHJcbn0oKSk7XG5cbmV4cG9ydCB7IENvbXBvbmVudCwgQ29tcG9uZW50Q29udGFpbmVyLCBQcm92aWRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXNtLmpzLm1hcFxuIiwiaW1wb3J0IGZpcmViYXNlIGZyb20gJ0BmaXJlYmFzZS9hcHAnO1xuaW1wb3J0IHsgX19zcHJlYWQsIF9fdmFsdWVzLCBfX2V4dGVuZHMsIF9fYXNzaWduLCBfX3JlYWQsIF9fYXdhaXRlciwgX19nZW5lcmF0b3IgfSBmcm9tICd0c2xpYic7XG5pbXBvcnQgeyBzdHJpbmdpZnksIGpzb25FdmFsLCBjb250YWlucywgYXNzZXJ0LCBiYXNlNjQsIHN0cmluZ1RvQnl0ZUFycmF5LCBTaGExLCBpc05vZGVTZGssIHN0cmluZ0xlbmd0aCwgZXJyb3JQcmVmaXgsIHZhbGlkYXRlQXJnQ291bnQsIHZhbGlkYXRlQ2FsbGJhY2ssIERlZmVycmVkLCBhc3NlcnRpb25FcnJvciwgc2FmZUdldCwgbWFwLCB2YWxpZGF0ZUNvbnRleHRPYmplY3QsIGRlZXBDb3B5LCBpc01vYmlsZUNvcmRvdmEsIGJhc2U2NEVuY29kZSwgaXNBZG1pbiwgaXNWYWxpZEZvcm1hdCwgaXNFbXB0eSwgaXNSZWFjdE5hdGl2ZSwgcXVlcnlzdHJpbmcgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5pbXBvcnQgeyBMb2dnZXIsIExvZ0xldmVsIH0gZnJvbSAnQGZpcmViYXNlL2xvZ2dlcic7XG5pbXBvcnQgeyBQcm92aWRlciwgQ29tcG9uZW50Q29udGFpbmVyLCBDb21wb25lbnQgfSBmcm9tICdAZmlyZWJhc2UvY29tcG9uZW50JztcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFdyYXBzIGEgRE9NIFN0b3JhZ2Ugb2JqZWN0IGFuZDpcclxuICogLSBhdXRvbWF0aWNhbGx5IGVuY29kZSBvYmplY3RzIGFzIEpTT04gc3RyaW5ncyBiZWZvcmUgc3RvcmluZyB0aGVtIHRvIGFsbG93IHVzIHRvIHN0b3JlIGFyYml0cmFyeSB0eXBlcy5cclxuICogLSBwcmVmaXhlcyBuYW1lcyB3aXRoIFwiZmlyZWJhc2U6XCIgdG8gYXZvaWQgY29sbGlzaW9ucyB3aXRoIGFwcCBkYXRhLlxyXG4gKlxyXG4gKiBXZSBhdXRvbWF0aWNhbGx5IChzZWUgc3RvcmFnZS5qcykgY3JlYXRlIHR3byBzdWNoIHdyYXBwZXJzLCBvbmUgZm9yIHNlc3Npb25TdG9yYWdlLFxyXG4gKiBhbmQgb25lIGZvciBsb2NhbFN0b3JhZ2UuXHJcbiAqXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxudmFyIERPTVN0b3JhZ2VXcmFwcGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge1N0b3JhZ2V9IGRvbVN0b3JhZ2VfIFRoZSB1bmRlcmx5aW5nIHN0b3JhZ2Ugb2JqZWN0IChlLmcuIGxvY2FsU3RvcmFnZSBvciBzZXNzaW9uU3RvcmFnZSlcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gRE9NU3RvcmFnZVdyYXBwZXIoZG9tU3RvcmFnZV8pIHtcclxuICAgICAgICB0aGlzLmRvbVN0b3JhZ2VfID0gZG9tU3RvcmFnZV87XHJcbiAgICAgICAgLy8gVXNlIGEgcHJlZml4IHRvIGF2b2lkIGNvbGxpc2lvbnMgd2l0aCBvdGhlciBzdHVmZiBzYXZlZCBieSB0aGUgYXBwLlxyXG4gICAgICAgIHRoaXMucHJlZml4XyA9ICdmaXJlYmFzZTonO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgdG8gc2F2ZSB0aGUgdmFsdWUgdW5kZXJcclxuICAgICAqIEBwYXJhbSB7P09iamVjdH0gdmFsdWUgVGhlIHZhbHVlIGJlaW5nIHN0b3JlZCwgb3IgbnVsbCB0byByZW1vdmUgdGhlIGtleS5cclxuICAgICAqL1xyXG4gICAgRE9NU3RvcmFnZVdyYXBwZXIucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5kb21TdG9yYWdlXy5yZW1vdmVJdGVtKHRoaXMucHJlZml4ZWROYW1lXyhrZXkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuZG9tU3RvcmFnZV8uc2V0SXRlbSh0aGlzLnByZWZpeGVkTmFtZV8oa2V5KSwgc3RyaW5naWZ5KHZhbHVlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxyXG4gICAgICogQHJldHVybiB7Kn0gVGhlIHZhbHVlIHRoYXQgd2FzIHN0b3JlZCB1bmRlciB0aGlzIGtleSwgb3IgbnVsbFxyXG4gICAgICovXHJcbiAgICBET01TdG9yYWdlV3JhcHBlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIHZhciBzdG9yZWRWYWwgPSB0aGlzLmRvbVN0b3JhZ2VfLmdldEl0ZW0odGhpcy5wcmVmaXhlZE5hbWVfKGtleSkpO1xyXG4gICAgICAgIGlmIChzdG9yZWRWYWwgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBqc29uRXZhbChzdG9yZWRWYWwpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcclxuICAgICAqL1xyXG4gICAgRE9NU3RvcmFnZVdyYXBwZXIucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICB0aGlzLmRvbVN0b3JhZ2VfLnJlbW92ZUl0ZW0odGhpcy5wcmVmaXhlZE5hbWVfKGtleSkpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcclxuICAgICAqIEByZXR1cm4ge3N0cmluZ31cclxuICAgICAqL1xyXG4gICAgRE9NU3RvcmFnZVdyYXBwZXIucHJvdG90eXBlLnByZWZpeGVkTmFtZV8gPSBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnByZWZpeF8gKyBuYW1lO1xyXG4gICAgfTtcclxuICAgIERPTVN0b3JhZ2VXcmFwcGVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kb21TdG9yYWdlXy50b1N0cmluZygpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBET01TdG9yYWdlV3JhcHBlcjtcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEFuIGluLW1lbW9yeSBzdG9yYWdlIGltcGxlbWVudGF0aW9uIHRoYXQgbWF0Y2hlcyB0aGUgQVBJIG9mIERPTVN0b3JhZ2VXcmFwcGVyXHJcbiAqIChUT0RPOiBjcmVhdGUgaW50ZXJmYWNlIGZvciBib3RoIHRvIGltcGxlbWVudCkuXHJcbiAqXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxudmFyIE1lbW9yeVN0b3JhZ2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBNZW1vcnlTdG9yYWdlKCkge1xyXG4gICAgICAgIHRoaXMuY2FjaGVfID0ge307XHJcbiAgICAgICAgdGhpcy5pc0luTWVtb3J5U3RvcmFnZSA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBNZW1vcnlTdG9yYWdlLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmNhY2hlX1trZXldO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jYWNoZV9ba2V5XSA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBNZW1vcnlTdG9yYWdlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgaWYgKGNvbnRhaW5zKHRoaXMuY2FjaGVfLCBrZXkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNhY2hlX1trZXldO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH07XHJcbiAgICBNZW1vcnlTdG9yYWdlLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgZGVsZXRlIHRoaXMuY2FjaGVfW2tleV07XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE1lbW9yeVN0b3JhZ2U7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBIZWxwZXIgdG8gY3JlYXRlIGEgRE9NU3RvcmFnZVdyYXBwZXIgb3IgZWxzZSBmYWxsIGJhY2sgdG8gTWVtb3J5U3RvcmFnZS5cclxuICogVE9ETzogT25jZSBNZW1vcnlTdG9yYWdlIGFuZCBET01TdG9yYWdlV3JhcHBlciBoYXZlIGEgc2hhcmVkIGludGVyZmFjZSB0aGlzIG1ldGhvZCBhbm5vdGF0aW9uIHNob3VsZCBjaGFuZ2VcclxuICogdG8gcmVmbGVjdCB0aGlzIHR5cGVcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IGRvbVN0b3JhZ2VOYW1lIE5hbWUgb2YgdGhlIHVuZGVybHlpbmcgc3RvcmFnZSBvYmplY3RcclxuICogICAoZS5nLiAnbG9jYWxTdG9yYWdlJyBvciAnc2Vzc2lvblN0b3JhZ2UnKS5cclxuICogQHJldHVybiB7P30gVHVybmluZyBvZmYgdHlwZSBpbmZvcm1hdGlvbiB1bnRpbCBhIGNvbW1vbiBpbnRlcmZhY2UgaXMgZGVmaW5lZC5cclxuICovXHJcbnZhciBjcmVhdGVTdG9yYWdlZm9yID0gZnVuY3Rpb24gKGRvbVN0b3JhZ2VOYW1lKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIC8vIE5PVEU6IGp1c3QgYWNjZXNzaW5nIFwibG9jYWxTdG9yYWdlXCIgb3IgXCJ3aW5kb3dbJ2xvY2FsU3RvcmFnZSddXCIgbWF5IHRocm93IGEgc2VjdXJpdHkgZXhjZXB0aW9uLFxyXG4gICAgICAgIC8vIHNvIGl0IG11c3QgYmUgaW5zaWRlIHRoZSB0cnkvY2F0Y2guXHJcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXHJcbiAgICAgICAgICAgIHR5cGVvZiB3aW5kb3dbZG9tU3RvcmFnZU5hbWVdICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAvLyBOZWVkIHRvIHRlc3QgY2FjaGUuIEp1c3QgYmVjYXVzZSBpdCdzIGhlcmUgZG9lc24ndCBtZWFuIGl0IHdvcmtzXHJcbiAgICAgICAgICAgIHZhciBkb21TdG9yYWdlID0gd2luZG93W2RvbVN0b3JhZ2VOYW1lXTtcclxuICAgICAgICAgICAgZG9tU3RvcmFnZS5zZXRJdGVtKCdmaXJlYmFzZTpzZW50aW5lbCcsICdjYWNoZScpO1xyXG4gICAgICAgICAgICBkb21TdG9yYWdlLnJlbW92ZUl0ZW0oJ2ZpcmViYXNlOnNlbnRpbmVsJyk7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgRE9NU3RvcmFnZVdyYXBwZXIoZG9tU3RvcmFnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHsgfVxyXG4gICAgLy8gRmFpbGVkIHRvIGNyZWF0ZSB3cmFwcGVyLiAgSnVzdCByZXR1cm4gaW4tbWVtb3J5IHN0b3JhZ2UuXHJcbiAgICAvLyBUT0RPOiBsb2c/XHJcbiAgICByZXR1cm4gbmV3IE1lbW9yeVN0b3JhZ2UoKTtcclxufTtcclxuLyoqIEEgc3RvcmFnZSBvYmplY3QgdGhhdCBsYXN0cyBhY3Jvc3Mgc2Vzc2lvbnMgKi9cclxudmFyIFBlcnNpc3RlbnRTdG9yYWdlID0gY3JlYXRlU3RvcmFnZWZvcignbG9jYWxTdG9yYWdlJyk7XHJcbi8qKiBBIHN0b3JhZ2Ugb2JqZWN0IHRoYXQgb25seSBsYXN0cyBvbmUgc2Vzc2lvbiAqL1xyXG52YXIgU2Vzc2lvblN0b3JhZ2UgPSBjcmVhdGVTdG9yYWdlZm9yKCdzZXNzaW9uU3RvcmFnZScpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgbG9nQ2xpZW50ID0gbmV3IExvZ2dlcignQGZpcmViYXNlL2RhdGFiYXNlJyk7XHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgbG9jYWxseS11bmlxdWUgSUQgKGdlbmVyYXRlZCBieSBqdXN0IGluY3JlbWVudGluZyB1cCBmcm9tIDAgZWFjaCB0aW1lIGl0cyBjYWxsZWQpLlxyXG4gKiBAdHlwZSB7ZnVuY3Rpb24oKTogbnVtYmVyfSBHZW5lcmF0ZWQgSUQuXHJcbiAqL1xyXG52YXIgTFVJREdlbmVyYXRvciA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgaWQgPSAxO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gaWQrKztcclxuICAgIH07XHJcbn0pKCk7XHJcbi8qKlxyXG4gKiBTaGExIGhhc2ggb2YgdGhlIGlucHV0IHN0cmluZ1xyXG4gKiBAcGFyYW0geyFzdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIGhhc2hcclxuICogQHJldHVybiB7IXN0cmluZ30gVGhlIHJlc3VsdGluZyBoYXNoXHJcbiAqL1xyXG52YXIgc2hhMSA9IGZ1bmN0aW9uIChzdHIpIHtcclxuICAgIHZhciB1dGY4Qnl0ZXMgPSBzdHJpbmdUb0J5dGVBcnJheShzdHIpO1xyXG4gICAgdmFyIHNoYTEgPSBuZXcgU2hhMSgpO1xyXG4gICAgc2hhMS51cGRhdGUodXRmOEJ5dGVzKTtcclxuICAgIHZhciBzaGExQnl0ZXMgPSBzaGExLmRpZ2VzdCgpO1xyXG4gICAgcmV0dXJuIGJhc2U2NC5lbmNvZGVCeXRlQXJyYXkoc2hhMUJ5dGVzKTtcclxufTtcclxuLyoqXHJcbiAqIEBwYXJhbSB7Li4uKn0gdmFyQXJnc1xyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG52YXIgYnVpbGRMb2dNZXNzYWdlXyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciB2YXJBcmdzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHZhckFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIHZhciBtZXNzYWdlID0gJyc7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhckFyZ3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2YXIgYXJnID0gdmFyQXJnc1tpXTtcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhcmcpIHx8XHJcbiAgICAgICAgICAgIChhcmcgJiZcclxuICAgICAgICAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmXHJcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG4gICAgICAgICAgICAgICAgdHlwZW9mIGFyZy5sZW5ndGggPT09ICdudW1iZXInKSkge1xyXG4gICAgICAgICAgICBtZXNzYWdlICs9IGJ1aWxkTG9nTWVzc2FnZV8uYXBwbHkobnVsbCwgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGFyZyA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgbWVzc2FnZSArPSBzdHJpbmdpZnkoYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG1lc3NhZ2UgKz0gYXJnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBtZXNzYWdlICs9ICcgJztcclxuICAgIH1cclxuICAgIHJldHVybiBtZXNzYWdlO1xyXG59O1xyXG4vKipcclxuICogVXNlIHRoaXMgZm9yIGFsbCBkZWJ1ZyBtZXNzYWdlcyBpbiBGaXJlYmFzZS5cclxuICogQHR5cGUgez9mdW5jdGlvbihzdHJpbmcpfVxyXG4gKi9cclxudmFyIGxvZ2dlciA9IG51bGw7XHJcbi8qKlxyXG4gKiBGbGFnIHRvIGNoZWNrIGZvciBsb2cgYXZhaWxhYmlsaXR5IG9uIGZpcnN0IGxvZyBtZXNzYWdlXHJcbiAqIEB0eXBlIHtib29sZWFufVxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxudmFyIGZpcnN0TG9nXyA9IHRydWU7XHJcbi8qKlxyXG4gKiBUaGUgaW1wbGVtZW50YXRpb24gb2YgRmlyZWJhc2UuZW5hYmxlTG9nZ2luZyAoZGVmaW5lZCBoZXJlIHRvIGJyZWFrIGRlcGVuZGVuY2llcylcclxuICogQHBhcmFtIHtib29sZWFufD9mdW5jdGlvbihzdHJpbmcpfSBsb2dnZXJfIEEgZmxhZyB0byB0dXJuIG9uIGxvZ2dpbmcsIG9yIGEgY3VzdG9tIGxvZ2dlclxyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBwZXJzaXN0ZW50IFdoZXRoZXIgb3Igbm90IHRvIHBlcnNpc3QgbG9nZ2luZyBzZXR0aW5ncyBhY3Jvc3MgcmVmcmVzaGVzXHJcbiAqL1xyXG52YXIgZW5hYmxlTG9nZ2luZyA9IGZ1bmN0aW9uIChsb2dnZXJfLCBwZXJzaXN0ZW50KSB7XHJcbiAgICBhc3NlcnQoIXBlcnNpc3RlbnQgfHwgbG9nZ2VyXyA9PT0gdHJ1ZSB8fCBsb2dnZXJfID09PSBmYWxzZSwgXCJDYW4ndCB0dXJuIG9uIGN1c3RvbSBsb2dnZXJzIHBlcnNpc3RlbnRseS5cIik7XHJcbiAgICBpZiAobG9nZ2VyXyA9PT0gdHJ1ZSkge1xyXG4gICAgICAgIGxvZ0NsaWVudC5sb2dMZXZlbCA9IExvZ0xldmVsLlZFUkJPU0U7XHJcbiAgICAgICAgbG9nZ2VyID0gbG9nQ2xpZW50LmxvZy5iaW5kKGxvZ0NsaWVudCk7XHJcbiAgICAgICAgaWYgKHBlcnNpc3RlbnQpIHtcclxuICAgICAgICAgICAgU2Vzc2lvblN0b3JhZ2Uuc2V0KCdsb2dnaW5nX2VuYWJsZWQnLCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0eXBlb2YgbG9nZ2VyXyA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIGxvZ2dlciA9IGxvZ2dlcl87XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBsb2dnZXIgPSBudWxsO1xyXG4gICAgICAgIFNlc3Npb25TdG9yYWdlLnJlbW92ZSgnbG9nZ2luZ19lbmFibGVkJyk7XHJcbiAgICB9XHJcbn07XHJcbi8qKlxyXG4gKlxyXG4gKiBAcGFyYW0gey4uLihzdHJpbmd8QXJndW1lbnRzKX0gdmFyQXJnc1xyXG4gKi9cclxudmFyIGxvZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciB2YXJBcmdzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHZhckFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIGlmIChmaXJzdExvZ18gPT09IHRydWUpIHtcclxuICAgICAgICBmaXJzdExvZ18gPSBmYWxzZTtcclxuICAgICAgICBpZiAobG9nZ2VyID09PSBudWxsICYmIFNlc3Npb25TdG9yYWdlLmdldCgnbG9nZ2luZ19lbmFibGVkJykgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgZW5hYmxlTG9nZ2luZyh0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAobG9nZ2VyKSB7XHJcbiAgICAgICAgdmFyIG1lc3NhZ2UgPSBidWlsZExvZ01lc3NhZ2VfLmFwcGx5KG51bGwsIHZhckFyZ3MpO1xyXG4gICAgICAgIGxvZ2dlcihtZXNzYWdlKTtcclxuICAgIH1cclxufTtcclxuLyoqXHJcbiAqIEBwYXJhbSB7IXN0cmluZ30gcHJlZml4XHJcbiAqIEByZXR1cm4ge2Z1bmN0aW9uKC4uLlsqXSl9XHJcbiAqL1xyXG52YXIgbG9nV3JhcHBlciA9IGZ1bmN0aW9uIChwcmVmaXgpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHZhckFyZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXJBcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxvZy5hcHBseSh2b2lkIDAsIF9fc3ByZWFkKFtwcmVmaXhdLCB2YXJBcmdzKSk7XHJcbiAgICB9O1xyXG59O1xyXG4vKipcclxuICogQHBhcmFtIHsuLi5zdHJpbmd9IHZhckFyZ3NcclxuICovXHJcbnZhciBlcnJvciA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciB2YXJBcmdzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHZhckFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIHZhciBtZXNzYWdlID0gJ0ZJUkVCQVNFIElOVEVSTkFMIEVSUk9SOiAnICsgYnVpbGRMb2dNZXNzYWdlXy5hcHBseSh2b2lkIDAsIF9fc3ByZWFkKHZhckFyZ3MpKTtcclxuICAgIGxvZ0NsaWVudC5lcnJvcihtZXNzYWdlKTtcclxufTtcclxuLyoqXHJcbiAqIEBwYXJhbSB7Li4uc3RyaW5nfSB2YXJBcmdzXHJcbiAqL1xyXG52YXIgZmF0YWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgdmFyQXJncyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICB2YXJBcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICB2YXIgbWVzc2FnZSA9IFwiRklSRUJBU0UgRkFUQUwgRVJST1I6IFwiICsgYnVpbGRMb2dNZXNzYWdlXy5hcHBseSh2b2lkIDAsIF9fc3ByZWFkKHZhckFyZ3MpKTtcclxuICAgIGxvZ0NsaWVudC5lcnJvcihtZXNzYWdlKTtcclxuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcclxufTtcclxuLyoqXHJcbiAqIEBwYXJhbSB7Li4uKn0gdmFyQXJnc1xyXG4gKi9cclxudmFyIHdhcm4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgdmFyQXJncyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICB2YXJBcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICB2YXIgbWVzc2FnZSA9ICdGSVJFQkFTRSBXQVJOSU5HOiAnICsgYnVpbGRMb2dNZXNzYWdlXy5hcHBseSh2b2lkIDAsIF9fc3ByZWFkKHZhckFyZ3MpKTtcclxuICAgIGxvZ0NsaWVudC53YXJuKG1lc3NhZ2UpO1xyXG59O1xyXG4vKipcclxuICogTG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbnRhaW5pbmcgcGFnZSB1c2VzIGh0dHBzLiBDYWxsZWQgd2hlbiBhIGNhbGwgdG8gbmV3IEZpcmViYXNlXHJcbiAqIGRvZXMgbm90IHVzZSBodHRwcy5cclxuICovXHJcbnZhciB3YXJuSWZQYWdlSXNTZWN1cmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyBCZSB2ZXJ5IGNhcmVmdWwgYWNjZXNzaW5nIGJyb3dzZXIgZ2xvYmFscy4gV2hvIGtub3dzIHdoYXQgbWF5IG9yIG1heSBub3QgZXhpc3QuXHJcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcclxuICAgICAgICB3aW5kb3cubG9jYXRpb24gJiZcclxuICAgICAgICB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgJiZcclxuICAgICAgICB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wuaW5kZXhPZignaHR0cHM6JykgIT09IC0xKSB7XHJcbiAgICAgICAgd2FybignSW5zZWN1cmUgRmlyZWJhc2UgYWNjZXNzIGZyb20gYSBzZWN1cmUgcGFnZS4gJyArXHJcbiAgICAgICAgICAgICdQbGVhc2UgdXNlIGh0dHBzIGluIGNhbGxzIHRvIG5ldyBGaXJlYmFzZSgpLicpO1xyXG4gICAgfVxyXG59O1xyXG4vKipcclxuICogUmV0dXJucyB0cnVlIGlmIGRhdGEgaXMgTmFOLCBvciArLy0gSW5maW5pdHkuXHJcbiAqIEBwYXJhbSB7Kn0gZGF0YVxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxudmFyIGlzSW52YWxpZEpTT05OdW1iZXIgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgcmV0dXJuICh0eXBlb2YgZGF0YSA9PT0gJ251bWJlcicgJiZcclxuICAgICAgICAoZGF0YSAhPT0gZGF0YSB8fCAvLyBOYU5cclxuICAgICAgICAgICAgZGF0YSA9PT0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZIHx8XHJcbiAgICAgICAgICAgIGRhdGEgPT09IE51bWJlci5ORUdBVElWRV9JTkZJTklUWSkpO1xyXG59O1xyXG4vKipcclxuICogQHBhcmFtIHtmdW5jdGlvbigpfSBmblxyXG4gKi9cclxudmFyIGV4ZWN1dGVXaGVuRE9NUmVhZHkgPSBmdW5jdGlvbiAoZm4pIHtcclxuICAgIGlmIChpc05vZGVTZGsoKSB8fCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XHJcbiAgICAgICAgZm4oKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIE1vZGVsZWQgYWZ0ZXIgalF1ZXJ5LiBUcnkgRE9NQ29udGVudExvYWRlZCBhbmQgb25yZWFkeXN0YXRlY2hhbmdlICh3aGljaFxyXG4gICAgICAgIC8vIGZpcmUgYmVmb3JlIG9ubG9hZCksIGJ1dCBmYWxsIGJhY2sgdG8gb25sb2FkLlxyXG4gICAgICAgIHZhciBjYWxsZWRfMSA9IGZhbHNlO1xyXG4gICAgICAgIHZhciB3cmFwcGVkRm5fMSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCFkb2N1bWVudC5ib2R5KSB7XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KHdyYXBwZWRGbl8xLCBNYXRoLmZsb29yKDEwKSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFjYWxsZWRfMSkge1xyXG4gICAgICAgICAgICAgICAgY2FsbGVkXzEgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgZm4oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIpIHtcclxuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIHdyYXBwZWRGbl8xLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIC8vIGZhbGxiYWNrIHRvIG9ubG9hZC5cclxuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCB3cmFwcGVkRm5fMSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChkb2N1bWVudC5hdHRhY2hFdmVudCkge1xyXG4gICAgICAgICAgICAvLyBJRS5cclxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgICAgICAgICAgZG9jdW1lbnQuYXR0YWNoRXZlbnQoJ29ucmVhZHlzdGF0ZWNoYW5nZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd3JhcHBlZEZuXzEoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vIGZhbGxiYWNrIHRvIG9ubG9hZC5cclxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgICAgICAgICAgd2luZG93LmF0dGFjaEV2ZW50KCdvbmxvYWQnLCB3cmFwcGVkRm5fMSk7XHJcbiAgICAgICAgICAgIC8vIGpRdWVyeSBoYXMgYW4gZXh0cmEgaGFjayBmb3IgSUUgdGhhdCB3ZSBjb3VsZCBlbXBsb3kgKGJhc2VkIG9uXHJcbiAgICAgICAgICAgIC8vIGh0dHA6Ly9qYXZhc2NyaXB0Lm53Ym94LmNvbS9JRUNvbnRlbnRMb2FkZWQvKSBCdXQgaXQgbG9va3MgcmVhbGx5IG9sZC5cclxuICAgICAgICAgICAgLy8gSSdtIGhvcGluZyB3ZSBkb24ndCBuZWVkIGl0LlxyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuLyoqXHJcbiAqIE1pbmltdW0ga2V5IG5hbWUuIEludmFsaWQgZm9yIGFjdHVhbCBkYXRhLCB1c2VkIGFzIGEgbWFya2VyIHRvIHNvcnQgYmVmb3JlIGFueSB2YWxpZCBuYW1lc1xyXG4gKiBAdHlwZSB7IXN0cmluZ31cclxuICovXHJcbnZhciBNSU5fTkFNRSA9ICdbTUlOX05BTUVdJztcclxuLyoqXHJcbiAqIE1heGltdW0ga2V5IG5hbWUuIEludmFsaWQgZm9yIGFjdHVhbCBkYXRhLCB1c2VkIGFzIGEgbWFya2VyIHRvIHNvcnQgYWJvdmUgYW55IHZhbGlkIG5hbWVzXHJcbiAqIEB0eXBlIHshc3RyaW5nfVxyXG4gKi9cclxudmFyIE1BWF9OQU1FID0gJ1tNQVhfTkFNRV0nO1xyXG4vKipcclxuICogQ29tcGFyZXMgdmFsaWQgRmlyZWJhc2Uga2V5IG5hbWVzLCBwbHVzIG1pbiBhbmQgbWF4IG5hbWVcclxuICogQHBhcmFtIHshc3RyaW5nfSBhXHJcbiAqIEBwYXJhbSB7IXN0cmluZ30gYlxyXG4gKiBAcmV0dXJuIHshbnVtYmVyfVxyXG4gKi9cclxudmFyIG5hbWVDb21wYXJlID0gZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgIGlmIChhID09PSBiKSB7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChhID09PSBNSU5fTkFNRSB8fCBiID09PSBNQVhfTkFNRSkge1xyXG4gICAgICAgIHJldHVybiAtMTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGIgPT09IE1JTl9OQU1FIHx8IGEgPT09IE1BWF9OQU1FKSB7XHJcbiAgICAgICAgcmV0dXJuIDE7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB2YXIgYUFzSW50ID0gdHJ5UGFyc2VJbnQoYSksIGJBc0ludCA9IHRyeVBhcnNlSW50KGIpO1xyXG4gICAgICAgIGlmIChhQXNJbnQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgaWYgKGJBc0ludCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFBc0ludCAtIGJBc0ludCA9PT0gMCA/IGEubGVuZ3RoIC0gYi5sZW5ndGggOiBhQXNJbnQgLSBiQXNJbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYkFzSW50ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGEgPCBiID8gLTEgOiAxO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuLyoqXHJcbiAqIEBwYXJhbSB7IXN0cmluZ30gYVxyXG4gKiBAcGFyYW0geyFzdHJpbmd9IGJcclxuICogQHJldHVybiB7IW51bWJlcn0gY29tcGFyaXNvbiByZXN1bHQuXHJcbiAqL1xyXG52YXIgc3RyaW5nQ29tcGFyZSA9IGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICBpZiAoYSA9PT0gYikge1xyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoYSA8IGIpIHtcclxuICAgICAgICByZXR1cm4gLTE7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gMTtcclxuICAgIH1cclxufTtcclxuLyoqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcclxuICogQHBhcmFtIHtPYmplY3R9IG9ialxyXG4gKiBAcmV0dXJuIHsqfVxyXG4gKi9cclxudmFyIHJlcXVpcmVLZXkgPSBmdW5jdGlvbiAoa2V5LCBvYmopIHtcclxuICAgIGlmIChvYmogJiYga2V5IGluIG9iaikge1xyXG4gICAgICAgIHJldHVybiBvYmpba2V5XTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyByZXF1aXJlZCBrZXkgKCcgKyBrZXkgKyAnKSBpbiBvYmplY3Q6ICcgKyBzdHJpbmdpZnkob2JqKSk7XHJcbiAgICB9XHJcbn07XHJcbi8qKlxyXG4gKiBAcGFyYW0geyp9IG9ialxyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAqL1xyXG52YXIgT2JqZWN0VG9VbmlxdWVLZXkgPSBmdW5jdGlvbiAob2JqKSB7XHJcbiAgICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuIHN0cmluZ2lmeShvYmopO1xyXG4gICAgfVxyXG4gICAgdmFyIGtleXMgPSBbXTtcclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cclxuICAgIGZvciAodmFyIGsgaW4gb2JqKSB7XHJcbiAgICAgICAga2V5cy5wdXNoKGspO1xyXG4gICAgfVxyXG4gICAgLy8gRXhwb3J0IGFzIGpzb24sIGJ1dCB3aXRoIHRoZSBrZXlzIHNvcnRlZC5cclxuICAgIGtleXMuc29ydCgpO1xyXG4gICAgdmFyIGtleSA9ICd7JztcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmIChpICE9PSAwKSB7XHJcbiAgICAgICAgICAgIGtleSArPSAnLCc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGtleSArPSBzdHJpbmdpZnkoa2V5c1tpXSk7XHJcbiAgICAgICAga2V5ICs9ICc6JztcclxuICAgICAgICBrZXkgKz0gT2JqZWN0VG9VbmlxdWVLZXkob2JqW2tleXNbaV1dKTtcclxuICAgIH1cclxuICAgIGtleSArPSAnfSc7XHJcbiAgICByZXR1cm4ga2V5O1xyXG59O1xyXG4vKipcclxuICogU3BsaXRzIGEgc3RyaW5nIGludG8gYSBudW1iZXIgb2Ygc21hbGxlciBzZWdtZW50cyBvZiBtYXhpbXVtIHNpemVcclxuICogQHBhcmFtIHshc3RyaW5nfSBzdHIgVGhlIHN0cmluZ1xyXG4gKiBAcGFyYW0geyFudW1iZXJ9IHNlZ3NpemUgVGhlIG1heGltdW0gbnVtYmVyIG9mIGNoYXJzIGluIHRoZSBzdHJpbmcuXHJcbiAqIEByZXR1cm4ge0FycmF5LjxzdHJpbmc+fSBUaGUgc3RyaW5nLCBzcGxpdCBpbnRvIGFwcHJvcHJpYXRlbHktc2l6ZWQgY2h1bmtzXHJcbiAqL1xyXG52YXIgc3BsaXRTdHJpbmdCeVNpemUgPSBmdW5jdGlvbiAoc3RyLCBzZWdzaXplKSB7XHJcbiAgICB2YXIgbGVuID0gc3RyLmxlbmd0aDtcclxuICAgIGlmIChsZW4gPD0gc2Vnc2l6ZSkge1xyXG4gICAgICAgIHJldHVybiBbc3RyXTtcclxuICAgIH1cclxuICAgIHZhciBkYXRhU2VncyA9IFtdO1xyXG4gICAgZm9yICh2YXIgYyA9IDA7IGMgPCBsZW47IGMgKz0gc2Vnc2l6ZSkge1xyXG4gICAgICAgIGlmIChjICsgc2Vnc2l6ZSA+IGxlbikge1xyXG4gICAgICAgICAgICBkYXRhU2Vncy5wdXNoKHN0ci5zdWJzdHJpbmcoYywgbGVuKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBkYXRhU2Vncy5wdXNoKHN0ci5zdWJzdHJpbmcoYywgYyArIHNlZ3NpemUpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZGF0YVNlZ3M7XHJcbn07XHJcbi8qKlxyXG4gKiBBcHBseSBhIGZ1bmN0aW9uIHRvIGVhY2ggKGtleSwgdmFsdWUpIHBhaXIgaW4gYW4gb2JqZWN0IG9yXHJcbiAqIGFwcGx5IGEgZnVuY3Rpb24gdG8gZWFjaCAoaW5kZXgsIHZhbHVlKSBwYWlyIGluIGFuIGFycmF5XHJcbiAqIEBwYXJhbSBvYmogVGhlIG9iamVjdCBvciBhcnJheSB0byBpdGVyYXRlIG92ZXJcclxuICogQHBhcmFtIGZuIFRoZSBmdW5jdGlvbiB0byBhcHBseVxyXG4gKi9cclxuZnVuY3Rpb24gZWFjaChvYmosIGZuKSB7XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICAgIGZuKGtleSwgb2JqW2tleV0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4vKipcclxuICogQm9ycm93ZWQgZnJvbSBodHRwOi8vaGcuc2Vjb25kbGlmZS5jb20vbGxzZC9zcmMvdGlwL2pzL3R5cGVkYXJyYXkuanMgKE1JVCBMaWNlbnNlKVxyXG4gKiBJIG1hZGUgb25lIG1vZGlmaWNhdGlvbiBhdCB0aGUgZW5kIGFuZCByZW1vdmVkIHRoZSBOYU4gLyBJbmZpbml0eVxyXG4gKiBoYW5kbGluZyAoc2luY2UgaXQgc2VlbWVkIGJyb2tlbiBbY2F1c2VkIGFuIG92ZXJmbG93XSBhbmQgd2UgZG9uJ3QgbmVlZCBpdCkuICBTZWUgTUpMIGNvbW1lbnRzLlxyXG4gKiBAcGFyYW0geyFudW1iZXJ9IHYgQSBkb3VibGVcclxuICogQHJldHVybiB7c3RyaW5nfVxyXG4gKi9cclxudmFyIGRvdWJsZVRvSUVFRTc1NFN0cmluZyA9IGZ1bmN0aW9uICh2KSB7XHJcbiAgICBhc3NlcnQoIWlzSW52YWxpZEpTT05OdW1iZXIodiksICdJbnZhbGlkIEpTT04gbnVtYmVyJyk7IC8vIE1KTFxyXG4gICAgdmFyIGViaXRzID0gMTEsIGZiaXRzID0gNTI7XHJcbiAgICB2YXIgYmlhcyA9ICgxIDw8IChlYml0cyAtIDEpKSAtIDE7XHJcbiAgICB2YXIgcywgZSwgZiwgbG4sIGk7XHJcbiAgICAvLyBDb21wdXRlIHNpZ24sIGV4cG9uZW50LCBmcmFjdGlvblxyXG4gICAgLy8gU2tpcCBOYU4gLyBJbmZpbml0eSBoYW5kbGluZyAtLU1KTC5cclxuICAgIGlmICh2ID09PSAwKSB7XHJcbiAgICAgICAgZSA9IDA7XHJcbiAgICAgICAgZiA9IDA7XHJcbiAgICAgICAgcyA9IDEgLyB2ID09PSAtSW5maW5pdHkgPyAxIDogMDtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHMgPSB2IDwgMDtcclxuICAgICAgICB2ID0gTWF0aC5hYnModik7XHJcbiAgICAgICAgaWYgKHYgPj0gTWF0aC5wb3coMiwgMSAtIGJpYXMpKSB7XHJcbiAgICAgICAgICAgIC8vIE5vcm1hbGl6ZWRcclxuICAgICAgICAgICAgbG4gPSBNYXRoLm1pbihNYXRoLmZsb29yKE1hdGgubG9nKHYpIC8gTWF0aC5MTjIpLCBiaWFzKTtcclxuICAgICAgICAgICAgZSA9IGxuICsgYmlhcztcclxuICAgICAgICAgICAgZiA9IE1hdGgucm91bmQodiAqIE1hdGgucG93KDIsIGZiaXRzIC0gbG4pIC0gTWF0aC5wb3coMiwgZmJpdHMpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIERlbm9ybWFsaXplZFxyXG4gICAgICAgICAgICBlID0gMDtcclxuICAgICAgICAgICAgZiA9IE1hdGgucm91bmQodiAvIE1hdGgucG93KDIsIDEgLSBiaWFzIC0gZmJpdHMpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBQYWNrIHNpZ24sIGV4cG9uZW50LCBmcmFjdGlvblxyXG4gICAgdmFyIGJpdHMgPSBbXTtcclxuICAgIGZvciAoaSA9IGZiaXRzOyBpOyBpIC09IDEpIHtcclxuICAgICAgICBiaXRzLnB1c2goZiAlIDIgPyAxIDogMCk7XHJcbiAgICAgICAgZiA9IE1hdGguZmxvb3IoZiAvIDIpO1xyXG4gICAgfVxyXG4gICAgZm9yIChpID0gZWJpdHM7IGk7IGkgLT0gMSkge1xyXG4gICAgICAgIGJpdHMucHVzaChlICUgMiA/IDEgOiAwKTtcclxuICAgICAgICBlID0gTWF0aC5mbG9vcihlIC8gMik7XHJcbiAgICB9XHJcbiAgICBiaXRzLnB1c2gocyA/IDEgOiAwKTtcclxuICAgIGJpdHMucmV2ZXJzZSgpO1xyXG4gICAgdmFyIHN0ciA9IGJpdHMuam9pbignJyk7XHJcbiAgICAvLyBSZXR1cm4gdGhlIGRhdGEgYXMgYSBoZXggc3RyaW5nLiAtLU1KTFxyXG4gICAgdmFyIGhleEJ5dGVTdHJpbmcgPSAnJztcclxuICAgIGZvciAoaSA9IDA7IGkgPCA2NDsgaSArPSA4KSB7XHJcbiAgICAgICAgdmFyIGhleEJ5dGUgPSBwYXJzZUludChzdHIuc3Vic3RyKGksIDgpLCAyKS50b1N0cmluZygxNik7XHJcbiAgICAgICAgaWYgKGhleEJ5dGUubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgIGhleEJ5dGUgPSAnMCcgKyBoZXhCeXRlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBoZXhCeXRlU3RyaW5nID0gaGV4Qnl0ZVN0cmluZyArIGhleEJ5dGU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaGV4Qnl0ZVN0cmluZy50b0xvd2VyQ2FzZSgpO1xyXG59O1xyXG4vKipcclxuICogVXNlZCB0byBkZXRlY3QgaWYgd2UncmUgaW4gYSBDaHJvbWUgY29udGVudCBzY3JpcHQgKHdoaWNoIGV4ZWN1dGVzIGluIGFuXHJcbiAqIGlzb2xhdGVkIGVudmlyb25tZW50IHdoZXJlIGxvbmctcG9sbGluZyBkb2Vzbid0IHdvcmspLlxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxudmFyIGlzQ2hyb21lRXh0ZW5zaW9uQ29udGVudFNjcmlwdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiAhISh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JyAmJlxyXG4gICAgICAgIHdpbmRvd1snY2hyb21lJ10gJiZcclxuICAgICAgICB3aW5kb3dbJ2Nocm9tZSddWydleHRlbnNpb24nXSAmJlxyXG4gICAgICAgICEvXmNocm9tZS8udGVzdCh3aW5kb3cubG9jYXRpb24uaHJlZikpO1xyXG59O1xyXG4vKipcclxuICogVXNlZCB0byBkZXRlY3QgaWYgd2UncmUgaW4gYSBXaW5kb3dzIDggU3RvcmUgYXBwLlxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxudmFyIGlzV2luZG93c1N0b3JlQXBwID0gZnVuY3Rpb24gKCkge1xyXG4gICAgLy8gQ2hlY2sgZm9yIHRoZSBwcmVzZW5jZSBvZiBhIGNvdXBsZSBXaW5SVCBnbG9iYWxzXHJcbiAgICByZXR1cm4gdHlwZW9mIFdpbmRvd3MgPT09ICdvYmplY3QnICYmIHR5cGVvZiBXaW5kb3dzLlVJID09PSAnb2JqZWN0JztcclxufTtcclxuLyoqXHJcbiAqIENvbnZlcnRzIGEgc2VydmVyIGVycm9yIGNvZGUgdG8gYSBKYXZhc2NyaXB0IEVycm9yXHJcbiAqIEBwYXJhbSB7IXN0cmluZ30gY29kZVxyXG4gKiBAcGFyYW0geyFRdWVyeX0gcXVlcnlcclxuICogQHJldHVybiB7RXJyb3J9XHJcbiAqL1xyXG52YXIgZXJyb3JGb3JTZXJ2ZXJDb2RlID0gZnVuY3Rpb24gKGNvZGUsIHF1ZXJ5KSB7XHJcbiAgICB2YXIgcmVhc29uID0gJ1Vua25vd24gRXJyb3InO1xyXG4gICAgaWYgKGNvZGUgPT09ICd0b29fYmlnJykge1xyXG4gICAgICAgIHJlYXNvbiA9XHJcbiAgICAgICAgICAgICdUaGUgZGF0YSByZXF1ZXN0ZWQgZXhjZWVkcyB0aGUgbWF4aW11bSBzaXplICcgK1xyXG4gICAgICAgICAgICAgICAgJ3RoYXQgY2FuIGJlIGFjY2Vzc2VkIHdpdGggYSBzaW5nbGUgcmVxdWVzdC4nO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoY29kZSA9PT0gJ3Blcm1pc3Npb25fZGVuaWVkJykge1xyXG4gICAgICAgIHJlYXNvbiA9IFwiQ2xpZW50IGRvZXNuJ3QgaGF2ZSBwZXJtaXNzaW9uIHRvIGFjY2VzcyB0aGUgZGVzaXJlZCBkYXRhLlwiO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoY29kZSA9PT0gJ3VuYXZhaWxhYmxlJykge1xyXG4gICAgICAgIHJlYXNvbiA9ICdUaGUgc2VydmljZSBpcyB1bmF2YWlsYWJsZSc7XHJcbiAgICB9XHJcbiAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IoY29kZSArICcgYXQgJyArIHF1ZXJ5LnBhdGgudG9TdHJpbmcoKSArICc6ICcgKyByZWFzb24pO1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgIGVycm9yLmNvZGUgPSBjb2RlLnRvVXBwZXJDYXNlKCk7XHJcbiAgICByZXR1cm4gZXJyb3I7XHJcbn07XHJcbi8qKlxyXG4gKiBVc2VkIHRvIHRlc3QgZm9yIGludGVnZXItbG9va2luZyBzdHJpbmdzXHJcbiAqIEB0eXBlIHtSZWdFeHB9XHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG52YXIgSU5URUdFUl9SRUdFWFBfID0gbmV3IFJlZ0V4cCgnXi0/KDAqKVxcXFxkezEsMTB9JCcpO1xyXG4vKipcclxuICogSWYgdGhlIHN0cmluZyBjb250YWlucyBhIDMyLWJpdCBpbnRlZ2VyLCByZXR1cm4gaXQuICBFbHNlIHJldHVybiBudWxsLlxyXG4gKiBAcGFyYW0geyFzdHJpbmd9IHN0clxyXG4gKiBAcmV0dXJuIHs/bnVtYmVyfVxyXG4gKi9cclxudmFyIHRyeVBhcnNlSW50ID0gZnVuY3Rpb24gKHN0cikge1xyXG4gICAgaWYgKElOVEVHRVJfUkVHRVhQXy50ZXN0KHN0cikpIHtcclxuICAgICAgICB2YXIgaW50VmFsID0gTnVtYmVyKHN0cik7XHJcbiAgICAgICAgaWYgKGludFZhbCA+PSAtMjE0NzQ4MzY0OCAmJiBpbnRWYWwgPD0gMjE0NzQ4MzY0Nykge1xyXG4gICAgICAgICAgICByZXR1cm4gaW50VmFsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59O1xyXG4vKipcclxuICogSGVscGVyIHRvIHJ1biBzb21lIGNvZGUgYnV0IGNhdGNoIGFueSBleGNlcHRpb25zIGFuZCByZS10aHJvdyB0aGVtIGxhdGVyLlxyXG4gKiBVc2VmdWwgZm9yIHByZXZlbnRpbmcgdXNlciBjYWxsYmFja3MgZnJvbSBicmVha2luZyBpbnRlcm5hbCBjb2RlLlxyXG4gKlxyXG4gKiBSZS10aHJvd2luZyB0aGUgZXhjZXB0aW9uIGZyb20gYSBzZXRUaW1lb3V0IGlzIGEgbGl0dGxlIGV2aWwsIGJ1dCBpdCdzIHZlcnlcclxuICogY29udmVuaWVudCAod2UgZG9uJ3QgaGF2ZSB0byB0cnkgdG8gZmlndXJlIG91dCB3aGVuIGlzIGEgc2FmZSBwb2ludCB0b1xyXG4gKiByZS10aHJvdyBpdCksIGFuZCB0aGUgYmVoYXZpb3Igc2VlbXMgcmVhc29uYWJsZTpcclxuICpcclxuICogKiBJZiB5b3UgYXJlbid0IHBhdXNpbmcgb24gZXhjZXB0aW9ucywgeW91IGdldCBhbiBlcnJvciBpbiB0aGUgY29uc29sZSB3aXRoXHJcbiAqICAgdGhlIGNvcnJlY3Qgc3RhY2sgdHJhY2UuXHJcbiAqICogSWYgeW91J3JlIHBhdXNpbmcgb24gYWxsIGV4Y2VwdGlvbnMsIHRoZSBkZWJ1Z2dlciB3aWxsIHBhdXNlIG9uIHlvdXJcclxuICogICBleGNlcHRpb24gYW5kIHRoZW4gYWdhaW4gd2hlbiB3ZSByZXRocm93IGl0LlxyXG4gKiAqIElmIHlvdSdyZSBvbmx5IHBhdXNpbmcgb24gdW5jYXVnaHQgZXhjZXB0aW9ucywgdGhlIGRlYnVnZ2VyIHdpbGwgb25seSBwYXVzZVxyXG4gKiAgIG9uIHVzIHJlLXRocm93aW5nIGl0LlxyXG4gKlxyXG4gKiBAcGFyYW0geyFmdW5jdGlvbigpfSBmbiBUaGUgY29kZSB0byBndWFyZC5cclxuICovXHJcbnZhciBleGNlcHRpb25HdWFyZCA9IGZ1bmN0aW9uIChmbikge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBmbigpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAvLyBSZS10aHJvdyBleGNlcHRpb24gd2hlbiBpdCdzIHNhZmUuXHJcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vIEl0IHVzZWQgdG8gYmUgdGhhdCBcInRocm93IGVcIiB3b3VsZCByZXN1bHQgaW4gYSBnb29kIGNvbnNvbGUgZXJyb3Igd2l0aFxyXG4gICAgICAgICAgICAvLyByZWxldmFudCBjb250ZXh0LCBidXQgYXMgb2YgQ2hyb21lIDM5LCB5b3UganVzdCBnZXQgdGhlIGZpcmViYXNlLmpzXHJcbiAgICAgICAgICAgIC8vIGZpbGUvbGluZSBudW1iZXIgd2hlcmUgd2UgcmUtdGhyb3cgaXQsIHdoaWNoIGlzIHVzZWxlc3MuIFNvIHdlIGxvZ1xyXG4gICAgICAgICAgICAvLyBlLnN0YWNrIGV4cGxpY2l0bHkuXHJcbiAgICAgICAgICAgIHZhciBzdGFjayA9IGUuc3RhY2sgfHwgJyc7XHJcbiAgICAgICAgICAgIHdhcm4oJ0V4Y2VwdGlvbiB3YXMgdGhyb3duIGJ5IHVzZXIgY2FsbGJhY2suJywgc3RhY2spO1xyXG4gICAgICAgICAgICB0aHJvdyBlO1xyXG4gICAgICAgIH0sIE1hdGguZmxvb3IoMCkpO1xyXG4gICAgfVxyXG59O1xyXG4vKipcclxuICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBpZiB3ZSB0aGluayB3ZSdyZSBjdXJyZW50bHkgYmVpbmcgY3Jhd2xlZC5cclxuICovXHJcbnZhciBiZWluZ0NyYXdsZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgdXNlckFnZW50ID0gKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnICYmXHJcbiAgICAgICAgd2luZG93WyduYXZpZ2F0b3InXSAmJlxyXG4gICAgICAgIHdpbmRvd1snbmF2aWdhdG9yJ11bJ3VzZXJBZ2VudCddKSB8fFxyXG4gICAgICAgICcnO1xyXG4gICAgLy8gRm9yIG5vdyB3ZSB3aGl0ZWxpc3QgdGhlIG1vc3QgcG9wdWxhciBjcmF3bGVycy4gIFdlIHNob3VsZCByZWZpbmUgdGhpcyB0byBiZSB0aGUgc2V0IG9mIGNyYXdsZXJzIHdlXHJcbiAgICAvLyBiZWxpZXZlIHRvIHN1cHBvcnQgSmF2YVNjcmlwdC9BSkFYIHJlbmRlcmluZy5cclxuICAgIC8vIE5PVEU6IEdvb2dsZSBXZWJtYXN0ZXIgVG9vbHMgZG9lc24ndCByZWFsbHkgYmVsb25nLCBidXQgdGhlaXIgXCJUaGlzIGlzIGhvdyBhIHZpc2l0b3IgdG8geW91ciB3ZWJzaXRlXHJcbiAgICAvLyB3b3VsZCBoYXZlIHNlZW4gdGhlIHBhZ2VcIiBpcyBmbGFreSBpZiB3ZSBkb24ndCB0cmVhdCBpdCBhcyBhIGNyYXdsZXIuXHJcbiAgICByZXR1cm4gKHVzZXJBZ2VudC5zZWFyY2goL2dvb2dsZWJvdHxnb29nbGUgd2VibWFzdGVyIHRvb2xzfGJpbmdib3R8eWFob28hIHNsdXJwfGJhaWR1c3BpZGVyfHlhbmRleGJvdHxkdWNrZHVja2JvdC9pKSA+PSAwKTtcclxufTtcclxuLyoqXHJcbiAqIFNhbWUgYXMgc2V0VGltZW91dCgpIGV4Y2VwdCBvbiBOb2RlLkpTIGl0IHdpbGwgL25vdC8gcHJldmVudCB0aGUgcHJvY2VzcyBmcm9tIGV4aXRpbmcuXHJcbiAqXHJcbiAqIEl0IGlzIHJlbW92ZWQgd2l0aCBjbGVhclRpbWVvdXQoKSBhcyBub3JtYWwuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIEZ1bmN0aW9uIHRvIHJ1bi5cclxuICogQHBhcmFtIHtudW1iZXJ9IHRpbWUgTWlsbGlzZWNvbmRzIHRvIHdhaXQgYmVmb3JlIHJ1bm5pbmcuXHJcbiAqIEByZXR1cm4ge251bWJlcnxPYmplY3R9IFRoZSBzZXRUaW1lb3V0KCkgcmV0dXJuIHZhbHVlLlxyXG4gKi9cclxudmFyIHNldFRpbWVvdXROb25CbG9ja2luZyA9IGZ1bmN0aW9uIChmbiwgdGltZSkge1xyXG4gICAgdmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZuLCB0aW1lKTtcclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbiAgICBpZiAodHlwZW9mIHRpbWVvdXQgPT09ICdvYmplY3QnICYmIHRpbWVvdXRbJ3VucmVmJ10pIHtcclxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG4gICAgICAgIHRpbWVvdXRbJ3VucmVmJ10oKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aW1lb3V0O1xyXG59O1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQW4gaW1tdXRhYmxlIG9iamVjdCByZXByZXNlbnRpbmcgYSBwYXJzZWQgcGF0aC4gIEl0J3MgaW1tdXRhYmxlIHNvIHRoYXQgeW91XHJcbiAqIGNhbiBwYXNzIHRoZW0gYXJvdW5kIHRvIG90aGVyIGZ1bmN0aW9ucyB3aXRob3V0IHdvcnJ5aW5nIGFib3V0IHRoZW0gY2hhbmdpbmdcclxuICogaXQuXHJcbiAqL1xyXG52YXIgUGF0aCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd8QXJyYXkuPHN0cmluZz59IHBhdGhPclN0cmluZyBQYXRoIHN0cmluZyB0byBwYXJzZSxcclxuICAgICAqICAgICAgb3IgYW5vdGhlciBwYXRoLCBvciB0aGUgcmF3IHRva2VucyBhcnJheVxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBwaWVjZU51bVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBQYXRoKHBhdGhPclN0cmluZywgcGllY2VOdW0pIHtcclxuICAgICAgICBpZiAocGllY2VOdW0gPT09IHZvaWQgMCkge1xyXG4gICAgICAgICAgICB0aGlzLnBpZWNlc18gPSBwYXRoT3JTdHJpbmcuc3BsaXQoJy8nKTtcclxuICAgICAgICAgICAgLy8gUmVtb3ZlIGVtcHR5IHBpZWNlcy5cclxuICAgICAgICAgICAgdmFyIGNvcHlUbyA9IDA7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5waWVjZXNfLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5waWVjZXNfW2ldLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBpZWNlc19bY29weVRvXSA9IHRoaXMucGllY2VzX1tpXTtcclxuICAgICAgICAgICAgICAgICAgICBjb3B5VG8rKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnBpZWNlc18ubGVuZ3RoID0gY29weVRvO1xyXG4gICAgICAgICAgICB0aGlzLnBpZWNlTnVtXyA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnBpZWNlc18gPSBwYXRoT3JTdHJpbmc7XHJcbiAgICAgICAgICAgIHRoaXMucGllY2VOdW1fID0gcGllY2VOdW07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFBhdGgsIFwiRW1wdHlcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNpbmdsZXRvbiB0byByZXByZXNlbnQgYW4gZW1wdHkgcGF0aFxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQGNvbnN0XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUGF0aCgnJyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgUGF0aC5wcm90b3R5cGUuZ2V0RnJvbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucGllY2VOdW1fID49IHRoaXMucGllY2VzXy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLnBpZWNlc19bdGhpcy5waWVjZU51bV9dO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgbnVtYmVyIG9mIHNlZ21lbnRzIGluIHRoaXMgcGF0aFxyXG4gICAgICovXHJcbiAgICBQYXRoLnByb3RvdHlwZS5nZXRMZW5ndGggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGllY2VzXy5sZW5ndGggLSB0aGlzLnBpZWNlTnVtXztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4geyFQYXRofVxyXG4gICAgICovXHJcbiAgICBQYXRoLnByb3RvdHlwZS5wb3BGcm9udCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgcGllY2VOdW0gPSB0aGlzLnBpZWNlTnVtXztcclxuICAgICAgICBpZiAocGllY2VOdW0gPCB0aGlzLnBpZWNlc18ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHBpZWNlTnVtKys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgUGF0aCh0aGlzLnBpZWNlc18sIHBpZWNlTnVtKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4gez9zdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIFBhdGgucHJvdG90eXBlLmdldEJhY2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucGllY2VOdW1fIDwgdGhpcy5waWVjZXNfLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5waWVjZXNfW3RoaXMucGllY2VzXy5sZW5ndGggLSAxXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9O1xyXG4gICAgUGF0aC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHBhdGhTdHJpbmcgPSAnJztcclxuICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5waWVjZU51bV87IGkgPCB0aGlzLnBpZWNlc18ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucGllY2VzX1tpXSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgIHBhdGhTdHJpbmcgKz0gJy8nICsgdGhpcy5waWVjZXNfW2ldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwYXRoU3RyaW5nIHx8ICcvJztcclxuICAgIH07XHJcbiAgICBQYXRoLnByb3RvdHlwZS50b1VybEVuY29kZWRTdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHBhdGhTdHJpbmcgPSAnJztcclxuICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5waWVjZU51bV87IGkgPCB0aGlzLnBpZWNlc18ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucGllY2VzX1tpXSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgIHBhdGhTdHJpbmcgKz0gJy8nICsgZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyh0aGlzLnBpZWNlc19baV0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcGF0aFN0cmluZyB8fCAnLyc7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTaGFsbG93IGNvcHkgb2YgdGhlIHBhcnRzIG9mIHRoZSBwYXRoLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gYmVnaW5cclxuICAgICAqIEByZXR1cm4geyFBcnJheTxzdHJpbmc+fVxyXG4gICAgICovXHJcbiAgICBQYXRoLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIChiZWdpbikge1xyXG4gICAgICAgIGlmIChiZWdpbiA9PT0gdm9pZCAwKSB7IGJlZ2luID0gMDsgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLnBpZWNlc18uc2xpY2UodGhpcy5waWVjZU51bV8gKyBiZWdpbik7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHs/UGF0aH1cclxuICAgICAqL1xyXG4gICAgUGF0aC5wcm90b3R5cGUucGFyZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnBpZWNlTnVtXyA+PSB0aGlzLnBpZWNlc18ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcGllY2VzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IHRoaXMucGllY2VOdW1fOyBpIDwgdGhpcy5waWVjZXNfLmxlbmd0aCAtIDE7IGkrKykge1xyXG4gICAgICAgICAgICBwaWVjZXMucHVzaCh0aGlzLnBpZWNlc19baV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IFBhdGgocGllY2VzLCAwKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfCFQYXRofSBjaGlsZFBhdGhPYmpcclxuICAgICAqIEByZXR1cm4geyFQYXRofVxyXG4gICAgICovXHJcbiAgICBQYXRoLnByb3RvdHlwZS5jaGlsZCA9IGZ1bmN0aW9uIChjaGlsZFBhdGhPYmopIHtcclxuICAgICAgICB2YXIgcGllY2VzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IHRoaXMucGllY2VOdW1fOyBpIDwgdGhpcy5waWVjZXNfLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHBpZWNlcy5wdXNoKHRoaXMucGllY2VzX1tpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjaGlsZFBhdGhPYmogaW5zdGFuY2VvZiBQYXRoKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBjaGlsZFBhdGhPYmoucGllY2VOdW1fOyBpIDwgY2hpbGRQYXRoT2JqLnBpZWNlc18ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHBpZWNlcy5wdXNoKGNoaWxkUGF0aE9iai5waWVjZXNfW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGNoaWxkUGllY2VzID0gY2hpbGRQYXRoT2JqLnNwbGl0KCcvJyk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRQaWVjZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChjaGlsZFBpZWNlc1tpXS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGllY2VzLnB1c2goY2hpbGRQaWVjZXNbaV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgUGF0aChwaWVjZXMsIDApO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGVyZSBhcmUgbm8gc2VnbWVudHMgaW4gdGhpcyBwYXRoXHJcbiAgICAgKi9cclxuICAgIFBhdGgucHJvdG90eXBlLmlzRW1wdHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGllY2VOdW1fID49IHRoaXMucGllY2VzXy5sZW5ndGg7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFQYXRofSBvdXRlclBhdGhcclxuICAgICAqIEBwYXJhbSB7IVBhdGh9IGlubmVyUGF0aFxyXG4gICAgICogQHJldHVybiB7IVBhdGh9IFRoZSBwYXRoIGZyb20gb3V0ZXJQYXRoIHRvIGlubmVyUGF0aFxyXG4gICAgICovXHJcbiAgICBQYXRoLnJlbGF0aXZlUGF0aCA9IGZ1bmN0aW9uIChvdXRlclBhdGgsIGlubmVyUGF0aCkge1xyXG4gICAgICAgIHZhciBvdXRlciA9IG91dGVyUGF0aC5nZXRGcm9udCgpLCBpbm5lciA9IGlubmVyUGF0aC5nZXRGcm9udCgpO1xyXG4gICAgICAgIGlmIChvdXRlciA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gaW5uZXJQYXRoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChvdXRlciA9PT0gaW5uZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFBhdGgucmVsYXRpdmVQYXRoKG91dGVyUGF0aC5wb3BGcm9udCgpLCBpbm5lclBhdGgucG9wRnJvbnQoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0lOVEVSTkFMIEVSUk9SOiBpbm5lclBhdGggKCcgK1xyXG4gICAgICAgICAgICAgICAgaW5uZXJQYXRoICtcclxuICAgICAgICAgICAgICAgICcpIGlzIG5vdCB3aXRoaW4gJyArXHJcbiAgICAgICAgICAgICAgICAnb3V0ZXJQYXRoICgnICtcclxuICAgICAgICAgICAgICAgIG91dGVyUGF0aCArXHJcbiAgICAgICAgICAgICAgICAnKScpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IVBhdGh9IGxlZnRcclxuICAgICAqIEBwYXJhbSB7IVBhdGh9IHJpZ2h0XHJcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0xLCAwLCAxIGlmIGxlZnQgaXMgbGVzcywgZXF1YWwsIG9yIGdyZWF0ZXIgdGhhbiB0aGUgcmlnaHQuXHJcbiAgICAgKi9cclxuICAgIFBhdGguY29tcGFyZVBhdGhzID0gZnVuY3Rpb24gKGxlZnQsIHJpZ2h0KSB7XHJcbiAgICAgICAgdmFyIGxlZnRLZXlzID0gbGVmdC5zbGljZSgpO1xyXG4gICAgICAgIHZhciByaWdodEtleXMgPSByaWdodC5zbGljZSgpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVmdEtleXMubGVuZ3RoICYmIGkgPCByaWdodEtleXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIGNtcCA9IG5hbWVDb21wYXJlKGxlZnRLZXlzW2ldLCByaWdodEtleXNbaV0pO1xyXG4gICAgICAgICAgICBpZiAoY21wICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY21wO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsZWZ0S2V5cy5sZW5ndGggPT09IHJpZ2h0S2V5cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBsZWZ0S2V5cy5sZW5ndGggPCByaWdodEtleXMubGVuZ3RoID8gLTEgOiAxO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7UGF0aH0gb3RoZXJcclxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgcGF0aHMgYXJlIHRoZSBzYW1lLlxyXG4gICAgICovXHJcbiAgICBQYXRoLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5nZXRMZW5ndGgoKSAhPT0gb3RoZXIuZ2V0TGVuZ3RoKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5waWVjZU51bV8sIGogPSBvdGhlci5waWVjZU51bV87IGkgPD0gdGhpcy5waWVjZXNfLmxlbmd0aDsgaSsrLCBqKyspIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucGllY2VzX1tpXSAhPT0gb3RoZXIucGllY2VzX1tqXSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IVBhdGh9IG90aGVyXHJcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoaXMgcGF0aCBpcyBhIHBhcmVudCAob3IgdGhlIHNhbWUgYXMpIG90aGVyXHJcbiAgICAgKi9cclxuICAgIFBhdGgucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24gKG90aGVyKSB7XHJcbiAgICAgICAgdmFyIGkgPSB0aGlzLnBpZWNlTnVtXztcclxuICAgICAgICB2YXIgaiA9IG90aGVyLnBpZWNlTnVtXztcclxuICAgICAgICBpZiAodGhpcy5nZXRMZW5ndGgoKSA+IG90aGVyLmdldExlbmd0aCgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgd2hpbGUgKGkgPCB0aGlzLnBpZWNlc18ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnBpZWNlc19baV0gIT09IG90aGVyLnBpZWNlc19bal0pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICArK2k7XHJcbiAgICAgICAgICAgICsrajtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFBhdGg7XHJcbn0oKSk7IC8vIGVuZCBQYXRoXHJcbi8qKlxyXG4gKiBEeW5hbWljIChtdXRhYmxlKSBwYXRoIHVzZWQgdG8gY291bnQgcGF0aCBsZW5ndGhzLlxyXG4gKlxyXG4gKiBUaGlzIGNsYXNzIGlzIHVzZWQgdG8gZWZmaWNpZW50bHkgY2hlY2sgcGF0aHMgZm9yIHZhbGlkXHJcbiAqIGxlbmd0aCAoaW4gVVRGOCBieXRlcykgYW5kIGRlcHRoICh1c2VkIGluIHBhdGggdmFsaWRhdGlvbikuXHJcbiAqXHJcbiAqIFRocm93cyBFcnJvciBleGNlcHRpb24gaWYgcGF0aCBpcyBldmVyIGludmFsaWQuXHJcbiAqXHJcbiAqIFRoZSBkZWZpbml0aW9uIG9mIGEgcGF0aCBhbHdheXMgYmVnaW5zIHdpdGggJy8nLlxyXG4gKi9cclxudmFyIFZhbGlkYXRpb25QYXRoID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFQYXRofSBwYXRoIEluaXRpYWwgUGF0aC5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBlcnJvclByZWZpeF8gUHJlZml4IGZvciBhbnkgZXJyb3IgbWVzc2FnZXMuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIFZhbGlkYXRpb25QYXRoKHBhdGgsIGVycm9yUHJlZml4Xykge1xyXG4gICAgICAgIHRoaXMuZXJyb3JQcmVmaXhfID0gZXJyb3JQcmVmaXhfO1xyXG4gICAgICAgIC8qKiBAdHlwZSB7IUFycmF5PHN0cmluZz59ICovXHJcbiAgICAgICAgdGhpcy5wYXJ0c18gPSBwYXRoLnNsaWNlKCk7XHJcbiAgICAgICAgLyoqIEB0eXBlIHtudW1iZXJ9IEluaXRpYWxpemUgdG8gbnVtYmVyIG9mICcvJyBjaGFycyBuZWVkZWQgaW4gcGF0aC4gKi9cclxuICAgICAgICB0aGlzLmJ5dGVMZW5ndGhfID0gTWF0aC5tYXgoMSwgdGhpcy5wYXJ0c18ubGVuZ3RoKTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucGFydHNfLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYnl0ZUxlbmd0aF8gKz0gc3RyaW5nTGVuZ3RoKHRoaXMucGFydHNfW2ldKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jaGVja1ZhbGlkXygpO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZhbGlkYXRpb25QYXRoLCBcIk1BWF9QQVRIX0RFUFRIXCIsIHtcclxuICAgICAgICAvKiogQGNvbnN0IHtudW1iZXJ9IE1heGltdW0ga2V5IGRlcHRoLiAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gMzI7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZhbGlkYXRpb25QYXRoLCBcIk1BWF9QQVRIX0xFTkdUSF9CWVRFU1wiLCB7XHJcbiAgICAgICAgLyoqIEBjb25zdCB7bnVtYmVyfSBNYXhpbXVtIG51bWJlciBvZiAoVVRGOCkgYnl0ZXMgaW4gYSBGaXJlYmFzZSBwYXRoLiAqL1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gNzY4O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIC8qKiBAcGFyYW0ge3N0cmluZ30gY2hpbGQgKi9cclxuICAgIFZhbGlkYXRpb25QYXRoLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGNoaWxkKSB7XHJcbiAgICAgICAgLy8gQ291bnQgdGhlIG5lZWRlZCAnLydcclxuICAgICAgICBpZiAodGhpcy5wYXJ0c18ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmJ5dGVMZW5ndGhfICs9IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucGFydHNfLnB1c2goY2hpbGQpO1xyXG4gICAgICAgIHRoaXMuYnl0ZUxlbmd0aF8gKz0gc3RyaW5nTGVuZ3RoKGNoaWxkKTtcclxuICAgICAgICB0aGlzLmNoZWNrVmFsaWRfKCk7XHJcbiAgICB9O1xyXG4gICAgVmFsaWRhdGlvblBhdGgucHJvdG90eXBlLnBvcCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgbGFzdCA9IHRoaXMucGFydHNfLnBvcCgpO1xyXG4gICAgICAgIHRoaXMuYnl0ZUxlbmd0aF8gLT0gc3RyaW5nTGVuZ3RoKGxhc3QpO1xyXG4gICAgICAgIC8vIFVuLWNvdW50IHRoZSBwcmV2aW91cyAnLydcclxuICAgICAgICBpZiAodGhpcy5wYXJ0c18ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmJ5dGVMZW5ndGhfIC09IDE7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFZhbGlkYXRpb25QYXRoLnByb3RvdHlwZS5jaGVja1ZhbGlkXyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5ieXRlTGVuZ3RoXyA+IFZhbGlkYXRpb25QYXRoLk1BWF9QQVRIX0xFTkdUSF9CWVRFUykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IodGhpcy5lcnJvclByZWZpeF8gK1xyXG4gICAgICAgICAgICAgICAgJ2hhcyBhIGtleSBwYXRoIGxvbmdlciB0aGFuICcgK1xyXG4gICAgICAgICAgICAgICAgVmFsaWRhdGlvblBhdGguTUFYX1BBVEhfTEVOR1RIX0JZVEVTICtcclxuICAgICAgICAgICAgICAgICcgYnl0ZXMgKCcgK1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ieXRlTGVuZ3RoXyArXHJcbiAgICAgICAgICAgICAgICAnKS4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMucGFydHNfLmxlbmd0aCA+IFZhbGlkYXRpb25QYXRoLk1BWF9QQVRIX0RFUFRIKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcih0aGlzLmVycm9yUHJlZml4XyArXHJcbiAgICAgICAgICAgICAgICAncGF0aCBzcGVjaWZpZWQgZXhjZWVkcyB0aGUgbWF4aW11bSBkZXB0aCB0aGF0IGNhbiBiZSB3cml0dGVuICgnICtcclxuICAgICAgICAgICAgICAgIFZhbGlkYXRpb25QYXRoLk1BWF9QQVRIX0RFUFRIICtcclxuICAgICAgICAgICAgICAgICcpIG9yIG9iamVjdCBjb250YWlucyBhIGN5Y2xlICcgK1xyXG4gICAgICAgICAgICAgICAgdGhpcy50b0Vycm9yU3RyaW5nKCkpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFN0cmluZyBmb3IgdXNlIGluIGVycm9yIG1lc3NhZ2VzIC0gdXNlcyAnLicgbm90YXRpb24gZm9yIHBhdGguXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBWYWxpZGF0aW9uUGF0aC5wcm90b3R5cGUudG9FcnJvclN0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5wYXJ0c18ubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFwiaW4gcHJvcGVydHkgJ1wiICsgdGhpcy5wYXJ0c18uam9pbignLicpICsgXCInXCI7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFZhbGlkYXRpb25QYXRoO1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgUFJPVE9DT0xfVkVSU0lPTiA9ICc1JztcclxudmFyIFZFUlNJT05fUEFSQU0gPSAndic7XHJcbnZhciBUUkFOU1BPUlRfU0VTU0lPTl9QQVJBTSA9ICdzJztcclxudmFyIFJFRkVSRVJfUEFSQU0gPSAncic7XHJcbnZhciBGT1JHRV9SRUYgPSAnZic7XHJcbnZhciBGT1JHRV9ET01BSU4gPSAnZmlyZWJhc2Vpby5jb20nO1xyXG52YXIgTEFTVF9TRVNTSU9OX1BBUkFNID0gJ2xzJztcclxudmFyIEFQUExJQ0FUSU9OX0lEX1BBUkFNID0gJ3AnO1xyXG52YXIgV0VCU09DS0VUID0gJ3dlYnNvY2tldCc7XHJcbnZhciBMT05HX1BPTExJTkcgPSAnbG9uZ19wb2xsaW5nJztcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEEgY2xhc3MgdGhhdCBob2xkcyBtZXRhZGF0YSBhYm91dCBhIFJlcG8gb2JqZWN0XHJcbiAqXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxudmFyIFJlcG9JbmZvID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gaG9zdCBIb3N0bmFtZSBwb3J0aW9uIG9mIHRoZSB1cmwgZm9yIHRoZSByZXBvXHJcbiAgICAgKiBAcGFyYW0gc2VjdXJlIFdoZXRoZXIgb3Igbm90IHRoaXMgcmVwbyBpcyBhY2Nlc3NlZCBvdmVyIHNzbFxyXG4gICAgICogQHBhcmFtIG5hbWVzcGFjZSBUaGUgbmFtZXNwYWNlIHJlcHJlc2VudGVkIGJ5IHRoZSByZXBvXHJcbiAgICAgKiBAcGFyYW0gd2ViU29ja2V0T25seSBXaGV0aGVyIHRvIHByZWZlciB3ZWJzb2NrZXRzIG92ZXIgYWxsIG90aGVyIHRyYW5zcG9ydHMgKHVzZWQgYnkgTmVzdCkuXHJcbiAgICAgKiBAcGFyYW0gbm9kZUFkbWluIFdoZXRoZXIgdGhpcyBpbnN0YW5jZSB1c2VzIEFkbWluIFNESyBjcmVkZW50aWFsc1xyXG4gICAgICogQHBhcmFtIHBlcnNpc3RlbmNlS2V5IE92ZXJyaWRlIHRoZSBkZWZhdWx0IHNlc3Npb24gcGVyc2lzdGVuY2Ugc3RvcmFnZSBrZXlcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gUmVwb0luZm8oaG9zdCwgc2VjdXJlLCBuYW1lc3BhY2UsIHdlYlNvY2tldE9ubHksIG5vZGVBZG1pbiwgcGVyc2lzdGVuY2VLZXksIGluY2x1ZGVOYW1lc3BhY2VJblF1ZXJ5UGFyYW1zKSB7XHJcbiAgICAgICAgaWYgKG5vZGVBZG1pbiA9PT0gdm9pZCAwKSB7IG5vZGVBZG1pbiA9IGZhbHNlOyB9XHJcbiAgICAgICAgaWYgKHBlcnNpc3RlbmNlS2V5ID09PSB2b2lkIDApIHsgcGVyc2lzdGVuY2VLZXkgPSAnJzsgfVxyXG4gICAgICAgIGlmIChpbmNsdWRlTmFtZXNwYWNlSW5RdWVyeVBhcmFtcyA9PT0gdm9pZCAwKSB7IGluY2x1ZGVOYW1lc3BhY2VJblF1ZXJ5UGFyYW1zID0gZmFsc2U7IH1cclxuICAgICAgICB0aGlzLnNlY3VyZSA9IHNlY3VyZTtcclxuICAgICAgICB0aGlzLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcclxuICAgICAgICB0aGlzLndlYlNvY2tldE9ubHkgPSB3ZWJTb2NrZXRPbmx5O1xyXG4gICAgICAgIHRoaXMubm9kZUFkbWluID0gbm9kZUFkbWluO1xyXG4gICAgICAgIHRoaXMucGVyc2lzdGVuY2VLZXkgPSBwZXJzaXN0ZW5jZUtleTtcclxuICAgICAgICB0aGlzLmluY2x1ZGVOYW1lc3BhY2VJblF1ZXJ5UGFyYW1zID0gaW5jbHVkZU5hbWVzcGFjZUluUXVlcnlQYXJhbXM7XHJcbiAgICAgICAgdGhpcy5ob3N0ID0gaG9zdC50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIHRoaXMuZG9tYWluID0gdGhpcy5ob3N0LnN1YnN0cih0aGlzLmhvc3QuaW5kZXhPZignLicpICsgMSk7XHJcbiAgICAgICAgdGhpcy5pbnRlcm5hbEhvc3QgPVxyXG4gICAgICAgICAgICBQZXJzaXN0ZW50U3RvcmFnZS5nZXQoJ2hvc3Q6JyArIGhvc3QpIHx8IHRoaXMuaG9zdDtcclxuICAgIH1cclxuICAgIFJlcG9JbmZvLnByb3RvdHlwZS5uZWVkc1F1ZXJ5UGFyYW0gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLmhvc3QgIT09IHRoaXMuaW50ZXJuYWxIb3N0IHx8XHJcbiAgICAgICAgICAgIHRoaXMuaXNDdXN0b21Ib3N0KCkgfHxcclxuICAgICAgICAgICAgdGhpcy5pbmNsdWRlTmFtZXNwYWNlSW5RdWVyeVBhcmFtcyk7XHJcbiAgICB9O1xyXG4gICAgUmVwb0luZm8ucHJvdG90eXBlLmlzQ2FjaGVhYmxlSG9zdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pbnRlcm5hbEhvc3Quc3Vic3RyKDAsIDIpID09PSAncy0nO1xyXG4gICAgfTtcclxuICAgIFJlcG9JbmZvLnByb3RvdHlwZS5pc0RlbW9Ib3N0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRvbWFpbiA9PT0gJ2ZpcmViYXNlaW8tZGVtby5jb20nO1xyXG4gICAgfTtcclxuICAgIFJlcG9JbmZvLnByb3RvdHlwZS5pc0N1c3RvbUhvc3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLmRvbWFpbiAhPT0gJ2ZpcmViYXNlaW8uY29tJyAmJiB0aGlzLmRvbWFpbiAhPT0gJ2ZpcmViYXNlaW8tZGVtby5jb20nKTtcclxuICAgIH07XHJcbiAgICBSZXBvSW5mby5wcm90b3R5cGUudXBkYXRlSG9zdCA9IGZ1bmN0aW9uIChuZXdIb3N0KSB7XHJcbiAgICAgICAgaWYgKG5ld0hvc3QgIT09IHRoaXMuaW50ZXJuYWxIb3N0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW50ZXJuYWxIb3N0ID0gbmV3SG9zdDtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNDYWNoZWFibGVIb3N0KCkpIHtcclxuICAgICAgICAgICAgICAgIFBlcnNpc3RlbnRTdG9yYWdlLnNldCgnaG9zdDonICsgdGhpcy5ob3N0LCB0aGlzLmludGVybmFsSG9zdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSB3ZWJzb2NrZXQgVVJMIGZvciB0aGlzIHJlcG9cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIG9mIGNvbm5lY3Rpb25cclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgbGlzdFxyXG4gICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgVVJMIGZvciB0aGlzIHJlcG9cclxuICAgICAqL1xyXG4gICAgUmVwb0luZm8ucHJvdG90eXBlLmNvbm5lY3Rpb25VUkwgPSBmdW5jdGlvbiAodHlwZSwgcGFyYW1zKSB7XHJcbiAgICAgICAgYXNzZXJ0KHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJywgJ3R5cGVvZiB0eXBlIG11c3QgPT0gc3RyaW5nJyk7XHJcbiAgICAgICAgYXNzZXJ0KHR5cGVvZiBwYXJhbXMgPT09ICdvYmplY3QnLCAndHlwZW9mIHBhcmFtcyBtdXN0ID09IG9iamVjdCcpO1xyXG4gICAgICAgIHZhciBjb25uVVJMO1xyXG4gICAgICAgIGlmICh0eXBlID09PSBXRUJTT0NLRVQpIHtcclxuICAgICAgICAgICAgY29ublVSTCA9XHJcbiAgICAgICAgICAgICAgICAodGhpcy5zZWN1cmUgPyAnd3NzOi8vJyA6ICd3czovLycpICsgdGhpcy5pbnRlcm5hbEhvc3QgKyAnLy53cz8nO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0eXBlID09PSBMT05HX1BPTExJTkcpIHtcclxuICAgICAgICAgICAgY29ublVSTCA9XHJcbiAgICAgICAgICAgICAgICAodGhpcy5zZWN1cmUgPyAnaHR0cHM6Ly8nIDogJ2h0dHA6Ly8nKSArIHRoaXMuaW50ZXJuYWxIb3N0ICsgJy8ubHA/JztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBjb25uZWN0aW9uIHR5cGU6ICcgKyB0eXBlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMubmVlZHNRdWVyeVBhcmFtKCkpIHtcclxuICAgICAgICAgICAgcGFyYW1zWyducyddID0gdGhpcy5uYW1lc3BhY2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBwYWlycyA9IFtdO1xyXG4gICAgICAgIGVhY2gocGFyYW1zLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBwYWlycy5wdXNoKGtleSArICc9JyArIHZhbHVlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gY29ublVSTCArIHBhaXJzLmpvaW4oJyYnKTtcclxuICAgIH07XHJcbiAgICAvKiogQHJldHVybiB7c3RyaW5nfSAqL1xyXG4gICAgUmVwb0luZm8ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBzdHIgPSB0aGlzLnRvVVJMU3RyaW5nKCk7XHJcbiAgICAgICAgaWYgKHRoaXMucGVyc2lzdGVuY2VLZXkpIHtcclxuICAgICAgICAgICAgc3RyICs9ICc8JyArIHRoaXMucGVyc2lzdGVuY2VLZXkgKyAnPic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzdHI7XHJcbiAgICB9O1xyXG4gICAgLyoqIEByZXR1cm4ge3N0cmluZ30gKi9cclxuICAgIFJlcG9JbmZvLnByb3RvdHlwZS50b1VSTFN0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMuc2VjdXJlID8gJ2h0dHBzOi8vJyA6ICdodHRwOi8vJykgKyB0aGlzLmhvc3Q7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFJlcG9JbmZvO1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQHBhcmFtIHshc3RyaW5nfSBwYXRoU3RyaW5nXHJcbiAqIEByZXR1cm4ge3N0cmluZ31cclxuICovXHJcbmZ1bmN0aW9uIGRlY29kZVBhdGgocGF0aFN0cmluZykge1xyXG4gICAgdmFyIHBhdGhTdHJpbmdEZWNvZGVkID0gJyc7XHJcbiAgICB2YXIgcGllY2VzID0gcGF0aFN0cmluZy5zcGxpdCgnLycpO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwaWVjZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiAocGllY2VzW2ldLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdmFyIHBpZWNlID0gcGllY2VzW2ldO1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgcGllY2UgPSBkZWNvZGVVUklDb21wb25lbnQocGllY2UucmVwbGFjZSgvXFwrL2csICcgJykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7IH1cclxuICAgICAgICAgICAgcGF0aFN0cmluZ0RlY29kZWQgKz0gJy8nICsgcGllY2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBhdGhTdHJpbmdEZWNvZGVkO1xyXG59XHJcbi8qKlxyXG4gKiBAcGFyYW0geyFzdHJpbmd9IHF1ZXJ5U3RyaW5nXHJcbiAqIEByZXR1cm4geyF7W2tleTpzdHJpbmddOnN0cmluZ319IGtleSB2YWx1ZSBoYXNoXHJcbiAqL1xyXG5mdW5jdGlvbiBkZWNvZGVRdWVyeShxdWVyeVN0cmluZykge1xyXG4gICAgdmFyIGVfMSwgX2E7XHJcbiAgICB2YXIgcmVzdWx0cyA9IHt9O1xyXG4gICAgaWYgKHF1ZXJ5U3RyaW5nLmNoYXJBdCgwKSA9PT0gJz8nKSB7XHJcbiAgICAgICAgcXVlcnlTdHJpbmcgPSBxdWVyeVN0cmluZy5zdWJzdHJpbmcoMSk7XHJcbiAgICB9XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGZvciAodmFyIF9iID0gX192YWx1ZXMocXVlcnlTdHJpbmcuc3BsaXQoJyYnKSksIF9jID0gX2IubmV4dCgpOyAhX2MuZG9uZTsgX2MgPSBfYi5uZXh0KCkpIHtcclxuICAgICAgICAgICAgdmFyIHNlZ21lbnQgPSBfYy52YWx1ZTtcclxuICAgICAgICAgICAgaWYgKHNlZ21lbnQubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIga3YgPSBzZWdtZW50LnNwbGl0KCc9Jyk7XHJcbiAgICAgICAgICAgIGlmIChrdi5sZW5ndGggPT09IDIpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdHNbZGVjb2RlVVJJQ29tcG9uZW50KGt2WzBdKV0gPSBkZWNvZGVVUklDb21wb25lbnQoa3ZbMV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgd2FybihcIkludmFsaWQgcXVlcnkgc2VnbWVudCAnXCIgKyBzZWdtZW50ICsgXCInIGluIHF1ZXJ5ICdcIiArIHF1ZXJ5U3RyaW5nICsgXCInXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChfYyAmJiAhX2MuZG9uZSAmJiAoX2EgPSBfYi5yZXR1cm4pKSBfYS5jYWxsKF9iKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdHM7XHJcbn1cclxudmFyIHBhcnNlUmVwb0luZm8gPSBmdW5jdGlvbiAoZGF0YVVSTCwgbm9kZUFkbWluKSB7XHJcbiAgICB2YXIgcGFyc2VkVXJsID0gcGFyc2VEYXRhYmFzZVVSTChkYXRhVVJMKSwgbmFtZXNwYWNlID0gcGFyc2VkVXJsLm5hbWVzcGFjZTtcclxuICAgIGlmIChwYXJzZWRVcmwuZG9tYWluID09PSAnZmlyZWJhc2UuY29tJykge1xyXG4gICAgICAgIGZhdGFsKHBhcnNlZFVybC5ob3N0ICtcclxuICAgICAgICAgICAgJyBpcyBubyBsb25nZXIgc3VwcG9ydGVkLiAnICtcclxuICAgICAgICAgICAgJ1BsZWFzZSB1c2UgPFlPVVIgRklSRUJBU0U+LmZpcmViYXNlaW8uY29tIGluc3RlYWQnKTtcclxuICAgIH1cclxuICAgIC8vIENhdGNoIGNvbW1vbiBlcnJvciBvZiB1bmluaXRpYWxpemVkIG5hbWVzcGFjZSB2YWx1ZS5cclxuICAgIGlmICgoIW5hbWVzcGFjZSB8fCBuYW1lc3BhY2UgPT09ICd1bmRlZmluZWQnKSAmJlxyXG4gICAgICAgIHBhcnNlZFVybC5kb21haW4gIT09ICdsb2NhbGhvc3QnKSB7XHJcbiAgICAgICAgZmF0YWwoJ0Nhbm5vdCBwYXJzZSBGaXJlYmFzZSB1cmwuIFBsZWFzZSB1c2UgaHR0cHM6Ly88WU9VUiBGSVJFQkFTRT4uZmlyZWJhc2Vpby5jb20nKTtcclxuICAgIH1cclxuICAgIGlmICghcGFyc2VkVXJsLnNlY3VyZSkge1xyXG4gICAgICAgIHdhcm5JZlBhZ2VJc1NlY3VyZSgpO1xyXG4gICAgfVxyXG4gICAgdmFyIHdlYlNvY2tldE9ubHkgPSBwYXJzZWRVcmwuc2NoZW1lID09PSAnd3MnIHx8IHBhcnNlZFVybC5zY2hlbWUgPT09ICd3c3MnO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICByZXBvSW5mbzogbmV3IFJlcG9JbmZvKHBhcnNlZFVybC5ob3N0LCBwYXJzZWRVcmwuc2VjdXJlLCBuYW1lc3BhY2UsIG5vZGVBZG1pbiwgd2ViU29ja2V0T25seSwgXHJcbiAgICAgICAgLypwZXJzaXN0ZW5jZUtleT0qLyAnJywgXHJcbiAgICAgICAgLyppbmNsdWRlTmFtZXNwYWNlSW5RdWVyeVBhcmFtcz0qLyBuYW1lc3BhY2UgIT09IHBhcnNlZFVybC5zdWJkb21haW4pLFxyXG4gICAgICAgIHBhdGg6IG5ldyBQYXRoKHBhcnNlZFVybC5wYXRoU3RyaW5nKVxyXG4gICAgfTtcclxufTtcclxuLyoqXHJcbiAqXHJcbiAqIEBwYXJhbSB7IXN0cmluZ30gZGF0YVVSTFxyXG4gKiBAcmV0dXJuIHt7aG9zdDogc3RyaW5nLCBwb3J0OiBudW1iZXIsIGRvbWFpbjogc3RyaW5nLCBzdWJkb21haW46IHN0cmluZywgc2VjdXJlOiBib29sZWFuLCBzY2hlbWU6IHN0cmluZywgcGF0aFN0cmluZzogc3RyaW5nLCBuYW1lc3BhY2U6IHN0cmluZ319XHJcbiAqL1xyXG52YXIgcGFyc2VEYXRhYmFzZVVSTCA9IGZ1bmN0aW9uIChkYXRhVVJMKSB7XHJcbiAgICAvLyBEZWZhdWx0IHRvIGVtcHR5IHN0cmluZ3MgaW4gdGhlIGV2ZW50IG9mIGEgbWFsZm9ybWVkIHN0cmluZy5cclxuICAgIHZhciBob3N0ID0gJycsIGRvbWFpbiA9ICcnLCBzdWJkb21haW4gPSAnJywgcGF0aFN0cmluZyA9ICcnLCBuYW1lc3BhY2UgPSAnJztcclxuICAgIC8vIEFsd2F5cyBkZWZhdWx0IHRvIFNTTCwgdW5sZXNzIG90aGVyd2lzZSBzcGVjaWZpZWQuXHJcbiAgICB2YXIgc2VjdXJlID0gdHJ1ZSwgc2NoZW1lID0gJ2h0dHBzJywgcG9ydCA9IDQ0MztcclxuICAgIC8vIERvbid0IGRvIGFueSB2YWxpZGF0aW9uIGhlcmUuIFRoZSBjYWxsZXIgaXMgcmVzcG9uc2libGUgZm9yIHZhbGlkYXRpbmcgdGhlIHJlc3VsdCBvZiBwYXJzaW5nLlxyXG4gICAgaWYgKHR5cGVvZiBkYXRhVVJMID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIC8vIFBhcnNlIHNjaGVtZS5cclxuICAgICAgICB2YXIgY29sb25JbmQgPSBkYXRhVVJMLmluZGV4T2YoJy8vJyk7XHJcbiAgICAgICAgaWYgKGNvbG9uSW5kID49IDApIHtcclxuICAgICAgICAgICAgc2NoZW1lID0gZGF0YVVSTC5zdWJzdHJpbmcoMCwgY29sb25JbmQgLSAxKTtcclxuICAgICAgICAgICAgZGF0YVVSTCA9IGRhdGFVUkwuc3Vic3RyaW5nKGNvbG9uSW5kICsgMik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFBhcnNlIGhvc3QsIHBhdGgsIGFuZCBxdWVyeSBzdHJpbmcuXHJcbiAgICAgICAgdmFyIHNsYXNoSW5kID0gZGF0YVVSTC5pbmRleE9mKCcvJyk7XHJcbiAgICAgICAgaWYgKHNsYXNoSW5kID09PSAtMSkge1xyXG4gICAgICAgICAgICBzbGFzaEluZCA9IGRhdGFVUkwubGVuZ3RoO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcXVlc3Rpb25NYXJrSW5kID0gZGF0YVVSTC5pbmRleE9mKCc/Jyk7XHJcbiAgICAgICAgaWYgKHF1ZXN0aW9uTWFya0luZCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgcXVlc3Rpb25NYXJrSW5kID0gZGF0YVVSTC5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGhvc3QgPSBkYXRhVVJMLnN1YnN0cmluZygwLCBNYXRoLm1pbihzbGFzaEluZCwgcXVlc3Rpb25NYXJrSW5kKSk7XHJcbiAgICAgICAgaWYgKHNsYXNoSW5kIDwgcXVlc3Rpb25NYXJrSW5kKSB7XHJcbiAgICAgICAgICAgIC8vIEZvciBwYXRoU3RyaW5nLCBxdWVzdGlvbk1hcmtJbmQgd2lsbCBhbHdheXMgY29tZSBhZnRlciBzbGFzaEluZFxyXG4gICAgICAgICAgICBwYXRoU3RyaW5nID0gZGVjb2RlUGF0aChkYXRhVVJMLnN1YnN0cmluZyhzbGFzaEluZCwgcXVlc3Rpb25NYXJrSW5kKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBxdWVyeVBhcmFtcyA9IGRlY29kZVF1ZXJ5KGRhdGFVUkwuc3Vic3RyaW5nKE1hdGgubWluKGRhdGFVUkwubGVuZ3RoLCBxdWVzdGlvbk1hcmtJbmQpKSk7XHJcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBhIHBvcnQsIHVzZSBzY2hlbWUgZm9yIGRldGVybWluaW5nIGlmIGl0J3Mgc2VjdXJlLlxyXG4gICAgICAgIGNvbG9uSW5kID0gaG9zdC5pbmRleE9mKCc6Jyk7XHJcbiAgICAgICAgaWYgKGNvbG9uSW5kID49IDApIHtcclxuICAgICAgICAgICAgc2VjdXJlID0gc2NoZW1lID09PSAnaHR0cHMnIHx8IHNjaGVtZSA9PT0gJ3dzcyc7XHJcbiAgICAgICAgICAgIHBvcnQgPSBwYXJzZUludChob3N0LnN1YnN0cmluZyhjb2xvbkluZCArIDEpLCAxMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb2xvbkluZCA9IGhvc3QubGVuZ3RoO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgaG9zdFdpdGhvdXRQb3J0ID0gaG9zdC5zbGljZSgwLCBjb2xvbkluZCk7XHJcbiAgICAgICAgaWYgKGhvc3RXaXRob3V0UG9ydC50b0xvd2VyQ2FzZSgpID09PSAnbG9jYWxob3N0Jykge1xyXG4gICAgICAgICAgICBkb21haW4gPSAnbG9jYWxob3N0JztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaG9zdFdpdGhvdXRQb3J0LnNwbGl0KCcuJykubGVuZ3RoIDw9IDIpIHtcclxuICAgICAgICAgICAgZG9tYWluID0gaG9zdFdpdGhvdXRQb3J0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gSW50ZXJwcmV0IHRoZSBzdWJkb21haW4gb2YgYSAzIG9yIG1vcmUgY29tcG9uZW50IFVSTCBhcyB0aGUgbmFtZXNwYWNlIG5hbWUuXHJcbiAgICAgICAgICAgIHZhciBkb3RJbmQgPSBob3N0LmluZGV4T2YoJy4nKTtcclxuICAgICAgICAgICAgc3ViZG9tYWluID0gaG9zdC5zdWJzdHJpbmcoMCwgZG90SW5kKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICBkb21haW4gPSBob3N0LnN1YnN0cmluZyhkb3RJbmQgKyAxKTtcclxuICAgICAgICAgICAgLy8gTm9ybWFsaXplIG5hbWVzcGFjZXMgdG8gbG93ZXJjYXNlIHRvIHNoYXJlIHN0b3JhZ2UgLyBjb25uZWN0aW9uLlxyXG4gICAgICAgICAgICBuYW1lc3BhY2UgPSBzdWJkb21haW47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEFsd2F5cyB0cmVhdCB0aGUgdmFsdWUgb2YgdGhlIGBuc2AgYXMgdGhlIG5hbWVzcGFjZSBuYW1lIGlmIGl0IGlzIHByZXNlbnQuXHJcbiAgICAgICAgaWYgKCducycgaW4gcXVlcnlQYXJhbXMpIHtcclxuICAgICAgICAgICAgbmFtZXNwYWNlID0gcXVlcnlQYXJhbXNbJ25zJ107XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBob3N0OiBob3N0LFxyXG4gICAgICAgIHBvcnQ6IHBvcnQsXHJcbiAgICAgICAgZG9tYWluOiBkb21haW4sXHJcbiAgICAgICAgc3ViZG9tYWluOiBzdWJkb21haW4sXHJcbiAgICAgICAgc2VjdXJlOiBzZWN1cmUsXHJcbiAgICAgICAgc2NoZW1lOiBzY2hlbWUsXHJcbiAgICAgICAgcGF0aFN0cmluZzogcGF0aFN0cmluZyxcclxuICAgICAgICBuYW1lc3BhY2U6IG5hbWVzcGFjZVxyXG4gICAgfTtcclxufTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFRydWUgZm9yIGludmFsaWQgRmlyZWJhc2Uga2V5c1xyXG4gKiBAdHlwZSB7UmVnRXhwfVxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxudmFyIElOVkFMSURfS0VZX1JFR0VYXyA9IC9bXFxbXFxdLiMkXFwvXFx1MDAwMC1cXHUwMDFGXFx1MDA3Rl0vO1xyXG4vKipcclxuICogVHJ1ZSBmb3IgaW52YWxpZCBGaXJlYmFzZSBwYXRocy5cclxuICogQWxsb3dzICcvJyBpbiBwYXRocy5cclxuICogQHR5cGUge1JlZ0V4cH1cclxuICogQHByaXZhdGVcclxuICovXHJcbnZhciBJTlZBTElEX1BBVEhfUkVHRVhfID0gL1tcXFtcXF0uIyRcXHUwMDAwLVxcdTAwMUZcXHUwMDdGXS87XHJcbi8qKlxyXG4gKiBNYXhpbXVtIG51bWJlciBvZiBjaGFyYWN0ZXJzIHRvIGFsbG93IGluIGxlYWYgdmFsdWVcclxuICogQHR5cGUge251bWJlcn1cclxuICogQHByaXZhdGVcclxuICovXHJcbnZhciBNQVhfTEVBRl9TSVpFXyA9IDEwICogMTAyNCAqIDEwMjQ7XHJcbi8qKlxyXG4gKiBAcGFyYW0geyp9IGtleVxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxudmFyIGlzVmFsaWRLZXkgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICByZXR1cm4gKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleS5sZW5ndGggIT09IDAgJiYgIUlOVkFMSURfS0VZX1JFR0VYXy50ZXN0KGtleSkpO1xyXG59O1xyXG4vKipcclxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGhTdHJpbmdcclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbnZhciBpc1ZhbGlkUGF0aFN0cmluZyA9IGZ1bmN0aW9uIChwYXRoU3RyaW5nKSB7XHJcbiAgICByZXR1cm4gKHR5cGVvZiBwYXRoU3RyaW5nID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgIHBhdGhTdHJpbmcubGVuZ3RoICE9PSAwICYmXHJcbiAgICAgICAgIUlOVkFMSURfUEFUSF9SRUdFWF8udGVzdChwYXRoU3RyaW5nKSk7XHJcbn07XHJcbi8qKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aFN0cmluZ1xyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxudmFyIGlzVmFsaWRSb290UGF0aFN0cmluZyA9IGZ1bmN0aW9uIChwYXRoU3RyaW5nKSB7XHJcbiAgICBpZiAocGF0aFN0cmluZykge1xyXG4gICAgICAgIC8vIEFsbG93ICcvLmluZm8vJyBhdCB0aGUgYmVnaW5uaW5nLlxyXG4gICAgICAgIHBhdGhTdHJpbmcgPSBwYXRoU3RyaW5nLnJlcGxhY2UoL15cXC8qXFwuaW5mbyhcXC98JCkvLCAnLycpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGlzVmFsaWRQYXRoU3RyaW5nKHBhdGhTdHJpbmcpO1xyXG59O1xyXG4vKipcclxuICogQHBhcmFtIHsqfSBwcmlvcml0eVxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxudmFyIGlzVmFsaWRQcmlvcml0eSA9IGZ1bmN0aW9uIChwcmlvcml0eSkge1xyXG4gICAgcmV0dXJuIChwcmlvcml0eSA9PT0gbnVsbCB8fFxyXG4gICAgICAgIHR5cGVvZiBwcmlvcml0eSA9PT0gJ3N0cmluZycgfHxcclxuICAgICAgICAodHlwZW9mIHByaW9yaXR5ID09PSAnbnVtYmVyJyAmJiAhaXNJbnZhbGlkSlNPTk51bWJlcihwcmlvcml0eSkpIHx8XHJcbiAgICAgICAgKHByaW9yaXR5ICYmXHJcbiAgICAgICAgICAgIHR5cGVvZiBwcmlvcml0eSA9PT0gJ29iamVjdCcgJiZcclxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgICAgICAgICAgY29udGFpbnMocHJpb3JpdHksICcuc3YnKSkpO1xyXG59O1xyXG4vKipcclxuICogUHJlLXZhbGlkYXRlIGEgZGF0dW0gcGFzc2VkIGFzIGFuIGFyZ3VtZW50IHRvIEZpcmViYXNlIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gZm5OYW1lXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBhcmd1bWVudE51bWJlclxyXG4gKiBAcGFyYW0geyp9IGRhdGFcclxuICogQHBhcmFtIHshUGF0aH0gcGF0aFxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG9wdGlvbmFsXHJcbiAqL1xyXG52YXIgdmFsaWRhdGVGaXJlYmFzZURhdGFBcmcgPSBmdW5jdGlvbiAoZm5OYW1lLCBhcmd1bWVudE51bWJlciwgZGF0YSwgcGF0aCwgb3B0aW9uYWwpIHtcclxuICAgIGlmIChvcHRpb25hbCAmJiBkYXRhID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB2YWxpZGF0ZUZpcmViYXNlRGF0YShlcnJvclByZWZpeChmbk5hbWUsIGFyZ3VtZW50TnVtYmVyLCBvcHRpb25hbCksIGRhdGEsIHBhdGgpO1xyXG59O1xyXG4vKipcclxuICogVmFsaWRhdGUgYSBkYXRhIG9iamVjdCBjbGllbnQtc2lkZSBiZWZvcmUgc2VuZGluZyB0byBzZXJ2ZXIuXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBlcnJvclByZWZpeFxyXG4gKiBAcGFyYW0geyp9IGRhdGFcclxuICogQHBhcmFtIHshUGF0aHwhVmFsaWRhdGlvblBhdGh9IHBhdGhfXHJcbiAqL1xyXG52YXIgdmFsaWRhdGVGaXJlYmFzZURhdGEgPSBmdW5jdGlvbiAoZXJyb3JQcmVmaXgsIGRhdGEsIHBhdGhfKSB7XHJcbiAgICB2YXIgcGF0aCA9IHBhdGhfIGluc3RhbmNlb2YgUGF0aCA/IG5ldyBWYWxpZGF0aW9uUGF0aChwYXRoXywgZXJyb3JQcmVmaXgpIDogcGF0aF87XHJcbiAgICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yUHJlZml4ICsgJ2NvbnRhaW5zIHVuZGVmaW5lZCAnICsgcGF0aC50b0Vycm9yU3RyaW5nKCkpO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yUHJlZml4ICtcclxuICAgICAgICAgICAgJ2NvbnRhaW5zIGEgZnVuY3Rpb24gJyArXHJcbiAgICAgICAgICAgIHBhdGgudG9FcnJvclN0cmluZygpICtcclxuICAgICAgICAgICAgJyB3aXRoIGNvbnRlbnRzID0gJyArXHJcbiAgICAgICAgICAgIGRhdGEudG9TdHJpbmcoKSk7XHJcbiAgICB9XHJcbiAgICBpZiAoaXNJbnZhbGlkSlNPTk51bWJlcihkYXRhKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclByZWZpeCArICdjb250YWlucyAnICsgZGF0YS50b1N0cmluZygpICsgJyAnICsgcGF0aC50b0Vycm9yU3RyaW5nKCkpO1xyXG4gICAgfVxyXG4gICAgLy8gQ2hlY2sgbWF4IGxlYWYgc2l6ZSwgYnV0IHRyeSB0byBhdm9pZCB0aGUgdXRmOCBjb252ZXJzaW9uIGlmIHdlIGNhbi5cclxuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycgJiZcclxuICAgICAgICBkYXRhLmxlbmd0aCA+IE1BWF9MRUFGX1NJWkVfIC8gMyAmJlxyXG4gICAgICAgIHN0cmluZ0xlbmd0aChkYXRhKSA+IE1BWF9MRUFGX1NJWkVfKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yUHJlZml4ICtcclxuICAgICAgICAgICAgJ2NvbnRhaW5zIGEgc3RyaW5nIGdyZWF0ZXIgdGhhbiAnICtcclxuICAgICAgICAgICAgTUFYX0xFQUZfU0laRV8gK1xyXG4gICAgICAgICAgICAnIHV0ZjggYnl0ZXMgJyArXHJcbiAgICAgICAgICAgIHBhdGgudG9FcnJvclN0cmluZygpICtcclxuICAgICAgICAgICAgXCIgKCdcIiArXHJcbiAgICAgICAgICAgIGRhdGEuc3Vic3RyaW5nKDAsIDUwKSArXHJcbiAgICAgICAgICAgIFwiLi4uJylcIik7XHJcbiAgICB9XHJcbiAgICAvLyBUT0RPID0gUGVyZiA9IENvbnNpZGVyIGNvbWJpbmluZyB0aGUgcmVjdXJzaXZlIHZhbGlkYXRpb24gb2Yga2V5cyBpbnRvIE5vZGVGcm9tSlNPTlxyXG4gICAgLy8gdG8gc2F2ZSBleHRyYSB3YWxraW5nIG9mIGxhcmdlIG9iamVjdHMuXHJcbiAgICBpZiAoZGF0YSAmJiB0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICB2YXIgaGFzRG90VmFsdWVfMSA9IGZhbHNlO1xyXG4gICAgICAgIHZhciBoYXNBY3R1YWxDaGlsZF8xID0gZmFsc2U7XHJcbiAgICAgICAgZWFjaChkYXRhLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAoa2V5ID09PSAnLnZhbHVlJykge1xyXG4gICAgICAgICAgICAgICAgaGFzRG90VmFsdWVfMSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnLnByaW9yaXR5JyAmJiBrZXkgIT09ICcuc3YnKSB7XHJcbiAgICAgICAgICAgICAgICBoYXNBY3R1YWxDaGlsZF8xID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZEtleShrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yUHJlZml4ICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJyBjb250YWlucyBhbiBpbnZhbGlkIGtleSAoJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICcpICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoLnRvRXJyb3JTdHJpbmcoKSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICcuICBLZXlzIG11c3QgYmUgbm9uLWVtcHR5IHN0cmluZ3MgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdhbmQgY2FuXFwndCBjb250YWluIFwiLlwiLCBcIiNcIiwgXCIkXCIsIFwiL1wiLCBcIltcIiwgb3IgXCJdXCInKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBwYXRoLnB1c2goa2V5KTtcclxuICAgICAgICAgICAgdmFsaWRhdGVGaXJlYmFzZURhdGEoZXJyb3JQcmVmaXgsIHZhbHVlLCBwYXRoKTtcclxuICAgICAgICAgICAgcGF0aC5wb3AoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoaGFzRG90VmFsdWVfMSAmJiBoYXNBY3R1YWxDaGlsZF8xKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclByZWZpeCArXHJcbiAgICAgICAgICAgICAgICAnIGNvbnRhaW5zIFwiLnZhbHVlXCIgY2hpbGQgJyArXHJcbiAgICAgICAgICAgICAgICBwYXRoLnRvRXJyb3JTdHJpbmcoKSArXHJcbiAgICAgICAgICAgICAgICAnIGluIGFkZGl0aW9uIHRvIGFjdHVhbCBjaGlsZHJlbi4nKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcbi8qKlxyXG4gKiBQcmUtdmFsaWRhdGUgcGF0aHMgcGFzc2VkIGluIHRoZSBmaXJlYmFzZSBmdW5jdGlvbi5cclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IGVycm9yUHJlZml4XHJcbiAqIEBwYXJhbSB7QXJyYXk8IVBhdGg+fSBtZXJnZVBhdGhzXHJcbiAqL1xyXG52YXIgdmFsaWRhdGVGaXJlYmFzZU1lcmdlUGF0aHMgPSBmdW5jdGlvbiAoZXJyb3JQcmVmaXgsIG1lcmdlUGF0aHMpIHtcclxuICAgIHZhciBpLCBjdXJQYXRoO1xyXG4gICAgZm9yIChpID0gMDsgaSA8IG1lcmdlUGF0aHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjdXJQYXRoID0gbWVyZ2VQYXRoc1tpXTtcclxuICAgICAgICB2YXIga2V5cyA9IGN1clBhdGguc2xpY2UoKTtcclxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGtleXMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgaWYgKGtleXNbal0gPT09ICcucHJpb3JpdHknICYmIGogPT09IGtleXMubGVuZ3RoIC0gMSkgO1xyXG4gICAgICAgICAgICBlbHNlIGlmICghaXNWYWxpZEtleShrZXlzW2pdKSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yUHJlZml4ICtcclxuICAgICAgICAgICAgICAgICAgICAnY29udGFpbnMgYW4gaW52YWxpZCBrZXkgKCcgK1xyXG4gICAgICAgICAgICAgICAgICAgIGtleXNbal0gK1xyXG4gICAgICAgICAgICAgICAgICAgICcpIGluIHBhdGggJyArXHJcbiAgICAgICAgICAgICAgICAgICAgY3VyUGF0aC50b1N0cmluZygpICtcclxuICAgICAgICAgICAgICAgICAgICAnLiBLZXlzIG11c3QgYmUgbm9uLWVtcHR5IHN0cmluZ3MgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgJ2FuZCBjYW5cXCd0IGNvbnRhaW4gXCIuXCIsIFwiI1wiLCBcIiRcIiwgXCIvXCIsIFwiW1wiLCBvciBcIl1cIicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gQ2hlY2sgdGhhdCB1cGRhdGUga2V5cyBhcmUgbm90IGRlc2NlbmRhbnRzIG9mIGVhY2ggb3RoZXIuXHJcbiAgICAvLyBXZSByZWx5IG9uIHRoZSBwcm9wZXJ0eSB0aGF0IHNvcnRpbmcgZ3VhcmFudGVlcyB0aGF0IGFuY2VzdG9ycyBjb21lXHJcbiAgICAvLyByaWdodCBiZWZvcmUgZGVzY2VuZGFudHMuXHJcbiAgICBtZXJnZVBhdGhzLnNvcnQoUGF0aC5jb21wYXJlUGF0aHMpO1xyXG4gICAgdmFyIHByZXZQYXRoID0gbnVsbDtcclxuICAgIGZvciAoaSA9IDA7IGkgPCBtZXJnZVBhdGhzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY3VyUGF0aCA9IG1lcmdlUGF0aHNbaV07XHJcbiAgICAgICAgaWYgKHByZXZQYXRoICE9PSBudWxsICYmIHByZXZQYXRoLmNvbnRhaW5zKGN1clBhdGgpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclByZWZpeCArXHJcbiAgICAgICAgICAgICAgICAnY29udGFpbnMgYSBwYXRoICcgK1xyXG4gICAgICAgICAgICAgICAgcHJldlBhdGgudG9TdHJpbmcoKSArXHJcbiAgICAgICAgICAgICAgICAnIHRoYXQgaXMgYW5jZXN0b3Igb2YgYW5vdGhlciBwYXRoICcgK1xyXG4gICAgICAgICAgICAgICAgY3VyUGF0aC50b1N0cmluZygpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHJldlBhdGggPSBjdXJQYXRoO1xyXG4gICAgfVxyXG59O1xyXG4vKipcclxuICogcHJlLXZhbGlkYXRlIGFuIG9iamVjdCBwYXNzZWQgYXMgYW4gYXJndW1lbnQgdG8gZmlyZWJhc2UgZnVuY3Rpb24gKFxyXG4gKiBtdXN0IGJlIGFuIG9iamVjdCAtIGUuZy4gZm9yIGZpcmViYXNlLnVwZGF0ZSgpKS5cclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IGZuTmFtZVxyXG4gKiBAcGFyYW0ge251bWJlcn0gYXJndW1lbnROdW1iZXJcclxuICogQHBhcmFtIHsqfSBkYXRhXHJcbiAqIEBwYXJhbSB7IVBhdGh9IHBhdGhcclxuICogQHBhcmFtIHtib29sZWFufSBvcHRpb25hbFxyXG4gKi9cclxudmFyIHZhbGlkYXRlRmlyZWJhc2VNZXJnZURhdGFBcmcgPSBmdW5jdGlvbiAoZm5OYW1lLCBhcmd1bWVudE51bWJlciwgZGF0YSwgcGF0aCwgb3B0aW9uYWwpIHtcclxuICAgIGlmIChvcHRpb25hbCAmJiBkYXRhID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB2YXIgZXJyb3JQcmVmaXgkMSA9IGVycm9yUHJlZml4KGZuTmFtZSwgYXJndW1lbnROdW1iZXIsIG9wdGlvbmFsKTtcclxuICAgIGlmICghKGRhdGEgJiYgdHlwZW9mIGRhdGEgPT09ICdvYmplY3QnKSB8fCBBcnJheS5pc0FycmF5KGRhdGEpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yUHJlZml4JDEgKyAnIG11c3QgYmUgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGNoaWxkcmVuIHRvIHJlcGxhY2UuJyk7XHJcbiAgICB9XHJcbiAgICB2YXIgbWVyZ2VQYXRocyA9IFtdO1xyXG4gICAgZWFjaChkYXRhLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgIHZhciBjdXJQYXRoID0gbmV3IFBhdGgoa2V5KTtcclxuICAgICAgICB2YWxpZGF0ZUZpcmViYXNlRGF0YShlcnJvclByZWZpeCQxLCB2YWx1ZSwgcGF0aC5jaGlsZChjdXJQYXRoKSk7XHJcbiAgICAgICAgaWYgKGN1clBhdGguZ2V0QmFjaygpID09PSAnLnByaW9yaXR5Jykge1xyXG4gICAgICAgICAgICBpZiAoIWlzVmFsaWRQcmlvcml0eSh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclByZWZpeCQxICtcclxuICAgICAgICAgICAgICAgICAgICBcImNvbnRhaW5zIGFuIGludmFsaWQgdmFsdWUgZm9yICdcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgY3VyUGF0aC50b1N0cmluZygpICtcclxuICAgICAgICAgICAgICAgICAgICBcIicsIHdoaWNoIG11c3QgYmUgYSB2YWxpZCBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgJ0ZpcmViYXNlIHByaW9yaXR5IChhIHN0cmluZywgZmluaXRlIG51bWJlciwgc2VydmVyIHZhbHVlLCBvciBudWxsKS4nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBtZXJnZVBhdGhzLnB1c2goY3VyUGF0aCk7XHJcbiAgICB9KTtcclxuICAgIHZhbGlkYXRlRmlyZWJhc2VNZXJnZVBhdGhzKGVycm9yUHJlZml4JDEsIG1lcmdlUGF0aHMpO1xyXG59O1xyXG52YXIgdmFsaWRhdGVQcmlvcml0eSA9IGZ1bmN0aW9uIChmbk5hbWUsIGFyZ3VtZW50TnVtYmVyLCBwcmlvcml0eSwgb3B0aW9uYWwpIHtcclxuICAgIGlmIChvcHRpb25hbCAmJiBwcmlvcml0eSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzSW52YWxpZEpTT05OdW1iZXIocHJpb3JpdHkpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yUHJlZml4KGZuTmFtZSwgYXJndW1lbnROdW1iZXIsIG9wdGlvbmFsKSArXHJcbiAgICAgICAgICAgICdpcyAnICtcclxuICAgICAgICAgICAgcHJpb3JpdHkudG9TdHJpbmcoKSArXHJcbiAgICAgICAgICAgICcsIGJ1dCBtdXN0IGJlIGEgdmFsaWQgRmlyZWJhc2UgcHJpb3JpdHkgKGEgc3RyaW5nLCBmaW5pdGUgbnVtYmVyLCAnICtcclxuICAgICAgICAgICAgJ3NlcnZlciB2YWx1ZSwgb3IgbnVsbCkuJyk7XHJcbiAgICB9XHJcbiAgICAvLyBTcGVjaWFsIGNhc2UgdG8gYWxsb3cgaW1wb3J0aW5nIGRhdGEgd2l0aCBhIC5zdi5cclxuICAgIGlmICghaXNWYWxpZFByaW9yaXR5KHByaW9yaXR5KSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclByZWZpeChmbk5hbWUsIGFyZ3VtZW50TnVtYmVyLCBvcHRpb25hbCkgK1xyXG4gICAgICAgICAgICAnbXVzdCBiZSBhIHZhbGlkIEZpcmViYXNlIHByaW9yaXR5ICcgK1xyXG4gICAgICAgICAgICAnKGEgc3RyaW5nLCBmaW5pdGUgbnVtYmVyLCBzZXJ2ZXIgdmFsdWUsIG9yIG51bGwpLicpO1xyXG4gICAgfVxyXG59O1xyXG52YXIgdmFsaWRhdGVFdmVudFR5cGUgPSBmdW5jdGlvbiAoZm5OYW1lLCBhcmd1bWVudE51bWJlciwgZXZlbnRUeXBlLCBvcHRpb25hbCkge1xyXG4gICAgaWYgKG9wdGlvbmFsICYmIGV2ZW50VHlwZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgc3dpdGNoIChldmVudFR5cGUpIHtcclxuICAgICAgICBjYXNlICd2YWx1ZSc6XHJcbiAgICAgICAgY2FzZSAnY2hpbGRfYWRkZWQnOlxyXG4gICAgICAgIGNhc2UgJ2NoaWxkX3JlbW92ZWQnOlxyXG4gICAgICAgIGNhc2UgJ2NoaWxkX2NoYW5nZWQnOlxyXG4gICAgICAgIGNhc2UgJ2NoaWxkX21vdmVkJzpcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yUHJlZml4KGZuTmFtZSwgYXJndW1lbnROdW1iZXIsIG9wdGlvbmFsKSArXHJcbiAgICAgICAgICAgICAgICAnbXVzdCBiZSBhIHZhbGlkIGV2ZW50IHR5cGUgPSBcInZhbHVlXCIsIFwiY2hpbGRfYWRkZWRcIiwgXCJjaGlsZF9yZW1vdmVkXCIsICcgK1xyXG4gICAgICAgICAgICAgICAgJ1wiY2hpbGRfY2hhbmdlZFwiLCBvciBcImNoaWxkX21vdmVkXCIuJyk7XHJcbiAgICB9XHJcbn07XHJcbnZhciB2YWxpZGF0ZUtleSA9IGZ1bmN0aW9uIChmbk5hbWUsIGFyZ3VtZW50TnVtYmVyLCBrZXksIG9wdGlvbmFsKSB7XHJcbiAgICBpZiAob3B0aW9uYWwgJiYga2V5ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoIWlzVmFsaWRLZXkoa2V5KSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclByZWZpeChmbk5hbWUsIGFyZ3VtZW50TnVtYmVyLCBvcHRpb25hbCkgK1xyXG4gICAgICAgICAgICAnd2FzIGFuIGludmFsaWQga2V5ID0gXCInICtcclxuICAgICAgICAgICAga2V5ICtcclxuICAgICAgICAgICAgJ1wiLiAgRmlyZWJhc2Uga2V5cyBtdXN0IGJlIG5vbi1lbXB0eSBzdHJpbmdzIGFuZCAnICtcclxuICAgICAgICAgICAgJ2NhblxcJ3QgY29udGFpbiBcIi5cIiwgXCIjXCIsIFwiJFwiLCBcIi9cIiwgXCJbXCIsIG9yIFwiXVwiKS4nKTtcclxuICAgIH1cclxufTtcclxudmFyIHZhbGlkYXRlUGF0aFN0cmluZyA9IGZ1bmN0aW9uIChmbk5hbWUsIGFyZ3VtZW50TnVtYmVyLCBwYXRoU3RyaW5nLCBvcHRpb25hbCkge1xyXG4gICAgaWYgKG9wdGlvbmFsICYmIHBhdGhTdHJpbmcgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICghaXNWYWxpZFBhdGhTdHJpbmcocGF0aFN0cmluZykpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JQcmVmaXgoZm5OYW1lLCBhcmd1bWVudE51bWJlciwgb3B0aW9uYWwpICtcclxuICAgICAgICAgICAgJ3dhcyBhbiBpbnZhbGlkIHBhdGggPSBcIicgK1xyXG4gICAgICAgICAgICBwYXRoU3RyaW5nICtcclxuICAgICAgICAgICAgJ1wiLiBQYXRocyBtdXN0IGJlIG5vbi1lbXB0eSBzdHJpbmdzIGFuZCAnICtcclxuICAgICAgICAgICAgJ2NhblxcJ3QgY29udGFpbiBcIi5cIiwgXCIjXCIsIFwiJFwiLCBcIltcIiwgb3IgXCJdXCInKTtcclxuICAgIH1cclxufTtcclxudmFyIHZhbGlkYXRlUm9vdFBhdGhTdHJpbmcgPSBmdW5jdGlvbiAoZm5OYW1lLCBhcmd1bWVudE51bWJlciwgcGF0aFN0cmluZywgb3B0aW9uYWwpIHtcclxuICAgIGlmIChwYXRoU3RyaW5nKSB7XHJcbiAgICAgICAgLy8gQWxsb3cgJy8uaW5mby8nIGF0IHRoZSBiZWdpbm5pbmcuXHJcbiAgICAgICAgcGF0aFN0cmluZyA9IHBhdGhTdHJpbmcucmVwbGFjZSgvXlxcLypcXC5pbmZvKFxcL3wkKS8sICcvJyk7XHJcbiAgICB9XHJcbiAgICB2YWxpZGF0ZVBhdGhTdHJpbmcoZm5OYW1lLCBhcmd1bWVudE51bWJlciwgcGF0aFN0cmluZywgb3B0aW9uYWwpO1xyXG59O1xyXG52YXIgdmFsaWRhdGVXcml0YWJsZVBhdGggPSBmdW5jdGlvbiAoZm5OYW1lLCBwYXRoKSB7XHJcbiAgICBpZiAocGF0aC5nZXRGcm9udCgpID09PSAnLmluZm8nKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGZuTmFtZSArIFwiIGZhaWxlZCA9IENhbid0IG1vZGlmeSBkYXRhIHVuZGVyIC8uaW5mby9cIik7XHJcbiAgICB9XHJcbn07XHJcbnZhciB2YWxpZGF0ZVVybCA9IGZ1bmN0aW9uIChmbk5hbWUsIGFyZ3VtZW50TnVtYmVyLCBwYXJzZWRVcmwpIHtcclxuICAgIC8vIFRPRE8gPSBWYWxpZGF0ZSBzZXJ2ZXIgYmV0dGVyLlxyXG4gICAgdmFyIHBhdGhTdHJpbmcgPSBwYXJzZWRVcmwucGF0aC50b1N0cmluZygpO1xyXG4gICAgaWYgKCEodHlwZW9mIHBhcnNlZFVybC5yZXBvSW5mby5ob3N0ID09PSAnc3RyaW5nJykgfHxcclxuICAgICAgICBwYXJzZWRVcmwucmVwb0luZm8uaG9zdC5sZW5ndGggPT09IDAgfHxcclxuICAgICAgICAoIWlzVmFsaWRLZXkocGFyc2VkVXJsLnJlcG9JbmZvLm5hbWVzcGFjZSkgJiZcclxuICAgICAgICAgICAgcGFyc2VkVXJsLnJlcG9JbmZvLmhvc3Quc3BsaXQoJzonKVswXSAhPT0gJ2xvY2FsaG9zdCcpIHx8XHJcbiAgICAgICAgKHBhdGhTdHJpbmcubGVuZ3RoICE9PSAwICYmICFpc1ZhbGlkUm9vdFBhdGhTdHJpbmcocGF0aFN0cmluZykpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yUHJlZml4KGZuTmFtZSwgYXJndW1lbnROdW1iZXIsIGZhbHNlKSArXHJcbiAgICAgICAgICAgICdtdXN0IGJlIGEgdmFsaWQgZmlyZWJhc2UgVVJMIGFuZCAnICtcclxuICAgICAgICAgICAgJ3RoZSBwYXRoIGNhblxcJ3QgY29udGFpbiBcIi5cIiwgXCIjXCIsIFwiJFwiLCBcIltcIiwgb3IgXCJdXCIuJyk7XHJcbiAgICB9XHJcbn07XHJcbnZhciB2YWxpZGF0ZUJvb2xlYW4gPSBmdW5jdGlvbiAoZm5OYW1lLCBhcmd1bWVudE51bWJlciwgYm9vbCwgb3B0aW9uYWwpIHtcclxuICAgIGlmIChvcHRpb25hbCAmJiBib29sID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIGJvb2wgIT09ICdib29sZWFuJykge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclByZWZpeChmbk5hbWUsIGFyZ3VtZW50TnVtYmVyLCBvcHRpb25hbCkgKyAnbXVzdCBiZSBhIGJvb2xlYW4uJyk7XHJcbiAgICB9XHJcbn07XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbnZhciBPbkRpc2Nvbm5lY3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IVJlcG99IHJlcG9fXHJcbiAgICAgKiBAcGFyYW0geyFQYXRofSBwYXRoX1xyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBPbkRpc2Nvbm5lY3QocmVwb18sIHBhdGhfKSB7XHJcbiAgICAgICAgdGhpcy5yZXBvXyA9IHJlcG9fO1xyXG4gICAgICAgIHRoaXMucGF0aF8gPSBwYXRoXztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbig/RXJyb3IpPX0gb25Db21wbGV0ZVxyXG4gICAgICogQHJldHVybiB7IWZpcmViYXNlLlByb21pc2V9XHJcbiAgICAgKi9cclxuICAgIE9uRGlzY29ubmVjdC5wcm90b3R5cGUuY2FuY2VsID0gZnVuY3Rpb24gKG9uQ29tcGxldGUpIHtcclxuICAgICAgICB2YWxpZGF0ZUFyZ0NvdW50KCdPbkRpc2Nvbm5lY3QuY2FuY2VsJywgMCwgMSwgYXJndW1lbnRzLmxlbmd0aCk7XHJcbiAgICAgICAgdmFsaWRhdGVDYWxsYmFjaygnT25EaXNjb25uZWN0LmNhbmNlbCcsIDEsIG9uQ29tcGxldGUsIHRydWUpO1xyXG4gICAgICAgIHZhciBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xyXG4gICAgICAgIHRoaXMucmVwb18ub25EaXNjb25uZWN0Q2FuY2VsKHRoaXMucGF0aF8sIGRlZmVycmVkLndyYXBDYWxsYmFjayhvbkNvbXBsZXRlKSk7XHJcbiAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKD9FcnJvcik9fSBvbkNvbXBsZXRlXHJcbiAgICAgKiBAcmV0dXJuIHshZmlyZWJhc2UuUHJvbWlzZX1cclxuICAgICAqL1xyXG4gICAgT25EaXNjb25uZWN0LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAob25Db21wbGV0ZSkge1xyXG4gICAgICAgIHZhbGlkYXRlQXJnQ291bnQoJ09uRGlzY29ubmVjdC5yZW1vdmUnLCAwLCAxLCBhcmd1bWVudHMubGVuZ3RoKTtcclxuICAgICAgICB2YWxpZGF0ZVdyaXRhYmxlUGF0aCgnT25EaXNjb25uZWN0LnJlbW92ZScsIHRoaXMucGF0aF8pO1xyXG4gICAgICAgIHZhbGlkYXRlQ2FsbGJhY2soJ09uRGlzY29ubmVjdC5yZW1vdmUnLCAxLCBvbkNvbXBsZXRlLCB0cnVlKTtcclxuICAgICAgICB2YXIgZGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQoKTtcclxuICAgICAgICB0aGlzLnJlcG9fLm9uRGlzY29ubmVjdFNldCh0aGlzLnBhdGhfLCBudWxsLCBkZWZlcnJlZC53cmFwQ2FsbGJhY2sob25Db21wbGV0ZSkpO1xyXG4gICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZVxyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbig/RXJyb3IpPX0gb25Db21wbGV0ZVxyXG4gICAgICogQHJldHVybiB7IWZpcmViYXNlLlByb21pc2V9XHJcbiAgICAgKi9cclxuICAgIE9uRGlzY29ubmVjdC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKHZhbHVlLCBvbkNvbXBsZXRlKSB7XHJcbiAgICAgICAgdmFsaWRhdGVBcmdDb3VudCgnT25EaXNjb25uZWN0LnNldCcsIDEsIDIsIGFyZ3VtZW50cy5sZW5ndGgpO1xyXG4gICAgICAgIHZhbGlkYXRlV3JpdGFibGVQYXRoKCdPbkRpc2Nvbm5lY3Quc2V0JywgdGhpcy5wYXRoXyk7XHJcbiAgICAgICAgdmFsaWRhdGVGaXJlYmFzZURhdGFBcmcoJ09uRGlzY29ubmVjdC5zZXQnLCAxLCB2YWx1ZSwgdGhpcy5wYXRoXywgZmFsc2UpO1xyXG4gICAgICAgIHZhbGlkYXRlQ2FsbGJhY2soJ09uRGlzY29ubmVjdC5zZXQnLCAyLCBvbkNvbXBsZXRlLCB0cnVlKTtcclxuICAgICAgICB2YXIgZGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQoKTtcclxuICAgICAgICB0aGlzLnJlcG9fLm9uRGlzY29ubmVjdFNldCh0aGlzLnBhdGhfLCB2YWx1ZSwgZGVmZXJyZWQud3JhcENhbGxiYWNrKG9uQ29tcGxldGUpKTtcclxuICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWVcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ3xudWxsfSBwcmlvcml0eVxyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbig/RXJyb3IpPX0gb25Db21wbGV0ZVxyXG4gICAgICogQHJldHVybiB7IWZpcmViYXNlLlByb21pc2V9XHJcbiAgICAgKi9cclxuICAgIE9uRGlzY29ubmVjdC5wcm90b3R5cGUuc2V0V2l0aFByaW9yaXR5ID0gZnVuY3Rpb24gKHZhbHVlLCBwcmlvcml0eSwgb25Db21wbGV0ZSkge1xyXG4gICAgICAgIHZhbGlkYXRlQXJnQ291bnQoJ09uRGlzY29ubmVjdC5zZXRXaXRoUHJpb3JpdHknLCAyLCAzLCBhcmd1bWVudHMubGVuZ3RoKTtcclxuICAgICAgICB2YWxpZGF0ZVdyaXRhYmxlUGF0aCgnT25EaXNjb25uZWN0LnNldFdpdGhQcmlvcml0eScsIHRoaXMucGF0aF8pO1xyXG4gICAgICAgIHZhbGlkYXRlRmlyZWJhc2VEYXRhQXJnKCdPbkRpc2Nvbm5lY3Quc2V0V2l0aFByaW9yaXR5JywgMSwgdmFsdWUsIHRoaXMucGF0aF8sIGZhbHNlKTtcclxuICAgICAgICB2YWxpZGF0ZVByaW9yaXR5KCdPbkRpc2Nvbm5lY3Quc2V0V2l0aFByaW9yaXR5JywgMiwgcHJpb3JpdHksIGZhbHNlKTtcclxuICAgICAgICB2YWxpZGF0ZUNhbGxiYWNrKCdPbkRpc2Nvbm5lY3Quc2V0V2l0aFByaW9yaXR5JywgMywgb25Db21wbGV0ZSwgdHJ1ZSk7XHJcbiAgICAgICAgdmFyIGRlZmVycmVkID0gbmV3IERlZmVycmVkKCk7XHJcbiAgICAgICAgdGhpcy5yZXBvXy5vbkRpc2Nvbm5lY3RTZXRXaXRoUHJpb3JpdHkodGhpcy5wYXRoXywgdmFsdWUsIHByaW9yaXR5LCBkZWZlcnJlZC53cmFwQ2FsbGJhY2sob25Db21wbGV0ZSkpO1xyXG4gICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshT2JqZWN0fSBvYmplY3RUb01lcmdlXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKD9FcnJvcik9fSBvbkNvbXBsZXRlXHJcbiAgICAgKiBAcmV0dXJuIHshZmlyZWJhc2UuUHJvbWlzZX1cclxuICAgICAqL1xyXG4gICAgT25EaXNjb25uZWN0LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAob2JqZWN0VG9NZXJnZSwgb25Db21wbGV0ZSkge1xyXG4gICAgICAgIHZhbGlkYXRlQXJnQ291bnQoJ09uRGlzY29ubmVjdC51cGRhdGUnLCAxLCAyLCBhcmd1bWVudHMubGVuZ3RoKTtcclxuICAgICAgICB2YWxpZGF0ZVdyaXRhYmxlUGF0aCgnT25EaXNjb25uZWN0LnVwZGF0ZScsIHRoaXMucGF0aF8pO1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KG9iamVjdFRvTWVyZ2UpKSB7XHJcbiAgICAgICAgICAgIHZhciBuZXdPYmplY3RUb01lcmdlID0ge307XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqZWN0VG9NZXJnZS5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgbmV3T2JqZWN0VG9NZXJnZVsnJyArIGldID0gb2JqZWN0VG9NZXJnZVtpXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvYmplY3RUb01lcmdlID0gbmV3T2JqZWN0VG9NZXJnZTtcclxuICAgICAgICAgICAgd2FybignUGFzc2luZyBhbiBBcnJheSB0byBmaXJlYmFzZS5kYXRhYmFzZS5vbkRpc2Nvbm5lY3QoKS51cGRhdGUoKSBpcyBkZXByZWNhdGVkLiBVc2Ugc2V0KCkgaWYgeW91IHdhbnQgdG8gb3ZlcndyaXRlIHRoZSAnICtcclxuICAgICAgICAgICAgICAgICdleGlzdGluZyBkYXRhLCBvciBhbiBPYmplY3Qgd2l0aCBpbnRlZ2VyIGtleXMgaWYgeW91IHJlYWxseSBkbyB3YW50IHRvIG9ubHkgdXBkYXRlIHNvbWUgb2YgdGhlIGNoaWxkcmVuLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YWxpZGF0ZUZpcmViYXNlTWVyZ2VEYXRhQXJnKCdPbkRpc2Nvbm5lY3QudXBkYXRlJywgMSwgb2JqZWN0VG9NZXJnZSwgdGhpcy5wYXRoXywgZmFsc2UpO1xyXG4gICAgICAgIHZhbGlkYXRlQ2FsbGJhY2soJ09uRGlzY29ubmVjdC51cGRhdGUnLCAyLCBvbkNvbXBsZXRlLCB0cnVlKTtcclxuICAgICAgICB2YXIgZGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQoKTtcclxuICAgICAgICB0aGlzLnJlcG9fLm9uRGlzY29ubmVjdFVwZGF0ZSh0aGlzLnBhdGhfLCBvYmplY3RUb01lcmdlLCBkZWZlcnJlZC53cmFwQ2FsbGJhY2sob25Db21wbGV0ZSkpO1xyXG4gICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBPbkRpc2Nvbm5lY3Q7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBUcmFuc2FjdGlvblJlc3VsdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQSB0eXBlIGZvciB0aGUgcmVzb2x2ZSB2YWx1ZSBvZiBGaXJlYmFzZS50cmFuc2FjdGlvbi5cclxuICAgICAqIEBjb25zdHJ1Y3RvclxyXG4gICAgICogQGRpY3RcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gY29tbWl0dGVkXHJcbiAgICAgKiBAcGFyYW0ge0RhdGFTbmFwc2hvdH0gc25hcHNob3RcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gVHJhbnNhY3Rpb25SZXN1bHQoY29tbWl0dGVkLCBzbmFwc2hvdCkge1xyXG4gICAgICAgIHRoaXMuY29tbWl0dGVkID0gY29tbWl0dGVkO1xyXG4gICAgICAgIHRoaXMuc25hcHNob3QgPSBzbmFwc2hvdDtcclxuICAgIH1cclxuICAgIC8vIERvIG5vdCBjcmVhdGUgcHVibGljIGRvY3VtZW50YXRpb24uIFRoaXMgaXMgaW50ZW5kZWQgdG8gbWFrZSBKU09OIHNlcmlhbGl6YXRpb24gd29yayBidXQgaXMgb3RoZXJ3aXNlIHVubmVjZXNzYXJ5XHJcbiAgICAvLyBmb3IgZW5kLXVzZXJzXHJcbiAgICBUcmFuc2FjdGlvblJlc3VsdC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhbGlkYXRlQXJnQ291bnQoJ1RyYW5zYWN0aW9uUmVzdWx0LnRvSlNPTicsIDAsIDEsIGFyZ3VtZW50cy5sZW5ndGgpO1xyXG4gICAgICAgIHJldHVybiB7IGNvbW1pdHRlZDogdGhpcy5jb21taXR0ZWQsIHNuYXBzaG90OiB0aGlzLnNuYXBzaG90LnRvSlNPTigpIH07XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFRyYW5zYWN0aW9uUmVzdWx0O1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogRmFuY3kgSUQgZ2VuZXJhdG9yIHRoYXQgY3JlYXRlcyAyMC1jaGFyYWN0ZXIgc3RyaW5nIGlkZW50aWZpZXJzIHdpdGggdGhlXHJcbiAqIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxyXG4gKlxyXG4gKiAxLiBUaGV5J3JlIGJhc2VkIG9uIHRpbWVzdGFtcCBzbyB0aGF0IHRoZXkgc29ydCAqYWZ0ZXIqIGFueSBleGlzdGluZyBpZHMuXHJcbiAqIDIuIFRoZXkgY29udGFpbiA3Mi1iaXRzIG9mIHJhbmRvbSBkYXRhIGFmdGVyIHRoZSB0aW1lc3RhbXAgc28gdGhhdCBJRHMgd29uJ3RcclxuICogICAgY29sbGlkZSB3aXRoIG90aGVyIGNsaWVudHMnIElEcy5cclxuICogMy4gVGhleSBzb3J0ICpsZXhpY29ncmFwaGljYWxseSogKHNvIHRoZSB0aW1lc3RhbXAgaXMgY29udmVydGVkIHRvIGNoYXJhY3RlcnNcclxuICogICAgdGhhdCB3aWxsIHNvcnQgcHJvcGVybHkpLlxyXG4gKiA0LiBUaGV5J3JlIG1vbm90b25pY2FsbHkgaW5jcmVhc2luZy4gRXZlbiBpZiB5b3UgZ2VuZXJhdGUgbW9yZSB0aGFuIG9uZSBpblxyXG4gKiAgICB0aGUgc2FtZSB0aW1lc3RhbXAsIHRoZSBsYXR0ZXIgb25lcyB3aWxsIHNvcnQgYWZ0ZXIgdGhlIGZvcm1lciBvbmVzLiBXZSBkb1xyXG4gKiAgICB0aGlzIGJ5IHVzaW5nIHRoZSBwcmV2aW91cyByYW5kb20gYml0cyBidXQgXCJpbmNyZW1lbnRpbmdcIiB0aGVtIGJ5IDEgKG9ubHlcclxuICogICAgaW4gdGhlIGNhc2Ugb2YgYSB0aW1lc3RhbXAgY29sbGlzaW9uKS5cclxuICovXHJcbnZhciBuZXh0UHVzaElkID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8vIE1vZGVsZWQgYWZ0ZXIgYmFzZTY0IHdlYi1zYWZlIGNoYXJzLCBidXQgb3JkZXJlZCBieSBBU0NJSS5cclxuICAgIHZhciBQVVNIX0NIQVJTID0gJy0wMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpfYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonO1xyXG4gICAgLy8gVGltZXN0YW1wIG9mIGxhc3QgcHVzaCwgdXNlZCB0byBwcmV2ZW50IGxvY2FsIGNvbGxpc2lvbnMgaWYgeW91IHB1c2ggdHdpY2VcclxuICAgIC8vIGluIG9uZSBtcy5cclxuICAgIHZhciBsYXN0UHVzaFRpbWUgPSAwO1xyXG4gICAgLy8gV2UgZ2VuZXJhdGUgNzItYml0cyBvZiByYW5kb21uZXNzIHdoaWNoIGdldCB0dXJuZWQgaW50byAxMiBjaGFyYWN0ZXJzIGFuZFxyXG4gICAgLy8gYXBwZW5kZWQgdG8gdGhlIHRpbWVzdGFtcCB0byBwcmV2ZW50IGNvbGxpc2lvbnMgd2l0aCBvdGhlciBjbGllbnRzLiBXZVxyXG4gICAgLy8gc3RvcmUgdGhlIGxhc3QgY2hhcmFjdGVycyB3ZSBnZW5lcmF0ZWQgYmVjYXVzZSBpbiB0aGUgZXZlbnQgb2YgYSBjb2xsaXNpb24sXHJcbiAgICAvLyB3ZSdsbCB1c2UgdGhvc2Ugc2FtZSBjaGFyYWN0ZXJzIGV4Y2VwdCBcImluY3JlbWVudGVkXCIgYnkgb25lLlxyXG4gICAgdmFyIGxhc3RSYW5kQ2hhcnMgPSBbXTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAobm93KSB7XHJcbiAgICAgICAgdmFyIGR1cGxpY2F0ZVRpbWUgPSBub3cgPT09IGxhc3RQdXNoVGltZTtcclxuICAgICAgICBsYXN0UHVzaFRpbWUgPSBub3c7XHJcbiAgICAgICAgdmFyIGk7XHJcbiAgICAgICAgdmFyIHRpbWVTdGFtcENoYXJzID0gbmV3IEFycmF5KDgpO1xyXG4gICAgICAgIGZvciAoaSA9IDc7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgICAgIHRpbWVTdGFtcENoYXJzW2ldID0gUFVTSF9DSEFSUy5jaGFyQXQobm93ICUgNjQpO1xyXG4gICAgICAgICAgICAvLyBOT1RFOiBDYW4ndCB1c2UgPDwgaGVyZSBiZWNhdXNlIGphdmFzY3JpcHQgd2lsbCBjb252ZXJ0IHRvIGludCBhbmQgbG9zZVxyXG4gICAgICAgICAgICAvLyB0aGUgdXBwZXIgYml0cy5cclxuICAgICAgICAgICAgbm93ID0gTWF0aC5mbG9vcihub3cgLyA2NCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFzc2VydChub3cgPT09IDAsICdDYW5ub3QgcHVzaCBhdCB0aW1lID09IDAnKTtcclxuICAgICAgICB2YXIgaWQgPSB0aW1lU3RhbXBDaGFycy5qb2luKCcnKTtcclxuICAgICAgICBpZiAoIWR1cGxpY2F0ZVRpbWUpIHtcclxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGxhc3RSYW5kQ2hhcnNbaV0gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA2NCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIElmIHRoZSB0aW1lc3RhbXAgaGFzbid0IGNoYW5nZWQgc2luY2UgbGFzdCBwdXNoLCB1c2UgdGhlIHNhbWUgcmFuZG9tXHJcbiAgICAgICAgICAgIC8vIG51bWJlciwgZXhjZXB0IGluY3JlbWVudGVkIGJ5IDEuXHJcbiAgICAgICAgICAgIGZvciAoaSA9IDExOyBpID49IDAgJiYgbGFzdFJhbmRDaGFyc1tpXSA9PT0gNjM7IGktLSkge1xyXG4gICAgICAgICAgICAgICAgbGFzdFJhbmRDaGFyc1tpXSA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGFzdFJhbmRDaGFyc1tpXSsrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xyXG4gICAgICAgICAgICBpZCArPSBQVVNIX0NIQVJTLmNoYXJBdChsYXN0UmFuZENoYXJzW2ldKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYXNzZXJ0KGlkLmxlbmd0aCA9PT0gMjAsICduZXh0UHVzaElkOiBMZW5ndGggc2hvdWxkIGJlIDIwLicpO1xyXG4gICAgICAgIHJldHVybiBpZDtcclxuICAgIH07XHJcbn0pKCk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKlxyXG4gKiBAcGFyYW0geyFzdHJpbmd9IG5hbWVcclxuICogQHBhcmFtIHshTm9kZX0gbm9kZVxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQHN0cnVjdFxyXG4gKi9cclxudmFyIE5hbWVkTm9kZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE5hbWVkTm9kZShuYW1lLCBub2RlKSB7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLm5vZGUgPSBub2RlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHshc3RyaW5nfSBuYW1lXHJcbiAgICAgKiBAcGFyYW0geyFOb2RlfSBub2RlXHJcbiAgICAgKiBAcmV0dXJuIHtOYW1lZE5vZGV9XHJcbiAgICAgKi9cclxuICAgIE5hbWVkTm9kZS5XcmFwID0gZnVuY3Rpb24gKG5hbWUsIG5vZGUpIHtcclxuICAgICAgICByZXR1cm4gbmV3IE5hbWVkTm9kZShuYW1lLCBub2RlKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gTmFtZWROb2RlO1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICpcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG52YXIgSW5kZXggPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBJbmRleCgpIHtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7ZnVuY3Rpb24oIU5hbWVkTm9kZSwgIU5hbWVkTm9kZSk6bnVtYmVyfSBBIHN0YW5kYWxvbmUgY29tcGFyaXNvbiBmdW5jdGlvbiBmb3JcclxuICAgICAqIHRoaXMgaW5kZXhcclxuICAgICAqL1xyXG4gICAgSW5kZXgucHJvdG90eXBlLmdldENvbXBhcmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcGFyZS5iaW5kKHRoaXMpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogR2l2ZW4gYSBiZWZvcmUgYW5kIGFmdGVyIHZhbHVlIGZvciBhIG5vZGUsIGRldGVybWluZSBpZiB0aGUgaW5kZXhlZCB2YWx1ZSBoYXMgY2hhbmdlZC4gRXZlbiBpZiB0aGV5IGFyZSBkaWZmZXJlbnQsXHJcbiAgICAgKiBpdCdzIHBvc3NpYmxlIHRoYXQgdGhlIGNoYW5nZXMgYXJlIGlzb2xhdGVkIHRvIHBhcnRzIG9mIHRoZSBzbmFwc2hvdCB0aGF0IGFyZSBub3QgaW5kZXhlZC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFOb2RlfSBvbGROb2RlXHJcbiAgICAgKiBAcGFyYW0geyFOb2RlfSBuZXdOb2RlXHJcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBwb3J0aW9uIG9mIHRoZSBzbmFwc2hvdCBiZWluZyBpbmRleGVkIGNoYW5nZWQgYmV0d2VlbiBvbGROb2RlIGFuZCBuZXdOb2RlXHJcbiAgICAgKi9cclxuICAgIEluZGV4LnByb3RvdHlwZS5pbmRleGVkVmFsdWVDaGFuZ2VkID0gZnVuY3Rpb24gKG9sZE5vZGUsIG5ld05vZGUpIHtcclxuICAgICAgICB2YXIgb2xkV3JhcHBlZCA9IG5ldyBOYW1lZE5vZGUoTUlOX05BTUUsIG9sZE5vZGUpO1xyXG4gICAgICAgIHZhciBuZXdXcmFwcGVkID0gbmV3IE5hbWVkTm9kZShNSU5fTkFNRSwgbmV3Tm9kZSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcGFyZShvbGRXcmFwcGVkLCBuZXdXcmFwcGVkKSAhPT0gMDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4geyFOYW1lZE5vZGV9IGEgbm9kZSB3cmFwcGVyIHRoYXQgd2lsbCBzb3J0IGVxdWFsIHRvIG9yIGxlc3MgdGhhblxyXG4gICAgICogYW55IG90aGVyIG5vZGUgd3JhcHBlciwgdXNpbmcgdGhpcyBpbmRleFxyXG4gICAgICovXHJcbiAgICBJbmRleC5wcm90b3R5cGUubWluUG9zdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG4gICAgICAgIHJldHVybiBOYW1lZE5vZGUuTUlOO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBJbmRleDtcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIF9fRU1QVFlfTk9ERTtcclxudmFyIEtleUluZGV4ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKEtleUluZGV4LCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gS2V5SW5kZXgoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEtleUluZGV4LCBcIl9fRU1QVFlfTk9ERVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfX0VNUFRZX05PREU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICAgICAgX19FTVBUWV9OT0RFID0gdmFsO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgS2V5SW5kZXgucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgIHJldHVybiBuYW1lQ29tcGFyZShhLm5hbWUsIGIubmFtZSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBLZXlJbmRleC5wcm90b3R5cGUuaXNEZWZpbmVkT24gPSBmdW5jdGlvbiAobm9kZSkge1xyXG4gICAgICAgIC8vIFdlIGNvdWxkIHByb2JhYmx5IHJldHVybiB0cnVlIGhlcmUgKHNpbmNlIGV2ZXJ5IG5vZGUgaGFzIGEga2V5KSwgYnV0IGl0J3MgbmV2ZXIgY2FsbGVkXHJcbiAgICAgICAgLy8gc28ganVzdCBsZWF2aW5nIHVuaW1wbGVtZW50ZWQgZm9yIG5vdy5cclxuICAgICAgICB0aHJvdyBhc3NlcnRpb25FcnJvcignS2V5SW5kZXguaXNEZWZpbmVkT24gbm90IGV4cGVjdGVkIHRvIGJlIGNhbGxlZC4nKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIEtleUluZGV4LnByb3RvdHlwZS5pbmRleGVkVmFsdWVDaGFuZ2VkID0gZnVuY3Rpb24gKG9sZE5vZGUsIG5ld05vZGUpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7IC8vIFRoZSBrZXkgZm9yIGEgbm9kZSBuZXZlciBjaGFuZ2VzLlxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgS2V5SW5kZXgucHJvdG90eXBlLm1pblBvc3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgICAgICByZXR1cm4gTmFtZWROb2RlLk1JTjtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIEtleUluZGV4LnByb3RvdHlwZS5tYXhQb3N0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIFRPRE86IFRoaXMgc2hvdWxkIHJlYWxseSBiZSBjcmVhdGVkIG9uY2UgYW5kIGNhY2hlZCBpbiBhIHN0YXRpYyBwcm9wZXJ0eSwgYnV0XHJcbiAgICAgICAgLy8gTmFtZWROb2RlIGlzbid0IGRlZmluZWQgeWV0LCBzbyBJIGNhbid0IHVzZSBpdCBpbiBhIHN0YXRpYy4gIEJsZWguXHJcbiAgICAgICAgcmV0dXJuIG5ldyBOYW1lZE5vZGUoTUFYX05BTUUsIF9fRU1QVFlfTk9ERSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyp9IGluZGV4VmFsdWVcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXHJcbiAgICAgKiBAcmV0dXJuIHshTmFtZWROb2RlfVxyXG4gICAgICovXHJcbiAgICBLZXlJbmRleC5wcm90b3R5cGUubWFrZVBvc3QgPSBmdW5jdGlvbiAoaW5kZXhWYWx1ZSwgbmFtZSkge1xyXG4gICAgICAgIGFzc2VydCh0eXBlb2YgaW5kZXhWYWx1ZSA9PT0gJ3N0cmluZycsICdLZXlJbmRleCBpbmRleFZhbHVlIG11c3QgYWx3YXlzIGJlIGEgc3RyaW5nLicpO1xyXG4gICAgICAgIC8vIFdlIGp1c3QgdXNlIGVtcHR5IG5vZGUsIGJ1dCBpdCdsbCBuZXZlciBiZSBjb21wYXJlZCwgc2luY2Ugb3VyIGNvbXBhcmF0b3Igb25seSBsb29rcyBhdCBuYW1lLlxyXG4gICAgICAgIHJldHVybiBuZXcgTmFtZWROb2RlKGluZGV4VmFsdWUsIF9fRU1QVFlfTk9ERSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHshc3RyaW5nfSBTdHJpbmcgcmVwcmVzZW50YXRpb24gZm9yIGluY2x1c2lvbiBpbiBhIHF1ZXJ5IHNwZWNcclxuICAgICAqL1xyXG4gICAgS2V5SW5kZXgucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAnLmtleSc7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEtleUluZGV4O1xyXG59KEluZGV4KSk7XHJcbnZhciBLRVlfSU5ERVggPSBuZXcgS2V5SW5kZXgoKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIE1BWF9OT0RFO1xyXG5mdW5jdGlvbiBzZXRNYXhOb2RlKHZhbCkge1xyXG4gICAgTUFYX05PREUgPSB2YWw7XHJcbn1cclxuLyoqXHJcbiAqIEBwYXJhbSB7KCFzdHJpbmd8IW51bWJlcil9IHByaW9yaXR5XHJcbiAqIEByZXR1cm4geyFzdHJpbmd9XHJcbiAqL1xyXG52YXIgcHJpb3JpdHlIYXNoVGV4dCA9IGZ1bmN0aW9uIChwcmlvcml0eSkge1xyXG4gICAgaWYgKHR5cGVvZiBwcmlvcml0eSA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICByZXR1cm4gJ251bWJlcjonICsgZG91YmxlVG9JRUVFNzU0U3RyaW5nKHByaW9yaXR5KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiAnc3RyaW5nOicgKyBwcmlvcml0eTtcclxuICAgIH1cclxufTtcclxuLyoqXHJcbiAqIFZhbGlkYXRlcyB0aGF0IGEgcHJpb3JpdHkgc25hcHNob3QgTm9kZSBpcyB2YWxpZC5cclxuICpcclxuICogQHBhcmFtIHshTm9kZX0gcHJpb3JpdHlOb2RlXHJcbiAqL1xyXG52YXIgdmFsaWRhdGVQcmlvcml0eU5vZGUgPSBmdW5jdGlvbiAocHJpb3JpdHlOb2RlKSB7XHJcbiAgICBpZiAocHJpb3JpdHlOb2RlLmlzTGVhZk5vZGUoKSkge1xyXG4gICAgICAgIHZhciB2YWwgPSBwcmlvcml0eU5vZGUudmFsKCk7XHJcbiAgICAgICAgYXNzZXJ0KHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnIHx8XHJcbiAgICAgICAgICAgIHR5cGVvZiB2YWwgPT09ICdudW1iZXInIHx8XHJcbiAgICAgICAgICAgICh0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiBjb250YWlucyh2YWwsICcuc3YnKSksICdQcmlvcml0eSBtdXN0IGJlIGEgc3RyaW5nIG9yIG51bWJlci4nKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGFzc2VydChwcmlvcml0eU5vZGUgPT09IE1BWF9OT0RFIHx8IHByaW9yaXR5Tm9kZS5pc0VtcHR5KCksICdwcmlvcml0eSBvZiB1bmV4cGVjdGVkIHR5cGUuJyk7XHJcbiAgICB9XHJcbiAgICAvLyBEb24ndCBjYWxsIGdldFByaW9yaXR5KCkgb24gTUFYX05PREUgdG8gYXZvaWQgaGl0dGluZyBhc3NlcnRpb24uXHJcbiAgICBhc3NlcnQocHJpb3JpdHlOb2RlID09PSBNQVhfTk9ERSB8fCBwcmlvcml0eU5vZGUuZ2V0UHJpb3JpdHkoKS5pc0VtcHR5KCksIFwiUHJpb3JpdHkgbm9kZXMgY2FuJ3QgaGF2ZSBhIHByaW9yaXR5IG9mIHRoZWlyIG93bi5cIik7XHJcbn07XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBfX2NoaWxkcmVuTm9kZUNvbnN0cnVjdG9yO1xyXG4vKipcclxuICogTGVhZk5vZGUgaXMgYSBjbGFzcyBmb3Igc3RvcmluZyBsZWFmIG5vZGVzIGluIGEgRGF0YVNuYXBzaG90LiAgSXRcclxuICogaW1wbGVtZW50cyBOb2RlIGFuZCBzdG9yZXMgdGhlIHZhbHVlIG9mIHRoZSBub2RlIChhIHN0cmluZyxcclxuICogbnVtYmVyLCBvciBib29sZWFuKSBhY2Nlc3NpYmxlIHZpYSBnZXRWYWx1ZSgpLlxyXG4gKi9cclxudmFyIExlYWZOb2RlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW1wbGVtZW50cyB7Tm9kZX1cclxuICAgICAqIEBwYXJhbSB7IShzdHJpbmd8bnVtYmVyfGJvb2xlYW58T2JqZWN0KX0gdmFsdWVfIFRoZSB2YWx1ZSB0byBzdG9yZSBpbiB0aGlzIGxlYWYgbm9kZS5cclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaGUgb2JqZWN0IHR5cGUgaXMgcG9zc2libGUgaW4gdGhlIGV2ZW50IG9mIGEgZGVmZXJyZWQgdmFsdWVcclxuICAgICAqIEBwYXJhbSB7IU5vZGU9fSBwcmlvcml0eU5vZGVfIFRoZSBwcmlvcml0eSBvZiB0aGlzIG5vZGUuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIExlYWZOb2RlKHZhbHVlXywgcHJpb3JpdHlOb2RlXykge1xyXG4gICAgICAgIGlmIChwcmlvcml0eU5vZGVfID09PSB2b2lkIDApIHsgcHJpb3JpdHlOb2RlXyA9IExlYWZOb2RlLl9fY2hpbGRyZW5Ob2RlQ29uc3RydWN0b3IuRU1QVFlfTk9ERTsgfVxyXG4gICAgICAgIHRoaXMudmFsdWVfID0gdmFsdWVfO1xyXG4gICAgICAgIHRoaXMucHJpb3JpdHlOb2RlXyA9IHByaW9yaXR5Tm9kZV87XHJcbiAgICAgICAgdGhpcy5sYXp5SGFzaF8gPSBudWxsO1xyXG4gICAgICAgIGFzc2VydCh0aGlzLnZhbHVlXyAhPT0gdW5kZWZpbmVkICYmIHRoaXMudmFsdWVfICE9PSBudWxsLCBcIkxlYWZOb2RlIHNob3VsZG4ndCBiZSBjcmVhdGVkIHdpdGggbnVsbC91bmRlZmluZWQgdmFsdWUuXCIpO1xyXG4gICAgICAgIHZhbGlkYXRlUHJpb3JpdHlOb2RlKHRoaXMucHJpb3JpdHlOb2RlXyk7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTGVhZk5vZGUsIFwiX19jaGlsZHJlbk5vZGVDb25zdHJ1Y3RvclwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2NoaWxkcmVuTm9kZUNvbnN0cnVjdG9yO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgICAgICAgIF9fY2hpbGRyZW5Ob2RlQ29uc3RydWN0b3IgPSB2YWw7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgLyoqIEBpbmhlcml0RG9jICovXHJcbiAgICBMZWFmTm9kZS5wcm90b3R5cGUuaXNMZWFmTm9kZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcbiAgICAvKiogQGluaGVyaXREb2MgKi9cclxuICAgIExlYWZOb2RlLnByb3RvdHlwZS5nZXRQcmlvcml0eSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wcmlvcml0eU5vZGVfO1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW5oZXJpdERvYyAqL1xyXG4gICAgTGVhZk5vZGUucHJvdG90eXBlLnVwZGF0ZVByaW9yaXR5ID0gZnVuY3Rpb24gKG5ld1ByaW9yaXR5Tm9kZSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgTGVhZk5vZGUodGhpcy52YWx1ZV8sIG5ld1ByaW9yaXR5Tm9kZSk7XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbmhlcml0RG9jICovXHJcbiAgICBMZWFmTm9kZS5wcm90b3R5cGUuZ2V0SW1tZWRpYXRlQ2hpbGQgPSBmdW5jdGlvbiAoY2hpbGROYW1lKSB7XHJcbiAgICAgICAgLy8gSGFjayB0byB0cmVhdCBwcmlvcml0eSBhcyBhIHJlZ3VsYXIgY2hpbGRcclxuICAgICAgICBpZiAoY2hpbGROYW1lID09PSAnLnByaW9yaXR5Jykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcmlvcml0eU5vZGVfO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIExlYWZOb2RlLl9fY2hpbGRyZW5Ob2RlQ29uc3RydWN0b3IuRU1QVFlfTk9ERTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbmhlcml0RG9jICovXHJcbiAgICBMZWFmTm9kZS5wcm90b3R5cGUuZ2V0Q2hpbGQgPSBmdW5jdGlvbiAocGF0aCkge1xyXG4gICAgICAgIGlmIChwYXRoLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocGF0aC5nZXRGcm9udCgpID09PSAnLnByaW9yaXR5Jykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcmlvcml0eU5vZGVfO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIExlYWZOb2RlLl9fY2hpbGRyZW5Ob2RlQ29uc3RydWN0b3IuRU1QVFlfTk9ERTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBMZWFmTm9kZS5wcm90b3R5cGUuaGFzQ2hpbGQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW5oZXJpdERvYyAqL1xyXG4gICAgTGVhZk5vZGUucHJvdG90eXBlLmdldFByZWRlY2Vzc29yQ2hpbGROYW1lID0gZnVuY3Rpb24gKGNoaWxkTmFtZSwgY2hpbGROb2RlKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbmhlcml0RG9jICovXHJcbiAgICBMZWFmTm9kZS5wcm90b3R5cGUudXBkYXRlSW1tZWRpYXRlQ2hpbGQgPSBmdW5jdGlvbiAoY2hpbGROYW1lLCBuZXdDaGlsZE5vZGUpIHtcclxuICAgICAgICBpZiAoY2hpbGROYW1lID09PSAnLnByaW9yaXR5Jykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy51cGRhdGVQcmlvcml0eShuZXdDaGlsZE5vZGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChuZXdDaGlsZE5vZGUuaXNFbXB0eSgpICYmIGNoaWxkTmFtZSAhPT0gJy5wcmlvcml0eScpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gTGVhZk5vZGUuX19jaGlsZHJlbk5vZGVDb25zdHJ1Y3Rvci5FTVBUWV9OT0RFLnVwZGF0ZUltbWVkaWF0ZUNoaWxkKGNoaWxkTmFtZSwgbmV3Q2hpbGROb2RlKS51cGRhdGVQcmlvcml0eSh0aGlzLnByaW9yaXR5Tm9kZV8pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKiogQGluaGVyaXREb2MgKi9cclxuICAgIExlYWZOb2RlLnByb3RvdHlwZS51cGRhdGVDaGlsZCA9IGZ1bmN0aW9uIChwYXRoLCBuZXdDaGlsZE5vZGUpIHtcclxuICAgICAgICB2YXIgZnJvbnQgPSBwYXRoLmdldEZyb250KCk7XHJcbiAgICAgICAgaWYgKGZyb250ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXdDaGlsZE5vZGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKG5ld0NoaWxkTm9kZS5pc0VtcHR5KCkgJiYgZnJvbnQgIT09ICcucHJpb3JpdHknKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgYXNzZXJ0KGZyb250ICE9PSAnLnByaW9yaXR5JyB8fCBwYXRoLmdldExlbmd0aCgpID09PSAxLCAnLnByaW9yaXR5IG11c3QgYmUgdGhlIGxhc3QgdG9rZW4gaW4gYSBwYXRoJyk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnVwZGF0ZUltbWVkaWF0ZUNoaWxkKGZyb250LCBMZWFmTm9kZS5fX2NoaWxkcmVuTm9kZUNvbnN0cnVjdG9yLkVNUFRZX05PREUudXBkYXRlQ2hpbGQocGF0aC5wb3BGcm9udCgpLCBuZXdDaGlsZE5vZGUpKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbmhlcml0RG9jICovXHJcbiAgICBMZWFmTm9kZS5wcm90b3R5cGUuaXNFbXB0eSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbmhlcml0RG9jICovXHJcbiAgICBMZWFmTm9kZS5wcm90b3R5cGUubnVtQ2hpbGRyZW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbmhlcml0RG9jICovXHJcbiAgICBMZWFmTm9kZS5wcm90b3R5cGUuZm9yRWFjaENoaWxkID0gZnVuY3Rpb24gKGluZGV4LCBhY3Rpb24pIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBMZWFmTm9kZS5wcm90b3R5cGUudmFsID0gZnVuY3Rpb24gKGV4cG9ydEZvcm1hdCkge1xyXG4gICAgICAgIGlmIChleHBvcnRGb3JtYXQgJiYgIXRoaXMuZ2V0UHJpb3JpdHkoKS5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICcudmFsdWUnOiB0aGlzLmdldFZhbHVlKCksXHJcbiAgICAgICAgICAgICAgICAnLnByaW9yaXR5JzogdGhpcy5nZXRQcmlvcml0eSgpLnZhbCgpXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKiogQGluaGVyaXREb2MgKi9cclxuICAgIExlYWZOb2RlLnByb3RvdHlwZS5oYXNoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmxhenlIYXNoXyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB2YXIgdG9IYXNoID0gJyc7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5wcmlvcml0eU5vZGVfLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICAgICAgdG9IYXNoICs9XHJcbiAgICAgICAgICAgICAgICAgICAgJ3ByaW9yaXR5OicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmlvcml0eUhhc2hUZXh0KHRoaXMucHJpb3JpdHlOb2RlXy52YWwoKSkgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnOic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdGhpcy52YWx1ZV87XHJcbiAgICAgICAgICAgIHRvSGFzaCArPSB0eXBlICsgJzonO1xyXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgIHRvSGFzaCArPSBkb3VibGVUb0lFRUU3NTRTdHJpbmcodGhpcy52YWx1ZV8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdG9IYXNoICs9IHRoaXMudmFsdWVfO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMubGF6eUhhc2hfID0gc2hhMSh0b0hhc2gpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5sYXp5SGFzaF87XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgbGVhZiBub2RlLlxyXG4gICAgICogQHJldHVybiB7T2JqZWN0fHN0cmluZ3xudW1iZXJ8Ym9vbGVhbn0gVGhlIHZhbHVlIG9mIHRoZSBub2RlLlxyXG4gICAgICovXHJcbiAgICBMZWFmTm9kZS5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVfO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgTGVhZk5vZGUucHJvdG90eXBlLmNvbXBhcmVUbyA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIGlmIChvdGhlciA9PT0gTGVhZk5vZGUuX19jaGlsZHJlbk5vZGVDb25zdHJ1Y3Rvci5FTVBUWV9OT0RFKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChvdGhlciBpbnN0YW5jZW9mIExlYWZOb2RlLl9fY2hpbGRyZW5Ob2RlQ29uc3RydWN0b3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgYXNzZXJ0KG90aGVyLmlzTGVhZk5vZGUoKSwgJ1Vua25vd24gbm9kZSB0eXBlJyk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbXBhcmVUb0xlYWZOb2RlXyhvdGhlcik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ29tcGFyaXNvbiBzcGVjaWZpY2FsbHkgZm9yIHR3byBsZWFmIG5vZGVzXHJcbiAgICAgKiBAcGFyYW0geyFMZWFmTm9kZX0gb3RoZXJMZWFmXHJcbiAgICAgKiBAcmV0dXJuIHshbnVtYmVyfVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgTGVhZk5vZGUucHJvdG90eXBlLmNvbXBhcmVUb0xlYWZOb2RlXyA9IGZ1bmN0aW9uIChvdGhlckxlYWYpIHtcclxuICAgICAgICB2YXIgb3RoZXJMZWFmVHlwZSA9IHR5cGVvZiBvdGhlckxlYWYudmFsdWVfO1xyXG4gICAgICAgIHZhciB0aGlzTGVhZlR5cGUgPSB0eXBlb2YgdGhpcy52YWx1ZV87XHJcbiAgICAgICAgdmFyIG90aGVySW5kZXggPSBMZWFmTm9kZS5WQUxVRV9UWVBFX09SREVSLmluZGV4T2Yob3RoZXJMZWFmVHlwZSk7XHJcbiAgICAgICAgdmFyIHRoaXNJbmRleCA9IExlYWZOb2RlLlZBTFVFX1RZUEVfT1JERVIuaW5kZXhPZih0aGlzTGVhZlR5cGUpO1xyXG4gICAgICAgIGFzc2VydChvdGhlckluZGV4ID49IDAsICdVbmtub3duIGxlYWYgdHlwZTogJyArIG90aGVyTGVhZlR5cGUpO1xyXG4gICAgICAgIGFzc2VydCh0aGlzSW5kZXggPj0gMCwgJ1Vua25vd24gbGVhZiB0eXBlOiAnICsgdGhpc0xlYWZUeXBlKTtcclxuICAgICAgICBpZiAob3RoZXJJbmRleCA9PT0gdGhpc0luZGV4KSB7XHJcbiAgICAgICAgICAgIC8vIFNhbWUgdHlwZSwgY29tcGFyZSB2YWx1ZXNcclxuICAgICAgICAgICAgaWYgKHRoaXNMZWFmVHlwZSA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgICAgIC8vIERlZmVycmVkIHZhbHVlIG5vZGVzIGFyZSBhbGwgZXF1YWwsIGJ1dCB3ZSBzaG91bGQgYWxzbyBuZXZlciBnZXQgdG8gdGhpcyBwb2ludC4uLlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBOb3RlIHRoYXQgdGhpcyB3b3JrcyBiZWNhdXNlIHRydWUgPiBmYWxzZSwgYWxsIG90aGVycyBhcmUgbnVtYmVyIG9yIHN0cmluZyBjb21wYXJpc29uc1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudmFsdWVfIDwgb3RoZXJMZWFmLnZhbHVlXykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMudmFsdWVfID09PSBvdGhlckxlYWYudmFsdWVfKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXNJbmRleCAtIG90aGVySW5kZXg7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgTGVhZk5vZGUucHJvdG90eXBlLndpdGhJbmRleCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIExlYWZOb2RlLnByb3RvdHlwZS5pc0luZGV4ZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBMZWFmTm9kZS5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gKG90aGVyKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGluaGVyaXREb2NcclxuICAgICAgICAgKi9cclxuICAgICAgICBpZiAob3RoZXIgPT09IHRoaXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKG90aGVyLmlzTGVhZk5vZGUoKSkge1xyXG4gICAgICAgICAgICB2YXIgb3RoZXJMZWFmID0gb3RoZXI7XHJcbiAgICAgICAgICAgIHJldHVybiAodGhpcy52YWx1ZV8gPT09IG90aGVyTGVhZi52YWx1ZV8gJiZcclxuICAgICAgICAgICAgICAgIHRoaXMucHJpb3JpdHlOb2RlXy5lcXVhbHMob3RoZXJMZWFmLnByaW9yaXR5Tm9kZV8pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgc29ydCBvcmRlciBmb3IgY29tcGFyaW5nIGxlYWYgbm9kZXMgb2YgZGlmZmVyZW50IHR5cGVzLiBJZiB0d28gbGVhZiBub2RlcyBoYXZlXHJcbiAgICAgKiB0aGUgc2FtZSB0eXBlLCB0aGUgY29tcGFyaXNvbiBmYWxscyBiYWNrIHRvIHRoZWlyIHZhbHVlXHJcbiAgICAgKiBAdHlwZSB7QXJyYXkuPCFzdHJpbmc+fVxyXG4gICAgICogQGNvbnN0XHJcbiAgICAgKi9cclxuICAgIExlYWZOb2RlLlZBTFVFX1RZUEVfT1JERVIgPSBbJ29iamVjdCcsICdib29sZWFuJywgJ251bWJlcicsICdzdHJpbmcnXTtcclxuICAgIHJldHVybiBMZWFmTm9kZTtcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIG5vZGVGcm9tSlNPTjtcclxudmFyIE1BWF9OT0RFJDE7XHJcbmZ1bmN0aW9uIHNldE5vZGVGcm9tSlNPTih2YWwpIHtcclxuICAgIG5vZGVGcm9tSlNPTiA9IHZhbDtcclxufVxyXG5mdW5jdGlvbiBzZXRNYXhOb2RlJDEodmFsKSB7XHJcbiAgICBNQVhfTk9ERSQxID0gdmFsO1xyXG59XHJcbi8qKlxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQGV4dGVuZHMge0luZGV4fVxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxudmFyIFByaW9yaXR5SW5kZXggPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoUHJpb3JpdHlJbmRleCwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFByaW9yaXR5SW5kZXgoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBQcmlvcml0eUluZGV4LnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICB2YXIgYVByaW9yaXR5ID0gYS5ub2RlLmdldFByaW9yaXR5KCk7XHJcbiAgICAgICAgdmFyIGJQcmlvcml0eSA9IGIubm9kZS5nZXRQcmlvcml0eSgpO1xyXG4gICAgICAgIHZhciBpbmRleENtcCA9IGFQcmlvcml0eS5jb21wYXJlVG8oYlByaW9yaXR5KTtcclxuICAgICAgICBpZiAoaW5kZXhDbXAgPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5hbWVDb21wYXJlKGEubmFtZSwgYi5uYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpbmRleENtcDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBQcmlvcml0eUluZGV4LnByb3RvdHlwZS5pc0RlZmluZWRPbiA9IGZ1bmN0aW9uIChub2RlKSB7XHJcbiAgICAgICAgcmV0dXJuICFub2RlLmdldFByaW9yaXR5KCkuaXNFbXB0eSgpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgUHJpb3JpdHlJbmRleC5wcm90b3R5cGUuaW5kZXhlZFZhbHVlQ2hhbmdlZCA9IGZ1bmN0aW9uIChvbGROb2RlLCBuZXdOb2RlKSB7XHJcbiAgICAgICAgcmV0dXJuICFvbGROb2RlLmdldFByaW9yaXR5KCkuZXF1YWxzKG5ld05vZGUuZ2V0UHJpb3JpdHkoKSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBQcmlvcml0eUluZGV4LnByb3RvdHlwZS5taW5Qb3N0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbiAgICAgICAgcmV0dXJuIE5hbWVkTm9kZS5NSU47XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBQcmlvcml0eUluZGV4LnByb3RvdHlwZS5tYXhQb3N0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgTmFtZWROb2RlKE1BWF9OQU1FLCBuZXcgTGVhZk5vZGUoJ1tQUklPUklUWS1QT1NUXScsIE1BWF9OT0RFJDEpKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7Kn0gaW5kZXhWYWx1ZVxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcclxuICAgICAqIEByZXR1cm4geyFOYW1lZE5vZGV9XHJcbiAgICAgKi9cclxuICAgIFByaW9yaXR5SW5kZXgucHJvdG90eXBlLm1ha2VQb3N0ID0gZnVuY3Rpb24gKGluZGV4VmFsdWUsIG5hbWUpIHtcclxuICAgICAgICB2YXIgcHJpb3JpdHlOb2RlID0gbm9kZUZyb21KU09OKGluZGV4VmFsdWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgTmFtZWROb2RlKG5hbWUsIG5ldyBMZWFmTm9kZSgnW1BSSU9SSVRZLVBPU1RdJywgcHJpb3JpdHlOb2RlKSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHshc3RyaW5nfSBTdHJpbmcgcmVwcmVzZW50YXRpb24gZm9yIGluY2x1c2lvbiBpbiBhIHF1ZXJ5IHNwZWNcclxuICAgICAqL1xyXG4gICAgUHJpb3JpdHlJbmRleC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICcucHJpb3JpdHknO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBQcmlvcml0eUluZGV4O1xyXG59KEluZGV4KSk7XHJcbnZhciBQUklPUklUWV9JTkRFWCA9IG5ldyBQcmlvcml0eUluZGV4KCk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBBbiBpdGVyYXRvciBvdmVyIGFuIExMUkJOb2RlLlxyXG4gKi9cclxudmFyIFNvcnRlZE1hcEl0ZXJhdG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAdGVtcGxhdGUgSywgViwgVFxyXG4gICAgICogQHBhcmFtIHtMTFJCTm9kZXxMTFJCRW1wdHlOb2RlfSBub2RlIE5vZGUgdG8gaXRlcmF0ZS5cclxuICAgICAqIEBwYXJhbSB7P0t9IHN0YXJ0S2V5XHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKEssIEspOiBudW1iZXJ9IGNvbXBhcmF0b3JcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNSZXZlcnNlXyBXaGV0aGVyIG9yIG5vdCB0byBpdGVyYXRlIGluIHJldmVyc2VcclxuICAgICAqIEBwYXJhbSB7KGZ1bmN0aW9uKEssIFYpOlQpPX0gcmVzdWx0R2VuZXJhdG9yX1xyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBTb3J0ZWRNYXBJdGVyYXRvcihub2RlLCBzdGFydEtleSwgY29tcGFyYXRvciwgaXNSZXZlcnNlXywgcmVzdWx0R2VuZXJhdG9yXykge1xyXG4gICAgICAgIGlmIChyZXN1bHRHZW5lcmF0b3JfID09PSB2b2lkIDApIHsgcmVzdWx0R2VuZXJhdG9yXyA9IG51bGw7IH1cclxuICAgICAgICB0aGlzLmlzUmV2ZXJzZV8gPSBpc1JldmVyc2VfO1xyXG4gICAgICAgIHRoaXMucmVzdWx0R2VuZXJhdG9yXyA9IHJlc3VsdEdlbmVyYXRvcl87XHJcbiAgICAgICAgLyoqIEBwcml2YXRlXHJcbiAgICAgICAgICogQHR5cGUge0FycmF5LjwhTExSQk5vZGU+fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMubm9kZVN0YWNrXyA9IFtdO1xyXG4gICAgICAgIHZhciBjbXAgPSAxO1xyXG4gICAgICAgIHdoaWxlICghbm9kZS5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgbm9kZSA9IG5vZGU7XHJcbiAgICAgICAgICAgIGNtcCA9IHN0YXJ0S2V5ID8gY29tcGFyYXRvcihub2RlLmtleSwgc3RhcnRLZXkpIDogMTtcclxuICAgICAgICAgICAgLy8gZmxpcCB0aGUgY29tcGFyaXNvbiBpZiB3ZSdyZSBnb2luZyBpbiByZXZlcnNlXHJcbiAgICAgICAgICAgIGlmIChpc1JldmVyc2VfKSB7XHJcbiAgICAgICAgICAgICAgICBjbXAgKj0gLTE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGNtcCA8IDApIHtcclxuICAgICAgICAgICAgICAgIC8vIFRoaXMgbm9kZSBpcyBsZXNzIHRoYW4gb3VyIHN0YXJ0IGtleS4gaWdub3JlIGl0XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1JldmVyc2VfKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUubGVmdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLnJpZ2h0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGNtcCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBub2RlIGlzIGV4YWN0bHkgZXF1YWwgdG8gb3VyIHN0YXJ0IGtleS4gUHVzaCBpdCBvbiB0aGUgc3RhY2ssIGJ1dCBzdG9wIGl0ZXJhdGluZztcclxuICAgICAgICAgICAgICAgIHRoaXMubm9kZVN0YWNrXy5wdXNoKG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIG5vZGUgaXMgZ3JlYXRlciB0aGFuIG91ciBzdGFydCBrZXksIGFkZCBpdCB0byB0aGUgc3RhY2sgYW5kIG1vdmUgdG8gdGhlIG5leHQgb25lXHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGVTdGFja18ucHVzaChub2RlKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzUmV2ZXJzZV8pIHtcclxuICAgICAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5yaWdodDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLmxlZnQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBTb3J0ZWRNYXBJdGVyYXRvci5wcm90b3R5cGUuZ2V0TmV4dCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5ub2RlU3RhY2tfLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzLm5vZGVTdGFja18ucG9wKCk7XHJcbiAgICAgICAgdmFyIHJlc3VsdDtcclxuICAgICAgICBpZiAodGhpcy5yZXN1bHRHZW5lcmF0b3JfKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMucmVzdWx0R2VuZXJhdG9yXyhub2RlLmtleSwgbm9kZS52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXN1bHQgPSB7IGtleTogbm9kZS5rZXksIHZhbHVlOiBub2RlLnZhbHVlIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmlzUmV2ZXJzZV8pIHtcclxuICAgICAgICAgICAgbm9kZSA9IG5vZGUubGVmdDtcclxuICAgICAgICAgICAgd2hpbGUgKCFub2RlLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ub2RlU3RhY2tfLnB1c2gobm9kZSk7XHJcbiAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5yaWdodDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbm9kZSA9IG5vZGUucmlnaHQ7XHJcbiAgICAgICAgICAgIHdoaWxlICghbm9kZS5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubm9kZVN0YWNrXy5wdXNoKG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUubGVmdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfTtcclxuICAgIFNvcnRlZE1hcEl0ZXJhdG9yLnByb3RvdHlwZS5oYXNOZXh0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm5vZGVTdGFja18ubGVuZ3RoID4gMDtcclxuICAgIH07XHJcbiAgICBTb3J0ZWRNYXBJdGVyYXRvci5wcm90b3R5cGUucGVlayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5ub2RlU3RhY2tfLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzLm5vZGVTdGFja19bdGhpcy5ub2RlU3RhY2tfLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgIGlmICh0aGlzLnJlc3VsdEdlbmVyYXRvcl8pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVzdWx0R2VuZXJhdG9yXyhub2RlLmtleSwgbm9kZS52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4geyBrZXk6IG5vZGUua2V5LCB2YWx1ZTogbm9kZS52YWx1ZSB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gU29ydGVkTWFwSXRlcmF0b3I7XHJcbn0oKSk7XHJcbi8qKlxyXG4gKiBSZXByZXNlbnRzIGEgbm9kZSBpbiBhIExlZnQtbGVhbmluZyBSZWQtQmxhY2sgdHJlZS5cclxuICovXHJcbnZhciBMTFJCTm9kZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQHRlbXBsYXRlIEssIFZcclxuICAgICAqIEBwYXJhbSB7IUt9IGtleSBLZXkgYXNzb2NpYXRlZCB3aXRoIHRoaXMgbm9kZS5cclxuICAgICAqIEBwYXJhbSB7IVZ9IHZhbHVlIFZhbHVlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIG5vZGUuXHJcbiAgICAgKiBAcGFyYW0gez9ib29sZWFufSBjb2xvciBXaGV0aGVyIHRoaXMgbm9kZSBpcyByZWQuXHJcbiAgICAgKiBAcGFyYW0gez8oTExSQk5vZGV8TExSQkVtcHR5Tm9kZSk9fSBsZWZ0IExlZnQgY2hpbGQuXHJcbiAgICAgKiBAcGFyYW0gez8oTExSQk5vZGV8TExSQkVtcHR5Tm9kZSk9fSByaWdodCBSaWdodCBjaGlsZC5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gTExSQk5vZGUoa2V5LCB2YWx1ZSwgY29sb3IsIGxlZnQsIHJpZ2h0KSB7XHJcbiAgICAgICAgdGhpcy5rZXkgPSBrZXk7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuY29sb3IgPSBjb2xvciAhPSBudWxsID8gY29sb3IgOiBMTFJCTm9kZS5SRUQ7XHJcbiAgICAgICAgdGhpcy5sZWZ0ID1cclxuICAgICAgICAgICAgbGVmdCAhPSBudWxsID8gbGVmdCA6IFNvcnRlZE1hcC5FTVBUWV9OT0RFO1xyXG4gICAgICAgIHRoaXMucmlnaHQgPVxyXG4gICAgICAgICAgICByaWdodCAhPSBudWxsID8gcmlnaHQgOiBTb3J0ZWRNYXAuRU1QVFlfTk9ERTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIGNvcHkgb2YgdGhlIGN1cnJlbnQgbm9kZSwgb3B0aW9uYWxseSByZXBsYWNpbmcgcGllY2VzIG9mIGl0LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7P0t9IGtleSBOZXcga2V5IGZvciB0aGUgbm9kZSwgb3IgbnVsbC5cclxuICAgICAqIEBwYXJhbSB7P1Z9IHZhbHVlIE5ldyB2YWx1ZSBmb3IgdGhlIG5vZGUsIG9yIG51bGwuXHJcbiAgICAgKiBAcGFyYW0gez9ib29sZWFufSBjb2xvciBOZXcgY29sb3IgZm9yIHRoZSBub2RlLCBvciBudWxsLlxyXG4gICAgICogQHBhcmFtIHs/TExSQk5vZGV8TExSQkVtcHR5Tm9kZX0gbGVmdCBOZXcgbGVmdCBjaGlsZCBmb3IgdGhlIG5vZGUsIG9yIG51bGwuXHJcbiAgICAgKiBAcGFyYW0gez9MTFJCTm9kZXxMTFJCRW1wdHlOb2RlfSByaWdodCBOZXcgcmlnaHQgY2hpbGQgZm9yIHRoZSBub2RlLCBvciBudWxsLlxyXG4gICAgICogQHJldHVybiB7IUxMUkJOb2RlfSBUaGUgbm9kZSBjb3B5LlxyXG4gICAgICovXHJcbiAgICBMTFJCTm9kZS5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIChrZXksIHZhbHVlLCBjb2xvciwgbGVmdCwgcmlnaHQpIHtcclxuICAgICAgICByZXR1cm4gbmV3IExMUkJOb2RlKGtleSAhPSBudWxsID8ga2V5IDogdGhpcy5rZXksIHZhbHVlICE9IG51bGwgPyB2YWx1ZSA6IHRoaXMudmFsdWUsIGNvbG9yICE9IG51bGwgPyBjb2xvciA6IHRoaXMuY29sb3IsIGxlZnQgIT0gbnVsbCA/IGxlZnQgOiB0aGlzLmxlZnQsIHJpZ2h0ICE9IG51bGwgPyByaWdodCA6IHRoaXMucmlnaHQpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgdG90YWwgbnVtYmVyIG9mIG5vZGVzIGluIHRoZSB0cmVlLlxyXG4gICAgICovXHJcbiAgICBMTFJCTm9kZS5wcm90b3R5cGUuY291bnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubGVmdC5jb3VudCgpICsgMSArIHRoaXMucmlnaHQuY291bnQoKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIHRyZWUgaXMgZW1wdHkuXHJcbiAgICAgKi9cclxuICAgIExMUkJOb2RlLnByb3RvdHlwZS5pc0VtcHR5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFRyYXZlcnNlcyB0aGUgdHJlZSBpbiBrZXkgb3JkZXIgYW5kIGNhbGxzIHRoZSBzcGVjaWZpZWQgYWN0aW9uIGZ1bmN0aW9uXHJcbiAgICAgKiBmb3IgZWFjaCBub2RlLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oIUssICFWKToqfSBhY3Rpb24gQ2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIGZvciBlYWNoXHJcbiAgICAgKiAgIG5vZGUuICBJZiBpdCByZXR1cm5zIHRydWUsIHRyYXZlcnNhbCBpcyBhYm9ydGVkLlxyXG4gICAgICogQHJldHVybiB7Kn0gVGhlIGZpcnN0IHRydXRoeSB2YWx1ZSByZXR1cm5lZCBieSBhY3Rpb24sIG9yIHRoZSBsYXN0IGZhbHNleVxyXG4gICAgICogICB2YWx1ZSByZXR1cm5lZCBieSBhY3Rpb25cclxuICAgICAqL1xyXG4gICAgTExSQk5vZGUucHJvdG90eXBlLmlub3JkZXJUcmF2ZXJzYWwgPSBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLmxlZnQuaW5vcmRlclRyYXZlcnNhbChhY3Rpb24pIHx8XHJcbiAgICAgICAgICAgICEhYWN0aW9uKHRoaXMua2V5LCB0aGlzLnZhbHVlKSB8fFxyXG4gICAgICAgICAgICB0aGlzLnJpZ2h0Lmlub3JkZXJUcmF2ZXJzYWwoYWN0aW9uKSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBUcmF2ZXJzZXMgdGhlIHRyZWUgaW4gcmV2ZXJzZSBrZXkgb3JkZXIgYW5kIGNhbGxzIHRoZSBzcGVjaWZpZWQgYWN0aW9uIGZ1bmN0aW9uXHJcbiAgICAgKiBmb3IgZWFjaCBub2RlLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oIU9iamVjdCwgIU9iamVjdCl9IGFjdGlvbiBDYWxsYmFjayBmdW5jdGlvbiB0byBiZSBjYWxsZWQgZm9yIGVhY2hcclxuICAgICAqIG5vZGUuICBJZiBpdCByZXR1cm5zIHRydWUsIHRyYXZlcnNhbCBpcyBhYm9ydGVkLlxyXG4gICAgICogQHJldHVybiB7Kn0gVHJ1ZSBpZiB0cmF2ZXJzYWwgd2FzIGFib3J0ZWQuXHJcbiAgICAgKi9cclxuICAgIExMUkJOb2RlLnByb3RvdHlwZS5yZXZlcnNlVHJhdmVyc2FsID0gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5yaWdodC5yZXZlcnNlVHJhdmVyc2FsKGFjdGlvbikgfHxcclxuICAgICAgICAgICAgYWN0aW9uKHRoaXMua2V5LCB0aGlzLnZhbHVlKSB8fFxyXG4gICAgICAgICAgICB0aGlzLmxlZnQucmV2ZXJzZVRyYXZlcnNhbChhY3Rpb24pKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4geyFPYmplY3R9IFRoZSBtaW5pbXVtIG5vZGUgaW4gdGhlIHRyZWUuXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBMTFJCTm9kZS5wcm90b3R5cGUubWluXyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5sZWZ0LmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxlZnQubWluXygpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4geyFLfSBUaGUgbWF4aW11bSBrZXkgaW4gdGhlIHRyZWUuXHJcbiAgICAgKi9cclxuICAgIExMUkJOb2RlLnByb3RvdHlwZS5taW5LZXkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubWluXygpLmtleTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4geyFLfSBUaGUgbWF4aW11bSBrZXkgaW4gdGhlIHRyZWUuXHJcbiAgICAgKi9cclxuICAgIExMUkJOb2RlLnByb3RvdHlwZS5tYXhLZXkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucmlnaHQuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmtleTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJpZ2h0Lm1heEtleSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFPYmplY3R9IGtleSBLZXkgdG8gaW5zZXJ0LlxyXG4gICAgICogQHBhcmFtIHshT2JqZWN0fSB2YWx1ZSBWYWx1ZSB0byBpbnNlcnQuXHJcbiAgICAgKiBAcGFyYW0ge0NvbXBhcmF0b3J9IGNvbXBhcmF0b3IgQ29tcGFyYXRvci5cclxuICAgICAqIEByZXR1cm4geyFMTFJCTm9kZX0gTmV3IHRyZWUsIHdpdGggdGhlIGtleS92YWx1ZSBhZGRlZC5cclxuICAgICAqL1xyXG4gICAgTExSQk5vZGUucHJvdG90eXBlLmluc2VydCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlLCBjb21wYXJhdG9yKSB7XHJcbiAgICAgICAgdmFyIG4gPSB0aGlzO1xyXG4gICAgICAgIHZhciBjbXAgPSBjb21wYXJhdG9yKGtleSwgbi5rZXkpO1xyXG4gICAgICAgIGlmIChjbXAgPCAwKSB7XHJcbiAgICAgICAgICAgIG4gPSBuLmNvcHkobnVsbCwgbnVsbCwgbnVsbCwgbi5sZWZ0Lmluc2VydChrZXksIHZhbHVlLCBjb21wYXJhdG9yKSwgbnVsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGNtcCA9PT0gMCkge1xyXG4gICAgICAgICAgICBuID0gbi5jb3B5KG51bGwsIHZhbHVlLCBudWxsLCBudWxsLCBudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG4gPSBuLmNvcHkobnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbi5yaWdodC5pbnNlcnQoa2V5LCB2YWx1ZSwgY29tcGFyYXRvcikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbi5maXhVcF8oKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKiBAcmV0dXJuIHshTExSQk5vZGV8TExSQkVtcHR5Tm9kZX0gTmV3IHRyZWUsIHdpdGggdGhlIG1pbmltdW0ga2V5IHJlbW92ZWQuXHJcbiAgICAgKi9cclxuICAgIExMUkJOb2RlLnByb3RvdHlwZS5yZW1vdmVNaW5fID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmxlZnQuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBTb3J0ZWRNYXAuRU1QVFlfTk9ERTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG4gPSB0aGlzO1xyXG4gICAgICAgIGlmICghbi5sZWZ0LmlzUmVkXygpICYmICFuLmxlZnQubGVmdC5pc1JlZF8oKSkge1xyXG4gICAgICAgICAgICBuID0gbi5tb3ZlUmVkTGVmdF8oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbiA9IG4uY29weShudWxsLCBudWxsLCBudWxsLCBuLmxlZnQucmVtb3ZlTWluXygpLCBudWxsKTtcclxuICAgICAgICByZXR1cm4gbi5maXhVcF8oKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IU9iamVjdH0ga2V5IFRoZSBrZXkgb2YgdGhlIGl0ZW0gdG8gcmVtb3ZlLlxyXG4gICAgICogQHBhcmFtIHtDb21wYXJhdG9yfSBjb21wYXJhdG9yIENvbXBhcmF0b3IuXHJcbiAgICAgKiBAcmV0dXJuIHshTExSQk5vZGV8TExSQkVtcHR5Tm9kZX0gTmV3IHRyZWUsIHdpdGggdGhlIHNwZWNpZmllZCBpdGVtIHJlbW92ZWQuXHJcbiAgICAgKi9cclxuICAgIExMUkJOb2RlLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoa2V5LCBjb21wYXJhdG9yKSB7XHJcbiAgICAgICAgdmFyIG4sIHNtYWxsZXN0O1xyXG4gICAgICAgIG4gPSB0aGlzO1xyXG4gICAgICAgIGlmIChjb21wYXJhdG9yKGtleSwgbi5rZXkpIDwgMCkge1xyXG4gICAgICAgICAgICBpZiAoIW4ubGVmdC5pc0VtcHR5KCkgJiYgIW4ubGVmdC5pc1JlZF8oKSAmJiAhbi5sZWZ0LmxlZnQuaXNSZWRfKCkpIHtcclxuICAgICAgICAgICAgICAgIG4gPSBuLm1vdmVSZWRMZWZ0XygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG4gPSBuLmNvcHkobnVsbCwgbnVsbCwgbnVsbCwgbi5sZWZ0LnJlbW92ZShrZXksIGNvbXBhcmF0b3IpLCBudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChuLmxlZnQuaXNSZWRfKCkpIHtcclxuICAgICAgICAgICAgICAgIG4gPSBuLnJvdGF0ZVJpZ2h0XygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghbi5yaWdodC5pc0VtcHR5KCkgJiYgIW4ucmlnaHQuaXNSZWRfKCkgJiYgIW4ucmlnaHQubGVmdC5pc1JlZF8oKSkge1xyXG4gICAgICAgICAgICAgICAgbiA9IG4ubW92ZVJlZFJpZ2h0XygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjb21wYXJhdG9yKGtleSwgbi5rZXkpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobi5yaWdodC5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gU29ydGVkTWFwLkVNUFRZX05PREU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzbWFsbGVzdCA9IG4ucmlnaHQubWluXygpO1xyXG4gICAgICAgICAgICAgICAgICAgIG4gPSBuLmNvcHkoc21hbGxlc3Qua2V5LCBzbWFsbGVzdC52YWx1ZSwgbnVsbCwgbnVsbCwgbi5yaWdodC5yZW1vdmVNaW5fKCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG4gPSBuLmNvcHkobnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbi5yaWdodC5yZW1vdmUoa2V5LCBjb21wYXJhdG9yKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuLmZpeFVwXygpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhpcyBpcyBhIFJFRCBub2RlLlxyXG4gICAgICovXHJcbiAgICBMTFJCTm9kZS5wcm90b3R5cGUuaXNSZWRfID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbG9yO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqIEByZXR1cm4geyFMTFJCTm9kZX0gTmV3IHRyZWUgYWZ0ZXIgcGVyZm9ybWluZyBhbnkgbmVlZGVkIHJvdGF0aW9ucy5cclxuICAgICAqL1xyXG4gICAgTExSQk5vZGUucHJvdG90eXBlLmZpeFVwXyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgbiA9IHRoaXM7XHJcbiAgICAgICAgaWYgKG4ucmlnaHQuaXNSZWRfKCkgJiYgIW4ubGVmdC5pc1JlZF8oKSkge1xyXG4gICAgICAgICAgICBuID0gbi5yb3RhdGVMZWZ0XygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobi5sZWZ0LmlzUmVkXygpICYmIG4ubGVmdC5sZWZ0LmlzUmVkXygpKSB7XHJcbiAgICAgICAgICAgIG4gPSBuLnJvdGF0ZVJpZ2h0XygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobi5sZWZ0LmlzUmVkXygpICYmIG4ucmlnaHQuaXNSZWRfKCkpIHtcclxuICAgICAgICAgICAgbiA9IG4uY29sb3JGbGlwXygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbjtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKiBAcmV0dXJuIHshTExSQk5vZGV9IE5ldyB0cmVlLCBhZnRlciBtb3ZlUmVkTGVmdC5cclxuICAgICAqL1xyXG4gICAgTExSQk5vZGUucHJvdG90eXBlLm1vdmVSZWRMZWZ0XyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgbiA9IHRoaXMuY29sb3JGbGlwXygpO1xyXG4gICAgICAgIGlmIChuLnJpZ2h0LmxlZnQuaXNSZWRfKCkpIHtcclxuICAgICAgICAgICAgbiA9IG4uY29weShudWxsLCBudWxsLCBudWxsLCBudWxsLCBuLnJpZ2h0LnJvdGF0ZVJpZ2h0XygpKTtcclxuICAgICAgICAgICAgbiA9IG4ucm90YXRlTGVmdF8oKTtcclxuICAgICAgICAgICAgbiA9IG4uY29sb3JGbGlwXygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbjtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKiBAcmV0dXJuIHshTExSQk5vZGV9IE5ldyB0cmVlLCBhZnRlciBtb3ZlUmVkUmlnaHQuXHJcbiAgICAgKi9cclxuICAgIExMUkJOb2RlLnByb3RvdHlwZS5tb3ZlUmVkUmlnaHRfID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBuID0gdGhpcy5jb2xvckZsaXBfKCk7XHJcbiAgICAgICAgaWYgKG4ubGVmdC5sZWZ0LmlzUmVkXygpKSB7XHJcbiAgICAgICAgICAgIG4gPSBuLnJvdGF0ZVJpZ2h0XygpO1xyXG4gICAgICAgICAgICBuID0gbi5jb2xvckZsaXBfKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqIEByZXR1cm4geyFMTFJCTm9kZX0gTmV3IHRyZWUsIGFmdGVyIHJvdGF0ZUxlZnQuXHJcbiAgICAgKi9cclxuICAgIExMUkJOb2RlLnByb3RvdHlwZS5yb3RhdGVMZWZ0XyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgbmwgPSB0aGlzLmNvcHkobnVsbCwgbnVsbCwgTExSQk5vZGUuUkVELCBudWxsLCB0aGlzLnJpZ2h0LmxlZnQpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJpZ2h0LmNvcHkobnVsbCwgbnVsbCwgdGhpcy5jb2xvciwgbmwsIG51bGwpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqIEByZXR1cm4geyFMTFJCTm9kZX0gTmV3IHRyZWUsIGFmdGVyIHJvdGF0ZVJpZ2h0LlxyXG4gICAgICovXHJcbiAgICBMTFJCTm9kZS5wcm90b3R5cGUucm90YXRlUmlnaHRfID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBuciA9IHRoaXMuY29weShudWxsLCBudWxsLCBMTFJCTm9kZS5SRUQsIHRoaXMubGVmdC5yaWdodCwgbnVsbCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubGVmdC5jb3B5KG51bGwsIG51bGwsIHRoaXMuY29sb3IsIG51bGwsIG5yKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKiBAcmV0dXJuIHshTExSQk5vZGV9IE5ldyB0cmVlLCBhZnRlciBjb2xvckZsaXAuXHJcbiAgICAgKi9cclxuICAgIExMUkJOb2RlLnByb3RvdHlwZS5jb2xvckZsaXBfID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBsZWZ0ID0gdGhpcy5sZWZ0LmNvcHkobnVsbCwgbnVsbCwgIXRoaXMubGVmdC5jb2xvciwgbnVsbCwgbnVsbCk7XHJcbiAgICAgICAgdmFyIHJpZ2h0ID0gdGhpcy5yaWdodC5jb3B5KG51bGwsIG51bGwsICF0aGlzLnJpZ2h0LmNvbG9yLCBudWxsLCBudWxsKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb3B5KG51bGwsIG51bGwsICF0aGlzLmNvbG9yLCBsZWZ0LCByaWdodCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBGb3IgdGVzdGluZy5cclxuICAgICAqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBhbGwgaXMgd2VsbC5cclxuICAgICAqL1xyXG4gICAgTExSQk5vZGUucHJvdG90eXBlLmNoZWNrTWF4RGVwdGhfID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBibGFja0RlcHRoID0gdGhpcy5jaGVja18oKTtcclxuICAgICAgICByZXR1cm4gTWF0aC5wb3coMi4wLCBibGFja0RlcHRoKSA8PSB0aGlzLmNvdW50KCkgKyAxO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqIEByZXR1cm4ge251bWJlcn0gTm90IHN1cmUgd2hhdCB0aGlzIHJldHVybnMgZXhhY3RseS4gOi0pLlxyXG4gICAgICovXHJcbiAgICBMTFJCTm9kZS5wcm90b3R5cGUuY2hlY2tfID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzUmVkXygpICYmIHRoaXMubGVmdC5pc1JlZF8oKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlZCBub2RlIGhhcyByZWQgY2hpbGQoJyArIHRoaXMua2V5ICsgJywnICsgdGhpcy52YWx1ZSArICcpJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnJpZ2h0LmlzUmVkXygpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmlnaHQgY2hpbGQgb2YgKCcgKyB0aGlzLmtleSArICcsJyArIHRoaXMudmFsdWUgKyAnKSBpcyByZWQnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGJsYWNrRGVwdGggPSB0aGlzLmxlZnQuY2hlY2tfKCk7XHJcbiAgICAgICAgaWYgKGJsYWNrRGVwdGggIT09IHRoaXMucmlnaHQuY2hlY2tfKCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdCbGFjayBkZXB0aHMgZGlmZmVyJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gYmxhY2tEZXB0aCArICh0aGlzLmlzUmVkXygpID8gMCA6IDEpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBMTFJCTm9kZS5SRUQgPSB0cnVlO1xyXG4gICAgTExSQk5vZGUuQkxBQ0sgPSBmYWxzZTtcclxuICAgIHJldHVybiBMTFJCTm9kZTtcclxufSgpKTtcclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgYW4gZW1wdHkgbm9kZSAoYSBsZWFmIG5vZGUgaW4gdGhlIFJlZC1CbGFjayBUcmVlKS5cclxuICovXHJcbnZhciBMTFJCRW1wdHlOb2RlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTExSQkVtcHR5Tm9kZSgpIHtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIGNvcHkgb2YgdGhlIGN1cnJlbnQgbm9kZS5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIHshTExSQkVtcHR5Tm9kZX0gVGhlIG5vZGUgY29weS5cclxuICAgICAqL1xyXG4gICAgTExSQkVtcHR5Tm9kZS5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIChrZXksIHZhbHVlLCBjb2xvciwgbGVmdCwgcmlnaHQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSBjb3B5IG9mIHRoZSB0cmVlLCB3aXRoIHRoZSBzcGVjaWZpZWQga2V5L3ZhbHVlIGFkZGVkLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IUt9IGtleSBLZXkgdG8gYmUgYWRkZWQuXHJcbiAgICAgKiBAcGFyYW0geyFWfSB2YWx1ZSBWYWx1ZSB0byBiZSBhZGRlZC5cclxuICAgICAqIEBwYXJhbSB7Q29tcGFyYXRvcn0gY29tcGFyYXRvciBDb21wYXJhdG9yLlxyXG4gICAgICogQHJldHVybiB7IUxMUkJOb2RlfSBOZXcgdHJlZSwgd2l0aCBpdGVtIGFkZGVkLlxyXG4gICAgICovXHJcbiAgICBMTFJCRW1wdHlOb2RlLnByb3RvdHlwZS5pbnNlcnQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSwgY29tcGFyYXRvcikge1xyXG4gICAgICAgIHJldHVybiBuZXcgTExSQk5vZGUoa2V5LCB2YWx1ZSwgbnVsbCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgY29weSBvZiB0aGUgdHJlZSwgd2l0aCB0aGUgc3BlY2lmaWVkIGtleSByZW1vdmVkLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IUt9IGtleSBUaGUga2V5IHRvIHJlbW92ZS5cclxuICAgICAqIEBwYXJhbSB7Q29tcGFyYXRvcn0gY29tcGFyYXRvciBDb21wYXJhdG9yLlxyXG4gICAgICogQHJldHVybiB7IUxMUkJFbXB0eU5vZGV9IE5ldyB0cmVlLCB3aXRoIGl0ZW0gcmVtb3ZlZC5cclxuICAgICAqL1xyXG4gICAgTExSQkVtcHR5Tm9kZS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKGtleSwgY29tcGFyYXRvcikge1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgdG90YWwgbnVtYmVyIG9mIG5vZGVzIGluIHRoZSB0cmVlLlxyXG4gICAgICovXHJcbiAgICBMTFJCRW1wdHlOb2RlLnByb3RvdHlwZS5jb3VudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIHRyZWUgaXMgZW1wdHkuXHJcbiAgICAgKi9cclxuICAgIExMUkJFbXB0eU5vZGUucHJvdG90eXBlLmlzRW1wdHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBUcmF2ZXJzZXMgdGhlIHRyZWUgaW4ga2V5IG9yZGVyIGFuZCBjYWxscyB0aGUgc3BlY2lmaWVkIGFjdGlvbiBmdW5jdGlvblxyXG4gICAgICogZm9yIGVhY2ggbm9kZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCFLLCAhVik6Kn0gYWN0aW9uIENhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBmb3IgZWFjaFxyXG4gICAgICogbm9kZS4gIElmIGl0IHJldHVybnMgdHJ1ZSwgdHJhdmVyc2FsIGlzIGFib3J0ZWQuXHJcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRyYXZlcnNhbCB3YXMgYWJvcnRlZC5cclxuICAgICAqL1xyXG4gICAgTExSQkVtcHR5Tm9kZS5wcm90b3R5cGUuaW5vcmRlclRyYXZlcnNhbCA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBUcmF2ZXJzZXMgdGhlIHRyZWUgaW4gcmV2ZXJzZSBrZXkgb3JkZXIgYW5kIGNhbGxzIHRoZSBzcGVjaWZpZWQgYWN0aW9uIGZ1bmN0aW9uXHJcbiAgICAgKiBmb3IgZWFjaCBub2RlLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oIUssICFWKX0gYWN0aW9uIENhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBmb3IgZWFjaFxyXG4gICAgICogbm9kZS4gIElmIGl0IHJldHVybnMgdHJ1ZSwgdHJhdmVyc2FsIGlzIGFib3J0ZWQuXHJcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRyYXZlcnNhbCB3YXMgYWJvcnRlZC5cclxuICAgICAqL1xyXG4gICAgTExSQkVtcHR5Tm9kZS5wcm90b3R5cGUucmV2ZXJzZVRyYXZlcnNhbCA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHtudWxsfVxyXG4gICAgICovXHJcbiAgICBMTFJCRW1wdHlOb2RlLnByb3RvdHlwZS5taW5LZXkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHtudWxsfVxyXG4gICAgICovXHJcbiAgICBMTFJCRW1wdHlOb2RlLnByb3RvdHlwZS5tYXhLZXkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQHJldHVybiB7bnVtYmVyfSBOb3Qgc3VyZSB3aGF0IHRoaXMgcmV0dXJucyBleGFjdGx5LiA6LSkuXHJcbiAgICAgKi9cclxuICAgIExMUkJFbXB0eU5vZGUucHJvdG90eXBlLmNoZWNrXyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoaXMgbm9kZSBpcyByZWQuXHJcbiAgICAgKi9cclxuICAgIExMUkJFbXB0eU5vZGUucHJvdG90eXBlLmlzUmVkXyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIExMUkJFbXB0eU5vZGU7XHJcbn0oKSk7XHJcbi8qKlxyXG4gKiBBbiBpbW11dGFibGUgc29ydGVkIG1hcCBpbXBsZW1lbnRhdGlvbiwgYmFzZWQgb24gYSBMZWZ0LWxlYW5pbmcgUmVkLUJsYWNrXHJcbiAqIHRyZWUuXHJcbiAqL1xyXG52YXIgU29ydGVkTWFwID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAdGVtcGxhdGUgSywgVlxyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbihLLCBLKTpudW1iZXJ9IGNvbXBhcmF0b3JfIEtleSBjb21wYXJhdG9yLlxyXG4gICAgICogQHBhcmFtIHtMTFJCTm9kZT19IHJvb3RfIChPcHRpb25hbCkgUm9vdCBub2RlIGZvciB0aGUgbWFwLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBTb3J0ZWRNYXAoY29tcGFyYXRvcl8sIHJvb3RfKSB7XHJcbiAgICAgICAgaWYgKHJvb3RfID09PSB2b2lkIDApIHsgcm9vdF8gPSBTb3J0ZWRNYXAuRU1QVFlfTk9ERTsgfVxyXG4gICAgICAgIHRoaXMuY29tcGFyYXRvcl8gPSBjb21wYXJhdG9yXztcclxuICAgICAgICB0aGlzLnJvb3RfID0gcm9vdF87XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSBjb3B5IG9mIHRoZSBtYXAsIHdpdGggdGhlIHNwZWNpZmllZCBrZXkvdmFsdWUgYWRkZWQgb3IgcmVwbGFjZWQuXHJcbiAgICAgKiAoVE9ETzogV2Ugc2hvdWxkIHBlcmhhcHMgcmVuYW1lIHRoaXMgbWV0aG9kIHRvICdwdXQnKVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IUt9IGtleSBLZXkgdG8gYmUgYWRkZWQuXHJcbiAgICAgKiBAcGFyYW0geyFWfSB2YWx1ZSBWYWx1ZSB0byBiZSBhZGRlZC5cclxuICAgICAqIEByZXR1cm4geyFTb3J0ZWRNYXAuPEssIFY+fSBOZXcgbWFwLCB3aXRoIGl0ZW0gYWRkZWQuXHJcbiAgICAgKi9cclxuICAgIFNvcnRlZE1hcC5wcm90b3R5cGUuaW5zZXJ0ID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFNvcnRlZE1hcCh0aGlzLmNvbXBhcmF0b3JfLCB0aGlzLnJvb3RfXHJcbiAgICAgICAgICAgIC5pbnNlcnQoa2V5LCB2YWx1ZSwgdGhpcy5jb21wYXJhdG9yXylcclxuICAgICAgICAgICAgLmNvcHkobnVsbCwgbnVsbCwgTExSQk5vZGUuQkxBQ0ssIG51bGwsIG51bGwpKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSBjb3B5IG9mIHRoZSBtYXAsIHdpdGggdGhlIHNwZWNpZmllZCBrZXkgcmVtb3ZlZC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFLfSBrZXkgVGhlIGtleSB0byByZW1vdmUuXHJcbiAgICAgKiBAcmV0dXJuIHshU29ydGVkTWFwLjxLLCBWPn0gTmV3IG1hcCwgd2l0aCBpdGVtIHJlbW92ZWQuXHJcbiAgICAgKi9cclxuICAgIFNvcnRlZE1hcC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgU29ydGVkTWFwKHRoaXMuY29tcGFyYXRvcl8sIHRoaXMucm9vdF9cclxuICAgICAgICAgICAgLnJlbW92ZShrZXksIHRoaXMuY29tcGFyYXRvcl8pXHJcbiAgICAgICAgICAgIC5jb3B5KG51bGwsIG51bGwsIExMUkJOb2RlLkJMQUNLLCBudWxsLCBudWxsKSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgbm9kZSB3aXRoIHRoZSBnaXZlbiBrZXksIG9yIG51bGwuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHshS30ga2V5IFRoZSBrZXkgdG8gbG9vayB1cC5cclxuICAgICAqIEByZXR1cm4gez9WfSBUaGUgdmFsdWUgb2YgdGhlIG5vZGUgd2l0aCB0aGUgZ2l2ZW4ga2V5LCBvciBudWxsIGlmIHRoZVxyXG4gICAgICoga2V5IGRvZXNuJ3QgZXhpc3QuXHJcbiAgICAgKi9cclxuICAgIFNvcnRlZE1hcC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIHZhciBjbXA7XHJcbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzLnJvb3RfO1xyXG4gICAgICAgIHdoaWxlICghbm9kZS5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgY21wID0gdGhpcy5jb21wYXJhdG9yXyhrZXksIG5vZGUua2V5KTtcclxuICAgICAgICAgICAgaWYgKGNtcCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUudmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY21wIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUubGVmdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjbXAgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5yaWdodDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIGtleSBvZiB0aGUgaXRlbSAqYmVmb3JlKiB0aGUgc3BlY2lmaWVkIGtleSwgb3IgbnVsbCBpZiBrZXkgaXMgdGhlIGZpcnN0IGl0ZW0uXHJcbiAgICAgKiBAcGFyYW0ge0t9IGtleSBUaGUga2V5IHRvIGZpbmQgdGhlIHByZWRlY2Vzc29yIG9mXHJcbiAgICAgKiBAcmV0dXJuIHs/S30gVGhlIHByZWRlY2Vzc29yIGtleS5cclxuICAgICAqL1xyXG4gICAgU29ydGVkTWFwLnByb3RvdHlwZS5nZXRQcmVkZWNlc3NvcktleSA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICB2YXIgY21wLCBub2RlID0gdGhpcy5yb290XywgcmlnaHRQYXJlbnQgPSBudWxsO1xyXG4gICAgICAgIHdoaWxlICghbm9kZS5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgY21wID0gdGhpcy5jb21wYXJhdG9yXyhrZXksIG5vZGUua2V5KTtcclxuICAgICAgICAgICAgaWYgKGNtcCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFub2RlLmxlZnQuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUubGVmdDtcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoIW5vZGUucmlnaHQuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLnJpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbm9kZS5rZXk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChyaWdodFBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByaWdodFBhcmVudC5rZXk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsgLy8gZmlyc3QgaXRlbS5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjbXAgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5sZWZ0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGNtcCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHJpZ2h0UGFyZW50ID0gbm9kZTtcclxuICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLnJpZ2h0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQXR0ZW1wdGVkIHRvIGZpbmQgcHJlZGVjZXNzb3Iga2V5IGZvciBhIG5vbmV4aXN0ZW50IGtleS4gIFdoYXQgZ2l2ZXM/Jyk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBtYXAgaXMgZW1wdHkuXHJcbiAgICAgKi9cclxuICAgIFNvcnRlZE1hcC5wcm90b3R5cGUuaXNFbXB0eSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yb290Xy5pc0VtcHR5KCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSB0b3RhbCBudW1iZXIgb2Ygbm9kZXMgaW4gdGhlIG1hcC5cclxuICAgICAqL1xyXG4gICAgU29ydGVkTWFwLnByb3RvdHlwZS5jb3VudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yb290Xy5jb3VudCgpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7P0t9IFRoZSBtaW5pbXVtIGtleSBpbiB0aGUgbWFwLlxyXG4gICAgICovXHJcbiAgICBTb3J0ZWRNYXAucHJvdG90eXBlLm1pbktleSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yb290Xy5taW5LZXkoKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4gez9LfSBUaGUgbWF4aW11bSBrZXkgaW4gdGhlIG1hcC5cclxuICAgICAqL1xyXG4gICAgU29ydGVkTWFwLnByb3RvdHlwZS5tYXhLZXkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucm9vdF8ubWF4S2V5KCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBUcmF2ZXJzZXMgdGhlIG1hcCBpbiBrZXkgb3JkZXIgYW5kIGNhbGxzIHRoZSBzcGVjaWZpZWQgYWN0aW9uIGZ1bmN0aW9uXHJcbiAgICAgKiBmb3IgZWFjaCBrZXkvdmFsdWUgcGFpci5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCFLLCAhVik6Kn0gYWN0aW9uIENhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZFxyXG4gICAgICogZm9yIGVhY2gga2V5L3ZhbHVlIHBhaXIuICBJZiBhY3Rpb24gcmV0dXJucyB0cnVlLCB0cmF2ZXJzYWwgaXMgYWJvcnRlZC5cclxuICAgICAqIEByZXR1cm4geyp9IFRoZSBmaXJzdCB0cnV0aHkgdmFsdWUgcmV0dXJuZWQgYnkgYWN0aW9uLCBvciB0aGUgbGFzdCBmYWxzZXlcclxuICAgICAqICAgdmFsdWUgcmV0dXJuZWQgYnkgYWN0aW9uXHJcbiAgICAgKi9cclxuICAgIFNvcnRlZE1hcC5wcm90b3R5cGUuaW5vcmRlclRyYXZlcnNhbCA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yb290Xy5pbm9yZGVyVHJhdmVyc2FsKGFjdGlvbik7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBUcmF2ZXJzZXMgdGhlIG1hcCBpbiByZXZlcnNlIGtleSBvcmRlciBhbmQgY2FsbHMgdGhlIHNwZWNpZmllZCBhY3Rpb24gZnVuY3Rpb25cclxuICAgICAqIGZvciBlYWNoIGtleS92YWx1ZSBwYWlyLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oIU9iamVjdCwgIU9iamVjdCl9IGFjdGlvbiBDYWxsYmFjayBmdW5jdGlvbiB0byBiZSBjYWxsZWRcclxuICAgICAqIGZvciBlYWNoIGtleS92YWx1ZSBwYWlyLiAgSWYgYWN0aW9uIHJldHVybnMgdHJ1ZSwgdHJhdmVyc2FsIGlzIGFib3J0ZWQuXHJcbiAgICAgKiBAcmV0dXJuIHsqfSBUcnVlIGlmIHRoZSB0cmF2ZXJzYWwgd2FzIGFib3J0ZWQuXHJcbiAgICAgKi9cclxuICAgIFNvcnRlZE1hcC5wcm90b3R5cGUucmV2ZXJzZVRyYXZlcnNhbCA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yb290Xy5yZXZlcnNlVHJhdmVyc2FsKGFjdGlvbik7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGFuIGl0ZXJhdG9yIG92ZXIgdGhlIFNvcnRlZE1hcC5cclxuICAgICAqIEB0ZW1wbGF0ZSBUXHJcbiAgICAgKiBAcGFyYW0geyhmdW5jdGlvbihLLCBWKTpUKT19IHJlc3VsdEdlbmVyYXRvclxyXG4gICAgICogQHJldHVybiB7U29ydGVkTWFwSXRlcmF0b3IuPEssIFYsIFQ+fSBUaGUgaXRlcmF0b3IuXHJcbiAgICAgKi9cclxuICAgIFNvcnRlZE1hcC5wcm90b3R5cGUuZ2V0SXRlcmF0b3IgPSBmdW5jdGlvbiAocmVzdWx0R2VuZXJhdG9yKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTb3J0ZWRNYXBJdGVyYXRvcih0aGlzLnJvb3RfLCBudWxsLCB0aGlzLmNvbXBhcmF0b3JfLCBmYWxzZSwgcmVzdWx0R2VuZXJhdG9yKTtcclxuICAgIH07XHJcbiAgICBTb3J0ZWRNYXAucHJvdG90eXBlLmdldEl0ZXJhdG9yRnJvbSA9IGZ1bmN0aW9uIChrZXksIHJlc3VsdEdlbmVyYXRvcikge1xyXG4gICAgICAgIHJldHVybiBuZXcgU29ydGVkTWFwSXRlcmF0b3IodGhpcy5yb290Xywga2V5LCB0aGlzLmNvbXBhcmF0b3JfLCBmYWxzZSwgcmVzdWx0R2VuZXJhdG9yKTtcclxuICAgIH07XHJcbiAgICBTb3J0ZWRNYXAucHJvdG90eXBlLmdldFJldmVyc2VJdGVyYXRvckZyb20gPSBmdW5jdGlvbiAoa2V5LCByZXN1bHRHZW5lcmF0b3IpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFNvcnRlZE1hcEl0ZXJhdG9yKHRoaXMucm9vdF8sIGtleSwgdGhpcy5jb21wYXJhdG9yXywgdHJ1ZSwgcmVzdWx0R2VuZXJhdG9yKTtcclxuICAgIH07XHJcbiAgICBTb3J0ZWRNYXAucHJvdG90eXBlLmdldFJldmVyc2VJdGVyYXRvciA9IGZ1bmN0aW9uIChyZXN1bHRHZW5lcmF0b3IpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFNvcnRlZE1hcEl0ZXJhdG9yKHRoaXMucm9vdF8sIG51bGwsIHRoaXMuY29tcGFyYXRvcl8sIHRydWUsIHJlc3VsdEdlbmVyYXRvcik7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBbHdheXMgdXNlIHRoZSBzYW1lIGVtcHR5IG5vZGUsIHRvIHJlZHVjZSBtZW1vcnkuXHJcbiAgICAgKiBAY29uc3RcclxuICAgICAqL1xyXG4gICAgU29ydGVkTWFwLkVNUFRZX05PREUgPSBuZXcgTExSQkVtcHR5Tm9kZSgpO1xyXG4gICAgcmV0dXJuIFNvcnRlZE1hcDtcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIExPR18yID0gTWF0aC5sb2coMik7XHJcbi8qKlxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbnZhciBCYXNlMTJOdW0gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gQmFzZTEyTnVtKGxlbmd0aCkge1xyXG4gICAgICAgIHZhciBsb2dCYXNlMiA9IGZ1bmN0aW9uIChudW0pIHtcclxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KChNYXRoLmxvZyhudW0pIC8gTE9HXzIpLCAxMCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgYml0TWFzayA9IGZ1bmN0aW9uIChiaXRzKSB7IHJldHVybiBwYXJzZUludChBcnJheShiaXRzICsgMSkuam9pbignMScpLCAyKTsgfTtcclxuICAgICAgICB0aGlzLmNvdW50ID0gbG9nQmFzZTIobGVuZ3RoICsgMSk7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50XyA9IHRoaXMuY291bnQgLSAxO1xyXG4gICAgICAgIHZhciBtYXNrID0gYml0TWFzayh0aGlzLmNvdW50KTtcclxuICAgICAgICB0aGlzLmJpdHNfID0gKGxlbmd0aCArIDEpICYgbWFzaztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgQmFzZTEyTnVtLnByb3RvdHlwZS5uZXh0Qml0SXNPbmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy9ub2luc3BlY3Rpb24gSlNCaXR3aXNlT3BlcmF0b3JVc2FnZVxyXG4gICAgICAgIHZhciByZXN1bHQgPSAhKHRoaXMuYml0c18gJiAoMHgxIDw8IHRoaXMuY3VycmVudF8pKTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRfLS07XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gQmFzZTEyTnVtO1xyXG59KCkpO1xyXG4vKipcclxuICogVGFrZXMgYSBsaXN0IG9mIGNoaWxkIG5vZGVzIGFuZCBjb25zdHJ1Y3RzIGEgU29ydGVkU2V0IHVzaW5nIHRoZSBnaXZlbiBjb21wYXJpc29uXHJcbiAqIGZ1bmN0aW9uXHJcbiAqXHJcbiAqIFVzZXMgdGhlIGFsZ29yaXRobSBkZXNjcmliZWQgaW4gdGhlIHBhcGVyIGxpbmtlZCBoZXJlOlxyXG4gKiBodHRwOi8vY2l0ZXNlZXJ4LmlzdC5wc3UuZWR1L3ZpZXdkb2Mvc3VtbWFyeT9kb2k9MTAuMS4xLjQ2LjE0NThcclxuICpcclxuICogQHRlbXBsYXRlIEssIFZcclxuICogQHBhcmFtIHtBcnJheS48IU5hbWVkTm9kZT59IGNoaWxkTGlzdCBVbnNvcnRlZCBsaXN0IG9mIGNoaWxkcmVuXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oIU5hbWVkTm9kZSwgIU5hbWVkTm9kZSk6bnVtYmVyfSBjbXAgVGhlIGNvbXBhcmlzb24gbWV0aG9kIHRvIGJlIHVzZWRcclxuICogQHBhcmFtIHsoZnVuY3Rpb24oTmFtZWROb2RlKTpLKT19IGtleUZuIEFuIG9wdGlvbmFsIGZ1bmN0aW9uIHRvIGV4dHJhY3QgSyBmcm9tIGEgbm9kZSB3cmFwcGVyLCBpZiBLJ3NcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgaXMgbm90IE5hbWVkTm9kZVxyXG4gKiBAcGFyYW0geyhmdW5jdGlvbihLLCBLKTpudW1iZXIpPX0gbWFwU29ydEZuIEFuIG9wdGlvbmFsIG92ZXJyaWRlIGZvciBjb21wYXJhdG9yIHVzZWQgYnkgdGhlIGdlbmVyYXRlZCBzb3J0ZWQgbWFwXHJcbiAqIEByZXR1cm4ge1NvcnRlZE1hcC48SywgVj59XHJcbiAqL1xyXG52YXIgYnVpbGRDaGlsZFNldCA9IGZ1bmN0aW9uIChjaGlsZExpc3QsIGNtcCwga2V5Rm4sIG1hcFNvcnRGbikge1xyXG4gICAgY2hpbGRMaXN0LnNvcnQoY21wKTtcclxuICAgIHZhciBidWlsZEJhbGFuY2VkVHJlZSA9IGZ1bmN0aW9uIChsb3csIGhpZ2gpIHtcclxuICAgICAgICB2YXIgbGVuZ3RoID0gaGlnaCAtIGxvdztcclxuICAgICAgICB2YXIgbmFtZWROb2RlO1xyXG4gICAgICAgIHZhciBrZXk7XHJcbiAgICAgICAgaWYgKGxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgIG5hbWVkTm9kZSA9IGNoaWxkTGlzdFtsb3ddO1xyXG4gICAgICAgICAgICBrZXkgPSBrZXlGbiA/IGtleUZuKG5hbWVkTm9kZSkgOiBuYW1lZE5vZGU7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgTExSQk5vZGUoa2V5LCBuYW1lZE5vZGUubm9kZSwgTExSQk5vZGUuQkxBQ0ssIG51bGwsIG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgICAgICAgICAgdmFyIG1pZGRsZSA9IHBhcnNlSW50KChsZW5ndGggLyAyKSwgMTApICsgbG93O1xyXG4gICAgICAgICAgICB2YXIgbGVmdCA9IGJ1aWxkQmFsYW5jZWRUcmVlKGxvdywgbWlkZGxlKTtcclxuICAgICAgICAgICAgdmFyIHJpZ2h0ID0gYnVpbGRCYWxhbmNlZFRyZWUobWlkZGxlICsgMSwgaGlnaCk7XHJcbiAgICAgICAgICAgIG5hbWVkTm9kZSA9IGNoaWxkTGlzdFttaWRkbGVdO1xyXG4gICAgICAgICAgICBrZXkgPSBrZXlGbiA/IGtleUZuKG5hbWVkTm9kZSkgOiBuYW1lZE5vZGU7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgTExSQk5vZGUoa2V5LCBuYW1lZE5vZGUubm9kZSwgTExSQk5vZGUuQkxBQ0ssIGxlZnQsIHJpZ2h0KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgdmFyIGJ1aWxkRnJvbTEyQXJyYXkgPSBmdW5jdGlvbiAoYmFzZTEyKSB7XHJcbiAgICAgICAgdmFyIG5vZGUgPSBudWxsO1xyXG4gICAgICAgIHZhciByb290ID0gbnVsbDtcclxuICAgICAgICB2YXIgaW5kZXggPSBjaGlsZExpc3QubGVuZ3RoO1xyXG4gICAgICAgIHZhciBidWlsZFBlbm5hbnQgPSBmdW5jdGlvbiAoY2h1bmtTaXplLCBjb2xvcikge1xyXG4gICAgICAgICAgICB2YXIgbG93ID0gaW5kZXggLSBjaHVua1NpemU7XHJcbiAgICAgICAgICAgIHZhciBoaWdoID0gaW5kZXg7XHJcbiAgICAgICAgICAgIGluZGV4IC09IGNodW5rU2l6ZTtcclxuICAgICAgICAgICAgdmFyIGNoaWxkVHJlZSA9IGJ1aWxkQmFsYW5jZWRUcmVlKGxvdyArIDEsIGhpZ2gpO1xyXG4gICAgICAgICAgICB2YXIgbmFtZWROb2RlID0gY2hpbGRMaXN0W2xvd107XHJcbiAgICAgICAgICAgIHZhciBrZXkgPSBrZXlGbiA/IGtleUZuKG5hbWVkTm9kZSkgOiBuYW1lZE5vZGU7XHJcbiAgICAgICAgICAgIGF0dGFjaFBlbm5hbnQobmV3IExMUkJOb2RlKGtleSwgbmFtZWROb2RlLm5vZGUsIGNvbG9yLCBudWxsLCBjaGlsZFRyZWUpKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciBhdHRhY2hQZW5uYW50ID0gZnVuY3Rpb24gKHBlbm5hbnQpIHtcclxuICAgICAgICAgICAgaWYgKG5vZGUpIHtcclxuICAgICAgICAgICAgICAgIG5vZGUubGVmdCA9IHBlbm5hbnQ7XHJcbiAgICAgICAgICAgICAgICBub2RlID0gcGVubmFudDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJvb3QgPSBwZW5uYW50O1xyXG4gICAgICAgICAgICAgICAgbm9kZSA9IHBlbm5hbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmFzZTEyLmNvdW50OyArK2kpIHtcclxuICAgICAgICAgICAgdmFyIGlzT25lID0gYmFzZTEyLm5leHRCaXRJc09uZSgpO1xyXG4gICAgICAgICAgICAvLyBUaGUgbnVtYmVyIG9mIG5vZGVzIHRha2VuIGluIGVhY2ggc2xpY2UgaXMgMl4oYXJyLmxlbmd0aCAtIChpICsgMSkpXHJcbiAgICAgICAgICAgIHZhciBjaHVua1NpemUgPSBNYXRoLnBvdygyLCBiYXNlMTIuY291bnQgLSAoaSArIDEpKTtcclxuICAgICAgICAgICAgaWYgKGlzT25lKSB7XHJcbiAgICAgICAgICAgICAgICBidWlsZFBlbm5hbnQoY2h1bmtTaXplLCBMTFJCTm9kZS5CTEFDSyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjdXJyZW50ID09IDJcclxuICAgICAgICAgICAgICAgIGJ1aWxkUGVubmFudChjaHVua1NpemUsIExMUkJOb2RlLkJMQUNLKTtcclxuICAgICAgICAgICAgICAgIGJ1aWxkUGVubmFudChjaHVua1NpemUsIExMUkJOb2RlLlJFRCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJvb3Q7XHJcbiAgICB9O1xyXG4gICAgdmFyIGJhc2UxMiA9IG5ldyBCYXNlMTJOdW0oY2hpbGRMaXN0Lmxlbmd0aCk7XHJcbiAgICB2YXIgcm9vdCA9IGJ1aWxkRnJvbTEyQXJyYXkoYmFzZTEyKTtcclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbiAgICByZXR1cm4gbmV3IFNvcnRlZE1hcChtYXBTb3J0Rm4gfHwgY21wLCByb290KTtcclxufTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIF9kZWZhdWx0SW5kZXhNYXA7XHJcbnZhciBmYWxsYmFja09iamVjdCA9IHt9O1xyXG52YXIgSW5kZXhNYXAgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBJbmRleE1hcChpbmRleGVzXywgaW5kZXhTZXRfKSB7XHJcbiAgICAgICAgdGhpcy5pbmRleGVzXyA9IGluZGV4ZXNfO1xyXG4gICAgICAgIHRoaXMuaW5kZXhTZXRfID0gaW5kZXhTZXRfO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEluZGV4TWFwLCBcIkRlZmF1bHRcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBkZWZhdWx0IEluZGV4TWFwIGZvciBub2RlcyB3aXRob3V0IGEgcHJpb3JpdHlcclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgYXNzZXJ0KGZhbGxiYWNrT2JqZWN0ICYmIFBSSU9SSVRZX0lOREVYLCAnQ2hpbGRyZW5Ob2RlLnRzIGhhcyBub3QgYmVlbiBsb2FkZWQnKTtcclxuICAgICAgICAgICAgX2RlZmF1bHRJbmRleE1hcCA9XHJcbiAgICAgICAgICAgICAgICBfZGVmYXVsdEluZGV4TWFwIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IEluZGV4TWFwKHsgJy5wcmlvcml0eSc6IGZhbGxiYWNrT2JqZWN0IH0sIHsgJy5wcmlvcml0eSc6IFBSSU9SSVRZX0lOREVYIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gX2RlZmF1bHRJbmRleE1hcDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBJbmRleE1hcC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGluZGV4S2V5KSB7XHJcbiAgICAgICAgdmFyIHNvcnRlZE1hcCA9IHNhZmVHZXQodGhpcy5pbmRleGVzXywgaW5kZXhLZXkpO1xyXG4gICAgICAgIGlmICghc29ydGVkTWFwKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gaW5kZXggZGVmaW5lZCBmb3IgJyArIGluZGV4S2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHNvcnRlZE1hcCBpbnN0YW5jZW9mIFNvcnRlZE1hcCkge1xyXG4gICAgICAgICAgICByZXR1cm4gc29ydGVkTWFwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gVGhlIGluZGV4IGV4aXN0cywgYnV0IGl0IGZhbGxzIGJhY2sgdG8ganVzdCBuYW1lIGNvbXBhcmlzb24uIFJldHVybiBudWxsIHNvIHRoYXQgdGhlIGNhbGxpbmcgY29kZSB1c2VzIHRoZVxyXG4gICAgICAgICAgICAvLyByZWd1bGFyIGNoaWxkIG1hcFxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgSW5kZXhNYXAucHJvdG90eXBlLmhhc0luZGV4ID0gZnVuY3Rpb24gKGluZGV4RGVmaW5pdGlvbikge1xyXG4gICAgICAgIHJldHVybiBjb250YWlucyh0aGlzLmluZGV4U2V0XywgaW5kZXhEZWZpbml0aW9uLnRvU3RyaW5nKCkpO1xyXG4gICAgfTtcclxuICAgIEluZGV4TWFwLnByb3RvdHlwZS5hZGRJbmRleCA9IGZ1bmN0aW9uIChpbmRleERlZmluaXRpb24sIGV4aXN0aW5nQ2hpbGRyZW4pIHtcclxuICAgICAgICBhc3NlcnQoaW5kZXhEZWZpbml0aW9uICE9PSBLRVlfSU5ERVgsIFwiS2V5SW5kZXggYWx3YXlzIGV4aXN0cyBhbmQgaXNuJ3QgbWVhbnQgdG8gYmUgYWRkZWQgdG8gdGhlIEluZGV4TWFwLlwiKTtcclxuICAgICAgICB2YXIgY2hpbGRMaXN0ID0gW107XHJcbiAgICAgICAgdmFyIHNhd0luZGV4ZWRWYWx1ZSA9IGZhbHNlO1xyXG4gICAgICAgIHZhciBpdGVyID0gZXhpc3RpbmdDaGlsZHJlbi5nZXRJdGVyYXRvcihOYW1lZE5vZGUuV3JhcCk7XHJcbiAgICAgICAgdmFyIG5leHQgPSBpdGVyLmdldE5leHQoKTtcclxuICAgICAgICB3aGlsZSAobmV4dCkge1xyXG4gICAgICAgICAgICBzYXdJbmRleGVkVmFsdWUgPVxyXG4gICAgICAgICAgICAgICAgc2F3SW5kZXhlZFZhbHVlIHx8IGluZGV4RGVmaW5pdGlvbi5pc0RlZmluZWRPbihuZXh0Lm5vZGUpO1xyXG4gICAgICAgICAgICBjaGlsZExpc3QucHVzaChuZXh0KTtcclxuICAgICAgICAgICAgbmV4dCA9IGl0ZXIuZ2V0TmV4dCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbmV3SW5kZXg7XHJcbiAgICAgICAgaWYgKHNhd0luZGV4ZWRWYWx1ZSkge1xyXG4gICAgICAgICAgICBuZXdJbmRleCA9IGJ1aWxkQ2hpbGRTZXQoY2hpbGRMaXN0LCBpbmRleERlZmluaXRpb24uZ2V0Q29tcGFyZSgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG5ld0luZGV4ID0gZmFsbGJhY2tPYmplY3Q7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBpbmRleE5hbWUgPSBpbmRleERlZmluaXRpb24udG9TdHJpbmcoKTtcclxuICAgICAgICB2YXIgbmV3SW5kZXhTZXQgPSBfX2Fzc2lnbih7fSwgdGhpcy5pbmRleFNldF8pO1xyXG4gICAgICAgIG5ld0luZGV4U2V0W2luZGV4TmFtZV0gPSBpbmRleERlZmluaXRpb247XHJcbiAgICAgICAgdmFyIG5ld0luZGV4ZXMgPSBfX2Fzc2lnbih7fSwgdGhpcy5pbmRleGVzXyk7XHJcbiAgICAgICAgbmV3SW5kZXhlc1tpbmRleE5hbWVdID0gbmV3SW5kZXg7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBJbmRleE1hcChuZXdJbmRleGVzLCBuZXdJbmRleFNldCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBFbnN1cmUgdGhhdCB0aGlzIG5vZGUgaXMgcHJvcGVybHkgdHJhY2tlZCBpbiBhbnkgaW5kZXhlcyB0aGF0IHdlJ3JlIG1haW50YWluaW5nXHJcbiAgICAgKi9cclxuICAgIEluZGV4TWFwLnByb3RvdHlwZS5hZGRUb0luZGV4ZXMgPSBmdW5jdGlvbiAobmFtZWROb2RlLCBleGlzdGluZ0NoaWxkcmVuKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgbmV3SW5kZXhlcyA9IG1hcCh0aGlzLmluZGV4ZXNfLCBmdW5jdGlvbiAoaW5kZXhlZENoaWxkcmVuLCBpbmRleE5hbWUpIHtcclxuICAgICAgICAgICAgdmFyIGluZGV4ID0gc2FmZUdldChfdGhpcy5pbmRleFNldF8sIGluZGV4TmFtZSk7XHJcbiAgICAgICAgICAgIGFzc2VydChpbmRleCwgJ01pc3NpbmcgaW5kZXggaW1wbGVtZW50YXRpb24gZm9yICcgKyBpbmRleE5hbWUpO1xyXG4gICAgICAgICAgICBpZiAoaW5kZXhlZENoaWxkcmVuID09PSBmYWxsYmFja09iamVjdCkge1xyXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHdlIG5lZWQgdG8gaW5kZXggZXZlcnl0aGluZ1xyXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4LmlzRGVmaW5lZE9uKG5hbWVkTm9kZS5ub2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gYnVpbGQgdGhpcyBpbmRleFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZExpc3QgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaXRlciA9IGV4aXN0aW5nQ2hpbGRyZW4uZ2V0SXRlcmF0b3IoTmFtZWROb2RlLldyYXApO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXh0ID0gaXRlci5nZXROZXh0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKG5leHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5leHQubmFtZSAhPT0gbmFtZWROb2RlLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkTGlzdC5wdXNoKG5leHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQgPSBpdGVyLmdldE5leHQoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRMaXN0LnB1c2gobmFtZWROb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYnVpbGRDaGlsZFNldChjaGlsZExpc3QsIGluZGV4LmdldENvbXBhcmUoKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBObyBjaGFuZ2UsIHRoaXMgcmVtYWlucyBhIGZhbGxiYWNrXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbGxiYWNrT2JqZWN0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIGV4aXN0aW5nU25hcCA9IGV4aXN0aW5nQ2hpbGRyZW4uZ2V0KG5hbWVkTm9kZS5uYW1lKTtcclxuICAgICAgICAgICAgICAgIHZhciBuZXdDaGlsZHJlbiA9IGluZGV4ZWRDaGlsZHJlbjtcclxuICAgICAgICAgICAgICAgIGlmIChleGlzdGluZ1NuYXApIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdDaGlsZHJlbiA9IG5ld0NoaWxkcmVuLnJlbW92ZShuZXcgTmFtZWROb2RlKG5hbWVkTm9kZS5uYW1lLCBleGlzdGluZ1NuYXApKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXdDaGlsZHJlbi5pbnNlcnQobmFtZWROb2RlLCBuYW1lZE5vZGUubm9kZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gbmV3IEluZGV4TWFwKG5ld0luZGV4ZXMsIHRoaXMuaW5kZXhTZXRfKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZSBhIG5ldyBJbmRleE1hcCBpbnN0YW5jZSB3aXRoIHRoZSBnaXZlbiB2YWx1ZSByZW1vdmVkXHJcbiAgICAgKi9cclxuICAgIEluZGV4TWFwLnByb3RvdHlwZS5yZW1vdmVGcm9tSW5kZXhlcyA9IGZ1bmN0aW9uIChuYW1lZE5vZGUsIGV4aXN0aW5nQ2hpbGRyZW4pIHtcclxuICAgICAgICB2YXIgbmV3SW5kZXhlcyA9IG1hcCh0aGlzLmluZGV4ZXNfLCBmdW5jdGlvbiAoaW5kZXhlZENoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIGlmIChpbmRleGVkQ2hpbGRyZW4gPT09IGZhbGxiYWNrT2JqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIHRoZSBmYWxsYmFjay4gSnVzdCByZXR1cm4gaXQsIG5vdGhpbmcgdG8gZG8gaW4gdGhpcyBjYXNlXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5kZXhlZENoaWxkcmVuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIGV4aXN0aW5nU25hcCA9IGV4aXN0aW5nQ2hpbGRyZW4uZ2V0KG5hbWVkTm9kZS5uYW1lKTtcclxuICAgICAgICAgICAgICAgIGlmIChleGlzdGluZ1NuYXApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5kZXhlZENoaWxkcmVuLnJlbW92ZShuZXcgTmFtZWROb2RlKG5hbWVkTm9kZS5uYW1lLCBleGlzdGluZ1NuYXApKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIE5vIHJlY29yZCBvZiB0aGlzIGNoaWxkXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluZGV4ZWRDaGlsZHJlbjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBuZXcgSW5kZXhNYXAobmV3SW5kZXhlcywgdGhpcy5pbmRleFNldF8pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBJbmRleE1hcDtcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gTkFNRV9PTkxZX0NPTVBBUkFUT1IobGVmdCwgcmlnaHQpIHtcclxuICAgIHJldHVybiBuYW1lQ29tcGFyZShsZWZ0Lm5hbWUsIHJpZ2h0Lm5hbWUpO1xyXG59XHJcbmZ1bmN0aW9uIE5BTUVfQ09NUEFSQVRPUihsZWZ0LCByaWdodCkge1xyXG4gICAgcmV0dXJuIG5hbWVDb21wYXJlKGxlZnQsIHJpZ2h0KTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vLyBUT0RPOiBGb3IgbWVtb3J5IHNhdmluZ3MsIGRvbid0IHN0b3JlIHByaW9yaXR5Tm9kZV8gaWYgaXQncyBlbXB0eS5cclxudmFyIEVNUFRZX05PREU7XHJcbi8qKlxyXG4gKiBDaGlsZHJlbk5vZGUgaXMgYSBjbGFzcyBmb3Igc3RvcmluZyBpbnRlcm5hbCBub2RlcyBpbiBhIERhdGFTbmFwc2hvdFxyXG4gKiAoaS5lLiBub2RlcyB3aXRoIGNoaWxkcmVuKS4gIEl0IGltcGxlbWVudHMgTm9kZSBhbmQgc3RvcmVzIHRoZVxyXG4gKiBsaXN0IG9mIGNoaWxkcmVuIGluIHRoZSBjaGlsZHJlbiBwcm9wZXJ0eSwgc29ydGVkIGJ5IGNoaWxkIG5hbWUuXHJcbiAqXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAaW1wbGVtZW50cyB7Tm9kZX1cclxuICovXHJcbnZhciBDaGlsZHJlbk5vZGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFTb3J0ZWRNYXAuPHN0cmluZywgIU5vZGU+fSBjaGlsZHJlbl8gTGlzdCBvZiBjaGlsZHJlblxyXG4gICAgICogb2YgdGhpcyBub2RlLi5cclxuICAgICAqIEBwYXJhbSB7P05vZGV9IHByaW9yaXR5Tm9kZV8gVGhlIHByaW9yaXR5IG9mIHRoaXMgbm9kZSAoYXMgYSBzbmFwc2hvdCBub2RlKS5cclxuICAgICAqIEBwYXJhbSB7IUluZGV4TWFwfSBpbmRleE1hcF9cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gQ2hpbGRyZW5Ob2RlKGNoaWxkcmVuXywgcHJpb3JpdHlOb2RlXywgaW5kZXhNYXBfKSB7XHJcbiAgICAgICAgdGhpcy5jaGlsZHJlbl8gPSBjaGlsZHJlbl87XHJcbiAgICAgICAgdGhpcy5wcmlvcml0eU5vZGVfID0gcHJpb3JpdHlOb2RlXztcclxuICAgICAgICB0aGlzLmluZGV4TWFwXyA9IGluZGV4TWFwXztcclxuICAgICAgICB0aGlzLmxhenlIYXNoXyA9IG51bGw7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogTm90ZTogVGhlIG9ubHkgcmVhc29uIHdlIGFsbG93IG51bGwgcHJpb3JpdHkgaXMgZm9yIEVNUFRZX05PREUsIHNpbmNlIHdlIGNhbid0IHVzZVxyXG4gICAgICAgICAqIEVNUFRZX05PREUgYXMgdGhlIHByaW9yaXR5IG9mIEVNUFRZX05PREUuICBXZSBtaWdodCB3YW50IHRvIGNvbnNpZGVyIG1ha2luZyBFTVBUWV9OT0RFIGl0cyBvd25cclxuICAgICAgICAgKiBjbGFzcyBpbnN0ZWFkIG9mIGFuIGVtcHR5IENoaWxkcmVuTm9kZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBpZiAodGhpcy5wcmlvcml0eU5vZGVfKSB7XHJcbiAgICAgICAgICAgIHZhbGlkYXRlUHJpb3JpdHlOb2RlKHRoaXMucHJpb3JpdHlOb2RlXyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmNoaWxkcmVuXy5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgYXNzZXJ0KCF0aGlzLnByaW9yaXR5Tm9kZV8gfHwgdGhpcy5wcmlvcml0eU5vZGVfLmlzRW1wdHkoKSwgJ0FuIGVtcHR5IG5vZGUgY2Fubm90IGhhdmUgYSBwcmlvcml0eScpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDaGlsZHJlbk5vZGUsIFwiRU1QVFlfTk9ERVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoRU1QVFlfTk9ERSB8fFxyXG4gICAgICAgICAgICAgICAgKEVNUFRZX05PREUgPSBuZXcgQ2hpbGRyZW5Ob2RlKG5ldyBTb3J0ZWRNYXAoTkFNRV9DT01QQVJBVE9SKSwgbnVsbCwgSW5kZXhNYXAuRGVmYXVsdCkpKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICAvKiogQGluaGVyaXREb2MgKi9cclxuICAgIENoaWxkcmVuTm9kZS5wcm90b3R5cGUuaXNMZWFmTm9kZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbmhlcml0RG9jICovXHJcbiAgICBDaGlsZHJlbk5vZGUucHJvdG90eXBlLmdldFByaW9yaXR5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnByaW9yaXR5Tm9kZV8gfHwgRU1QVFlfTk9ERTtcclxuICAgIH07XHJcbiAgICAvKiogQGluaGVyaXREb2MgKi9cclxuICAgIENoaWxkcmVuTm9kZS5wcm90b3R5cGUudXBkYXRlUHJpb3JpdHkgPSBmdW5jdGlvbiAobmV3UHJpb3JpdHlOb2RlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY2hpbGRyZW5fLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICAvLyBEb24ndCBhbGxvdyBwcmlvcml0aWVzIG9uIGVtcHR5IG5vZGVzXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDaGlsZHJlbk5vZGUodGhpcy5jaGlsZHJlbl8sIG5ld1ByaW9yaXR5Tm9kZSwgdGhpcy5pbmRleE1hcF8pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKiogQGluaGVyaXREb2MgKi9cclxuICAgIENoaWxkcmVuTm9kZS5wcm90b3R5cGUuZ2V0SW1tZWRpYXRlQ2hpbGQgPSBmdW5jdGlvbiAoY2hpbGROYW1lKSB7XHJcbiAgICAgICAgLy8gSGFjayB0byB0cmVhdCBwcmlvcml0eSBhcyBhIHJlZ3VsYXIgY2hpbGRcclxuICAgICAgICBpZiAoY2hpbGROYW1lID09PSAnLnByaW9yaXR5Jykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRQcmlvcml0eSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGNoaWxkID0gdGhpcy5jaGlsZHJlbl8uZ2V0KGNoaWxkTmFtZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBjaGlsZCA9PT0gbnVsbCA/IEVNUFRZX05PREUgOiBjaGlsZDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbmhlcml0RG9jICovXHJcbiAgICBDaGlsZHJlbk5vZGUucHJvdG90eXBlLmdldENoaWxkID0gZnVuY3Rpb24gKHBhdGgpIHtcclxuICAgICAgICB2YXIgZnJvbnQgPSBwYXRoLmdldEZyb250KCk7XHJcbiAgICAgICAgaWYgKGZyb250ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRJbW1lZGlhdGVDaGlsZChmcm9udCkuZ2V0Q2hpbGQocGF0aC5wb3BGcm9udCgpKTtcclxuICAgIH07XHJcbiAgICAvKiogQGluaGVyaXREb2MgKi9cclxuICAgIENoaWxkcmVuTm9kZS5wcm90b3R5cGUuaGFzQ2hpbGQgPSBmdW5jdGlvbiAoY2hpbGROYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW5fLmdldChjaGlsZE5hbWUpICE9PSBudWxsO1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW5oZXJpdERvYyAqL1xyXG4gICAgQ2hpbGRyZW5Ob2RlLnByb3RvdHlwZS51cGRhdGVJbW1lZGlhdGVDaGlsZCA9IGZ1bmN0aW9uIChjaGlsZE5hbWUsIG5ld0NoaWxkTm9kZSkge1xyXG4gICAgICAgIGFzc2VydChuZXdDaGlsZE5vZGUsICdXZSBzaG91bGQgYWx3YXlzIGJlIHBhc3Npbmcgc25hcHNob3Qgbm9kZXMnKTtcclxuICAgICAgICBpZiAoY2hpbGROYW1lID09PSAnLnByaW9yaXR5Jykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy51cGRhdGVQcmlvcml0eShuZXdDaGlsZE5vZGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIG5hbWVkTm9kZSA9IG5ldyBOYW1lZE5vZGUoY2hpbGROYW1lLCBuZXdDaGlsZE5vZGUpO1xyXG4gICAgICAgICAgICB2YXIgbmV3Q2hpbGRyZW4gPSB2b2lkIDAsIG5ld0luZGV4TWFwID0gdm9pZCAwO1xyXG4gICAgICAgICAgICBpZiAobmV3Q2hpbGROb2RlLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICAgICAgbmV3Q2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuXy5yZW1vdmUoY2hpbGROYW1lKTtcclxuICAgICAgICAgICAgICAgIG5ld0luZGV4TWFwID0gdGhpcy5pbmRleE1hcF8ucmVtb3ZlRnJvbUluZGV4ZXMobmFtZWROb2RlLCB0aGlzLmNoaWxkcmVuXyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBuZXdDaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW5fLmluc2VydChjaGlsZE5hbWUsIG5ld0NoaWxkTm9kZSk7XHJcbiAgICAgICAgICAgICAgICBuZXdJbmRleE1hcCA9IHRoaXMuaW5kZXhNYXBfLmFkZFRvSW5kZXhlcyhuYW1lZE5vZGUsIHRoaXMuY2hpbGRyZW5fKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgbmV3UHJpb3JpdHkgPSBuZXdDaGlsZHJlbi5pc0VtcHR5KClcclxuICAgICAgICAgICAgICAgID8gRU1QVFlfTk9ERVxyXG4gICAgICAgICAgICAgICAgOiB0aGlzLnByaW9yaXR5Tm9kZV87XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ2hpbGRyZW5Ob2RlKG5ld0NoaWxkcmVuLCBuZXdQcmlvcml0eSwgbmV3SW5kZXhNYXApO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKiogQGluaGVyaXREb2MgKi9cclxuICAgIENoaWxkcmVuTm9kZS5wcm90b3R5cGUudXBkYXRlQ2hpbGQgPSBmdW5jdGlvbiAocGF0aCwgbmV3Q2hpbGROb2RlKSB7XHJcbiAgICAgICAgdmFyIGZyb250ID0gcGF0aC5nZXRGcm9udCgpO1xyXG4gICAgICAgIGlmIChmcm9udCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3Q2hpbGROb2RlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgYXNzZXJ0KHBhdGguZ2V0RnJvbnQoKSAhPT0gJy5wcmlvcml0eScgfHwgcGF0aC5nZXRMZW5ndGgoKSA9PT0gMSwgJy5wcmlvcml0eSBtdXN0IGJlIHRoZSBsYXN0IHRva2VuIGluIGEgcGF0aCcpO1xyXG4gICAgICAgICAgICB2YXIgbmV3SW1tZWRpYXRlQ2hpbGQgPSB0aGlzLmdldEltbWVkaWF0ZUNoaWxkKGZyb250KS51cGRhdGVDaGlsZChwYXRoLnBvcEZyb250KCksIG5ld0NoaWxkTm9kZSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnVwZGF0ZUltbWVkaWF0ZUNoaWxkKGZyb250LCBuZXdJbW1lZGlhdGVDaGlsZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKiBAaW5oZXJpdERvYyAqL1xyXG4gICAgQ2hpbGRyZW5Ob2RlLnByb3RvdHlwZS5pc0VtcHR5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuXy5pc0VtcHR5KCk7XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbmhlcml0RG9jICovXHJcbiAgICBDaGlsZHJlbk5vZGUucHJvdG90eXBlLm51bUNoaWxkcmVuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuXy5jb3VudCgpO1xyXG4gICAgfTtcclxuICAgIC8qKiBAaW5oZXJpdERvYyAqL1xyXG4gICAgQ2hpbGRyZW5Ob2RlLnByb3RvdHlwZS52YWwgPSBmdW5jdGlvbiAoZXhwb3J0Rm9ybWF0KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgb2JqID0ge307XHJcbiAgICAgICAgdmFyIG51bUtleXMgPSAwLCBtYXhLZXkgPSAwLCBhbGxJbnRlZ2VyS2V5cyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5mb3JFYWNoQ2hpbGQoUFJJT1JJVFlfSU5ERVgsIGZ1bmN0aW9uIChrZXksIGNoaWxkTm9kZSkge1xyXG4gICAgICAgICAgICBvYmpba2V5XSA9IGNoaWxkTm9kZS52YWwoZXhwb3J0Rm9ybWF0KTtcclxuICAgICAgICAgICAgbnVtS2V5cysrO1xyXG4gICAgICAgICAgICBpZiAoYWxsSW50ZWdlcktleXMgJiYgQ2hpbGRyZW5Ob2RlLklOVEVHRVJfUkVHRVhQXy50ZXN0KGtleSkpIHtcclxuICAgICAgICAgICAgICAgIG1heEtleSA9IE1hdGgubWF4KG1heEtleSwgTnVtYmVyKGtleSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYWxsSW50ZWdlcktleXMgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmICghZXhwb3J0Rm9ybWF0ICYmIGFsbEludGVnZXJLZXlzICYmIG1heEtleSA8IDIgKiBudW1LZXlzKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnZlcnQgdG8gYXJyYXkuXHJcbiAgICAgICAgICAgIHZhciBhcnJheSA9IFtdO1xyXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ3VhcmQtZm9yLWluXHJcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcclxuICAgICAgICAgICAgICAgIGFycmF5W2tleV0gPSBvYmpba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gYXJyYXk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoZXhwb3J0Rm9ybWF0ICYmICF0aGlzLmdldFByaW9yaXR5KCkuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgICAgICBvYmpbJy5wcmlvcml0eSddID0gdGhpcy5nZXRQcmlvcml0eSgpLnZhbCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBvYmo7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKiBAaW5oZXJpdERvYyAqL1xyXG4gICAgQ2hpbGRyZW5Ob2RlLnByb3RvdHlwZS5oYXNoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmxhenlIYXNoXyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB2YXIgdG9IYXNoXzEgPSAnJztcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmdldFByaW9yaXR5KCkuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgICAgICB0b0hhc2hfMSArPVxyXG4gICAgICAgICAgICAgICAgICAgICdwcmlvcml0eTonICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJpb3JpdHlIYXNoVGV4dCh0aGlzLmdldFByaW9yaXR5KCkudmFsKCkpICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzonO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuZm9yRWFjaENoaWxkKFBSSU9SSVRZX0lOREVYLCBmdW5jdGlvbiAoa2V5LCBjaGlsZE5vZGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjaGlsZEhhc2ggPSBjaGlsZE5vZGUuaGFzaCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkSGFzaCAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICB0b0hhc2hfMSArPSAnOicgKyBrZXkgKyAnOicgKyBjaGlsZEhhc2g7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLmxhenlIYXNoXyA9IHRvSGFzaF8xID09PSAnJyA/ICcnIDogc2hhMSh0b0hhc2hfMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmxhenlIYXNoXztcclxuICAgIH07XHJcbiAgICAvKiogQGluaGVyaXREb2MgKi9cclxuICAgIENoaWxkcmVuTm9kZS5wcm90b3R5cGUuZ2V0UHJlZGVjZXNzb3JDaGlsZE5hbWUgPSBmdW5jdGlvbiAoY2hpbGROYW1lLCBjaGlsZE5vZGUsIGluZGV4KSB7XHJcbiAgICAgICAgdmFyIGlkeCA9IHRoaXMucmVzb2x2ZUluZGV4XyhpbmRleCk7XHJcbiAgICAgICAgaWYgKGlkeCkge1xyXG4gICAgICAgICAgICB2YXIgcHJlZGVjZXNzb3IgPSBpZHguZ2V0UHJlZGVjZXNzb3JLZXkobmV3IE5hbWVkTm9kZShjaGlsZE5hbWUsIGNoaWxkTm9kZSkpO1xyXG4gICAgICAgICAgICByZXR1cm4gcHJlZGVjZXNzb3IgPyBwcmVkZWNlc3Nvci5uYW1lIDogbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuXy5nZXRQcmVkZWNlc3NvcktleShjaGlsZE5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IUluZGV4fSBpbmRleERlZmluaXRpb25cclxuICAgICAqIEByZXR1cm4gez9zdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIENoaWxkcmVuTm9kZS5wcm90b3R5cGUuZ2V0Rmlyc3RDaGlsZE5hbWUgPSBmdW5jdGlvbiAoaW5kZXhEZWZpbml0aW9uKSB7XHJcbiAgICAgICAgdmFyIGlkeCA9IHRoaXMucmVzb2x2ZUluZGV4XyhpbmRleERlZmluaXRpb24pO1xyXG4gICAgICAgIGlmIChpZHgpIHtcclxuICAgICAgICAgICAgdmFyIG1pbktleSA9IGlkeC5taW5LZXkoKTtcclxuICAgICAgICAgICAgcmV0dXJuIG1pbktleSAmJiBtaW5LZXkubmFtZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuXy5taW5LZXkoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFJbmRleH0gaW5kZXhEZWZpbml0aW9uXHJcbiAgICAgKiBAcmV0dXJuIHs/TmFtZWROb2RlfVxyXG4gICAgICovXHJcbiAgICBDaGlsZHJlbk5vZGUucHJvdG90eXBlLmdldEZpcnN0Q2hpbGQgPSBmdW5jdGlvbiAoaW5kZXhEZWZpbml0aW9uKSB7XHJcbiAgICAgICAgdmFyIG1pbktleSA9IHRoaXMuZ2V0Rmlyc3RDaGlsZE5hbWUoaW5kZXhEZWZpbml0aW9uKTtcclxuICAgICAgICBpZiAobWluS2V5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgTmFtZWROb2RlKG1pbktleSwgdGhpcy5jaGlsZHJlbl8uZ2V0KG1pbktleSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogR2l2ZW4gYW4gaW5kZXgsIHJldHVybiB0aGUga2V5IG5hbWUgb2YgdGhlIGxhcmdlc3QgdmFsdWUgd2UgaGF2ZSwgYWNjb3JkaW5nIHRvIHRoYXQgaW5kZXhcclxuICAgICAqIEBwYXJhbSB7IUluZGV4fSBpbmRleERlZmluaXRpb25cclxuICAgICAqIEByZXR1cm4gez9zdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIENoaWxkcmVuTm9kZS5wcm90b3R5cGUuZ2V0TGFzdENoaWxkTmFtZSA9IGZ1bmN0aW9uIChpbmRleERlZmluaXRpb24pIHtcclxuICAgICAgICB2YXIgaWR4ID0gdGhpcy5yZXNvbHZlSW5kZXhfKGluZGV4RGVmaW5pdGlvbik7XHJcbiAgICAgICAgaWYgKGlkeCkge1xyXG4gICAgICAgICAgICB2YXIgbWF4S2V5ID0gaWR4Lm1heEtleSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gbWF4S2V5ICYmIG1heEtleS5uYW1lO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW5fLm1heEtleSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IUluZGV4fSBpbmRleERlZmluaXRpb25cclxuICAgICAqIEByZXR1cm4gez9OYW1lZE5vZGV9XHJcbiAgICAgKi9cclxuICAgIENoaWxkcmVuTm9kZS5wcm90b3R5cGUuZ2V0TGFzdENoaWxkID0gZnVuY3Rpb24gKGluZGV4RGVmaW5pdGlvbikge1xyXG4gICAgICAgIHZhciBtYXhLZXkgPSB0aGlzLmdldExhc3RDaGlsZE5hbWUoaW5kZXhEZWZpbml0aW9uKTtcclxuICAgICAgICBpZiAobWF4S2V5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgTmFtZWROb2RlKG1heEtleSwgdGhpcy5jaGlsZHJlbl8uZ2V0KG1heEtleSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgQ2hpbGRyZW5Ob2RlLnByb3RvdHlwZS5mb3JFYWNoQ2hpbGQgPSBmdW5jdGlvbiAoaW5kZXgsIGFjdGlvbikge1xyXG4gICAgICAgIHZhciBpZHggPSB0aGlzLnJlc29sdmVJbmRleF8oaW5kZXgpO1xyXG4gICAgICAgIGlmIChpZHgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGlkeC5pbm9yZGVyVHJhdmVyc2FsKGZ1bmN0aW9uICh3cmFwcGVkTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjdGlvbih3cmFwcGVkTm9kZS5uYW1lLCB3cmFwcGVkTm9kZS5ub2RlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbl8uaW5vcmRlclRyYXZlcnNhbChhY3Rpb24pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IUluZGV4fSBpbmRleERlZmluaXRpb25cclxuICAgICAqIEByZXR1cm4ge1NvcnRlZE1hcEl0ZXJhdG9yfVxyXG4gICAgICovXHJcbiAgICBDaGlsZHJlbk5vZGUucHJvdG90eXBlLmdldEl0ZXJhdG9yID0gZnVuY3Rpb24gKGluZGV4RGVmaW5pdGlvbikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldEl0ZXJhdG9yRnJvbShpbmRleERlZmluaXRpb24ubWluUG9zdCgpLCBpbmRleERlZmluaXRpb24pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IU5hbWVkTm9kZX0gc3RhcnRQb3N0XHJcbiAgICAgKiBAcGFyYW0geyFJbmRleH0gaW5kZXhEZWZpbml0aW9uXHJcbiAgICAgKiBAcmV0dXJuIHshU29ydGVkTWFwSXRlcmF0b3J9XHJcbiAgICAgKi9cclxuICAgIENoaWxkcmVuTm9kZS5wcm90b3R5cGUuZ2V0SXRlcmF0b3JGcm9tID0gZnVuY3Rpb24gKHN0YXJ0UG9zdCwgaW5kZXhEZWZpbml0aW9uKSB7XHJcbiAgICAgICAgdmFyIGlkeCA9IHRoaXMucmVzb2x2ZUluZGV4XyhpbmRleERlZmluaXRpb24pO1xyXG4gICAgICAgIGlmIChpZHgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGlkeC5nZXRJdGVyYXRvckZyb20oc3RhcnRQb3N0LCBmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBrZXk7IH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGl0ZXJhdG9yID0gdGhpcy5jaGlsZHJlbl8uZ2V0SXRlcmF0b3JGcm9tKHN0YXJ0UG9zdC5uYW1lLCBOYW1lZE5vZGUuV3JhcCk7XHJcbiAgICAgICAgICAgIHZhciBuZXh0ID0gaXRlcmF0b3IucGVlaygpO1xyXG4gICAgICAgICAgICB3aGlsZSAobmV4dCAhPSBudWxsICYmIGluZGV4RGVmaW5pdGlvbi5jb21wYXJlKG5leHQsIHN0YXJ0UG9zdCkgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICBpdGVyYXRvci5nZXROZXh0KCk7XHJcbiAgICAgICAgICAgICAgICBuZXh0ID0gaXRlcmF0b3IucGVlaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBpdGVyYXRvcjtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFJbmRleH0gaW5kZXhEZWZpbml0aW9uXHJcbiAgICAgKiBAcmV0dXJuIHshU29ydGVkTWFwSXRlcmF0b3J9XHJcbiAgICAgKi9cclxuICAgIENoaWxkcmVuTm9kZS5wcm90b3R5cGUuZ2V0UmV2ZXJzZUl0ZXJhdG9yID0gZnVuY3Rpb24gKGluZGV4RGVmaW5pdGlvbikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldFJldmVyc2VJdGVyYXRvckZyb20oaW5kZXhEZWZpbml0aW9uLm1heFBvc3QoKSwgaW5kZXhEZWZpbml0aW9uKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IU5hbWVkTm9kZX0gZW5kUG9zdFxyXG4gICAgICogQHBhcmFtIHshSW5kZXh9IGluZGV4RGVmaW5pdGlvblxyXG4gICAgICogQHJldHVybiB7IVNvcnRlZE1hcEl0ZXJhdG9yfVxyXG4gICAgICovXHJcbiAgICBDaGlsZHJlbk5vZGUucHJvdG90eXBlLmdldFJldmVyc2VJdGVyYXRvckZyb20gPSBmdW5jdGlvbiAoZW5kUG9zdCwgaW5kZXhEZWZpbml0aW9uKSB7XHJcbiAgICAgICAgdmFyIGlkeCA9IHRoaXMucmVzb2x2ZUluZGV4XyhpbmRleERlZmluaXRpb24pO1xyXG4gICAgICAgIGlmIChpZHgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGlkeC5nZXRSZXZlcnNlSXRlcmF0b3JGcm9tKGVuZFBvc3QsIGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBrZXk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGl0ZXJhdG9yID0gdGhpcy5jaGlsZHJlbl8uZ2V0UmV2ZXJzZUl0ZXJhdG9yRnJvbShlbmRQb3N0Lm5hbWUsIE5hbWVkTm9kZS5XcmFwKTtcclxuICAgICAgICAgICAgdmFyIG5leHQgPSBpdGVyYXRvci5wZWVrKCk7XHJcbiAgICAgICAgICAgIHdoaWxlIChuZXh0ICE9IG51bGwgJiYgaW5kZXhEZWZpbml0aW9uLmNvbXBhcmUobmV4dCwgZW5kUG9zdCkgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBpdGVyYXRvci5nZXROZXh0KCk7XHJcbiAgICAgICAgICAgICAgICBuZXh0ID0gaXRlcmF0b3IucGVlaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBpdGVyYXRvcjtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBDaGlsZHJlbk5vZGUucHJvdG90eXBlLmNvbXBhcmVUbyA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIGlmICh0aGlzLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICBpZiAob3RoZXIuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChvdGhlci5pc0xlYWZOb2RlKCkgfHwgb3RoZXIuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChvdGhlciA9PT0gTUFYX05PREUkMikge1xyXG4gICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBNdXN0IGJlIGFub3RoZXIgbm9kZSB3aXRoIGNoaWxkcmVuLlxyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBDaGlsZHJlbk5vZGUucHJvdG90eXBlLndpdGhJbmRleCA9IGZ1bmN0aW9uIChpbmRleERlZmluaXRpb24pIHtcclxuICAgICAgICBpZiAoaW5kZXhEZWZpbml0aW9uID09PSBLRVlfSU5ERVggfHxcclxuICAgICAgICAgICAgdGhpcy5pbmRleE1hcF8uaGFzSW5kZXgoaW5kZXhEZWZpbml0aW9uKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBuZXdJbmRleE1hcCA9IHRoaXMuaW5kZXhNYXBfLmFkZEluZGV4KGluZGV4RGVmaW5pdGlvbiwgdGhpcy5jaGlsZHJlbl8pO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IENoaWxkcmVuTm9kZSh0aGlzLmNoaWxkcmVuXywgdGhpcy5wcmlvcml0eU5vZGVfLCBuZXdJbmRleE1hcCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgQ2hpbGRyZW5Ob2RlLnByb3RvdHlwZS5pc0luZGV4ZWQgPSBmdW5jdGlvbiAoaW5kZXgpIHtcclxuICAgICAgICByZXR1cm4gaW5kZXggPT09IEtFWV9JTkRFWCB8fCB0aGlzLmluZGV4TWFwXy5oYXNJbmRleChpbmRleCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBDaGlsZHJlbk5vZGUucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIGlmIChvdGhlciA9PT0gdGhpcykge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAob3RoZXIuaXNMZWFmTm9kZSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBvdGhlckNoaWxkcmVuTm9kZSA9IG90aGVyO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuZ2V0UHJpb3JpdHkoKS5lcXVhbHMob3RoZXJDaGlsZHJlbk5vZGUuZ2V0UHJpb3JpdHkoKSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmNoaWxkcmVuXy5jb3VudCgpID09PSBvdGhlckNoaWxkcmVuTm9kZS5jaGlsZHJlbl8uY291bnQoKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRoaXNJdGVyID0gdGhpcy5nZXRJdGVyYXRvcihQUklPUklUWV9JTkRFWCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgb3RoZXJJdGVyID0gb3RoZXJDaGlsZHJlbk5vZGUuZ2V0SXRlcmF0b3IoUFJJT1JJVFlfSU5ERVgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHRoaXNDdXJyZW50ID0gdGhpc0l0ZXIuZ2V0TmV4dCgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIG90aGVyQ3VycmVudCA9IG90aGVySXRlci5nZXROZXh0KCk7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAodGhpc0N1cnJlbnQgJiYgb3RoZXJDdXJyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNDdXJyZW50Lm5hbWUgIT09IG90aGVyQ3VycmVudC5uYW1lIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICF0aGlzQ3VycmVudC5ub2RlLmVxdWFscyhvdGhlckN1cnJlbnQubm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzQ3VycmVudCA9IHRoaXNJdGVyLmdldE5leHQoKTtcclxuICAgICAgICAgICAgICAgICAgICBvdGhlckN1cnJlbnQgPSBvdGhlckl0ZXIuZ2V0TmV4dCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNDdXJyZW50ID09PSBudWxsICYmIG90aGVyQ3VycmVudCA9PT0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSBTb3J0ZWRNYXAgb3JkZXJlZCBieSBpbmRleCwgb3IgbnVsbCBpZiB0aGUgZGVmYXVsdCAoYnkta2V5KSBvcmRlcmluZyBjYW4gYmUgdXNlZFxyXG4gICAgICogaW5zdGVhZC5cclxuICAgICAqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQHBhcmFtIHshSW5kZXh9IGluZGV4RGVmaW5pdGlvblxyXG4gICAgICogQHJldHVybiB7P1NvcnRlZE1hcC48TmFtZWROb2RlLCBOb2RlPn1cclxuICAgICAqL1xyXG4gICAgQ2hpbGRyZW5Ob2RlLnByb3RvdHlwZS5yZXNvbHZlSW5kZXhfID0gZnVuY3Rpb24gKGluZGV4RGVmaW5pdGlvbikge1xyXG4gICAgICAgIGlmIChpbmRleERlZmluaXRpb24gPT09IEtFWV9JTkRFWCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmluZGV4TWFwXy5nZXQoaW5kZXhEZWZpbml0aW9uLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKiBAdHlwZSB7UmVnRXhwfVxyXG4gICAgICovXHJcbiAgICBDaGlsZHJlbk5vZGUuSU5URUdFUl9SRUdFWFBfID0gL14oMHxbMS05XVxcZCopJC87XHJcbiAgICByZXR1cm4gQ2hpbGRyZW5Ob2RlO1xyXG59KCkpO1xyXG4vKipcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBleHRlbmRzIHtDaGlsZHJlbk5vZGV9XHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG52YXIgTWF4Tm9kZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhNYXhOb2RlLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gTWF4Tm9kZSgpIHtcclxuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgbmV3IFNvcnRlZE1hcChOQU1FX0NPTVBBUkFUT1IpLCBDaGlsZHJlbk5vZGUuRU1QVFlfTk9ERSwgSW5kZXhNYXAuRGVmYXVsdCkgfHwgdGhpcztcclxuICAgIH1cclxuICAgIE1heE5vZGUucHJvdG90eXBlLmNvbXBhcmVUbyA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIGlmIChvdGhlciA9PT0gdGhpcykge1xyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBNYXhOb2RlLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICAvLyBOb3QgdGhhdCB3ZSBldmVyeSBjb21wYXJlIGl0LCBidXQgTUFYX05PREUgaXMgb25seSBldmVyIGVxdWFsIHRvIGl0c2VsZlxyXG4gICAgICAgIHJldHVybiBvdGhlciA9PT0gdGhpcztcclxuICAgIH07XHJcbiAgICBNYXhOb2RlLnByb3RvdHlwZS5nZXRQcmlvcml0eSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBNYXhOb2RlLnByb3RvdHlwZS5nZXRJbW1lZGlhdGVDaGlsZCA9IGZ1bmN0aW9uIChjaGlsZE5hbWUpIHtcclxuICAgICAgICByZXR1cm4gQ2hpbGRyZW5Ob2RlLkVNUFRZX05PREU7XHJcbiAgICB9O1xyXG4gICAgTWF4Tm9kZS5wcm90b3R5cGUuaXNFbXB0eSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE1heE5vZGU7XHJcbn0oQ2hpbGRyZW5Ob2RlKSk7XHJcbi8qKlxyXG4gKiBNYXJrZXIgdGhhdCB3aWxsIHNvcnQgaGlnaGVyIHRoYW4gYW55IG90aGVyIHNuYXBzaG90LlxyXG4gKiBAdHlwZSB7IU1BWF9OT0RFfVxyXG4gKiBAY29uc3RcclxuICovXHJcbnZhciBNQVhfTk9ERSQyID0gbmV3IE1heE5vZGUoKTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTmFtZWROb2RlLCB7XHJcbiAgICBNSU46IHtcclxuICAgICAgICB2YWx1ZTogbmV3IE5hbWVkTm9kZShNSU5fTkFNRSwgQ2hpbGRyZW5Ob2RlLkVNUFRZX05PREUpXHJcbiAgICB9LFxyXG4gICAgTUFYOiB7XHJcbiAgICAgICAgdmFsdWU6IG5ldyBOYW1lZE5vZGUoTUFYX05BTUUsIE1BWF9OT0RFJDIpXHJcbiAgICB9XHJcbn0pO1xyXG4vKipcclxuICogUmVmZXJlbmNlIEV4dGVuc2lvbnNcclxuICovXHJcbktleUluZGV4Ll9fRU1QVFlfTk9ERSA9IENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFO1xyXG5MZWFmTm9kZS5fX2NoaWxkcmVuTm9kZUNvbnN0cnVjdG9yID0gQ2hpbGRyZW5Ob2RlO1xyXG5zZXRNYXhOb2RlKE1BWF9OT0RFJDIpO1xyXG5zZXRNYXhOb2RlJDEoTUFYX05PREUkMik7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBVU0VfSElOWkUgPSB0cnVlO1xyXG4vKipcclxuICogQ29uc3RydWN0cyBhIHNuYXBzaG90IG5vZGUgcmVwcmVzZW50aW5nIHRoZSBwYXNzZWQgSlNPTiBhbmQgcmV0dXJucyBpdC5cclxuICogQHBhcmFtIHsqfSBqc29uIEpTT04gdG8gY3JlYXRlIGEgbm9kZSBmb3IuXHJcbiAqIEBwYXJhbSB7P3N0cmluZ3w/bnVtYmVyPX0gcHJpb3JpdHkgT3B0aW9uYWwgcHJpb3JpdHkgdG8gdXNlLiAgVGhpcyB3aWxsIGJlIGlnbm9yZWQgaWYgdGhlXHJcbiAqIHBhc3NlZCBKU09OIGNvbnRhaW5zIGEgLnByaW9yaXR5IHByb3BlcnR5LlxyXG4gKiBAcmV0dXJuIHshTm9kZX1cclxuICovXHJcbmZ1bmN0aW9uIG5vZGVGcm9tSlNPTiQxKGpzb24sIHByaW9yaXR5KSB7XHJcbiAgICBpZiAocHJpb3JpdHkgPT09IHZvaWQgMCkgeyBwcmlvcml0eSA9IG51bGw7IH1cclxuICAgIGlmIChqc29uID09PSBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuIENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBqc29uID09PSAnb2JqZWN0JyAmJiAnLnByaW9yaXR5JyBpbiBqc29uKSB7XHJcbiAgICAgICAgcHJpb3JpdHkgPSBqc29uWycucHJpb3JpdHknXTtcclxuICAgIH1cclxuICAgIGFzc2VydChwcmlvcml0eSA9PT0gbnVsbCB8fFxyXG4gICAgICAgIHR5cGVvZiBwcmlvcml0eSA9PT0gJ3N0cmluZycgfHxcclxuICAgICAgICB0eXBlb2YgcHJpb3JpdHkgPT09ICdudW1iZXInIHx8XHJcbiAgICAgICAgKHR5cGVvZiBwcmlvcml0eSA9PT0gJ29iamVjdCcgJiYgJy5zdicgaW4gcHJpb3JpdHkpLCAnSW52YWxpZCBwcmlvcml0eSB0eXBlIGZvdW5kOiAnICsgdHlwZW9mIHByaW9yaXR5KTtcclxuICAgIGlmICh0eXBlb2YganNvbiA9PT0gJ29iamVjdCcgJiYgJy52YWx1ZScgaW4ganNvbiAmJiBqc29uWycudmFsdWUnXSAhPT0gbnVsbCkge1xyXG4gICAgICAgIGpzb24gPSBqc29uWycudmFsdWUnXTtcclxuICAgIH1cclxuICAgIC8vIFZhbGlkIGxlYWYgbm9kZXMgaW5jbHVkZSBub24tb2JqZWN0cyBvciBzZXJ2ZXItdmFsdWUgd3JhcHBlciBvYmplY3RzXHJcbiAgICBpZiAodHlwZW9mIGpzb24gIT09ICdvYmplY3QnIHx8ICcuc3YnIGluIGpzb24pIHtcclxuICAgICAgICB2YXIganNvbkxlYWYgPSBqc29uO1xyXG4gICAgICAgIHJldHVybiBuZXcgTGVhZk5vZGUoanNvbkxlYWYsIG5vZGVGcm9tSlNPTiQxKHByaW9yaXR5KSk7XHJcbiAgICB9XHJcbiAgICBpZiAoIShqc29uIGluc3RhbmNlb2YgQXJyYXkpICYmIFVTRV9ISU5aRSkge1xyXG4gICAgICAgIHZhciBjaGlsZHJlbl8xID0gW107XHJcbiAgICAgICAgdmFyIGNoaWxkcmVuSGF2ZVByaW9yaXR5XzEgPSBmYWxzZTtcclxuICAgICAgICB2YXIgaGluemVKc29uT2JqID0ganNvbjtcclxuICAgICAgICBlYWNoKGhpbnplSnNvbk9iaiwgZnVuY3Rpb24gKGtleSwgY2hpbGQpIHtcclxuICAgICAgICAgICAgaWYgKGtleS5zdWJzdHJpbmcoMCwgMSkgIT09ICcuJykge1xyXG4gICAgICAgICAgICAgICAgLy8gSWdub3JlIG1ldGFkYXRhIG5vZGVzXHJcbiAgICAgICAgICAgICAgICB2YXIgY2hpbGROb2RlID0gbm9kZUZyb21KU09OJDEoY2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFjaGlsZE5vZGUuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW5IYXZlUHJpb3JpdHlfMSA9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuSGF2ZVByaW9yaXR5XzEgfHwgIWNoaWxkTm9kZS5nZXRQcmlvcml0eSgpLmlzRW1wdHkoKTtcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbl8xLnB1c2gobmV3IE5hbWVkTm9kZShrZXksIGNoaWxkTm9kZSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKGNoaWxkcmVuXzEubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBDaGlsZHJlbk5vZGUuRU1QVFlfTk9ERTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGNoaWxkU2V0ID0gYnVpbGRDaGlsZFNldChjaGlsZHJlbl8xLCBOQU1FX09OTFlfQ09NUEFSQVRPUiwgZnVuY3Rpb24gKG5hbWVkTm9kZSkgeyByZXR1cm4gbmFtZWROb2RlLm5hbWU7IH0sIE5BTUVfQ09NUEFSQVRPUik7XHJcbiAgICAgICAgaWYgKGNoaWxkcmVuSGF2ZVByaW9yaXR5XzEpIHtcclxuICAgICAgICAgICAgdmFyIHNvcnRlZENoaWxkU2V0ID0gYnVpbGRDaGlsZFNldChjaGlsZHJlbl8xLCBQUklPUklUWV9JTkRFWC5nZXRDb21wYXJlKCkpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IENoaWxkcmVuTm9kZShjaGlsZFNldCwgbm9kZUZyb21KU09OJDEocHJpb3JpdHkpLCBuZXcgSW5kZXhNYXAoeyAnLnByaW9yaXR5Jzogc29ydGVkQ2hpbGRTZXQgfSwgeyAnLnByaW9yaXR5JzogUFJJT1JJVFlfSU5ERVggfSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDaGlsZHJlbk5vZGUoY2hpbGRTZXQsIG5vZGVGcm9tSlNPTiQxKHByaW9yaXR5KSwgSW5kZXhNYXAuRGVmYXVsdCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdmFyIG5vZGVfMSA9IENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFO1xyXG4gICAgICAgIGVhY2goanNvbiwgZnVuY3Rpb24gKGtleSwgY2hpbGREYXRhKSB7XHJcbiAgICAgICAgICAgIGlmIChjb250YWlucyhqc29uLCBrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoa2V5LnN1YnN0cmluZygwLCAxKSAhPT0gJy4nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWdub3JlIG1ldGFkYXRhIG5vZGVzLlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZE5vZGUgPSBub2RlRnJvbUpTT04kMShjaGlsZERhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZE5vZGUuaXNMZWFmTm9kZSgpIHx8ICFjaGlsZE5vZGUuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVfMSA9IG5vZGVfMS51cGRhdGVJbW1lZGlhdGVDaGlsZChrZXksIGNoaWxkTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIG5vZGVfMS51cGRhdGVQcmlvcml0eShub2RlRnJvbUpTT04kMShwcmlvcml0eSkpO1xyXG4gICAgfVxyXG59XHJcbnNldE5vZGVGcm9tSlNPTihub2RlRnJvbUpTT04kMSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQGV4dGVuZHMge0luZGV4fVxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxudmFyIFZhbHVlSW5kZXggPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoVmFsdWVJbmRleCwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIFZhbHVlSW5kZXgoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBWYWx1ZUluZGV4LnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICB2YXIgaW5kZXhDbXAgPSBhLm5vZGUuY29tcGFyZVRvKGIubm9kZSk7XHJcbiAgICAgICAgaWYgKGluZGV4Q21wID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuYW1lQ29tcGFyZShhLm5hbWUsIGIubmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gaW5kZXhDbXA7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgVmFsdWVJbmRleC5wcm90b3R5cGUuaXNEZWZpbmVkT24gPSBmdW5jdGlvbiAobm9kZSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgVmFsdWVJbmRleC5wcm90b3R5cGUuaW5kZXhlZFZhbHVlQ2hhbmdlZCA9IGZ1bmN0aW9uIChvbGROb2RlLCBuZXdOb2RlKSB7XHJcbiAgICAgICAgcmV0dXJuICFvbGROb2RlLmVxdWFscyhuZXdOb2RlKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIFZhbHVlSW5kZXgucHJvdG90eXBlLm1pblBvc3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgICAgICByZXR1cm4gTmFtZWROb2RlLk1JTjtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIFZhbHVlSW5kZXgucHJvdG90eXBlLm1heFBvc3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgICAgICByZXR1cm4gTmFtZWROb2RlLk1BWDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7Kn0gaW5kZXhWYWx1ZVxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcclxuICAgICAqIEByZXR1cm4geyFOYW1lZE5vZGV9XHJcbiAgICAgKi9cclxuICAgIFZhbHVlSW5kZXgucHJvdG90eXBlLm1ha2VQb3N0ID0gZnVuY3Rpb24gKGluZGV4VmFsdWUsIG5hbWUpIHtcclxuICAgICAgICB2YXIgdmFsdWVOb2RlID0gbm9kZUZyb21KU09OJDEoaW5kZXhWYWx1ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBOYW1lZE5vZGUobmFtZSwgdmFsdWVOb2RlKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4geyFzdHJpbmd9IFN0cmluZyByZXByZXNlbnRhdGlvbiBmb3IgaW5jbHVzaW9uIGluIGEgcXVlcnkgc3BlY1xyXG4gICAgICovXHJcbiAgICBWYWx1ZUluZGV4LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gJy52YWx1ZSc7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFZhbHVlSW5kZXg7XHJcbn0oSW5kZXgpKTtcclxudmFyIFZBTFVFX0lOREVYID0gbmV3IFZhbHVlSW5kZXgoKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEBwYXJhbSB7IVBhdGh9IGluZGV4UGF0aFxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQGV4dGVuZHMge0luZGV4fVxyXG4gKi9cclxudmFyIFBhdGhJbmRleCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhQYXRoSW5kZXgsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBQYXRoSW5kZXgoaW5kZXhQYXRoXykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMuaW5kZXhQYXRoXyA9IGluZGV4UGF0aF87XHJcbiAgICAgICAgYXNzZXJ0KCFpbmRleFBhdGhfLmlzRW1wdHkoKSAmJiBpbmRleFBhdGhfLmdldEZyb250KCkgIT09ICcucHJpb3JpdHknLCBcIkNhbid0IGNyZWF0ZSBQYXRoSW5kZXggd2l0aCBlbXB0eSBwYXRoIG9yIC5wcmlvcml0eSBrZXlcIik7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFOb2RlfSBzbmFwXHJcbiAgICAgKiBAcmV0dXJuIHshTm9kZX1cclxuICAgICAqIEBwcm90ZWN0ZWRcclxuICAgICAqL1xyXG4gICAgUGF0aEluZGV4LnByb3RvdHlwZS5leHRyYWN0Q2hpbGQgPSBmdW5jdGlvbiAoc25hcCkge1xyXG4gICAgICAgIHJldHVybiBzbmFwLmdldENoaWxkKHRoaXMuaW5kZXhQYXRoXyk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBQYXRoSW5kZXgucHJvdG90eXBlLmlzRGVmaW5lZE9uID0gZnVuY3Rpb24gKG5vZGUpIHtcclxuICAgICAgICByZXR1cm4gIW5vZGUuZ2V0Q2hpbGQodGhpcy5pbmRleFBhdGhfKS5pc0VtcHR5KCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBQYXRoSW5kZXgucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgIHZhciBhQ2hpbGQgPSB0aGlzLmV4dHJhY3RDaGlsZChhLm5vZGUpO1xyXG4gICAgICAgIHZhciBiQ2hpbGQgPSB0aGlzLmV4dHJhY3RDaGlsZChiLm5vZGUpO1xyXG4gICAgICAgIHZhciBpbmRleENtcCA9IGFDaGlsZC5jb21wYXJlVG8oYkNoaWxkKTtcclxuICAgICAgICBpZiAoaW5kZXhDbXAgPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5hbWVDb21wYXJlKGEubmFtZSwgYi5uYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpbmRleENtcDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBQYXRoSW5kZXgucHJvdG90eXBlLm1ha2VQb3N0ID0gZnVuY3Rpb24gKGluZGV4VmFsdWUsIG5hbWUpIHtcclxuICAgICAgICB2YXIgdmFsdWVOb2RlID0gbm9kZUZyb21KU09OJDEoaW5kZXhWYWx1ZSk7XHJcbiAgICAgICAgdmFyIG5vZGUgPSBDaGlsZHJlbk5vZGUuRU1QVFlfTk9ERS51cGRhdGVDaGlsZCh0aGlzLmluZGV4UGF0aF8sIHZhbHVlTm9kZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBOYW1lZE5vZGUobmFtZSwgbm9kZSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBQYXRoSW5kZXgucHJvdG90eXBlLm1heFBvc3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIG5vZGUgPSBDaGlsZHJlbk5vZGUuRU1QVFlfTk9ERS51cGRhdGVDaGlsZCh0aGlzLmluZGV4UGF0aF8sIE1BWF9OT0RFJDIpO1xyXG4gICAgICAgIHJldHVybiBuZXcgTmFtZWROb2RlKE1BWF9OQU1FLCBub2RlKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIFBhdGhJbmRleC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5kZXhQYXRoXy5zbGljZSgpLmpvaW4oJy8nKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gUGF0aEluZGV4O1xyXG59KEluZGV4KSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgYSBmaXJlYmFzZSBkYXRhIHNuYXBzaG90LiAgSXQgd3JhcHMgYSBTbmFwc2hvdE5vZGUgYW5kXHJcbiAqIHN1cmZhY2VzIHRoZSBwdWJsaWMgbWV0aG9kcyAodmFsLCBmb3JFYWNoLCBldGMuKSB3ZSB3YW50IHRvIGV4cG9zZS5cclxuICovXHJcbnZhciBEYXRhU25hcHNob3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IU5vZGV9IG5vZGVfIEEgU25hcHNob3ROb2RlIHRvIHdyYXAuXHJcbiAgICAgKiBAcGFyYW0geyFSZWZlcmVuY2V9IHJlZl8gVGhlIHJlZiBvZiB0aGUgbG9jYXRpb24gdGhpcyBzbmFwc2hvdCBjYW1lIGZyb20uXHJcbiAgICAgKiBAcGFyYW0geyFJbmRleH0gaW5kZXhfIFRoZSBpdGVyYXRpb24gb3JkZXIgZm9yIHRoaXMgc25hcHNob3RcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gRGF0YVNuYXBzaG90KG5vZGVfLCByZWZfLCBpbmRleF8pIHtcclxuICAgICAgICB0aGlzLm5vZGVfID0gbm9kZV87XHJcbiAgICAgICAgdGhpcy5yZWZfID0gcmVmXztcclxuICAgICAgICB0aGlzLmluZGV4XyA9IGluZGV4XztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0cmlldmVzIHRoZSBzbmFwc2hvdCBjb250ZW50cyBhcyBKU09OLiAgUmV0dXJucyBudWxsIGlmIHRoZSBzbmFwc2hvdCBpc1xyXG4gICAgICogZW1wdHkuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiB7Kn0gSlNPTiByZXByZXNlbnRhdGlvbiBvZiB0aGUgRGF0YVNuYXBzaG90IGNvbnRlbnRzLCBvciBudWxsIGlmIGVtcHR5LlxyXG4gICAgICovXHJcbiAgICBEYXRhU25hcHNob3QucHJvdG90eXBlLnZhbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YWxpZGF0ZUFyZ0NvdW50KCdEYXRhU25hcHNob3QudmFsJywgMCwgMCwgYXJndW1lbnRzLmxlbmd0aCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZV8udmFsKCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBzbmFwc2hvdCBjb250ZW50cyBhcyBKU09OLCBpbmNsdWRpbmcgcHJpb3JpdGllcyBvZiBub2RlLiAgU3VpdGFibGUgZm9yIGV4cG9ydGluZ1xyXG4gICAgICogdGhlIGVudGlyZSBub2RlIGNvbnRlbnRzLlxyXG4gICAgICogQHJldHVybiB7Kn0gSlNPTiByZXByZXNlbnRhdGlvbiBvZiB0aGUgRGF0YVNuYXBzaG90IGNvbnRlbnRzLCBvciBudWxsIGlmIGVtcHR5LlxyXG4gICAgICovXHJcbiAgICBEYXRhU25hcHNob3QucHJvdG90eXBlLmV4cG9ydFZhbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YWxpZGF0ZUFyZ0NvdW50KCdEYXRhU25hcHNob3QuZXhwb3J0VmFsJywgMCwgMCwgYXJndW1lbnRzLmxlbmd0aCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZV8udmFsKHRydWUpO1xyXG4gICAgfTtcclxuICAgIC8vIERvIG5vdCBjcmVhdGUgcHVibGljIGRvY3VtZW50YXRpb24uIFRoaXMgaXMgaW50ZW5kZWQgdG8gbWFrZSBKU09OIHNlcmlhbGl6YXRpb24gd29yayBidXQgaXMgb3RoZXJ3aXNlIHVubmVjZXNzYXJ5XHJcbiAgICAvLyBmb3IgZW5kLXVzZXJzXHJcbiAgICBEYXRhU25hcHNob3QucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBPcHRpb25hbCBzcGFjZXIgYXJndW1lbnQgaXMgdW5uZWNlc3NhcnkgYmVjYXVzZSB3ZSdyZSBkZXBlbmRpbmcgb24gcmVjdXJzaW9uIHJhdGhlciB0aGFuIHN0cmluZ2lmeWluZyB0aGUgY29udGVudFxyXG4gICAgICAgIHZhbGlkYXRlQXJnQ291bnQoJ0RhdGFTbmFwc2hvdC50b0pTT04nLCAwLCAxLCBhcmd1bWVudHMubGVuZ3RoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5leHBvcnRWYWwoKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgd2hldGhlciB0aGUgc25hcHNob3QgY29udGFpbnMgYSBub24tbnVsbCB2YWx1ZS5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBzbmFwc2hvdCBjb250YWlucyBhIG5vbi1udWxsIHZhbHVlLCBvciBpcyBlbXB0eS5cclxuICAgICAqL1xyXG4gICAgRGF0YVNuYXBzaG90LnByb3RvdHlwZS5leGlzdHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFsaWRhdGVBcmdDb3VudCgnRGF0YVNuYXBzaG90LmV4aXN0cycsIDAsIDAsIGFyZ3VtZW50cy5sZW5ndGgpO1xyXG4gICAgICAgIHJldHVybiAhdGhpcy5ub2RlXy5pc0VtcHR5KCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgRGF0YVNuYXBzaG90IG9mIHRoZSBzcGVjaWZpZWQgY2hpbGQgbm9kZSdzIGNvbnRlbnRzLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IXN0cmluZ30gY2hpbGRQYXRoU3RyaW5nIFBhdGggdG8gYSBjaGlsZC5cclxuICAgICAqIEByZXR1cm4geyFEYXRhU25hcHNob3R9IERhdGFTbmFwc2hvdCBmb3IgY2hpbGQgbm9kZS5cclxuICAgICAqL1xyXG4gICAgRGF0YVNuYXBzaG90LnByb3RvdHlwZS5jaGlsZCA9IGZ1bmN0aW9uIChjaGlsZFBhdGhTdHJpbmcpIHtcclxuICAgICAgICB2YWxpZGF0ZUFyZ0NvdW50KCdEYXRhU25hcHNob3QuY2hpbGQnLCAwLCAxLCBhcmd1bWVudHMubGVuZ3RoKTtcclxuICAgICAgICAvLyBFbnN1cmUgdGhlIGNoaWxkUGF0aCBpcyBhIHN0cmluZyAoY2FuIGJlIGEgbnVtYmVyKVxyXG4gICAgICAgIGNoaWxkUGF0aFN0cmluZyA9IFN0cmluZyhjaGlsZFBhdGhTdHJpbmcpO1xyXG4gICAgICAgIHZhbGlkYXRlUGF0aFN0cmluZygnRGF0YVNuYXBzaG90LmNoaWxkJywgMSwgY2hpbGRQYXRoU3RyaW5nLCBmYWxzZSk7XHJcbiAgICAgICAgdmFyIGNoaWxkUGF0aCA9IG5ldyBQYXRoKGNoaWxkUGF0aFN0cmluZyk7XHJcbiAgICAgICAgdmFyIGNoaWxkUmVmID0gdGhpcy5yZWZfLmNoaWxkKGNoaWxkUGF0aCk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRhU25hcHNob3QodGhpcy5ub2RlXy5nZXRDaGlsZChjaGlsZFBhdGgpLCBjaGlsZFJlZiwgUFJJT1JJVFlfSU5ERVgpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBzbmFwc2hvdCBjb250YWlucyBhIGNoaWxkIGF0IHRoZSBzcGVjaWZpZWQgcGF0aC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFzdHJpbmd9IGNoaWxkUGF0aFN0cmluZyBQYXRoIHRvIGEgY2hpbGQuXHJcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBjaGlsZCBleGlzdHMuXHJcbiAgICAgKi9cclxuICAgIERhdGFTbmFwc2hvdC5wcm90b3R5cGUuaGFzQ2hpbGQgPSBmdW5jdGlvbiAoY2hpbGRQYXRoU3RyaW5nKSB7XHJcbiAgICAgICAgdmFsaWRhdGVBcmdDb3VudCgnRGF0YVNuYXBzaG90Lmhhc0NoaWxkJywgMSwgMSwgYXJndW1lbnRzLmxlbmd0aCk7XHJcbiAgICAgICAgdmFsaWRhdGVQYXRoU3RyaW5nKCdEYXRhU25hcHNob3QuaGFzQ2hpbGQnLCAxLCBjaGlsZFBhdGhTdHJpbmcsIGZhbHNlKTtcclxuICAgICAgICB2YXIgY2hpbGRQYXRoID0gbmV3IFBhdGgoY2hpbGRQYXRoU3RyaW5nKTtcclxuICAgICAgICByZXR1cm4gIXRoaXMubm9kZV8uZ2V0Q2hpbGQoY2hpbGRQYXRoKS5pc0VtcHR5KCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBwcmlvcml0eSBvZiB0aGUgb2JqZWN0LCBvciBudWxsIGlmIG5vIHByaW9yaXR5IHdhcyBzZXQuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiB7c3RyaW5nfG51bWJlcnxudWxsfSBUaGUgcHJpb3JpdHkuXHJcbiAgICAgKi9cclxuICAgIERhdGFTbmFwc2hvdC5wcm90b3R5cGUuZ2V0UHJpb3JpdHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFsaWRhdGVBcmdDb3VudCgnRGF0YVNuYXBzaG90LmdldFByaW9yaXR5JywgMCwgMCwgYXJndW1lbnRzLmxlbmd0aCk7XHJcbiAgICAgICAgLy8gdHlwZWNhc3QgaGVyZSBiZWNhdXNlIHdlIG5ldmVyIHJldHVybiBkZWZlcnJlZCB2YWx1ZXMgb3IgaW50ZXJuYWwgcHJpb3JpdGllcyAoTUFYX1BSSU9SSVRZKVxyXG4gICAgICAgIHJldHVybiB0aGlzLm5vZGVfLmdldFByaW9yaXR5KCkudmFsKCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBJdGVyYXRlcyB0aHJvdWdoIGNoaWxkIG5vZGVzIGFuZCBjYWxscyB0aGUgc3BlY2lmaWVkIGFjdGlvbiBmb3IgZWFjaCBvbmUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbighRGF0YVNuYXBzaG90KX0gYWN0aW9uIENhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZFxyXG4gICAgICogZm9yIGVhY2ggY2hpbGQuXHJcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGZvckVhY2ggd2FzIGNhbmNlbGVkIGJ5IGFjdGlvbiByZXR1cm5pbmcgdHJ1ZSBmb3JcclxuICAgICAqIG9uZSBvZiB0aGUgY2hpbGQgbm9kZXMuXHJcbiAgICAgKi9cclxuICAgIERhdGFTbmFwc2hvdC5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhbGlkYXRlQXJnQ291bnQoJ0RhdGFTbmFwc2hvdC5mb3JFYWNoJywgMSwgMSwgYXJndW1lbnRzLmxlbmd0aCk7XHJcbiAgICAgICAgdmFsaWRhdGVDYWxsYmFjaygnRGF0YVNuYXBzaG90LmZvckVhY2gnLCAxLCBhY3Rpb24sIGZhbHNlKTtcclxuICAgICAgICBpZiAodGhpcy5ub2RlXy5pc0xlYWZOb2RlKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgY2hpbGRyZW5Ob2RlID0gdGhpcy5ub2RlXztcclxuICAgICAgICAvLyBTYW5pdGl6ZSB0aGUgcmV0dXJuIHZhbHVlIHRvIGEgYm9vbGVhbi4gQ2hpbGRyZW5Ob2RlLmZvckVhY2hDaGlsZCBoYXMgYSB3ZWlyZCByZXR1cm4gdHlwZS4uLlxyXG4gICAgICAgIHJldHVybiAhIWNoaWxkcmVuTm9kZS5mb3JFYWNoQ2hpbGQodGhpcy5pbmRleF8sIGZ1bmN0aW9uIChrZXksIG5vZGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGFjdGlvbihuZXcgRGF0YVNuYXBzaG90KG5vZGUsIF90aGlzLnJlZl8uY2hpbGQoa2V5KSwgUFJJT1JJVFlfSU5ERVgpKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgd2hldGhlciB0aGlzIERhdGFTbmFwc2hvdCBoYXMgY2hpbGRyZW4uXHJcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBEYXRhU25hcHNob3QgY29udGFpbnMgMSBvciBtb3JlIGNoaWxkIG5vZGVzLlxyXG4gICAgICovXHJcbiAgICBEYXRhU25hcHNob3QucHJvdG90eXBlLmhhc0NoaWxkcmVuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhbGlkYXRlQXJnQ291bnQoJ0RhdGFTbmFwc2hvdC5oYXNDaGlsZHJlbicsIDAsIDAsIGFyZ3VtZW50cy5sZW5ndGgpO1xyXG4gICAgICAgIGlmICh0aGlzLm5vZGVfLmlzTGVhZk5vZGUoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gIXRoaXMubm9kZV8uaXNFbXB0eSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRGF0YVNuYXBzaG90LnByb3RvdHlwZSwgXCJrZXlcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZWZfLmdldEtleSgpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIGNoaWxkcmVuIGZvciB0aGlzIERhdGFTbmFwc2hvdC5cclxuICAgICAqIEByZXR1cm4ge251bWJlcn0gVGhlIG51bWJlciBvZiBjaGlsZHJlbiB0aGF0IHRoaXMgRGF0YVNuYXBzaG90IGNvbnRhaW5zLlxyXG4gICAgICovXHJcbiAgICBEYXRhU25hcHNob3QucHJvdG90eXBlLm51bUNoaWxkcmVuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhbGlkYXRlQXJnQ291bnQoJ0RhdGFTbmFwc2hvdC5udW1DaGlsZHJlbicsIDAsIDAsIGFyZ3VtZW50cy5sZW5ndGgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLm5vZGVfLm51bUNoaWxkcmVuKCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHtSZWZlcmVuY2V9IFRoZSBGaXJlYmFzZSByZWZlcmVuY2UgZm9yIHRoZSBsb2NhdGlvbiB0aGlzIHNuYXBzaG90J3MgZGF0YSBjYW1lIGZyb20uXHJcbiAgICAgKi9cclxuICAgIERhdGFTbmFwc2hvdC5wcm90b3R5cGUuZ2V0UmVmID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhbGlkYXRlQXJnQ291bnQoJ0RhdGFTbmFwc2hvdC5yZWYnLCAwLCAwLCBhcmd1bWVudHMubGVuZ3RoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZWZfO1xyXG4gICAgfTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEYXRhU25hcHNob3QucHJvdG90eXBlLCBcInJlZlwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFJlZigpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBEYXRhU25hcHNob3Q7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBFbmNhcHN1bGF0ZXMgdGhlIGRhdGEgbmVlZGVkIHRvIHJhaXNlIGFuIGV2ZW50XHJcbiAqIEBpbXBsZW1lbnRzIHtFdmVudH1cclxuICovXHJcbnZhciBEYXRhRXZlbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IXN0cmluZ30gZXZlbnRUeXBlIE9uZSBvZjogdmFsdWUsIGNoaWxkX2FkZGVkLCBjaGlsZF9jaGFuZ2VkLCBjaGlsZF9tb3ZlZCwgY2hpbGRfcmVtb3ZlZFxyXG4gICAgICogQHBhcmFtIHshRXZlbnRSZWdpc3RyYXRpb259IGV2ZW50UmVnaXN0cmF0aW9uIFRoZSBmdW5jdGlvbiB0byBjYWxsIHRvIHdpdGggdGhlIGV2ZW50IGRhdGEuIFVzZXIgcHJvdmlkZWRcclxuICAgICAqIEBwYXJhbSB7IURhdGFTbmFwc2hvdH0gc25hcHNob3QgVGhlIGRhdGEgYmFja2luZyB0aGUgZXZlbnRcclxuICAgICAqIEBwYXJhbSB7P3N0cmluZz19IHByZXZOYW1lIE9wdGlvbmFsLCB0aGUgbmFtZSBvZiB0aGUgcHJldmlvdXMgY2hpbGQgZm9yIGNoaWxkXyogZXZlbnRzLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBEYXRhRXZlbnQoZXZlbnRUeXBlLCBldmVudFJlZ2lzdHJhdGlvbiwgc25hcHNob3QsIHByZXZOYW1lKSB7XHJcbiAgICAgICAgdGhpcy5ldmVudFR5cGUgPSBldmVudFR5cGU7XHJcbiAgICAgICAgdGhpcy5ldmVudFJlZ2lzdHJhdGlvbiA9IGV2ZW50UmVnaXN0cmF0aW9uO1xyXG4gICAgICAgIHRoaXMuc25hcHNob3QgPSBzbmFwc2hvdDtcclxuICAgICAgICB0aGlzLnByZXZOYW1lID0gcHJldk5hbWU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIERhdGFFdmVudC5wcm90b3R5cGUuZ2V0UGF0aCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgcmVmID0gdGhpcy5zbmFwc2hvdC5nZXRSZWYoKTtcclxuICAgICAgICBpZiAodGhpcy5ldmVudFR5cGUgPT09ICd2YWx1ZScpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlZi5wYXRoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlZi5nZXRQYXJlbnQoKS5wYXRoO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIERhdGFFdmVudC5wcm90b3R5cGUuZ2V0RXZlbnRUeXBlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmV2ZW50VHlwZTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIERhdGFFdmVudC5wcm90b3R5cGUuZ2V0RXZlbnRSdW5uZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZXZlbnRSZWdpc3RyYXRpb24uZ2V0RXZlbnRSdW5uZXIodGhpcyk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBEYXRhRXZlbnQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5nZXRQYXRoKCkudG9TdHJpbmcoKSArXHJcbiAgICAgICAgICAgICc6JyArXHJcbiAgICAgICAgICAgIHRoaXMuZXZlbnRUeXBlICtcclxuICAgICAgICAgICAgJzonICtcclxuICAgICAgICAgICAgc3RyaW5naWZ5KHRoaXMuc25hcHNob3QuZXhwb3J0VmFsKCkpKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRGF0YUV2ZW50O1xyXG59KCkpO1xyXG52YXIgQ2FuY2VsRXZlbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7RXZlbnRSZWdpc3RyYXRpb259IGV2ZW50UmVnaXN0cmF0aW9uXHJcbiAgICAgKiBAcGFyYW0ge0Vycm9yfSBlcnJvclxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gcGF0aFxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBDYW5jZWxFdmVudChldmVudFJlZ2lzdHJhdGlvbiwgZXJyb3IsIHBhdGgpIHtcclxuICAgICAgICB0aGlzLmV2ZW50UmVnaXN0cmF0aW9uID0gZXZlbnRSZWdpc3RyYXRpb247XHJcbiAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yO1xyXG4gICAgICAgIHRoaXMucGF0aCA9IHBhdGg7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIENhbmNlbEV2ZW50LnByb3RvdHlwZS5nZXRQYXRoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBhdGg7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBDYW5jZWxFdmVudC5wcm90b3R5cGUuZ2V0RXZlbnRUeXBlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAnY2FuY2VsJztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIENhbmNlbEV2ZW50LnByb3RvdHlwZS5nZXRFdmVudFJ1bm5lciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5ldmVudFJlZ2lzdHJhdGlvbi5nZXRFdmVudFJ1bm5lcih0aGlzKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIENhbmNlbEV2ZW50LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wYXRoLnRvU3RyaW5nKCkgKyAnOmNhbmNlbCc7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIENhbmNlbEV2ZW50O1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogUmVwcmVzZW50cyByZWdpc3RyYXRpb24gZm9yICd2YWx1ZScgZXZlbnRzLlxyXG4gKi9cclxudmFyIFZhbHVlRXZlbnRSZWdpc3RyYXRpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7P2Z1bmN0aW9uKCFEYXRhU25hcHNob3QpfSBjYWxsYmFja19cclxuICAgICAqIEBwYXJhbSB7P2Z1bmN0aW9uKEVycm9yKX0gY2FuY2VsQ2FsbGJhY2tfXHJcbiAgICAgKiBAcGFyYW0gez9PYmplY3R9IGNvbnRleHRfXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIFZhbHVlRXZlbnRSZWdpc3RyYXRpb24oY2FsbGJhY2tfLCBjYW5jZWxDYWxsYmFja18sIGNvbnRleHRfKSB7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFja18gPSBjYWxsYmFja187XHJcbiAgICAgICAgdGhpcy5jYW5jZWxDYWxsYmFja18gPSBjYW5jZWxDYWxsYmFja187XHJcbiAgICAgICAgdGhpcy5jb250ZXh0XyA9IGNvbnRleHRfO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBWYWx1ZUV2ZW50UmVnaXN0cmF0aW9uLnByb3RvdHlwZS5yZXNwb25kc1RvID0gZnVuY3Rpb24gKGV2ZW50VHlwZSkge1xyXG4gICAgICAgIHJldHVybiBldmVudFR5cGUgPT09ICd2YWx1ZSc7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBWYWx1ZUV2ZW50UmVnaXN0cmF0aW9uLnByb3RvdHlwZS5jcmVhdGVFdmVudCA9IGZ1bmN0aW9uIChjaGFuZ2UsIHF1ZXJ5KSB7XHJcbiAgICAgICAgdmFyIGluZGV4ID0gcXVlcnkuZ2V0UXVlcnlQYXJhbXMoKS5nZXRJbmRleCgpO1xyXG4gICAgICAgIHJldHVybiBuZXcgRGF0YUV2ZW50KCd2YWx1ZScsIHRoaXMsIG5ldyBEYXRhU25hcHNob3QoY2hhbmdlLnNuYXBzaG90Tm9kZSwgcXVlcnkuZ2V0UmVmKCksIGluZGV4KSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBWYWx1ZUV2ZW50UmVnaXN0cmF0aW9uLnByb3RvdHlwZS5nZXRFdmVudFJ1bm5lciA9IGZ1bmN0aW9uIChldmVudERhdGEpIHtcclxuICAgICAgICB2YXIgY3R4ID0gdGhpcy5jb250ZXh0XztcclxuICAgICAgICBpZiAoZXZlbnREYXRhLmdldEV2ZW50VHlwZSgpID09PSAnY2FuY2VsJykge1xyXG4gICAgICAgICAgICBhc3NlcnQodGhpcy5jYW5jZWxDYWxsYmFja18sICdSYWlzaW5nIGEgY2FuY2VsIGV2ZW50IG9uIGEgbGlzdGVuZXIgd2l0aCBubyBjYW5jZWwgY2FsbGJhY2snKTtcclxuICAgICAgICAgICAgdmFyIGNhbmNlbENCXzEgPSB0aGlzLmNhbmNlbENhbGxiYWNrXztcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIC8vIFdlIGtub3cgdGhhdCBlcnJvciBleGlzdHMsIHdlIGNoZWNrZWQgYWJvdmUgdGhhdCB0aGlzIGlzIGEgY2FuY2VsIGV2ZW50XHJcbiAgICAgICAgICAgICAgICBjYW5jZWxDQl8xLmNhbGwoY3R4LCBldmVudERhdGEuZXJyb3IpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGNiXzEgPSB0aGlzLmNhbGxiYWNrXztcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGNiXzEuY2FsbChjdHgsIGV2ZW50RGF0YS5zbmFwc2hvdCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgVmFsdWVFdmVudFJlZ2lzdHJhdGlvbi5wcm90b3R5cGUuY3JlYXRlQ2FuY2VsRXZlbnQgPSBmdW5jdGlvbiAoZXJyb3IsIHBhdGgpIHtcclxuICAgICAgICBpZiAodGhpcy5jYW5jZWxDYWxsYmFja18pIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDYW5jZWxFdmVudCh0aGlzLCBlcnJvciwgcGF0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBWYWx1ZUV2ZW50UmVnaXN0cmF0aW9uLnByb3RvdHlwZS5tYXRjaGVzID0gZnVuY3Rpb24gKG90aGVyKSB7XHJcbiAgICAgICAgaWYgKCEob3RoZXIgaW5zdGFuY2VvZiBWYWx1ZUV2ZW50UmVnaXN0cmF0aW9uKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKCFvdGhlci5jYWxsYmFja18gfHwgIXRoaXMuY2FsbGJhY2tfKSB7XHJcbiAgICAgICAgICAgIC8vIElmIG5vIGNhbGxiYWNrIHNwZWNpZmllZCwgd2UgY29uc2lkZXIgaXQgdG8gbWF0Y2ggYW55IGNhbGxiYWNrLlxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAob3RoZXIuY2FsbGJhY2tfID09PSB0aGlzLmNhbGxiYWNrXyAmJiBvdGhlci5jb250ZXh0XyA9PT0gdGhpcy5jb250ZXh0Xyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgVmFsdWVFdmVudFJlZ2lzdHJhdGlvbi5wcm90b3R5cGUuaGFzQW55Q2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FsbGJhY2tfICE9PSBudWxsO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBWYWx1ZUV2ZW50UmVnaXN0cmF0aW9uO1xyXG59KCkpO1xyXG4vKipcclxuICogUmVwcmVzZW50cyB0aGUgcmVnaXN0cmF0aW9uIG9mIDEgb3IgbW9yZSBjaGlsZF94eHggZXZlbnRzLlxyXG4gKlxyXG4gKiBDdXJyZW50bHksIGl0IGlzIGFsd2F5cyBleGFjdGx5IDEgY2hpbGRfeHh4IGV2ZW50LCBidXQgdGhlIGlkZWEgaXMgd2UgbWlnaHQgbGV0IHlvdVxyXG4gKiByZWdpc3RlciBhIGdyb3VwIG9mIGNhbGxiYWNrcyB0b2dldGhlciBpbiB0aGUgZnV0dXJlLlxyXG4gKlxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQGltcGxlbWVudHMge0V2ZW50UmVnaXN0cmF0aW9ufVxyXG4gKi9cclxudmFyIENoaWxkRXZlbnRSZWdpc3RyYXRpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7P09iamVjdC48c3RyaW5nLCBmdW5jdGlvbighRGF0YVNuYXBzaG90LCA/c3RyaW5nPSk+fSBjYWxsYmFja3NfXHJcbiAgICAgKiBAcGFyYW0gez9mdW5jdGlvbihFcnJvcil9IGNhbmNlbENhbGxiYWNrX1xyXG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb250ZXh0X1xyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBDaGlsZEV2ZW50UmVnaXN0cmF0aW9uKGNhbGxiYWNrc18sIGNhbmNlbENhbGxiYWNrXywgY29udGV4dF8pIHtcclxuICAgICAgICB0aGlzLmNhbGxiYWNrc18gPSBjYWxsYmFja3NfO1xyXG4gICAgICAgIHRoaXMuY2FuY2VsQ2FsbGJhY2tfID0gY2FuY2VsQ2FsbGJhY2tfO1xyXG4gICAgICAgIHRoaXMuY29udGV4dF8gPSBjb250ZXh0XztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgQ2hpbGRFdmVudFJlZ2lzdHJhdGlvbi5wcm90b3R5cGUucmVzcG9uZHNUbyA9IGZ1bmN0aW9uIChldmVudFR5cGUpIHtcclxuICAgICAgICB2YXIgZXZlbnRUb0NoZWNrID0gZXZlbnRUeXBlID09PSAnY2hpbGRyZW5fYWRkZWQnID8gJ2NoaWxkX2FkZGVkJyA6IGV2ZW50VHlwZTtcclxuICAgICAgICBldmVudFRvQ2hlY2sgPVxyXG4gICAgICAgICAgICBldmVudFRvQ2hlY2sgPT09ICdjaGlsZHJlbl9yZW1vdmVkJyA/ICdjaGlsZF9yZW1vdmVkJyA6IGV2ZW50VG9DaGVjaztcclxuICAgICAgICByZXR1cm4gY29udGFpbnModGhpcy5jYWxsYmFja3NfLCBldmVudFRvQ2hlY2spO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgQ2hpbGRFdmVudFJlZ2lzdHJhdGlvbi5wcm90b3R5cGUuY3JlYXRlQ2FuY2VsRXZlbnQgPSBmdW5jdGlvbiAoZXJyb3IsIHBhdGgpIHtcclxuICAgICAgICBpZiAodGhpcy5jYW5jZWxDYWxsYmFja18pIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDYW5jZWxFdmVudCh0aGlzLCBlcnJvciwgcGF0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBDaGlsZEV2ZW50UmVnaXN0cmF0aW9uLnByb3RvdHlwZS5jcmVhdGVFdmVudCA9IGZ1bmN0aW9uIChjaGFuZ2UsIHF1ZXJ5KSB7XHJcbiAgICAgICAgYXNzZXJ0KGNoYW5nZS5jaGlsZE5hbWUgIT0gbnVsbCwgJ0NoaWxkIGV2ZW50cyBzaG91bGQgaGF2ZSBhIGNoaWxkTmFtZS4nKTtcclxuICAgICAgICB2YXIgcmVmID0gcXVlcnkuZ2V0UmVmKCkuY2hpbGQoLyoqIEB0eXBlIHshc3RyaW5nfSAqLyBjaGFuZ2UuY2hpbGROYW1lKTtcclxuICAgICAgICB2YXIgaW5kZXggPSBxdWVyeS5nZXRRdWVyeVBhcmFtcygpLmdldEluZGV4KCk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRhRXZlbnQoY2hhbmdlLnR5cGUsIHRoaXMsIG5ldyBEYXRhU25hcHNob3QoY2hhbmdlLnNuYXBzaG90Tm9kZSwgcmVmLCBpbmRleCksIGNoYW5nZS5wcmV2TmFtZSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBDaGlsZEV2ZW50UmVnaXN0cmF0aW9uLnByb3RvdHlwZS5nZXRFdmVudFJ1bm5lciA9IGZ1bmN0aW9uIChldmVudERhdGEpIHtcclxuICAgICAgICB2YXIgY3R4ID0gdGhpcy5jb250ZXh0XztcclxuICAgICAgICBpZiAoZXZlbnREYXRhLmdldEV2ZW50VHlwZSgpID09PSAnY2FuY2VsJykge1xyXG4gICAgICAgICAgICBhc3NlcnQodGhpcy5jYW5jZWxDYWxsYmFja18sICdSYWlzaW5nIGEgY2FuY2VsIGV2ZW50IG9uIGEgbGlzdGVuZXIgd2l0aCBubyBjYW5jZWwgY2FsbGJhY2snKTtcclxuICAgICAgICAgICAgdmFyIGNhbmNlbENCXzIgPSB0aGlzLmNhbmNlbENhbGxiYWNrXztcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIC8vIFdlIGtub3cgdGhhdCBlcnJvciBleGlzdHMsIHdlIGNoZWNrZWQgYWJvdmUgdGhhdCB0aGlzIGlzIGEgY2FuY2VsIGV2ZW50XHJcbiAgICAgICAgICAgICAgICBjYW5jZWxDQl8yLmNhbGwoY3R4LCBldmVudERhdGEuZXJyb3IpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGNiXzIgPSB0aGlzLmNhbGxiYWNrc19bZXZlbnREYXRhLmV2ZW50VHlwZV07XHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBjYl8yLmNhbGwoY3R4LCBldmVudERhdGEuc25hcHNob3QsIGV2ZW50RGF0YS5wcmV2TmFtZSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgQ2hpbGRFdmVudFJlZ2lzdHJhdGlvbi5wcm90b3R5cGUubWF0Y2hlcyA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKG90aGVyIGluc3RhbmNlb2YgQ2hpbGRFdmVudFJlZ2lzdHJhdGlvbikge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuY2FsbGJhY2tzXyB8fCAhb3RoZXIuY2FsbGJhY2tzXykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5jb250ZXh0XyA9PT0gb3RoZXIuY29udGV4dF8pIHtcclxuICAgICAgICAgICAgICAgIHZhciBvdGhlcktleXMgPSBPYmplY3Qua2V5cyhvdGhlci5jYWxsYmFja3NfKTtcclxuICAgICAgICAgICAgICAgIHZhciB0aGlzS2V5cyA9IE9iamVjdC5rZXlzKHRoaXMuY2FsbGJhY2tzXyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgb3RoZXJDb3VudCA9IG90aGVyS2V5cy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0NvdW50ID0gdGhpc0tleXMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgaWYgKG90aGVyQ291bnQgPT09IHRoaXNDb3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIGNvdW50IGlzIDEsIGRvIGFuIGV4YWN0IG1hdGNoIG9uIGV2ZW50VHlwZSwgaWYgZWl0aGVyIGlzIGRlZmluZWQgYnV0IG51bGwsIGl0J3MgYSBtYXRjaC5cclxuICAgICAgICAgICAgICAgICAgICAvLyBJZiBldmVudCB0eXBlcyBkb24ndCBtYXRjaCwgbm90IGEgbWF0Y2hcclxuICAgICAgICAgICAgICAgICAgICAvLyBJZiBjb3VudCBpcyBub3QgMSwgZXhhY3QgbWF0Y2ggYWNyb3NzIGFsbFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvdGhlckNvdW50ID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvdGhlcktleSA9IG90aGVyS2V5c1swXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXNLZXkgPSB0aGlzS2V5c1swXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzS2V5ID09PSBvdGhlcktleSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKCFvdGhlci5jYWxsYmFja3NfW290aGVyS2V5XSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICF0aGlzLmNhbGxiYWNrc19bdGhpc0tleV0gfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdGhlci5jYWxsYmFja3NfW290aGVyS2V5XSA9PT0gdGhpcy5jYWxsYmFja3NfW3RoaXNLZXldKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBFeGFjdCBtYXRjaCBvbiBlYWNoIGtleS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNLZXlzLmV2ZXJ5KGZ1bmN0aW9uIChldmVudFR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvdGhlci5jYWxsYmFja3NfW2V2ZW50VHlwZV0gPT09IF90aGlzLmNhbGxiYWNrc19bZXZlbnRUeXBlXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIENoaWxkRXZlbnRSZWdpc3RyYXRpb24ucHJvdG90eXBlLmhhc0FueUNhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNhbGxiYWNrc18gIT09IG51bGw7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIENoaWxkRXZlbnRSZWdpc3RyYXRpb247XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBfX3JlZmVyZW5jZUNvbnN0cnVjdG9yO1xyXG4vKipcclxuICogQSBRdWVyeSByZXByZXNlbnRzIGEgZmlsdGVyIHRvIGJlIGFwcGxpZWQgdG8gYSBmaXJlYmFzZSBsb2NhdGlvbi4gIFRoaXMgb2JqZWN0IHB1cmVseSByZXByZXNlbnRzIHRoZVxyXG4gKiBxdWVyeSBleHByZXNzaW9uIChhbmQgZXhwb3NlcyBvdXIgcHVibGljIEFQSSB0byBidWlsZCB0aGUgcXVlcnkpLiAgVGhlIGFjdHVhbCBxdWVyeSBsb2dpYyBpcyBpbiBWaWV3QmFzZS5qcy5cclxuICpcclxuICogU2luY2UgZXZlcnkgRmlyZWJhc2UgcmVmZXJlbmNlIGlzIGEgcXVlcnksIEZpcmViYXNlIGluaGVyaXRzIGZyb20gdGhpcyBvYmplY3QuXHJcbiAqL1xyXG52YXIgUXVlcnkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBRdWVyeShyZXBvLCBwYXRoLCBxdWVyeVBhcmFtc18sIG9yZGVyQnlDYWxsZWRfKSB7XHJcbiAgICAgICAgdGhpcy5yZXBvID0gcmVwbztcclxuICAgICAgICB0aGlzLnBhdGggPSBwYXRoO1xyXG4gICAgICAgIHRoaXMucXVlcnlQYXJhbXNfID0gcXVlcnlQYXJhbXNfO1xyXG4gICAgICAgIHRoaXMub3JkZXJCeUNhbGxlZF8gPSBvcmRlckJ5Q2FsbGVkXztcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShRdWVyeSwgXCJfX3JlZmVyZW5jZUNvbnN0cnVjdG9yXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgYXNzZXJ0KF9fcmVmZXJlbmNlQ29uc3RydWN0b3IsICdSZWZlcmVuY2UudHMgaGFzIG5vdCBiZWVuIGxvYWRlZCcpO1xyXG4gICAgICAgICAgICByZXR1cm4gX19yZWZlcmVuY2VDb25zdHJ1Y3RvcjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbCkge1xyXG4gICAgICAgICAgICBfX3JlZmVyZW5jZUNvbnN0cnVjdG9yID0gdmFsO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIC8qKlxyXG4gICAgICogVmFsaWRhdGVzIHN0YXJ0L2VuZCB2YWx1ZXMgZm9yIHF1ZXJpZXMuXHJcbiAgICAgKiBAcGFyYW0geyFRdWVyeVBhcmFtc30gcGFyYW1zXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBRdWVyeS52YWxpZGF0ZVF1ZXJ5RW5kcG9pbnRzXyA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcclxuICAgICAgICB2YXIgc3RhcnROb2RlID0gbnVsbDtcclxuICAgICAgICB2YXIgZW5kTm9kZSA9IG51bGw7XHJcbiAgICAgICAgaWYgKHBhcmFtcy5oYXNTdGFydCgpKSB7XHJcbiAgICAgICAgICAgIHN0YXJ0Tm9kZSA9IHBhcmFtcy5nZXRJbmRleFN0YXJ0VmFsdWUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHBhcmFtcy5oYXNFbmQoKSkge1xyXG4gICAgICAgICAgICBlbmROb2RlID0gcGFyYW1zLmdldEluZGV4RW5kVmFsdWUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHBhcmFtcy5nZXRJbmRleCgpID09PSBLRVlfSU5ERVgpIHtcclxuICAgICAgICAgICAgdmFyIHRvb01hbnlBcmdzRXJyb3IgPSAnUXVlcnk6IFdoZW4gb3JkZXJpbmcgYnkga2V5LCB5b3UgbWF5IG9ubHkgcGFzcyBvbmUgYXJndW1lbnQgdG8gJyArXHJcbiAgICAgICAgICAgICAgICAnc3RhcnRBdCgpLCBlbmRBdCgpLCBvciBlcXVhbFRvKCkuJztcclxuICAgICAgICAgICAgdmFyIHdyb25nQXJnVHlwZUVycm9yID0gJ1F1ZXJ5OiBXaGVuIG9yZGVyaW5nIGJ5IGtleSwgdGhlIGFyZ3VtZW50IHBhc3NlZCB0byBzdGFydEF0KCksIGVuZEF0KCksJyArXHJcbiAgICAgICAgICAgICAgICAnb3IgZXF1YWxUbygpIG11c3QgYmUgYSBzdHJpbmcuJztcclxuICAgICAgICAgICAgaWYgKHBhcmFtcy5oYXNTdGFydCgpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnROYW1lID0gcGFyYW1zLmdldEluZGV4U3RhcnROYW1lKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhcnROYW1lICE9PSBNSU5fTkFNRSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcih0b29NYW55QXJnc0Vycm9yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBzdGFydE5vZGUgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHdyb25nQXJnVHlwZUVycm9yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocGFyYW1zLmhhc0VuZCgpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZW5kTmFtZSA9IHBhcmFtcy5nZXRJbmRleEVuZE5hbWUoKTtcclxuICAgICAgICAgICAgICAgIGlmIChlbmROYW1lICE9PSBNQVhfTkFNRSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcih0b29NYW55QXJnc0Vycm9yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBlbmROb2RlICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcih3cm9uZ0FyZ1R5cGVFcnJvcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocGFyYW1zLmdldEluZGV4KCkgPT09IFBSSU9SSVRZX0lOREVYKSB7XHJcbiAgICAgICAgICAgIGlmICgoc3RhcnROb2RlICE9IG51bGwgJiYgIWlzVmFsaWRQcmlvcml0eShzdGFydE5vZGUpKSB8fFxyXG4gICAgICAgICAgICAgICAgKGVuZE5vZGUgIT0gbnVsbCAmJiAhaXNWYWxpZFByaW9yaXR5KGVuZE5vZGUpKSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdRdWVyeTogV2hlbiBvcmRlcmluZyBieSBwcmlvcml0eSwgdGhlIGZpcnN0IGFyZ3VtZW50IHBhc3NlZCB0byBzdGFydEF0KCksICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICdlbmRBdCgpLCBvciBlcXVhbFRvKCkgbXVzdCBiZSBhIHZhbGlkIHByaW9yaXR5IHZhbHVlIChudWxsLCBhIG51bWJlciwgb3IgYSBzdHJpbmcpLicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBhc3NlcnQocGFyYW1zLmdldEluZGV4KCkgaW5zdGFuY2VvZiBQYXRoSW5kZXggfHxcclxuICAgICAgICAgICAgICAgIHBhcmFtcy5nZXRJbmRleCgpID09PSBWQUxVRV9JTkRFWCwgJ3Vua25vd24gaW5kZXggdHlwZS4nKTtcclxuICAgICAgICAgICAgaWYgKChzdGFydE5vZGUgIT0gbnVsbCAmJiB0eXBlb2Ygc3RhcnROb2RlID09PSAnb2JqZWN0JykgfHxcclxuICAgICAgICAgICAgICAgIChlbmROb2RlICE9IG51bGwgJiYgdHlwZW9mIGVuZE5vZGUgPT09ICdvYmplY3QnKSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdRdWVyeTogRmlyc3QgYXJndW1lbnQgcGFzc2VkIHRvIHN0YXJ0QXQoKSwgZW5kQXQoKSwgb3IgZXF1YWxUbygpIGNhbm5vdCBiZSAnICtcclxuICAgICAgICAgICAgICAgICAgICAnYW4gb2JqZWN0LicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVmFsaWRhdGVzIHRoYXQgbGltaXQqIGhhcyBiZWVuIGNhbGxlZCB3aXRoIHRoZSBjb3JyZWN0IGNvbWJpbmF0aW9uIG9mIHBhcmFtZXRlcnNcclxuICAgICAqIEBwYXJhbSB7IVF1ZXJ5UGFyYW1zfSBwYXJhbXNcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIFF1ZXJ5LnZhbGlkYXRlTGltaXRfID0gZnVuY3Rpb24gKHBhcmFtcykge1xyXG4gICAgICAgIGlmIChwYXJhbXMuaGFzU3RhcnQoKSAmJlxyXG4gICAgICAgICAgICBwYXJhbXMuaGFzRW5kKCkgJiZcclxuICAgICAgICAgICAgcGFyYW1zLmhhc0xpbWl0KCkgJiZcclxuICAgICAgICAgICAgIXBhcmFtcy5oYXNBbmNob3JlZExpbWl0KCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUXVlcnk6IENhbid0IGNvbWJpbmUgc3RhcnRBdCgpLCBlbmRBdCgpLCBhbmQgbGltaXQoKS4gVXNlIGxpbWl0VG9GaXJzdCgpIG9yIGxpbWl0VG9MYXN0KCkgaW5zdGVhZC5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVmFsaWRhdGVzIHRoYXQgbm8gb3RoZXIgb3JkZXIgYnkgY2FsbCBoYXMgYmVlbiBtYWRlXHJcbiAgICAgKiBAcGFyYW0geyFzdHJpbmd9IGZuTmFtZVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgUXVlcnkucHJvdG90eXBlLnZhbGlkYXRlTm9QcmV2aW91c09yZGVyQnlDYWxsXyA9IGZ1bmN0aW9uIChmbk5hbWUpIHtcclxuICAgICAgICBpZiAodGhpcy5vcmRlckJ5Q2FsbGVkXyA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZm5OYW1lICsgXCI6IFlvdSBjYW4ndCBjb21iaW5lIG11bHRpcGxlIG9yZGVyQnkgY2FsbHMuXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4geyFRdWVyeVBhcmFtc31cclxuICAgICAqL1xyXG4gICAgUXVlcnkucHJvdG90eXBlLmdldFF1ZXJ5UGFyYW1zID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnF1ZXJ5UGFyYW1zXztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4geyFSZWZlcmVuY2V9XHJcbiAgICAgKi9cclxuICAgIFF1ZXJ5LnByb3RvdHlwZS5nZXRSZWYgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFsaWRhdGVBcmdDb3VudCgnUXVlcnkucmVmJywgMCwgMCwgYXJndW1lbnRzLmxlbmd0aCk7XHJcbiAgICAgICAgLy8gVGhpcyBpcyBhIHNsaWdodCBoYWNrLiBXZSBjYW5ub3QgZ29vZy5yZXF1aXJlKCdmYi5hcGkuRmlyZWJhc2UnKSwgc2luY2UgRmlyZWJhc2UgcmVxdWlyZXMgZmIuYXBpLlF1ZXJ5LlxyXG4gICAgICAgIC8vIEhvd2V2ZXIsIHdlIHdpbGwgYWx3YXlzIGV4cG9ydCAnRmlyZWJhc2UnIHRvIHRoZSBnbG9iYWwgbmFtZXNwYWNlLCBzbyBpdCdzIGd1YXJhbnRlZWQgdG8gZXhpc3QgYnkgdGhlIHRpbWUgdGhpc1xyXG4gICAgICAgIC8vIG1ldGhvZCBnZXRzIGNhbGxlZC5cclxuICAgICAgICByZXR1cm4gbmV3IFF1ZXJ5Ll9fcmVmZXJlbmNlQ29uc3RydWN0b3IodGhpcy5yZXBvLCB0aGlzLnBhdGgpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshc3RyaW5nfSBldmVudFR5cGVcclxuICAgICAqIEBwYXJhbSB7IWZ1bmN0aW9uKERhdGFTbmFwc2hvdCwgc3RyaW5nPSl9IGNhbGxiYWNrXHJcbiAgICAgKiBAcGFyYW0geyhmdW5jdGlvbihFcnJvcil8T2JqZWN0KT19IGNhbmNlbENhbGxiYWNrT3JDb250ZXh0XHJcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbnRleHRcclxuICAgICAqIEByZXR1cm4geyFmdW5jdGlvbihEYXRhU25hcHNob3QsIHN0cmluZz0pfVxyXG4gICAgICovXHJcbiAgICBRdWVyeS5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAoZXZlbnRUeXBlLCBjYWxsYmFjaywgY2FuY2VsQ2FsbGJhY2tPckNvbnRleHQsIGNvbnRleHQpIHtcclxuICAgICAgICB2YWxpZGF0ZUFyZ0NvdW50KCdRdWVyeS5vbicsIDIsIDQsIGFyZ3VtZW50cy5sZW5ndGgpO1xyXG4gICAgICAgIHZhbGlkYXRlRXZlbnRUeXBlKCdRdWVyeS5vbicsIDEsIGV2ZW50VHlwZSwgZmFsc2UpO1xyXG4gICAgICAgIHZhbGlkYXRlQ2FsbGJhY2soJ1F1ZXJ5Lm9uJywgMiwgY2FsbGJhY2ssIGZhbHNlKTtcclxuICAgICAgICB2YXIgcmV0ID0gUXVlcnkuZ2V0Q2FuY2VsQW5kQ29udGV4dEFyZ3NfKCdRdWVyeS5vbicsIGNhbmNlbENhbGxiYWNrT3JDb250ZXh0LCBjb250ZXh0KTtcclxuICAgICAgICBpZiAoZXZlbnRUeXBlID09PSAndmFsdWUnKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25WYWx1ZUV2ZW50KGNhbGxiYWNrLCByZXQuY2FuY2VsLCByZXQuY29udGV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgY2FsbGJhY2tzID0ge307XHJcbiAgICAgICAgICAgIGNhbGxiYWNrc1tldmVudFR5cGVdID0gY2FsbGJhY2s7XHJcbiAgICAgICAgICAgIHRoaXMub25DaGlsZEV2ZW50KGNhbGxiYWNrcywgcmV0LmNhbmNlbCwgcmV0LmNvbnRleHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY2FsbGJhY2s7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFmdW5jdGlvbighRGF0YVNuYXBzaG90KX0gY2FsbGJhY2tcclxuICAgICAqIEBwYXJhbSB7P2Z1bmN0aW9uKEVycm9yKX0gY2FuY2VsQ2FsbGJhY2tcclxuICAgICAqIEBwYXJhbSB7P09iamVjdH0gY29udGV4dFxyXG4gICAgICogQHByb3RlY3RlZFxyXG4gICAgICovXHJcbiAgICBRdWVyeS5wcm90b3R5cGUub25WYWx1ZUV2ZW50ID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBjYW5jZWxDYWxsYmFjaywgY29udGV4dCkge1xyXG4gICAgICAgIHZhciBjb250YWluZXIgPSBuZXcgVmFsdWVFdmVudFJlZ2lzdHJhdGlvbihjYWxsYmFjaywgY2FuY2VsQ2FsbGJhY2sgfHwgbnVsbCwgY29udGV4dCB8fCBudWxsKTtcclxuICAgICAgICB0aGlzLnJlcG8uYWRkRXZlbnRDYWxsYmFja0ZvclF1ZXJ5KHRoaXMsIGNvbnRhaW5lcik7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFPYmplY3QuPHN0cmluZywgIWZ1bmN0aW9uKCFEYXRhU25hcHNob3QsID9zdHJpbmcpPn0gY2FsbGJhY2tzXHJcbiAgICAgKiBAcGFyYW0gez9mdW5jdGlvbihFcnJvcil9IGNhbmNlbENhbGxiYWNrXHJcbiAgICAgKiBAcGFyYW0gez9PYmplY3R9IGNvbnRleHRcclxuICAgICAqIEBwcm90ZWN0ZWRcclxuICAgICAqL1xyXG4gICAgUXVlcnkucHJvdG90eXBlLm9uQ2hpbGRFdmVudCA9IGZ1bmN0aW9uIChjYWxsYmFja3MsIGNhbmNlbENhbGxiYWNrLCBjb250ZXh0KSB7XHJcbiAgICAgICAgdmFyIGNvbnRhaW5lciA9IG5ldyBDaGlsZEV2ZW50UmVnaXN0cmF0aW9uKGNhbGxiYWNrcywgY2FuY2VsQ2FsbGJhY2ssIGNvbnRleHQpO1xyXG4gICAgICAgIHRoaXMucmVwby5hZGRFdmVudENhbGxiYWNrRm9yUXVlcnkodGhpcywgY29udGFpbmVyKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gZXZlbnRUeXBlXHJcbiAgICAgKiBAcGFyYW0geyhmdW5jdGlvbighRGF0YVNuYXBzaG90LCA/c3RyaW5nPSkpPX0gY2FsbGJhY2tcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gY29udGV4dFxyXG4gICAgICovXHJcbiAgICBRdWVyeS5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24gKGV2ZW50VHlwZSwgY2FsbGJhY2ssIGNvbnRleHQpIHtcclxuICAgICAgICB2YWxpZGF0ZUFyZ0NvdW50KCdRdWVyeS5vZmYnLCAwLCAzLCBhcmd1bWVudHMubGVuZ3RoKTtcclxuICAgICAgICB2YWxpZGF0ZUV2ZW50VHlwZSgnUXVlcnkub2ZmJywgMSwgZXZlbnRUeXBlLCB0cnVlKTtcclxuICAgICAgICB2YWxpZGF0ZUNhbGxiYWNrKCdRdWVyeS5vZmYnLCAyLCBjYWxsYmFjaywgdHJ1ZSk7XHJcbiAgICAgICAgdmFsaWRhdGVDb250ZXh0T2JqZWN0KCdRdWVyeS5vZmYnLCAzLCBjb250ZXh0LCB0cnVlKTtcclxuICAgICAgICB2YXIgY29udGFpbmVyID0gbnVsbDtcclxuICAgICAgICB2YXIgY2FsbGJhY2tzID0gbnVsbDtcclxuICAgICAgICBpZiAoZXZlbnRUeXBlID09PSAndmFsdWUnKSB7XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZUNhbGxiYWNrID0gY2FsbGJhY2sgfHwgbnVsbDtcclxuICAgICAgICAgICAgY29udGFpbmVyID0gbmV3IFZhbHVlRXZlbnRSZWdpc3RyYXRpb24odmFsdWVDYWxsYmFjaywgbnVsbCwgY29udGV4dCB8fCBudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZXZlbnRUeXBlKSB7XHJcbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2tzID0ge307XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFja3NbZXZlbnRUeXBlXSA9IGNhbGxiYWNrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnRhaW5lciA9IG5ldyBDaGlsZEV2ZW50UmVnaXN0cmF0aW9uKGNhbGxiYWNrcywgbnVsbCwgY29udGV4dCB8fCBudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5yZXBvLnJlbW92ZUV2ZW50Q2FsbGJhY2tGb3JRdWVyeSh0aGlzLCBjb250YWluZXIpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQXR0YWNoZXMgYSBsaXN0ZW5lciwgd2FpdHMgZm9yIHRoZSBmaXJzdCBldmVudCwgYW5kIHRoZW4gcmVtb3ZlcyB0aGUgbGlzdGVuZXJcclxuICAgICAqIEBwYXJhbSB7IXN0cmluZ30gZXZlbnRUeXBlXHJcbiAgICAgKiBAcGFyYW0geyFmdW5jdGlvbighRGF0YVNuYXBzaG90LCBzdHJpbmc9KX0gdXNlckNhbGxiYWNrXHJcbiAgICAgKiBAcGFyYW0gZmFpbHVyZUNhbGxiYWNrT3JDb250ZXh0XHJcbiAgICAgKiBAcGFyYW0gY29udGV4dFxyXG4gICAgICogQHJldHVybiB7IWZpcmViYXNlLlByb21pc2V9XHJcbiAgICAgKi9cclxuICAgIFF1ZXJ5LnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gKGV2ZW50VHlwZSwgdXNlckNhbGxiYWNrLCBmYWlsdXJlQ2FsbGJhY2tPckNvbnRleHQsIGNvbnRleHQpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhbGlkYXRlQXJnQ291bnQoJ1F1ZXJ5Lm9uY2UnLCAxLCA0LCBhcmd1bWVudHMubGVuZ3RoKTtcclxuICAgICAgICB2YWxpZGF0ZUV2ZW50VHlwZSgnUXVlcnkub25jZScsIDEsIGV2ZW50VHlwZSwgZmFsc2UpO1xyXG4gICAgICAgIHZhbGlkYXRlQ2FsbGJhY2soJ1F1ZXJ5Lm9uY2UnLCAyLCB1c2VyQ2FsbGJhY2ssIHRydWUpO1xyXG4gICAgICAgIHZhciByZXQgPSBRdWVyeS5nZXRDYW5jZWxBbmRDb250ZXh0QXJnc18oJ1F1ZXJ5Lm9uY2UnLCBmYWlsdXJlQ2FsbGJhY2tPckNvbnRleHQsIGNvbnRleHQpO1xyXG4gICAgICAgIC8vIFRPRE86IEltcGxlbWVudCB0aGlzIG1vcmUgZWZmaWNpZW50bHkgKGluIHBhcnRpY3VsYXIsIHVzZSAnZ2V0JyB3aXJlIHByb3RvY29sIGZvciAndmFsdWUnIGV2ZW50KVxyXG4gICAgICAgIC8vIFRPRE86IGNvbnNpZGVyIGFjdHVhbGx5IHdpcmluZyB0aGUgY2FsbGJhY2tzIGludG8gdGhlIHByb21pc2UuIFdlIGNhbm5vdCBkbyB0aGlzIHdpdGhvdXQgYSBicmVha2luZyBjaGFuZ2VcclxuICAgICAgICAvLyBiZWNhdXNlIHRoZSBBUEkgY3VycmVudGx5IGV4cGVjdHMgY2FsbGJhY2tzIHdpbGwgYmUgY2FsbGVkIHN5bmNocm9ub3VzbHkgaWYgdGhlIGRhdGEgaXMgY2FjaGVkLCBidXQgdGhpcyBpc1xyXG4gICAgICAgIC8vIGFnYWluc3QgdGhlIFByb21pc2Ugc3BlY2lmaWNhdGlvbi5cclxuICAgICAgICB2YXIgZmlyc3RDYWxsID0gdHJ1ZTtcclxuICAgICAgICB2YXIgZGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQoKTtcclxuICAgICAgICAvLyBBIGR1bW15IGVycm9yIGhhbmRsZXIgaW4gY2FzZSBhIHVzZXIgd2Fzbid0IGV4cGVjdGluZyBwcm9taXNlc1xyXG4gICAgICAgIGRlZmVycmVkLnByb21pc2UuY2F0Y2goZnVuY3Rpb24gKCkgeyB9KTtcclxuICAgICAgICB2YXIgb25jZUNhbGxiYWNrID0gZnVuY3Rpb24gKHNuYXBzaG90KSB7XHJcbiAgICAgICAgICAgIC8vIE5PVEU6IEV2ZW4gdGhvdWdoIHdlIHVuc3Vic2NyaWJlLCB3ZSBtYXkgZ2V0IGNhbGxlZCBtdWx0aXBsZSB0aW1lcyBpZiBhIHNpbmdsZSBhY3Rpb24gKGUuZy4gc2V0KCkgd2l0aCBKU09OKVxyXG4gICAgICAgICAgICAvLyB0cmlnZ2VycyBtdWx0aXBsZSBldmVudHMgKGUuZy4gY2hpbGRfYWRkZWQgb3IgY2hpbGRfY2hhbmdlZCkuXHJcbiAgICAgICAgICAgIGlmIChmaXJzdENhbGwpIHtcclxuICAgICAgICAgICAgICAgIGZpcnN0Q2FsbCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMub2ZmKGV2ZW50VHlwZSwgb25jZUNhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgIGlmICh1c2VyQ2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICB1c2VyQ2FsbGJhY2suYmluZChyZXQuY29udGV4dCkoc25hcHNob3QpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShzbmFwc2hvdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMub24oZXZlbnRUeXBlLCBvbmNlQ2FsbGJhY2ssIFxyXG4gICAgICAgIC8qY2FuY2VsPSovIGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgX3RoaXMub2ZmKGV2ZW50VHlwZSwgb25jZUNhbGxiYWNrKTtcclxuICAgICAgICAgICAgaWYgKHJldC5jYW5jZWwpIHtcclxuICAgICAgICAgICAgICAgIHJldC5jYW5jZWwuYmluZChyZXQuY29udGV4dCkoZXJyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoZXJyKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFNldCBhIGxpbWl0IGFuZCBhbmNob3IgaXQgdG8gdGhlIHN0YXJ0IG9mIHRoZSB3aW5kb3cuXHJcbiAgICAgKiBAcGFyYW0geyFudW1iZXJ9IGxpbWl0XHJcbiAgICAgKiBAcmV0dXJuIHshUXVlcnl9XHJcbiAgICAgKi9cclxuICAgIFF1ZXJ5LnByb3RvdHlwZS5saW1pdFRvRmlyc3QgPSBmdW5jdGlvbiAobGltaXQpIHtcclxuICAgICAgICB2YWxpZGF0ZUFyZ0NvdW50KCdRdWVyeS5saW1pdFRvRmlyc3QnLCAxLCAxLCBhcmd1bWVudHMubGVuZ3RoKTtcclxuICAgICAgICBpZiAodHlwZW9mIGxpbWl0ICE9PSAnbnVtYmVyJyB8fFxyXG4gICAgICAgICAgICBNYXRoLmZsb29yKGxpbWl0KSAhPT0gbGltaXQgfHxcclxuICAgICAgICAgICAgbGltaXQgPD0gMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1F1ZXJ5LmxpbWl0VG9GaXJzdDogRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXIuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnF1ZXJ5UGFyYW1zXy5oYXNMaW1pdCgpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUXVlcnkubGltaXRUb0ZpcnN0OiBMaW1pdCB3YXMgYWxyZWFkeSBzZXQgKGJ5IGFub3RoZXIgY2FsbCB0byBsaW1pdCwgJyArXHJcbiAgICAgICAgICAgICAgICAnbGltaXRUb0ZpcnN0LCBvciBsaW1pdFRvTGFzdCkuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgUXVlcnkodGhpcy5yZXBvLCB0aGlzLnBhdGgsIHRoaXMucXVlcnlQYXJhbXNfLmxpbWl0VG9GaXJzdChsaW1pdCksIHRoaXMub3JkZXJCeUNhbGxlZF8pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogU2V0IGEgbGltaXQgYW5kIGFuY2hvciBpdCB0byB0aGUgZW5kIG9mIHRoZSB3aW5kb3cuXHJcbiAgICAgKiBAcGFyYW0geyFudW1iZXJ9IGxpbWl0XHJcbiAgICAgKiBAcmV0dXJuIHshUXVlcnl9XHJcbiAgICAgKi9cclxuICAgIFF1ZXJ5LnByb3RvdHlwZS5saW1pdFRvTGFzdCA9IGZ1bmN0aW9uIChsaW1pdCkge1xyXG4gICAgICAgIHZhbGlkYXRlQXJnQ291bnQoJ1F1ZXJ5LmxpbWl0VG9MYXN0JywgMSwgMSwgYXJndW1lbnRzLmxlbmd0aCk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBsaW1pdCAhPT0gJ251bWJlcicgfHxcclxuICAgICAgICAgICAgTWF0aC5mbG9vcihsaW1pdCkgIT09IGxpbWl0IHx8XHJcbiAgICAgICAgICAgIGxpbWl0IDw9IDApIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdRdWVyeS5saW1pdFRvTGFzdDogRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXIuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnF1ZXJ5UGFyYW1zXy5oYXNMaW1pdCgpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUXVlcnkubGltaXRUb0xhc3Q6IExpbWl0IHdhcyBhbHJlYWR5IHNldCAoYnkgYW5vdGhlciBjYWxsIHRvIGxpbWl0LCAnICtcclxuICAgICAgICAgICAgICAgICdsaW1pdFRvRmlyc3QsIG9yIGxpbWl0VG9MYXN0KS4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBRdWVyeSh0aGlzLnJlcG8sIHRoaXMucGF0aCwgdGhpcy5xdWVyeVBhcmFtc18ubGltaXRUb0xhc3QobGltaXQpLCB0aGlzLm9yZGVyQnlDYWxsZWRfKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEdpdmVuIGEgY2hpbGQgcGF0aCwgcmV0dXJuIGEgbmV3IHF1ZXJ5IG9yZGVyZWQgYnkgdGhlIHNwZWNpZmllZCBncmFuZGNoaWxkIHBhdGguXHJcbiAgICAgKiBAcGFyYW0geyFzdHJpbmd9IHBhdGhcclxuICAgICAqIEByZXR1cm4geyFRdWVyeX1cclxuICAgICAqL1xyXG4gICAgUXVlcnkucHJvdG90eXBlLm9yZGVyQnlDaGlsZCA9IGZ1bmN0aW9uIChwYXRoKSB7XHJcbiAgICAgICAgdmFsaWRhdGVBcmdDb3VudCgnUXVlcnkub3JkZXJCeUNoaWxkJywgMSwgMSwgYXJndW1lbnRzLmxlbmd0aCk7XHJcbiAgICAgICAgaWYgKHBhdGggPT09ICcka2V5Jykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1F1ZXJ5Lm9yZGVyQnlDaGlsZDogXCIka2V5XCIgaXMgaW52YWxpZC4gIFVzZSBRdWVyeS5vcmRlckJ5S2V5KCkgaW5zdGVhZC4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocGF0aCA9PT0gJyRwcmlvcml0eScpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdRdWVyeS5vcmRlckJ5Q2hpbGQ6IFwiJHByaW9yaXR5XCIgaXMgaW52YWxpZC4gIFVzZSBRdWVyeS5vcmRlckJ5UHJpb3JpdHkoKSBpbnN0ZWFkLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChwYXRoID09PSAnJHZhbHVlJykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1F1ZXJ5Lm9yZGVyQnlDaGlsZDogXCIkdmFsdWVcIiBpcyBpbnZhbGlkLiAgVXNlIFF1ZXJ5Lm9yZGVyQnlWYWx1ZSgpIGluc3RlYWQuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhbGlkYXRlUGF0aFN0cmluZygnUXVlcnkub3JkZXJCeUNoaWxkJywgMSwgcGF0aCwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMudmFsaWRhdGVOb1ByZXZpb3VzT3JkZXJCeUNhbGxfKCdRdWVyeS5vcmRlckJ5Q2hpbGQnKTtcclxuICAgICAgICB2YXIgcGFyc2VkUGF0aCA9IG5ldyBQYXRoKHBhdGgpO1xyXG4gICAgICAgIGlmIChwYXJzZWRQYXRoLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1F1ZXJ5Lm9yZGVyQnlDaGlsZDogY2Fubm90IHBhc3MgaW4gZW1wdHkgcGF0aC4gIFVzZSBRdWVyeS5vcmRlckJ5VmFsdWUoKSBpbnN0ZWFkLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgaW5kZXggPSBuZXcgUGF0aEluZGV4KHBhcnNlZFBhdGgpO1xyXG4gICAgICAgIHZhciBuZXdQYXJhbXMgPSB0aGlzLnF1ZXJ5UGFyYW1zXy5vcmRlckJ5KGluZGV4KTtcclxuICAgICAgICBRdWVyeS52YWxpZGF0ZVF1ZXJ5RW5kcG9pbnRzXyhuZXdQYXJhbXMpO1xyXG4gICAgICAgIHJldHVybiBuZXcgUXVlcnkodGhpcy5yZXBvLCB0aGlzLnBhdGgsIG5ld1BhcmFtcywgLypvcmRlckJ5Q2FsbGVkPSovIHRydWUpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJuIGEgbmV3IHF1ZXJ5IG9yZGVyZWQgYnkgdGhlIEtleUluZGV4XHJcbiAgICAgKiBAcmV0dXJuIHshUXVlcnl9XHJcbiAgICAgKi9cclxuICAgIFF1ZXJ5LnByb3RvdHlwZS5vcmRlckJ5S2V5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhbGlkYXRlQXJnQ291bnQoJ1F1ZXJ5Lm9yZGVyQnlLZXknLCAwLCAwLCBhcmd1bWVudHMubGVuZ3RoKTtcclxuICAgICAgICB0aGlzLnZhbGlkYXRlTm9QcmV2aW91c09yZGVyQnlDYWxsXygnUXVlcnkub3JkZXJCeUtleScpO1xyXG4gICAgICAgIHZhciBuZXdQYXJhbXMgPSB0aGlzLnF1ZXJ5UGFyYW1zXy5vcmRlckJ5KEtFWV9JTkRFWCk7XHJcbiAgICAgICAgUXVlcnkudmFsaWRhdGVRdWVyeUVuZHBvaW50c18obmV3UGFyYW1zKTtcclxuICAgICAgICByZXR1cm4gbmV3IFF1ZXJ5KHRoaXMucmVwbywgdGhpcy5wYXRoLCBuZXdQYXJhbXMsIC8qb3JkZXJCeUNhbGxlZD0qLyB0cnVlKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybiBhIG5ldyBxdWVyeSBvcmRlcmVkIGJ5IHRoZSBQcmlvcml0eUluZGV4XHJcbiAgICAgKiBAcmV0dXJuIHshUXVlcnl9XHJcbiAgICAgKi9cclxuICAgIFF1ZXJ5LnByb3RvdHlwZS5vcmRlckJ5UHJpb3JpdHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFsaWRhdGVBcmdDb3VudCgnUXVlcnkub3JkZXJCeVByaW9yaXR5JywgMCwgMCwgYXJndW1lbnRzLmxlbmd0aCk7XHJcbiAgICAgICAgdGhpcy52YWxpZGF0ZU5vUHJldmlvdXNPcmRlckJ5Q2FsbF8oJ1F1ZXJ5Lm9yZGVyQnlQcmlvcml0eScpO1xyXG4gICAgICAgIHZhciBuZXdQYXJhbXMgPSB0aGlzLnF1ZXJ5UGFyYW1zXy5vcmRlckJ5KFBSSU9SSVRZX0lOREVYKTtcclxuICAgICAgICBRdWVyeS52YWxpZGF0ZVF1ZXJ5RW5kcG9pbnRzXyhuZXdQYXJhbXMpO1xyXG4gICAgICAgIHJldHVybiBuZXcgUXVlcnkodGhpcy5yZXBvLCB0aGlzLnBhdGgsIG5ld1BhcmFtcywgLypvcmRlckJ5Q2FsbGVkPSovIHRydWUpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJuIGEgbmV3IHF1ZXJ5IG9yZGVyZWQgYnkgdGhlIFZhbHVlSW5kZXhcclxuICAgICAqIEByZXR1cm4geyFRdWVyeX1cclxuICAgICAqL1xyXG4gICAgUXVlcnkucHJvdG90eXBlLm9yZGVyQnlWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YWxpZGF0ZUFyZ0NvdW50KCdRdWVyeS5vcmRlckJ5VmFsdWUnLCAwLCAwLCBhcmd1bWVudHMubGVuZ3RoKTtcclxuICAgICAgICB0aGlzLnZhbGlkYXRlTm9QcmV2aW91c09yZGVyQnlDYWxsXygnUXVlcnkub3JkZXJCeVZhbHVlJyk7XHJcbiAgICAgICAgdmFyIG5ld1BhcmFtcyA9IHRoaXMucXVlcnlQYXJhbXNfLm9yZGVyQnkoVkFMVUVfSU5ERVgpO1xyXG4gICAgICAgIFF1ZXJ5LnZhbGlkYXRlUXVlcnlFbmRwb2ludHNfKG5ld1BhcmFtcyk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBRdWVyeSh0aGlzLnJlcG8sIHRoaXMucGF0aCwgbmV3UGFyYW1zLCAvKm9yZGVyQnlDYWxsZWQ9Ki8gdHJ1ZSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcnxzdHJpbmd8Ym9vbGVhbnxudWxsfSB2YWx1ZVxyXG4gICAgICogQHBhcmFtIHs/c3RyaW5nPX0gbmFtZVxyXG4gICAgICogQHJldHVybiB7IVF1ZXJ5fVxyXG4gICAgICovXHJcbiAgICBRdWVyeS5wcm90b3R5cGUuc3RhcnRBdCA9IGZ1bmN0aW9uICh2YWx1ZSwgbmFtZSkge1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdm9pZCAwKSB7IHZhbHVlID0gbnVsbDsgfVxyXG4gICAgICAgIHZhbGlkYXRlQXJnQ291bnQoJ1F1ZXJ5LnN0YXJ0QXQnLCAwLCAyLCBhcmd1bWVudHMubGVuZ3RoKTtcclxuICAgICAgICB2YWxpZGF0ZUZpcmViYXNlRGF0YUFyZygnUXVlcnkuc3RhcnRBdCcsIDEsIHZhbHVlLCB0aGlzLnBhdGgsIHRydWUpO1xyXG4gICAgICAgIHZhbGlkYXRlS2V5KCdRdWVyeS5zdGFydEF0JywgMiwgbmFtZSwgdHJ1ZSk7XHJcbiAgICAgICAgdmFyIG5ld1BhcmFtcyA9IHRoaXMucXVlcnlQYXJhbXNfLnN0YXJ0QXQodmFsdWUsIG5hbWUpO1xyXG4gICAgICAgIFF1ZXJ5LnZhbGlkYXRlTGltaXRfKG5ld1BhcmFtcyk7XHJcbiAgICAgICAgUXVlcnkudmFsaWRhdGVRdWVyeUVuZHBvaW50c18obmV3UGFyYW1zKTtcclxuICAgICAgICBpZiAodGhpcy5xdWVyeVBhcmFtc18uaGFzU3RhcnQoKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1F1ZXJ5LnN0YXJ0QXQ6IFN0YXJ0aW5nIHBvaW50IHdhcyBhbHJlYWR5IHNldCAoYnkgYW5vdGhlciBjYWxsIHRvIHN0YXJ0QXQgJyArXHJcbiAgICAgICAgICAgICAgICAnb3IgZXF1YWxUbykuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIENhbGxpbmcgd2l0aCBubyBwYXJhbXMgdGVsbHMgdXMgdG8gc3RhcnQgYXQgdGhlIGJlZ2lubmluZy5cclxuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IG51bGw7XHJcbiAgICAgICAgICAgIG5hbWUgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IFF1ZXJ5KHRoaXMucmVwbywgdGhpcy5wYXRoLCBuZXdQYXJhbXMsIHRoaXMub3JkZXJCeUNhbGxlZF8pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfGJvb2xlYW58bnVsbH0gdmFsdWVcclxuICAgICAqIEBwYXJhbSB7P3N0cmluZz19IG5hbWVcclxuICAgICAqIEByZXR1cm4geyFRdWVyeX1cclxuICAgICAqL1xyXG4gICAgUXVlcnkucHJvdG90eXBlLmVuZEF0ID0gZnVuY3Rpb24gKHZhbHVlLCBuYW1lKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlID09PSB2b2lkIDApIHsgdmFsdWUgPSBudWxsOyB9XHJcbiAgICAgICAgdmFsaWRhdGVBcmdDb3VudCgnUXVlcnkuZW5kQXQnLCAwLCAyLCBhcmd1bWVudHMubGVuZ3RoKTtcclxuICAgICAgICB2YWxpZGF0ZUZpcmViYXNlRGF0YUFyZygnUXVlcnkuZW5kQXQnLCAxLCB2YWx1ZSwgdGhpcy5wYXRoLCB0cnVlKTtcclxuICAgICAgICB2YWxpZGF0ZUtleSgnUXVlcnkuZW5kQXQnLCAyLCBuYW1lLCB0cnVlKTtcclxuICAgICAgICB2YXIgbmV3UGFyYW1zID0gdGhpcy5xdWVyeVBhcmFtc18uZW5kQXQodmFsdWUsIG5hbWUpO1xyXG4gICAgICAgIFF1ZXJ5LnZhbGlkYXRlTGltaXRfKG5ld1BhcmFtcyk7XHJcbiAgICAgICAgUXVlcnkudmFsaWRhdGVRdWVyeUVuZHBvaW50c18obmV3UGFyYW1zKTtcclxuICAgICAgICBpZiAodGhpcy5xdWVyeVBhcmFtc18uaGFzRW5kKCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdRdWVyeS5lbmRBdDogRW5kaW5nIHBvaW50IHdhcyBhbHJlYWR5IHNldCAoYnkgYW5vdGhlciBjYWxsIHRvIGVuZEF0IG9yICcgK1xyXG4gICAgICAgICAgICAgICAgJ2VxdWFsVG8pLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IFF1ZXJ5KHRoaXMucmVwbywgdGhpcy5wYXRoLCBuZXdQYXJhbXMsIHRoaXMub3JkZXJCeUNhbGxlZF8pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogTG9hZCB0aGUgc2VsZWN0aW9uIG9mIGNoaWxkcmVuIHdpdGggZXhhY3RseSB0aGUgc3BlY2lmaWVkIHZhbHVlLCBhbmQsIG9wdGlvbmFsbHksXHJcbiAgICAgKiB0aGUgc3BlY2lmaWVkIG5hbWUuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcnxzdHJpbmd8Ym9vbGVhbnxudWxsfSB2YWx1ZVxyXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lXHJcbiAgICAgKiBAcmV0dXJuIHshUXVlcnl9XHJcbiAgICAgKi9cclxuICAgIFF1ZXJ5LnByb3RvdHlwZS5lcXVhbFRvID0gZnVuY3Rpb24gKHZhbHVlLCBuYW1lKSB7XHJcbiAgICAgICAgdmFsaWRhdGVBcmdDb3VudCgnUXVlcnkuZXF1YWxUbycsIDEsIDIsIGFyZ3VtZW50cy5sZW5ndGgpO1xyXG4gICAgICAgIHZhbGlkYXRlRmlyZWJhc2VEYXRhQXJnKCdRdWVyeS5lcXVhbFRvJywgMSwgdmFsdWUsIHRoaXMucGF0aCwgZmFsc2UpO1xyXG4gICAgICAgIHZhbGlkYXRlS2V5KCdRdWVyeS5lcXVhbFRvJywgMiwgbmFtZSwgdHJ1ZSk7XHJcbiAgICAgICAgaWYgKHRoaXMucXVlcnlQYXJhbXNfLmhhc1N0YXJ0KCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdRdWVyeS5lcXVhbFRvOiBTdGFydGluZyBwb2ludCB3YXMgYWxyZWFkeSBzZXQgKGJ5IGFub3RoZXIgY2FsbCB0byBzdGFydEF0IG9yICcgK1xyXG4gICAgICAgICAgICAgICAgJ2VxdWFsVG8pLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5xdWVyeVBhcmFtc18uaGFzRW5kKCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdRdWVyeS5lcXVhbFRvOiBFbmRpbmcgcG9pbnQgd2FzIGFscmVhZHkgc2V0IChieSBhbm90aGVyIGNhbGwgdG8gZW5kQXQgb3IgJyArXHJcbiAgICAgICAgICAgICAgICAnZXF1YWxUbykuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLnN0YXJ0QXQodmFsdWUsIG5hbWUpLmVuZEF0KHZhbHVlLCBuYW1lKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4geyFzdHJpbmd9IFVSTCBmb3IgdGhpcyBsb2NhdGlvbi5cclxuICAgICAqL1xyXG4gICAgUXVlcnkucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhbGlkYXRlQXJnQ291bnQoJ1F1ZXJ5LnRvU3RyaW5nJywgMCwgMCwgYXJndW1lbnRzLmxlbmd0aCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVwby50b1N0cmluZygpICsgdGhpcy5wYXRoLnRvVXJsRW5jb2RlZFN0cmluZygpO1xyXG4gICAgfTtcclxuICAgIC8vIERvIG5vdCBjcmVhdGUgcHVibGljIGRvY3VtZW50YXRpb24uIFRoaXMgaXMgaW50ZW5kZWQgdG8gbWFrZSBKU09OIHNlcmlhbGl6YXRpb24gd29yayBidXQgaXMgb3RoZXJ3aXNlIHVubmVjZXNzYXJ5XHJcbiAgICAvLyBmb3IgZW5kLXVzZXJzLlxyXG4gICAgUXVlcnkucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBBbiBvcHRpb25hbCBzcGFjZXIgYXJndW1lbnQgaXMgdW5uZWNlc3NhcnkgZm9yIGEgc3RyaW5nLlxyXG4gICAgICAgIHZhbGlkYXRlQXJnQ291bnQoJ1F1ZXJ5LnRvSlNPTicsIDAsIDEsIGFyZ3VtZW50cy5sZW5ndGgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhlIHF1ZXJ5IHBhcmFtZXRlcnMgdXNlZCBieSB0aGlzIFF1ZXJ5LlxyXG4gICAgICogQHJldHVybiB7IU9iamVjdH1cclxuICAgICAqL1xyXG4gICAgUXVlcnkucHJvdG90eXBlLnF1ZXJ5T2JqZWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnF1ZXJ5UGFyYW1zXy5nZXRRdWVyeU9iamVjdCgpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7IXN0cmluZ31cclxuICAgICAqL1xyXG4gICAgUXVlcnkucHJvdG90eXBlLnF1ZXJ5SWRlbnRpZmllciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgb2JqID0gdGhpcy5xdWVyeU9iamVjdCgpO1xyXG4gICAgICAgIHZhciBpZCA9IE9iamVjdFRvVW5pcXVlS2V5KG9iaik7XHJcbiAgICAgICAgcmV0dXJuIGlkID09PSAne30nID8gJ2RlZmF1bHQnIDogaWQ7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm4gdHJ1ZSBpZiB0aGlzIHF1ZXJ5IGFuZCB0aGUgcHJvdmlkZWQgcXVlcnkgYXJlIGVxdWl2YWxlbnQ7IG90aGVyd2lzZSwgcmV0dXJuIGZhbHNlLlxyXG4gICAgICogQHBhcmFtIHtRdWVyeX0gb3RoZXJcclxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIFF1ZXJ5LnByb3RvdHlwZS5pc0VxdWFsID0gZnVuY3Rpb24gKG90aGVyKSB7XHJcbiAgICAgICAgdmFsaWRhdGVBcmdDb3VudCgnUXVlcnkuaXNFcXVhbCcsIDEsIDEsIGFyZ3VtZW50cy5sZW5ndGgpO1xyXG4gICAgICAgIGlmICghKG90aGVyIGluc3RhbmNlb2YgUXVlcnkpKSB7XHJcbiAgICAgICAgICAgIHZhciBlcnJvciA9ICdRdWVyeS5pc0VxdWFsIGZhaWxlZDogRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhbiBpbnN0YW5jZSBvZiBmaXJlYmFzZS5kYXRhYmFzZS5RdWVyeS4nO1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgc2FtZVJlcG8gPSB0aGlzLnJlcG8gPT09IG90aGVyLnJlcG87XHJcbiAgICAgICAgdmFyIHNhbWVQYXRoID0gdGhpcy5wYXRoLmVxdWFscyhvdGhlci5wYXRoKTtcclxuICAgICAgICB2YXIgc2FtZVF1ZXJ5SWRlbnRpZmllciA9IHRoaXMucXVlcnlJZGVudGlmaWVyKCkgPT09IG90aGVyLnF1ZXJ5SWRlbnRpZmllcigpO1xyXG4gICAgICAgIHJldHVybiBzYW1lUmVwbyAmJiBzYW1lUGF0aCAmJiBzYW1lUXVlcnlJZGVudGlmaWVyO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogSGVscGVyIHVzZWQgYnkgLm9uIGFuZCAub25jZSB0byBleHRyYWN0IHRoZSBjb250ZXh0IGFuZCBvciBjYW5jZWwgYXJndW1lbnRzLlxyXG4gICAgICogQHBhcmFtIHshc3RyaW5nfSBmbk5hbWUgVGhlIGZ1bmN0aW9uIG5hbWUgKG9uIG9yIG9uY2UpXHJcbiAgICAgKiBAcGFyYW0geyhmdW5jdGlvbihFcnJvcil8T2JqZWN0KT19IGNhbmNlbE9yQ29udGV4dFxyXG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb250ZXh0XHJcbiAgICAgKiBAcmV0dXJuIHt7Y2FuY2VsOiA/ZnVuY3Rpb24oRXJyb3IpLCBjb250ZXh0OiA/T2JqZWN0fX1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIFF1ZXJ5LmdldENhbmNlbEFuZENvbnRleHRBcmdzXyA9IGZ1bmN0aW9uIChmbk5hbWUsIGNhbmNlbE9yQ29udGV4dCwgY29udGV4dCkge1xyXG4gICAgICAgIHZhciByZXQgPSB7IGNhbmNlbDogbnVsbCwgY29udGV4dDogbnVsbCB9O1xyXG4gICAgICAgIGlmIChjYW5jZWxPckNvbnRleHQgJiYgY29udGV4dCkge1xyXG4gICAgICAgICAgICByZXQuY2FuY2VsID0gY2FuY2VsT3JDb250ZXh0O1xyXG4gICAgICAgICAgICB2YWxpZGF0ZUNhbGxiYWNrKGZuTmFtZSwgMywgcmV0LmNhbmNlbCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIHJldC5jb250ZXh0ID0gY29udGV4dDtcclxuICAgICAgICAgICAgdmFsaWRhdGVDb250ZXh0T2JqZWN0KGZuTmFtZSwgNCwgcmV0LmNvbnRleHQsIHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjYW5jZWxPckNvbnRleHQpIHtcclxuICAgICAgICAgICAgLy8gd2UgaGF2ZSBlaXRoZXIgYSBjYW5jZWwgY2FsbGJhY2sgb3IgYSBjb250ZXh0LlxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNhbmNlbE9yQ29udGV4dCA9PT0gJ29iamVjdCcgJiYgY2FuY2VsT3JDb250ZXh0ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBpdCdzIGEgY29udGV4dCFcclxuICAgICAgICAgICAgICAgIHJldC5jb250ZXh0ID0gY2FuY2VsT3JDb250ZXh0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBjYW5jZWxPckNvbnRleHQgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIHJldC5jYW5jZWwgPSBjYW5jZWxPckNvbnRleHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JQcmVmaXgoZm5OYW1lLCAzLCB0cnVlKSArXHJcbiAgICAgICAgICAgICAgICAgICAgJyBtdXN0IGVpdGhlciBiZSBhIGNhbmNlbCBjYWxsYmFjayBvciBhIGNvbnRleHQgb2JqZWN0LicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXQ7XHJcbiAgICB9O1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFF1ZXJ5LnByb3RvdHlwZSwgXCJyZWZcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRSZWYoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gUXVlcnk7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBFeGlzdGluZ1ZhbHVlUHJvdmlkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBFeGlzdGluZ1ZhbHVlUHJvdmlkZXIobm9kZV8pIHtcclxuICAgICAgICB0aGlzLm5vZGVfID0gbm9kZV87XHJcbiAgICB9XHJcbiAgICBFeGlzdGluZ1ZhbHVlUHJvdmlkZXIucHJvdG90eXBlLmdldEltbWVkaWF0ZUNoaWxkID0gZnVuY3Rpb24gKGNoaWxkTmFtZSkge1xyXG4gICAgICAgIHZhciBjaGlsZCA9IHRoaXMubm9kZV8uZ2V0SW1tZWRpYXRlQ2hpbGQoY2hpbGROYW1lKTtcclxuICAgICAgICByZXR1cm4gbmV3IEV4aXN0aW5nVmFsdWVQcm92aWRlcihjaGlsZCk7XHJcbiAgICB9O1xyXG4gICAgRXhpc3RpbmdWYWx1ZVByb3ZpZGVyLnByb3RvdHlwZS5ub2RlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm5vZGVfO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBFeGlzdGluZ1ZhbHVlUHJvdmlkZXI7XHJcbn0oKSk7XHJcbnZhciBEZWZlcnJlZFZhbHVlUHJvdmlkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEZWZlcnJlZFZhbHVlUHJvdmlkZXIoc3luY1RyZWUsIHBhdGgpIHtcclxuICAgICAgICB0aGlzLnN5bmNUcmVlXyA9IHN5bmNUcmVlO1xyXG4gICAgICAgIHRoaXMucGF0aF8gPSBwYXRoO1xyXG4gICAgfVxyXG4gICAgRGVmZXJyZWRWYWx1ZVByb3ZpZGVyLnByb3RvdHlwZS5nZXRJbW1lZGlhdGVDaGlsZCA9IGZ1bmN0aW9uIChjaGlsZE5hbWUpIHtcclxuICAgICAgICB2YXIgY2hpbGRQYXRoID0gdGhpcy5wYXRoXy5jaGlsZChjaGlsZE5hbWUpO1xyXG4gICAgICAgIHJldHVybiBuZXcgRGVmZXJyZWRWYWx1ZVByb3ZpZGVyKHRoaXMuc3luY1RyZWVfLCBjaGlsZFBhdGgpO1xyXG4gICAgfTtcclxuICAgIERlZmVycmVkVmFsdWVQcm92aWRlci5wcm90b3R5cGUubm9kZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zeW5jVHJlZV8uY2FsY0NvbXBsZXRlRXZlbnRDYWNoZSh0aGlzLnBhdGhfKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRGVmZXJyZWRWYWx1ZVByb3ZpZGVyO1xyXG59KCkpO1xyXG4vKipcclxuICogR2VuZXJhdGUgcGxhY2Vob2xkZXJzIGZvciBkZWZlcnJlZCB2YWx1ZXMuXHJcbiAqIEBwYXJhbSB7P09iamVjdH0gdmFsdWVzXHJcbiAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAqL1xyXG52YXIgZ2VuZXJhdGVXaXRoVmFsdWVzID0gZnVuY3Rpb24gKHZhbHVlcykge1xyXG4gICAgdmFsdWVzID0gdmFsdWVzIHx8IHt9O1xyXG4gICAgdmFsdWVzWyd0aW1lc3RhbXAnXSA9IHZhbHVlc1sndGltZXN0YW1wJ10gfHwgbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICByZXR1cm4gdmFsdWVzO1xyXG59O1xyXG4vKipcclxuICogVmFsdWUgdG8gdXNlIHdoZW4gZmlyaW5nIGxvY2FsIGV2ZW50cy4gV2hlbiB3cml0aW5nIHNlcnZlciB2YWx1ZXMsIGZpcmVcclxuICogbG9jYWwgZXZlbnRzIHdpdGggYW4gYXBwcm94aW1hdGUgdmFsdWUsIG90aGVyd2lzZSByZXR1cm4gdmFsdWUgYXMtaXMuXHJcbiAqIEBwYXJhbSB7KE9iamVjdHxzdHJpbmd8bnVtYmVyfGJvb2xlYW4pfSB2YWx1ZVxyXG4gKiBAcGFyYW0geyFPYmplY3R9IHNlcnZlclZhbHVlc1xyXG4gKiBAcmV0dXJuIHshKHN0cmluZ3xudW1iZXJ8Ym9vbGVhbil9XHJcbiAqL1xyXG52YXIgcmVzb2x2ZURlZmVycmVkTGVhZlZhbHVlID0gZnVuY3Rpb24gKHZhbHVlLCBleGlzdGluZ1ZhbCwgc2VydmVyVmFsdWVzKSB7XHJcbiAgICBpZiAoIXZhbHVlIHx8IHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcbiAgICBhc3NlcnQoJy5zdicgaW4gdmFsdWUsICdVbmV4cGVjdGVkIGxlYWYgbm9kZSBvciBwcmlvcml0eSBjb250ZW50cycpO1xyXG4gICAgaWYgKHR5cGVvZiB2YWx1ZVsnLnN2J10gPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlc29sdmVTY2FsYXJEZWZlcnJlZFZhbHVlKHZhbHVlWycuc3YnXSwgZXhpc3RpbmdWYWwsIHNlcnZlclZhbHVlcyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWVbJy5zdiddID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIHJldHVybiByZXNvbHZlQ29tcGxleERlZmVycmVkVmFsdWUodmFsdWVbJy5zdiddLCBleGlzdGluZ1ZhbCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBhc3NlcnQoZmFsc2UsICdVbmV4cGVjdGVkIHNlcnZlciB2YWx1ZTogJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlLCBudWxsLCAyKSk7XHJcbiAgICB9XHJcbn07XHJcbnZhciByZXNvbHZlU2NhbGFyRGVmZXJyZWRWYWx1ZSA9IGZ1bmN0aW9uIChvcCwgZXhpc3RpbmcsIHNlcnZlclZhbHVlcykge1xyXG4gICAgc3dpdGNoIChvcCkge1xyXG4gICAgICAgIGNhc2UgJ3RpbWVzdGFtcCc6XHJcbiAgICAgICAgICAgIHJldHVybiBzZXJ2ZXJWYWx1ZXNbJ3RpbWVzdGFtcCddO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIGFzc2VydChmYWxzZSwgJ1VuZXhwZWN0ZWQgc2VydmVyIHZhbHVlOiAnICsgb3ApO1xyXG4gICAgfVxyXG59O1xyXG52YXIgcmVzb2x2ZUNvbXBsZXhEZWZlcnJlZFZhbHVlID0gZnVuY3Rpb24gKG9wLCBleGlzdGluZywgdW51c2VkKSB7XHJcbiAgICBpZiAoIW9wLmhhc093blByb3BlcnR5KCdpbmNyZW1lbnQnKSkge1xyXG4gICAgICAgIGFzc2VydChmYWxzZSwgJ1VuZXhwZWN0ZWQgc2VydmVyIHZhbHVlOiAnICsgSlNPTi5zdHJpbmdpZnkob3AsIG51bGwsIDIpKTtcclxuICAgIH1cclxuICAgIHZhciBkZWx0YSA9IG9wWydpbmNyZW1lbnQnXTtcclxuICAgIGlmICh0eXBlb2YgZGVsdGEgIT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgYXNzZXJ0KGZhbHNlLCAnVW5leHBlY3RlZCBpbmNyZW1lbnQgdmFsdWU6ICcgKyBkZWx0YSk7XHJcbiAgICB9XHJcbiAgICB2YXIgZXhpc3RpbmdOb2RlID0gZXhpc3Rpbmcubm9kZSgpO1xyXG4gICAgYXNzZXJ0KGV4aXN0aW5nTm9kZSAhPT0gbnVsbCAmJiB0eXBlb2YgZXhpc3RpbmdOb2RlICE9PSAndW5kZWZpbmVkJywgJ0V4cGVjdGVkIENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFIGZvciBudWxscycpO1xyXG4gICAgLy8gSW5jcmVtZW50aW5nIGEgbm9uLW51bWJlciBzZXRzIHRoZSB2YWx1ZSB0byB0aGUgaW5jcmVtZW50ZWQgYW1vdW50XHJcbiAgICBpZiAoIWV4aXN0aW5nTm9kZS5pc0xlYWZOb2RlKCkpIHtcclxuICAgICAgICByZXR1cm4gZGVsdGE7XHJcbiAgICB9XHJcbiAgICB2YXIgbGVhZiA9IGV4aXN0aW5nTm9kZTtcclxuICAgIHZhciBleGlzdGluZ1ZhbCA9IGxlYWYuZ2V0VmFsdWUoKTtcclxuICAgIGlmICh0eXBlb2YgZXhpc3RpbmdWYWwgIT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgcmV0dXJuIGRlbHRhO1xyXG4gICAgfVxyXG4gICAgLy8gTm8gbmVlZCB0byBkbyBvdmVyL3VuZGVyZmxvdyBhcml0aG1ldGljIGhlcmUgYmVjYXVzZSBKUyBvbmx5IGhhbmRsZXMgZmxvYXRzIHVuZGVyIHRoZSBjb3ZlcnNcclxuICAgIHJldHVybiBleGlzdGluZ1ZhbCArIGRlbHRhO1xyXG59O1xyXG4vKipcclxuICogUmVjdXJzaXZlbHkgcmVwbGFjZSBhbGwgZGVmZXJyZWQgdmFsdWVzIGFuZCBwcmlvcml0aWVzIGluIHRoZSB0cmVlIHdpdGggdGhlXHJcbiAqIHNwZWNpZmllZCBnZW5lcmF0ZWQgcmVwbGFjZW1lbnQgdmFsdWVzLlxyXG4gKiBAcGFyYW0geyFQYXRofSBwYXRoIHBhdGggdG8gd2hpY2ggd3JpdGUgaXMgcmVsYXRpdmVcclxuICogQHBhcmFtIHshTm9kZX0gbm9kZSBuZXcgZGF0YSB3cml0dGVuIGF0IHBhdGhcclxuICogQHBhcmFtIHshU3luY1RyZWV9IHN5bmNUcmVlIGN1cnJlbnQgZGF0YVxyXG4gKiBAcGFyYW0geyFPYmplY3R9IHNlcnZlclZhbHVlc1xyXG4gKiBAcmV0dXJuIHshU3BhcnNlU25hcHNob3RUcmVlfVxyXG4gKi9cclxudmFyIHJlc29sdmVEZWZlcnJlZFZhbHVlVHJlZSA9IGZ1bmN0aW9uIChwYXRoLCBub2RlLCBzeW5jVHJlZSwgc2VydmVyVmFsdWVzKSB7XHJcbiAgICByZXR1cm4gcmVzb2x2ZURlZmVycmVkVmFsdWUobm9kZSwgbmV3IERlZmVycmVkVmFsdWVQcm92aWRlcihzeW5jVHJlZSwgcGF0aCksIHNlcnZlclZhbHVlcyk7XHJcbn07XHJcbi8qKlxyXG4gKiBSZWN1cnNpdmVseSByZXBsYWNlIGFsbCBkZWZlcnJlZCB2YWx1ZXMgYW5kIHByaW9yaXRpZXMgaW4gdGhlIG5vZGUgd2l0aCB0aGVcclxuICogc3BlY2lmaWVkIGdlbmVyYXRlZCByZXBsYWNlbWVudCB2YWx1ZXMuICBJZiB0aGVyZSBhcmUgbm8gc2VydmVyIHZhbHVlcyBpbiB0aGUgbm9kZSxcclxuICogaXQnbGwgYmUgcmV0dXJuZWQgYXMtaXMuXHJcbiAqIEBwYXJhbSB7IU5vZGV9IG5vZGVcclxuICogQHBhcmFtIHshT2JqZWN0fSBzZXJ2ZXJWYWx1ZXNcclxuICogQHJldHVybiB7IU5vZGV9XHJcbiAqL1xyXG52YXIgcmVzb2x2ZURlZmVycmVkVmFsdWVTbmFwc2hvdCA9IGZ1bmN0aW9uIChub2RlLCBleGlzdGluZywgc2VydmVyVmFsdWVzKSB7XHJcbiAgICByZXR1cm4gcmVzb2x2ZURlZmVycmVkVmFsdWUobm9kZSwgbmV3IEV4aXN0aW5nVmFsdWVQcm92aWRlcihleGlzdGluZyksIHNlcnZlclZhbHVlcyk7XHJcbn07XHJcbmZ1bmN0aW9uIHJlc29sdmVEZWZlcnJlZFZhbHVlKG5vZGUsIGV4aXN0aW5nVmFsLCBzZXJ2ZXJWYWx1ZXMpIHtcclxuICAgIHZhciByYXdQcmkgPSBub2RlLmdldFByaW9yaXR5KCkudmFsKCk7XHJcbiAgICB2YXIgcHJpb3JpdHkgPSByZXNvbHZlRGVmZXJyZWRMZWFmVmFsdWUocmF3UHJpLCBleGlzdGluZ1ZhbC5nZXRJbW1lZGlhdGVDaGlsZCgnLnByaW9yaXR5JyksIHNlcnZlclZhbHVlcyk7XHJcbiAgICB2YXIgbmV3Tm9kZTtcclxuICAgIGlmIChub2RlLmlzTGVhZk5vZGUoKSkge1xyXG4gICAgICAgIHZhciBsZWFmTm9kZSA9IG5vZGU7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzb2x2ZURlZmVycmVkTGVhZlZhbHVlKGxlYWZOb2RlLmdldFZhbHVlKCksIGV4aXN0aW5nVmFsLCBzZXJ2ZXJWYWx1ZXMpO1xyXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gbGVhZk5vZGUuZ2V0VmFsdWUoKSB8fFxyXG4gICAgICAgICAgICBwcmlvcml0eSAhPT0gbGVhZk5vZGUuZ2V0UHJpb3JpdHkoKS52YWwoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IExlYWZOb2RlKHZhbHVlLCBub2RlRnJvbUpTT04kMShwcmlvcml0eSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5vZGU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdmFyIGNoaWxkcmVuTm9kZSA9IG5vZGU7XHJcbiAgICAgICAgbmV3Tm9kZSA9IGNoaWxkcmVuTm9kZTtcclxuICAgICAgICBpZiAocHJpb3JpdHkgIT09IGNoaWxkcmVuTm9kZS5nZXRQcmlvcml0eSgpLnZhbCgpKSB7XHJcbiAgICAgICAgICAgIG5ld05vZGUgPSBuZXdOb2RlLnVwZGF0ZVByaW9yaXR5KG5ldyBMZWFmTm9kZShwcmlvcml0eSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjaGlsZHJlbk5vZGUuZm9yRWFjaENoaWxkKFBSSU9SSVRZX0lOREVYLCBmdW5jdGlvbiAoY2hpbGROYW1lLCBjaGlsZE5vZGUpIHtcclxuICAgICAgICAgICAgdmFyIG5ld0NoaWxkTm9kZSA9IHJlc29sdmVEZWZlcnJlZFZhbHVlKGNoaWxkTm9kZSwgZXhpc3RpbmdWYWwuZ2V0SW1tZWRpYXRlQ2hpbGQoY2hpbGROYW1lKSwgc2VydmVyVmFsdWVzKTtcclxuICAgICAgICAgICAgaWYgKG5ld0NoaWxkTm9kZSAhPT0gY2hpbGROb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdOb2RlID0gbmV3Tm9kZS51cGRhdGVJbW1lZGlhdGVDaGlsZChjaGlsZE5hbWUsIG5ld0NoaWxkTm9kZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gbmV3Tm9kZTtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogSGVscGVyIGNsYXNzIHRvIHN0b3JlIGEgc3BhcnNlIHNldCBvZiBzbmFwc2hvdHMuXHJcbiAqL1xyXG52YXIgU3BhcnNlU25hcHNob3RUcmVlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gU3BhcnNlU25hcHNob3RUcmVlKCkge1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBuZXcgTWFwKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIG5vZGUgc3RvcmVkIGF0IHRoZSBnaXZlbiBwYXRoIGlmIG9uZSBleGlzdHMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHBhdGggUGF0aCB0byBsb29rIHVwIHNuYXBzaG90IGZvci5cclxuICAgICAqIEByZXR1cm4gVGhlIHJldHJpZXZlZCBub2RlLCBvciBudWxsLlxyXG4gICAgICovXHJcbiAgICBTcGFyc2VTbmFwc2hvdFRyZWUucHJvdG90eXBlLmZpbmQgPSBmdW5jdGlvbiAocGF0aCkge1xyXG4gICAgICAgIGlmICh0aGlzLnZhbHVlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUuZ2V0Q2hpbGQocGF0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKCFwYXRoLmlzRW1wdHkoKSAmJiB0aGlzLmNoaWxkcmVuLnNpemUgPiAwKSB7XHJcbiAgICAgICAgICAgIHZhciBjaGlsZEtleSA9IHBhdGguZ2V0RnJvbnQoKTtcclxuICAgICAgICAgICAgcGF0aCA9IHBhdGgucG9wRnJvbnQoKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY2hpbGRyZW4uaGFzKGNoaWxkS2V5KSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkVHJlZSA9IHRoaXMuY2hpbGRyZW4uZ2V0KGNoaWxkS2V5KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjaGlsZFRyZWUuZmluZChwYXRoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTdG9yZXMgdGhlIGdpdmVuIG5vZGUgYXQgdGhlIHNwZWNpZmllZCBwYXRoLiBJZiB0aGVyZSBpcyBhbHJlYWR5IGEgbm9kZVxyXG4gICAgICogYXQgYSBzaGFsbG93ZXIgcGF0aCwgaXQgbWVyZ2VzIHRoZSBuZXcgZGF0YSBpbnRvIHRoYXQgc25hcHNob3Qgbm9kZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gcGF0aCBQYXRoIHRvIGxvb2sgdXAgc25hcHNob3QgZm9yLlxyXG4gICAgICogQHBhcmFtIGRhdGEgVGhlIG5ldyBkYXRhLCBvciBudWxsLlxyXG4gICAgICovXHJcbiAgICBTcGFyc2VTbmFwc2hvdFRyZWUucHJvdG90eXBlLnJlbWVtYmVyID0gZnVuY3Rpb24gKHBhdGgsIGRhdGEpIHtcclxuICAgICAgICBpZiAocGF0aC5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IGRhdGE7XHJcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uY2xlYXIoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy52YWx1ZS51cGRhdGVDaGlsZChwYXRoLCBkYXRhKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBjaGlsZEtleSA9IHBhdGguZ2V0RnJvbnQoKTtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmNoaWxkcmVuLmhhcyhjaGlsZEtleSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uc2V0KGNoaWxkS2V5LCBuZXcgU3BhcnNlU25hcHNob3RUcmVlKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBjaGlsZCA9IHRoaXMuY2hpbGRyZW4uZ2V0KGNoaWxkS2V5KTtcclxuICAgICAgICAgICAgcGF0aCA9IHBhdGgucG9wRnJvbnQoKTtcclxuICAgICAgICAgICAgY2hpbGQucmVtZW1iZXIocGF0aCwgZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUHVyZ2UgdGhlIGRhdGEgYXQgcGF0aCBmcm9tIHRoZSBjYWNoZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gcGF0aCBQYXRoIHRvIGxvb2sgdXAgc25hcHNob3QgZm9yLlxyXG4gICAgICogQHJldHVybiBUcnVlIGlmIHRoaXMgbm9kZSBzaG91bGQgbm93IGJlIHJlbW92ZWQuXHJcbiAgICAgKi9cclxuICAgIFNwYXJzZVNuYXBzaG90VHJlZS5wcm90b3R5cGUuZm9yZ2V0ID0gZnVuY3Rpb24gKHBhdGgpIHtcclxuICAgICAgICBpZiAocGF0aC5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uY2xlYXIoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudmFsdWUuaXNMZWFmTm9kZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UncmUgdHJ5aW5nIHRvIGZvcmdldCBhIG5vZGUgdGhhdCBkb2Vzbid0IGV4aXN0XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZl8xID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZS5mb3JFYWNoQ2hpbGQoUFJJT1JJVFlfSU5ERVgsIGZ1bmN0aW9uIChrZXksIHRyZWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZl8xLnJlbWVtYmVyKG5ldyBQYXRoKGtleSksIHRyZWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZvcmdldChwYXRoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmNoaWxkcmVuLnNpemUgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2hpbGRLZXkgPSBwYXRoLmdldEZyb250KCk7XHJcbiAgICAgICAgICAgICAgICBwYXRoID0gcGF0aC5wb3BGcm9udCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY2hpbGRyZW4uaGFzKGNoaWxkS2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzYWZlVG9SZW1vdmUgPSB0aGlzLmNoaWxkcmVuLmdldChjaGlsZEtleSkuZm9yZ2V0KHBhdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzYWZlVG9SZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5kZWxldGUoY2hpbGRLZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuLnNpemUgPT09IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJlY3Vyc2l2ZWx5IGl0ZXJhdGVzIHRocm91Z2ggYWxsIG9mIHRoZSBzdG9yZWQgdHJlZSBhbmQgY2FsbHMgdGhlXHJcbiAgICAgKiBjYWxsYmFjayBvbiBlYWNoIG9uZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gcHJlZml4UGF0aCBQYXRoIHRvIGxvb2sgdXAgbm9kZSBmb3IuXHJcbiAgICAgKiBAcGFyYW0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaW52b2tlIGZvciBlYWNoIHRyZWUuXHJcbiAgICAgKi9cclxuICAgIFNwYXJzZVNuYXBzaG90VHJlZS5wcm90b3R5cGUuZm9yRWFjaFRyZWUgPSBmdW5jdGlvbiAocHJlZml4UGF0aCwgZnVuYykge1xyXG4gICAgICAgIGlmICh0aGlzLnZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGZ1bmMocHJlZml4UGF0aCwgdGhpcy52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmZvckVhY2hDaGlsZChmdW5jdGlvbiAoa2V5LCB0cmVlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcGF0aCA9IG5ldyBQYXRoKHByZWZpeFBhdGgudG9TdHJpbmcoKSArICcvJyArIGtleSk7XHJcbiAgICAgICAgICAgICAgICB0cmVlLmZvckVhY2hUcmVlKHBhdGgsIGZ1bmMpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBJdGVyYXRlcyB0aHJvdWdoIGVhY2ggaW1tZWRpYXRlIGNoaWxkIGFuZCB0cmlnZ2VycyB0aGUgY2FsbGJhY2suXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZSBmb3IgZWFjaCBjaGlsZC5cclxuICAgICAqL1xyXG4gICAgU3BhcnNlU25hcHNob3RUcmVlLnByb3RvdHlwZS5mb3JFYWNoQ2hpbGQgPSBmdW5jdGlvbiAoZnVuYykge1xyXG4gICAgICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAodHJlZSwga2V5KSB7XHJcbiAgICAgICAgICAgIGZ1bmMoa2V5LCB0cmVlKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gU3BhcnNlU25hcHNob3RUcmVlO1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICpcclxuICogQGVudW1cclxuICovXHJcbnZhciBPcGVyYXRpb25UeXBlO1xyXG4oZnVuY3Rpb24gKE9wZXJhdGlvblR5cGUpIHtcclxuICAgIE9wZXJhdGlvblR5cGVbT3BlcmF0aW9uVHlwZVtcIk9WRVJXUklURVwiXSA9IDBdID0gXCJPVkVSV1JJVEVcIjtcclxuICAgIE9wZXJhdGlvblR5cGVbT3BlcmF0aW9uVHlwZVtcIk1FUkdFXCJdID0gMV0gPSBcIk1FUkdFXCI7XHJcbiAgICBPcGVyYXRpb25UeXBlW09wZXJhdGlvblR5cGVbXCJBQ0tfVVNFUl9XUklURVwiXSA9IDJdID0gXCJBQ0tfVVNFUl9XUklURVwiO1xyXG4gICAgT3BlcmF0aW9uVHlwZVtPcGVyYXRpb25UeXBlW1wiTElTVEVOX0NPTVBMRVRFXCJdID0gM10gPSBcIkxJU1RFTl9DT01QTEVURVwiO1xyXG59KShPcGVyYXRpb25UeXBlIHx8IChPcGVyYXRpb25UeXBlID0ge30pKTtcclxuLyoqXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gZnJvbVVzZXJcclxuICogQHBhcmFtIHtib29sZWFufSBmcm9tU2VydmVyXHJcbiAqIEBwYXJhbSB7P3N0cmluZ30gcXVlcnlJZFxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHRhZ2dlZFxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbnZhciBPcGVyYXRpb25Tb3VyY2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBPcGVyYXRpb25Tb3VyY2UoZnJvbVVzZXIsIGZyb21TZXJ2ZXIsIHF1ZXJ5SWQsIHRhZ2dlZCkge1xyXG4gICAgICAgIHRoaXMuZnJvbVVzZXIgPSBmcm9tVXNlcjtcclxuICAgICAgICB0aGlzLmZyb21TZXJ2ZXIgPSBmcm9tU2VydmVyO1xyXG4gICAgICAgIHRoaXMucXVlcnlJZCA9IHF1ZXJ5SWQ7XHJcbiAgICAgICAgdGhpcy50YWdnZWQgPSB0YWdnZWQ7XHJcbiAgICAgICAgYXNzZXJ0KCF0YWdnZWQgfHwgZnJvbVNlcnZlciwgJ1RhZ2dlZCBxdWVyaWVzIG11c3QgYmUgZnJvbSBzZXJ2ZXIuJyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBjb25zdFxyXG4gICAgICogQHR5cGUgeyFPcGVyYXRpb25Tb3VyY2V9XHJcbiAgICAgKi9cclxuICAgIE9wZXJhdGlvblNvdXJjZS5Vc2VyID0gbmV3IE9wZXJhdGlvblNvdXJjZShcclxuICAgIC8qZnJvbVVzZXI9Ki8gdHJ1ZSwgZmFsc2UsIG51bGwsIFxyXG4gICAgLyp0YWdnZWQ9Ki8gZmFsc2UpO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAY29uc3RcclxuICAgICAqIEB0eXBlIHshT3BlcmF0aW9uU291cmNlfVxyXG4gICAgICovXHJcbiAgICBPcGVyYXRpb25Tb3VyY2UuU2VydmVyID0gbmV3IE9wZXJhdGlvblNvdXJjZShmYWxzZSwgXHJcbiAgICAvKmZyb21TZXJ2ZXI9Ki8gdHJ1ZSwgbnVsbCwgXHJcbiAgICAvKnRhZ2dlZD0qLyBmYWxzZSk7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBxdWVyeUlkXHJcbiAgICAgKiBAcmV0dXJuIHshT3BlcmF0aW9uU291cmNlfVxyXG4gICAgICovXHJcbiAgICBPcGVyYXRpb25Tb3VyY2UuZm9yU2VydmVyVGFnZ2VkUXVlcnkgPSBmdW5jdGlvbiAocXVlcnlJZCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgT3BlcmF0aW9uU291cmNlKGZhbHNlLCBcclxuICAgICAgICAvKmZyb21TZXJ2ZXI9Ki8gdHJ1ZSwgcXVlcnlJZCwgXHJcbiAgICAgICAgLyp0YWdnZWQ9Ki8gdHJ1ZSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE9wZXJhdGlvblNvdXJjZTtcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIEFja1VzZXJXcml0ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IVBhdGh9IHBhdGhcclxuICAgICAqIEBwYXJhbSB7IUltbXV0YWJsZVRyZWU8IWJvb2xlYW4+fSBhZmZlY3RlZFRyZWUgQSB0cmVlIGNvbnRhaW5pbmcgdHJ1ZSBmb3IgZWFjaCBhZmZlY3RlZCBwYXRoLiBBZmZlY3RlZCBwYXRocyBjYW4ndCBvdmVybGFwLlxyXG4gICAgICogQHBhcmFtIHshYm9vbGVhbn0gcmV2ZXJ0XHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIEFja1VzZXJXcml0ZShcclxuICAgIC8qKiBAaW5oZXJpdERvYyAqLyBwYXRoLCBcclxuICAgIC8qKiBAaW5oZXJpdERvYyAqLyBhZmZlY3RlZFRyZWUsIFxyXG4gICAgLyoqIEBpbmhlcml0RG9jICovIHJldmVydCkge1xyXG4gICAgICAgIHRoaXMucGF0aCA9IHBhdGg7XHJcbiAgICAgICAgdGhpcy5hZmZlY3RlZFRyZWUgPSBhZmZlY3RlZFRyZWU7XHJcbiAgICAgICAgdGhpcy5yZXZlcnQgPSByZXZlcnQ7XHJcbiAgICAgICAgLyoqIEBpbmhlcml0RG9jICovXHJcbiAgICAgICAgdGhpcy50eXBlID0gT3BlcmF0aW9uVHlwZS5BQ0tfVVNFUl9XUklURTtcclxuICAgICAgICAvKiogQGluaGVyaXREb2MgKi9cclxuICAgICAgICB0aGlzLnNvdXJjZSA9IE9wZXJhdGlvblNvdXJjZS5Vc2VyO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBBY2tVc2VyV3JpdGUucHJvdG90eXBlLm9wZXJhdGlvbkZvckNoaWxkID0gZnVuY3Rpb24gKGNoaWxkTmFtZSkge1xyXG4gICAgICAgIGlmICghdGhpcy5wYXRoLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICBhc3NlcnQodGhpcy5wYXRoLmdldEZyb250KCkgPT09IGNoaWxkTmFtZSwgJ29wZXJhdGlvbkZvckNoaWxkIGNhbGxlZCBmb3IgdW5yZWxhdGVkIGNoaWxkLicpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEFja1VzZXJXcml0ZSh0aGlzLnBhdGgucG9wRnJvbnQoKSwgdGhpcy5hZmZlY3RlZFRyZWUsIHRoaXMucmV2ZXJ0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5hZmZlY3RlZFRyZWUudmFsdWUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBhc3NlcnQodGhpcy5hZmZlY3RlZFRyZWUuY2hpbGRyZW4uaXNFbXB0eSgpLCAnYWZmZWN0ZWRUcmVlIHNob3VsZCBub3QgaGF2ZSBvdmVybGFwcGluZyBhZmZlY3RlZCBwYXRocy4nKTtcclxuICAgICAgICAgICAgLy8gQWxsIGNoaWxkIGxvY2F0aW9ucyBhcmUgYWZmZWN0ZWQgYXMgd2VsbDsganVzdCByZXR1cm4gc2FtZSBvcGVyYXRpb24uXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGNoaWxkVHJlZSA9IHRoaXMuYWZmZWN0ZWRUcmVlLnN1YnRyZWUobmV3IFBhdGgoY2hpbGROYW1lKSk7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQWNrVXNlcldyaXRlKFBhdGguRW1wdHksIGNoaWxkVHJlZSwgdGhpcy5yZXZlcnQpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gQWNrVXNlcldyaXRlO1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgZW1wdHlDaGlsZHJlblNpbmdsZXRvbjtcclxuLyoqXHJcbiAqIFNpbmdsZXRvbiBlbXB0eSBjaGlsZHJlbiBjb2xsZWN0aW9uLlxyXG4gKlxyXG4gKiBAY29uc3RcclxuICogQHR5cGUgeyFTb3J0ZWRNYXAuPHN0cmluZywgIUltbXV0YWJsZVRyZWUuPD8+Pn1cclxuICovXHJcbnZhciBFbXB0eUNoaWxkcmVuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKCFlbXB0eUNoaWxkcmVuU2luZ2xldG9uKSB7XHJcbiAgICAgICAgZW1wdHlDaGlsZHJlblNpbmdsZXRvbiA9IG5ldyBTb3J0ZWRNYXAoc3RyaW5nQ29tcGFyZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZW1wdHlDaGlsZHJlblNpbmdsZXRvbjtcclxufTtcclxuLyoqXHJcbiAqIEEgdHJlZSB3aXRoIGltbXV0YWJsZSBlbGVtZW50cy5cclxuICovXHJcbnZhciBJbW11dGFibGVUcmVlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAdGVtcGxhdGUgVFxyXG4gICAgICogQHBhcmFtIHs/VH0gdmFsdWVcclxuICAgICAqIEBwYXJhbSB7U29ydGVkTWFwLjxzdHJpbmcsICFJbW11dGFibGVUcmVlLjxUPj49fSBjaGlsZHJlblxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBJbW11dGFibGVUcmVlKHZhbHVlLCBjaGlsZHJlbikge1xyXG4gICAgICAgIGlmIChjaGlsZHJlbiA9PT0gdm9pZCAwKSB7IGNoaWxkcmVuID0gRW1wdHlDaGlsZHJlbigpOyB9XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHRlbXBsYXRlIFRcclxuICAgICAqIEBwYXJhbSB7IU9iamVjdC48c3RyaW5nLCAhVD59IG9ialxyXG4gICAgICogQHJldHVybiB7IUltbXV0YWJsZVRyZWUuPCFUPn1cclxuICAgICAqL1xyXG4gICAgSW1tdXRhYmxlVHJlZS5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gKG9iaikge1xyXG4gICAgICAgIHZhciB0cmVlID0gSW1tdXRhYmxlVHJlZS5FbXB0eTtcclxuICAgICAgICBlYWNoKG9iaiwgZnVuY3Rpb24gKGNoaWxkUGF0aCwgY2hpbGRTbmFwKSB7XHJcbiAgICAgICAgICAgIHRyZWUgPSB0cmVlLnNldChuZXcgUGF0aChjaGlsZFBhdGgpLCBjaGlsZFNuYXApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0cmVlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgZW1wdHkgYW5kIHRoZXJlIGFyZSBubyBjaGlsZHJlblxyXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgSW1tdXRhYmxlVHJlZS5wcm90b3R5cGUuaXNFbXB0eSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZSA9PT0gbnVsbCAmJiB0aGlzLmNoaWxkcmVuLmlzRW1wdHkoKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEdpdmVuIGEgcGF0aCBhbmQgcHJlZGljYXRlLCByZXR1cm4gdGhlIGZpcnN0IG5vZGUgYW5kIHRoZSBwYXRoIHRvIHRoYXQgbm9kZVxyXG4gICAgICogd2hlcmUgdGhlIHByZWRpY2F0ZSByZXR1cm5zIHRydWUuXHJcbiAgICAgKlxyXG4gICAgICogVE9ETyBEbyBhIHBlcmYgdGVzdCAtLSBJZiB3ZSdyZSBjcmVhdGluZyBhIGJ1bmNoIG9mIHtwYXRoOiB2YWx1ZTp9IG9iamVjdHNcclxuICAgICAqIG9uIHRoZSB3YXkgYmFjayBvdXQsIGl0IG1heSBiZSBiZXR0ZXIgdG8gcGFzcyBkb3duIGEgcGF0aFNvRmFyIG9iai5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFQYXRofSByZWxhdGl2ZVBhdGggVGhlIHJlbWFpbmRlciBvZiB0aGUgcGF0aFxyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbihUKTpib29sZWFufSBwcmVkaWNhdGUgVGhlIHByZWRpY2F0ZSB0byBzYXRpc2Z5IHRvIHJldHVybiBhXHJcbiAgICAgKiAgIG5vZGVcclxuICAgICAqIEByZXR1cm4gez97cGF0aDohUGF0aCwgdmFsdWU6IVR9fVxyXG4gICAgICovXHJcbiAgICBJbW11dGFibGVUcmVlLnByb3RvdHlwZS5maW5kUm9vdE1vc3RNYXRjaGluZ1BhdGhBbmRWYWx1ZSA9IGZ1bmN0aW9uIChyZWxhdGl2ZVBhdGgsIHByZWRpY2F0ZSkge1xyXG4gICAgICAgIGlmICh0aGlzLnZhbHVlICE9IG51bGwgJiYgcHJlZGljYXRlKHRoaXMudmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHBhdGg6IFBhdGguRW1wdHksIHZhbHVlOiB0aGlzLnZhbHVlIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAocmVsYXRpdmVQYXRoLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZnJvbnQgPSByZWxhdGl2ZVBhdGguZ2V0RnJvbnQoKTtcclxuICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHRoaXMuY2hpbGRyZW4uZ2V0KGZyb250KTtcclxuICAgICAgICAgICAgICAgIGlmIChjaGlsZCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZEV4aXN0aW5nUGF0aEFuZFZhbHVlID0gY2hpbGQuZmluZFJvb3RNb3N0TWF0Y2hpbmdQYXRoQW5kVmFsdWUocmVsYXRpdmVQYXRoLnBvcEZyb250KCksIHByZWRpY2F0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkRXhpc3RpbmdQYXRoQW5kVmFsdWUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZnVsbFBhdGggPSBuZXcgUGF0aChmcm9udCkuY2hpbGQoY2hpbGRFeGlzdGluZ1BhdGhBbmRWYWx1ZS5wYXRoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgcGF0aDogZnVsbFBhdGgsIHZhbHVlOiBjaGlsZEV4aXN0aW5nUGF0aEFuZFZhbHVlLnZhbHVlIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEZpbmQsIGlmIGl0IGV4aXN0cywgdGhlIHNob3J0ZXN0IHN1YnBhdGggb2YgdGhlIGdpdmVuIHBhdGggdGhhdCBwb2ludHMgYSBkZWZpbmVkXHJcbiAgICAgKiB2YWx1ZSBpbiB0aGUgdHJlZVxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gcmVsYXRpdmVQYXRoXHJcbiAgICAgKiBAcmV0dXJuIHs/e3BhdGg6ICFQYXRoLCB2YWx1ZTogIVR9fVxyXG4gICAgICovXHJcbiAgICBJbW11dGFibGVUcmVlLnByb3RvdHlwZS5maW5kUm9vdE1vc3RWYWx1ZUFuZFBhdGggPSBmdW5jdGlvbiAocmVsYXRpdmVQYXRoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmluZFJvb3RNb3N0TWF0Y2hpbmdQYXRoQW5kVmFsdWUocmVsYXRpdmVQYXRoLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0cnVlOyB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IVBhdGh9IHJlbGF0aXZlUGF0aFxyXG4gICAgICogQHJldHVybiB7IUltbXV0YWJsZVRyZWUuPFQ+fSBUaGUgc3VidHJlZSBhdCB0aGUgZ2l2ZW4gcGF0aFxyXG4gICAgICovXHJcbiAgICBJbW11dGFibGVUcmVlLnByb3RvdHlwZS5zdWJ0cmVlID0gZnVuY3Rpb24gKHJlbGF0aXZlUGF0aCkge1xyXG4gICAgICAgIGlmIChyZWxhdGl2ZVBhdGguaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGZyb250ID0gcmVsYXRpdmVQYXRoLmdldEZyb250KCk7XHJcbiAgICAgICAgICAgIHZhciBjaGlsZFRyZWUgPSB0aGlzLmNoaWxkcmVuLmdldChmcm9udCk7XHJcbiAgICAgICAgICAgIGlmIChjaGlsZFRyZWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjaGlsZFRyZWUuc3VidHJlZShyZWxhdGl2ZVBhdGgucG9wRnJvbnQoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gSW1tdXRhYmxlVHJlZS5FbXB0eTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFNldHMgYSB2YWx1ZSBhdCB0aGUgc3BlY2lmaWVkIHBhdGguXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gcmVsYXRpdmVQYXRoIFBhdGggdG8gc2V0IHZhbHVlIGF0LlxyXG4gICAgICogQHBhcmFtIHs/VH0gdG9TZXQgVmFsdWUgdG8gc2V0LlxyXG4gICAgICogQHJldHVybiB7IUltbXV0YWJsZVRyZWUuPFQ+fSBSZXN1bHRpbmcgdHJlZS5cclxuICAgICAqL1xyXG4gICAgSW1tdXRhYmxlVHJlZS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKHJlbGF0aXZlUGF0aCwgdG9TZXQpIHtcclxuICAgICAgICBpZiAocmVsYXRpdmVQYXRoLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEltbXV0YWJsZVRyZWUodG9TZXQsIHRoaXMuY2hpbGRyZW4pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGZyb250ID0gcmVsYXRpdmVQYXRoLmdldEZyb250KCk7XHJcbiAgICAgICAgICAgIHZhciBjaGlsZCA9IHRoaXMuY2hpbGRyZW4uZ2V0KGZyb250KSB8fCBJbW11dGFibGVUcmVlLkVtcHR5O1xyXG4gICAgICAgICAgICB2YXIgbmV3Q2hpbGQgPSBjaGlsZC5zZXQocmVsYXRpdmVQYXRoLnBvcEZyb250KCksIHRvU2V0KTtcclxuICAgICAgICAgICAgdmFyIG5ld0NoaWxkcmVuID0gdGhpcy5jaGlsZHJlbi5pbnNlcnQoZnJvbnQsIG5ld0NoaWxkKTtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBJbW11dGFibGVUcmVlKHRoaXMudmFsdWUsIG5ld0NoaWxkcmVuKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmVzIHRoZSB2YWx1ZSBhdCB0aGUgc3BlY2lmaWVkIHBhdGguXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gcmVsYXRpdmVQYXRoIFBhdGggdG8gdmFsdWUgdG8gcmVtb3ZlLlxyXG4gICAgICogQHJldHVybiB7IUltbXV0YWJsZVRyZWUuPFQ+fSBSZXN1bHRpbmcgdHJlZS5cclxuICAgICAqL1xyXG4gICAgSW1tdXRhYmxlVHJlZS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKHJlbGF0aXZlUGF0aCkge1xyXG4gICAgICAgIGlmIChyZWxhdGl2ZVBhdGguaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNoaWxkcmVuLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEltbXV0YWJsZVRyZWUuRW1wdHk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEltbXV0YWJsZVRyZWUobnVsbCwgdGhpcy5jaGlsZHJlbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBmcm9udCA9IHJlbGF0aXZlUGF0aC5nZXRGcm9udCgpO1xyXG4gICAgICAgICAgICB2YXIgY2hpbGQgPSB0aGlzLmNoaWxkcmVuLmdldChmcm9udCk7XHJcbiAgICAgICAgICAgIGlmIChjaGlsZCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG5ld0NoaWxkID0gY2hpbGQucmVtb3ZlKHJlbGF0aXZlUGF0aC5wb3BGcm9udCgpKTtcclxuICAgICAgICAgICAgICAgIHZhciBuZXdDaGlsZHJlbiA9IHZvaWQgMDtcclxuICAgICAgICAgICAgICAgIGlmIChuZXdDaGlsZC5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdDaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4ucmVtb3ZlKGZyb250KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld0NoaWxkcmVuID0gdGhpcy5jaGlsZHJlbi5pbnNlcnQoZnJvbnQsIG5ld0NoaWxkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlID09PSBudWxsICYmIG5ld0NoaWxkcmVuLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBJbW11dGFibGVUcmVlLkVtcHR5O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBJbW11dGFibGVUcmVlKHRoaXMudmFsdWUsIG5ld0NoaWxkcmVuKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBhIHZhbHVlIGZyb20gdGhlIHRyZWUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gcmVsYXRpdmVQYXRoIFBhdGggdG8gZ2V0IHZhbHVlIGZvci5cclxuICAgICAqIEByZXR1cm4gez9UfSBWYWx1ZSBhdCBwYXRoLCBvciBudWxsLlxyXG4gICAgICovXHJcbiAgICBJbW11dGFibGVUcmVlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAocmVsYXRpdmVQYXRoKSB7XHJcbiAgICAgICAgaWYgKHJlbGF0aXZlUGF0aC5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgZnJvbnQgPSByZWxhdGl2ZVBhdGguZ2V0RnJvbnQoKTtcclxuICAgICAgICAgICAgdmFyIGNoaWxkID0gdGhpcy5jaGlsZHJlbi5nZXQoZnJvbnQpO1xyXG4gICAgICAgICAgICBpZiAoY2hpbGQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjaGlsZC5nZXQocmVsYXRpdmVQYXRoLnBvcEZyb250KCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXBsYWNlIHRoZSBzdWJ0cmVlIGF0IHRoZSBzcGVjaWZpZWQgcGF0aCB3aXRoIHRoZSBnaXZlbiBuZXcgdHJlZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFQYXRofSByZWxhdGl2ZVBhdGggUGF0aCB0byByZXBsYWNlIHN1YnRyZWUgZm9yLlxyXG4gICAgICogQHBhcmFtIHshSW1tdXRhYmxlVHJlZX0gbmV3VHJlZSBOZXcgdHJlZS5cclxuICAgICAqIEByZXR1cm4geyFJbW11dGFibGVUcmVlfSBSZXN1bHRpbmcgdHJlZS5cclxuICAgICAqL1xyXG4gICAgSW1tdXRhYmxlVHJlZS5wcm90b3R5cGUuc2V0VHJlZSA9IGZ1bmN0aW9uIChyZWxhdGl2ZVBhdGgsIG5ld1RyZWUpIHtcclxuICAgICAgICBpZiAocmVsYXRpdmVQYXRoLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3VHJlZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBmcm9udCA9IHJlbGF0aXZlUGF0aC5nZXRGcm9udCgpO1xyXG4gICAgICAgICAgICB2YXIgY2hpbGQgPSB0aGlzLmNoaWxkcmVuLmdldChmcm9udCkgfHwgSW1tdXRhYmxlVHJlZS5FbXB0eTtcclxuICAgICAgICAgICAgdmFyIG5ld0NoaWxkID0gY2hpbGQuc2V0VHJlZShyZWxhdGl2ZVBhdGgucG9wRnJvbnQoKSwgbmV3VHJlZSk7XHJcbiAgICAgICAgICAgIHZhciBuZXdDaGlsZHJlbiA9IHZvaWQgMDtcclxuICAgICAgICAgICAgaWYgKG5ld0NoaWxkLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICAgICAgbmV3Q2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuLnJlbW92ZShmcm9udCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBuZXdDaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4uaW5zZXJ0KGZyb250LCBuZXdDaGlsZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBJbW11dGFibGVUcmVlKHRoaXMudmFsdWUsIG5ld0NoaWxkcmVuKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBQZXJmb3JtcyBhIGRlcHRoIGZpcnN0IGZvbGQgb24gdGhpcyB0cmVlLiBUcmFuc2Zvcm1zIGEgdHJlZSBpbnRvIGEgc2luZ2xlXHJcbiAgICAgKiB2YWx1ZSwgZ2l2ZW4gYSBmdW5jdGlvbiB0aGF0IG9wZXJhdGVzIG9uIHRoZSBwYXRoIHRvIGEgbm9kZSwgYW4gb3B0aW9uYWxcclxuICAgICAqIGN1cnJlbnQgdmFsdWUsIGFuZCBhIG1hcCBvZiBjaGlsZCBuYW1lcyB0byBmb2xkZWQgc3VidHJlZXNcclxuICAgICAqIEB0ZW1wbGF0ZSBWXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKFBhdGgsID9ULCBPYmplY3QuPHN0cmluZywgVj4pOlZ9IGZuXHJcbiAgICAgKiBAcmV0dXJuIHtWfVxyXG4gICAgICovXHJcbiAgICBJbW11dGFibGVUcmVlLnByb3RvdHlwZS5mb2xkID0gZnVuY3Rpb24gKGZuKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9sZF8oUGF0aC5FbXB0eSwgZm4pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmVjdXJzaXZlIGhlbHBlciBmb3IgcHVibGljLWZhY2luZyBmb2xkKCkgbWV0aG9kXHJcbiAgICAgKiBAdGVtcGxhdGUgVlxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gcGF0aFNvRmFyXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKFBhdGgsID9ULCBPYmplY3QuPHN0cmluZywgVj4pOlZ9IGZuXHJcbiAgICAgKiBAcmV0dXJuIHtWfVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgSW1tdXRhYmxlVHJlZS5wcm90b3R5cGUuZm9sZF8gPSBmdW5jdGlvbiAocGF0aFNvRmFyLCBmbikge1xyXG4gICAgICAgIHZhciBhY2N1bSA9IHt9O1xyXG4gICAgICAgIHRoaXMuY2hpbGRyZW4uaW5vcmRlclRyYXZlcnNhbChmdW5jdGlvbiAoY2hpbGRLZXksIGNoaWxkVHJlZSkge1xyXG4gICAgICAgICAgICBhY2N1bVtjaGlsZEtleV0gPSBjaGlsZFRyZWUuZm9sZF8ocGF0aFNvRmFyLmNoaWxkKGNoaWxkS2V5KSwgZm4pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBmbihwYXRoU29GYXIsIHRoaXMudmFsdWUsIGFjY3VtKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEZpbmQgdGhlIGZpcnN0IG1hdGNoaW5nIHZhbHVlIG9uIHRoZSBnaXZlbiBwYXRoLiBSZXR1cm4gdGhlIHJlc3VsdCBvZiBhcHBseWluZyBmIHRvIGl0LlxyXG4gICAgICogQHRlbXBsYXRlIFZcclxuICAgICAqIEBwYXJhbSB7IVBhdGh9IHBhdGhcclxuICAgICAqIEBwYXJhbSB7IWZ1bmN0aW9uKCFQYXRoLCAhVCk6P1Z9IGZcclxuICAgICAqIEByZXR1cm4gez9WfVxyXG4gICAgICovXHJcbiAgICBJbW11dGFibGVUcmVlLnByb3RvdHlwZS5maW5kT25QYXRoID0gZnVuY3Rpb24gKHBhdGgsIGYpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5maW5kT25QYXRoXyhwYXRoLCBQYXRoLkVtcHR5LCBmKTtcclxuICAgIH07XHJcbiAgICBJbW11dGFibGVUcmVlLnByb3RvdHlwZS5maW5kT25QYXRoXyA9IGZ1bmN0aW9uIChwYXRoVG9Gb2xsb3csIHBhdGhTb0ZhciwgZikge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLnZhbHVlID8gZihwYXRoU29GYXIsIHRoaXMudmFsdWUpIDogZmFsc2U7XHJcbiAgICAgICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHBhdGhUb0ZvbGxvdy5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIGZyb250ID0gcGF0aFRvRm9sbG93LmdldEZyb250KCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbmV4dENoaWxkID0gdGhpcy5jaGlsZHJlbi5nZXQoZnJvbnQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5leHRDaGlsZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXh0Q2hpbGQuZmluZE9uUGF0aF8ocGF0aFRvRm9sbG93LnBvcEZyb250KCksIHBhdGhTb0Zhci5jaGlsZChmcm9udCksIGYpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gcGF0aFxyXG4gICAgICogQHBhcmFtIHshZnVuY3Rpb24oIVBhdGgsICFUKX0gZlxyXG4gICAgICogQHJldHVybnMgeyFJbW11dGFibGVUcmVlLjxUPn1cclxuICAgICAqL1xyXG4gICAgSW1tdXRhYmxlVHJlZS5wcm90b3R5cGUuZm9yZWFjaE9uUGF0aCA9IGZ1bmN0aW9uIChwYXRoLCBmKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9yZWFjaE9uUGF0aF8ocGF0aCwgUGF0aC5FbXB0eSwgZik7XHJcbiAgICB9O1xyXG4gICAgSW1tdXRhYmxlVHJlZS5wcm90b3R5cGUuZm9yZWFjaE9uUGF0aF8gPSBmdW5jdGlvbiAocGF0aFRvRm9sbG93LCBjdXJyZW50UmVsYXRpdmVQYXRoLCBmKSB7XHJcbiAgICAgICAgaWYgKHBhdGhUb0ZvbGxvdy5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgZihjdXJyZW50UmVsYXRpdmVQYXRoLCB0aGlzLnZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgZnJvbnQgPSBwYXRoVG9Gb2xsb3cuZ2V0RnJvbnQoKTtcclxuICAgICAgICAgICAgdmFyIG5leHRDaGlsZCA9IHRoaXMuY2hpbGRyZW4uZ2V0KGZyb250KTtcclxuICAgICAgICAgICAgaWYgKG5leHRDaGlsZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5leHRDaGlsZC5mb3JlYWNoT25QYXRoXyhwYXRoVG9Gb2xsb3cucG9wRnJvbnQoKSwgY3VycmVudFJlbGF0aXZlUGF0aC5jaGlsZChmcm9udCksIGYpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEltbXV0YWJsZVRyZWUuRW1wdHk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxscyB0aGUgZ2l2ZW4gZnVuY3Rpb24gZm9yIGVhY2ggbm9kZSBpbiB0aGUgdHJlZSB0aGF0IGhhcyBhIHZhbHVlLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oIVBhdGgsICFUKX0gZiBBIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aXRoXHJcbiAgICAgKiAgIHRoZSBwYXRoIGZyb20gdGhlIHJvb3Qgb2YgdGhlIHRyZWUgdG8gYSBub2RlLCBhbmQgdGhlIHZhbHVlIGF0IHRoYXQgbm9kZS5cclxuICAgICAqICAgQ2FsbGVkIGluIGRlcHRoLWZpcnN0IG9yZGVyLlxyXG4gICAgICovXHJcbiAgICBJbW11dGFibGVUcmVlLnByb3RvdHlwZS5mb3JlYWNoID0gZnVuY3Rpb24gKGYpIHtcclxuICAgICAgICB0aGlzLmZvcmVhY2hfKFBhdGguRW1wdHksIGYpO1xyXG4gICAgfTtcclxuICAgIEltbXV0YWJsZVRyZWUucHJvdG90eXBlLmZvcmVhY2hfID0gZnVuY3Rpb24gKGN1cnJlbnRSZWxhdGl2ZVBhdGgsIGYpIHtcclxuICAgICAgICB0aGlzLmNoaWxkcmVuLmlub3JkZXJUcmF2ZXJzYWwoZnVuY3Rpb24gKGNoaWxkTmFtZSwgY2hpbGRUcmVlKSB7XHJcbiAgICAgICAgICAgIGNoaWxkVHJlZS5mb3JlYWNoXyhjdXJyZW50UmVsYXRpdmVQYXRoLmNoaWxkKGNoaWxkTmFtZSksIGYpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmICh0aGlzLnZhbHVlKSB7XHJcbiAgICAgICAgICAgIGYoY3VycmVudFJlbGF0aXZlUGF0aCwgdGhpcy52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oc3RyaW5nLCAhVCl9IGZcclxuICAgICAqL1xyXG4gICAgSW1tdXRhYmxlVHJlZS5wcm90b3R5cGUuZm9yZWFjaENoaWxkID0gZnVuY3Rpb24gKGYpIHtcclxuICAgICAgICB0aGlzLmNoaWxkcmVuLmlub3JkZXJUcmF2ZXJzYWwoZnVuY3Rpb24gKGNoaWxkTmFtZSwgY2hpbGRUcmVlKSB7XHJcbiAgICAgICAgICAgIGlmIChjaGlsZFRyZWUudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGYoY2hpbGROYW1lLCBjaGlsZFRyZWUudmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgIEltbXV0YWJsZVRyZWUuRW1wdHkgPSBuZXcgSW1tdXRhYmxlVHJlZShudWxsKTtcclxuICAgIHJldHVybiBJbW11dGFibGVUcmVlO1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQHBhcmFtIHshT3BlcmF0aW9uU291cmNlfSBzb3VyY2VcclxuICogQHBhcmFtIHshUGF0aH0gcGF0aFxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQGltcGxlbWVudHMge09wZXJhdGlvbn1cclxuICovXHJcbnZhciBMaXN0ZW5Db21wbGV0ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIExpc3RlbkNvbXBsZXRlKHNvdXJjZSwgcGF0aCkge1xyXG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xyXG4gICAgICAgIHRoaXMucGF0aCA9IHBhdGg7XHJcbiAgICAgICAgLyoqIEBpbmhlcml0RG9jICovXHJcbiAgICAgICAgdGhpcy50eXBlID0gT3BlcmF0aW9uVHlwZS5MSVNURU5fQ09NUExFVEU7XHJcbiAgICB9XHJcbiAgICBMaXN0ZW5Db21wbGV0ZS5wcm90b3R5cGUub3BlcmF0aW9uRm9yQ2hpbGQgPSBmdW5jdGlvbiAoY2hpbGROYW1lKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucGF0aC5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBMaXN0ZW5Db21wbGV0ZSh0aGlzLnNvdXJjZSwgUGF0aC5FbXB0eSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IExpc3RlbkNvbXBsZXRlKHRoaXMuc291cmNlLCB0aGlzLnBhdGgucG9wRnJvbnQoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBMaXN0ZW5Db21wbGV0ZTtcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEBwYXJhbSB7IU9wZXJhdGlvblNvdXJjZX0gc291cmNlXHJcbiAqIEBwYXJhbSB7IVBhdGh9IHBhdGhcclxuICogQHBhcmFtIHshTm9kZX0gc25hcFxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQGltcGxlbWVudHMge09wZXJhdGlvbn1cclxuICovXHJcbnZhciBPdmVyd3JpdGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBPdmVyd3JpdGUoc291cmNlLCBwYXRoLCBzbmFwKSB7XHJcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XHJcbiAgICAgICAgdGhpcy5wYXRoID0gcGF0aDtcclxuICAgICAgICB0aGlzLnNuYXAgPSBzbmFwO1xyXG4gICAgICAgIC8qKiBAaW5oZXJpdERvYyAqL1xyXG4gICAgICAgIHRoaXMudHlwZSA9IE9wZXJhdGlvblR5cGUuT1ZFUldSSVRFO1xyXG4gICAgfVxyXG4gICAgT3ZlcndyaXRlLnByb3RvdHlwZS5vcGVyYXRpb25Gb3JDaGlsZCA9IGZ1bmN0aW9uIChjaGlsZE5hbWUpIHtcclxuICAgICAgICBpZiAodGhpcy5wYXRoLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IE92ZXJ3cml0ZSh0aGlzLnNvdXJjZSwgUGF0aC5FbXB0eSwgdGhpcy5zbmFwLmdldEltbWVkaWF0ZUNoaWxkKGNoaWxkTmFtZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBPdmVyd3JpdGUodGhpcy5zb3VyY2UsIHRoaXMucGF0aC5wb3BGcm9udCgpLCB0aGlzLnNuYXApO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gT3ZlcndyaXRlO1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQHBhcmFtIHshT3BlcmF0aW9uU291cmNlfSBzb3VyY2VcclxuICogQHBhcmFtIHshUGF0aH0gcGF0aFxyXG4gKiBAcGFyYW0geyFJbW11dGFibGVUcmVlLjwhTm9kZT59IGNoaWxkcmVuXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAaW1wbGVtZW50cyB7T3BlcmF0aW9ufVxyXG4gKi9cclxudmFyIE1lcmdlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTWVyZ2UoXHJcbiAgICAvKiogQGluaGVyaXREb2MgKi8gc291cmNlLCBcclxuICAgIC8qKiBAaW5oZXJpdERvYyAqLyBwYXRoLCBcclxuICAgIC8qKiBAaW5oZXJpdERvYyAqLyBjaGlsZHJlbikge1xyXG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xyXG4gICAgICAgIHRoaXMucGF0aCA9IHBhdGg7XHJcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xyXG4gICAgICAgIC8qKiBAaW5oZXJpdERvYyAqL1xyXG4gICAgICAgIHRoaXMudHlwZSA9IE9wZXJhdGlvblR5cGUuTUVSR0U7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIE1lcmdlLnByb3RvdHlwZS5vcGVyYXRpb25Gb3JDaGlsZCA9IGZ1bmN0aW9uIChjaGlsZE5hbWUpIHtcclxuICAgICAgICBpZiAodGhpcy5wYXRoLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICB2YXIgY2hpbGRUcmVlID0gdGhpcy5jaGlsZHJlbi5zdWJ0cmVlKG5ldyBQYXRoKGNoaWxkTmFtZSkpO1xyXG4gICAgICAgICAgICBpZiAoY2hpbGRUcmVlLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBjaGlsZCBpcyB1bmFmZmVjdGVkXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjaGlsZFRyZWUudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIC8vIFdlIGhhdmUgYSBzbmFwc2hvdCBmb3IgdGhlIGNoaWxkIGluIHF1ZXN0aW9uLiAgVGhpcyBiZWNvbWVzIGFuIG92ZXJ3cml0ZSBvZiB0aGUgY2hpbGQuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IE92ZXJ3cml0ZSh0aGlzLnNvdXJjZSwgUGF0aC5FbXB0eSwgY2hpbGRUcmVlLnZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBtZXJnZSBhdCBhIGRlZXBlciBsZXZlbFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBNZXJnZSh0aGlzLnNvdXJjZSwgUGF0aC5FbXB0eSwgY2hpbGRUcmVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgYXNzZXJ0KHRoaXMucGF0aC5nZXRGcm9udCgpID09PSBjaGlsZE5hbWUsIFwiQ2FuJ3QgZ2V0IGEgbWVyZ2UgZm9yIGEgY2hpbGQgbm90IG9uIHRoZSBwYXRoIG9mIHRoZSBvcGVyYXRpb25cIik7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgTWVyZ2UodGhpcy5zb3VyY2UsIHRoaXMucGF0aC5wb3BGcm9udCgpLCB0aGlzLmNoaWxkcmVuKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBNZXJnZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICgnT3BlcmF0aW9uKCcgK1xyXG4gICAgICAgICAgICB0aGlzLnBhdGggK1xyXG4gICAgICAgICAgICAnOiAnICtcclxuICAgICAgICAgICAgdGhpcy5zb3VyY2UudG9TdHJpbmcoKSArXHJcbiAgICAgICAgICAgICcgbWVyZ2U6ICcgK1xyXG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnRvU3RyaW5nKCkgK1xyXG4gICAgICAgICAgICAnKScpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBNZXJnZTtcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEEgY2FjaGUgbm9kZSBvbmx5IHN0b3JlcyBjb21wbGV0ZSBjaGlsZHJlbi4gQWRkaXRpb25hbGx5IGl0IGhvbGRzIGEgZmxhZyB3aGV0aGVyIHRoZSBub2RlIGNhbiBiZSBjb25zaWRlcmVkIGZ1bGx5XHJcbiAqIGluaXRpYWxpemVkIGluIHRoZSBzZW5zZSB0aGF0IHdlIGtub3cgYXQgb25lIHBvaW50IGluIHRpbWUgdGhpcyByZXByZXNlbnRlZCBhIHZhbGlkIHN0YXRlIG9mIHRoZSB3b3JsZCwgZS5nLlxyXG4gKiBpbml0aWFsaXplZCB3aXRoIGRhdGEgZnJvbSB0aGUgc2VydmVyLCBvciBhIGNvbXBsZXRlIG92ZXJ3cml0ZSBieSB0aGUgY2xpZW50LiBUaGUgZmlsdGVyZWQgZmxhZyBhbHNvIHRyYWNrc1xyXG4gKiB3aGV0aGVyIGEgbm9kZSBwb3RlbnRpYWxseSBoYWQgY2hpbGRyZW4gcmVtb3ZlZCBkdWUgdG8gYSBmaWx0ZXIuXHJcbiAqL1xyXG52YXIgQ2FjaGVOb2RlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFOb2RlfSBub2RlX1xyXG4gICAgICogQHBhcmFtIHtib29sZWFufSBmdWxseUluaXRpYWxpemVkX1xyXG4gICAgICogQHBhcmFtIHtib29sZWFufSBmaWx0ZXJlZF9cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gQ2FjaGVOb2RlKG5vZGVfLCBmdWxseUluaXRpYWxpemVkXywgZmlsdGVyZWRfKSB7XHJcbiAgICAgICAgdGhpcy5ub2RlXyA9IG5vZGVfO1xyXG4gICAgICAgIHRoaXMuZnVsbHlJbml0aWFsaXplZF8gPSBmdWxseUluaXRpYWxpemVkXztcclxuICAgICAgICB0aGlzLmZpbHRlcmVkXyA9IGZpbHRlcmVkXztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRoaXMgbm9kZSB3YXMgZnVsbHkgaW5pdGlhbGl6ZWQgd2l0aCBlaXRoZXIgc2VydmVyIGRhdGEgb3IgYSBjb21wbGV0ZSBvdmVyd3JpdGUgYnkgdGhlIGNsaWVudFxyXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgQ2FjaGVOb2RlLnByb3RvdHlwZS5pc0Z1bGx5SW5pdGlhbGl6ZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZnVsbHlJbml0aWFsaXplZF87XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBub2RlIGlzIHBvdGVudGlhbGx5IG1pc3NpbmcgY2hpbGRyZW4gZHVlIHRvIGEgZmlsdGVyIGFwcGxpZWQgdG8gdGhlIG5vZGVcclxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIENhY2hlTm9kZS5wcm90b3R5cGUuaXNGaWx0ZXJlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXJlZF87XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFQYXRofSBwYXRoXHJcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBDYWNoZU5vZGUucHJvdG90eXBlLmlzQ29tcGxldGVGb3JQYXRoID0gZnVuY3Rpb24gKHBhdGgpIHtcclxuICAgICAgICBpZiAocGF0aC5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNGdWxseUluaXRpYWxpemVkKCkgJiYgIXRoaXMuZmlsdGVyZWRfO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgY2hpbGRLZXkgPSBwYXRoLmdldEZyb250KCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNDb21wbGV0ZUZvckNoaWxkKGNoaWxkS2V5KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IXN0cmluZ30ga2V5XHJcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBDYWNoZU5vZGUucHJvdG90eXBlLmlzQ29tcGxldGVGb3JDaGlsZCA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICByZXR1cm4gKCh0aGlzLmlzRnVsbHlJbml0aWFsaXplZCgpICYmICF0aGlzLmZpbHRlcmVkXykgfHwgdGhpcy5ub2RlXy5oYXNDaGlsZChrZXkpKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4geyFOb2RlfVxyXG4gICAgICovXHJcbiAgICBDYWNoZU5vZGUucHJvdG90eXBlLmdldE5vZGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZV87XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIENhY2hlTm9kZTtcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFN0b3JlcyB0aGUgZGF0YSB3ZSBoYXZlIGNhY2hlZCBmb3IgYSB2aWV3LlxyXG4gKlxyXG4gKiBzZXJ2ZXJTbmFwIGlzIHRoZSBjYWNoZWQgc2VydmVyIGRhdGEsIGV2ZW50U25hcCBpcyB0aGUgY2FjaGVkIGV2ZW50IGRhdGEgKHNlcnZlciBkYXRhIHBsdXMgYW55IGxvY2FsIHdyaXRlcykuXHJcbiAqXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxudmFyIFZpZXdDYWNoZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IUNhY2hlTm9kZX0gZXZlbnRDYWNoZV9cclxuICAgICAqIEBwYXJhbSB7IUNhY2hlTm9kZX0gc2VydmVyQ2FjaGVfXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIFZpZXdDYWNoZShldmVudENhY2hlXywgc2VydmVyQ2FjaGVfKSB7XHJcbiAgICAgICAgdGhpcy5ldmVudENhY2hlXyA9IGV2ZW50Q2FjaGVfO1xyXG4gICAgICAgIHRoaXMuc2VydmVyQ2FjaGVfID0gc2VydmVyQ2FjaGVfO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFOb2RlfSBldmVudFNuYXBcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gY29tcGxldGVcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gZmlsdGVyZWRcclxuICAgICAqIEByZXR1cm4geyFWaWV3Q2FjaGV9XHJcbiAgICAgKi9cclxuICAgIFZpZXdDYWNoZS5wcm90b3R5cGUudXBkYXRlRXZlbnRTbmFwID0gZnVuY3Rpb24gKGV2ZW50U25hcCwgY29tcGxldGUsIGZpbHRlcmVkKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBWaWV3Q2FjaGUobmV3IENhY2hlTm9kZShldmVudFNuYXAsIGNvbXBsZXRlLCBmaWx0ZXJlZCksIHRoaXMuc2VydmVyQ2FjaGVfKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IU5vZGV9IHNlcnZlclNuYXBcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gY29tcGxldGVcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gZmlsdGVyZWRcclxuICAgICAqIEByZXR1cm4geyFWaWV3Q2FjaGV9XHJcbiAgICAgKi9cclxuICAgIFZpZXdDYWNoZS5wcm90b3R5cGUudXBkYXRlU2VydmVyU25hcCA9IGZ1bmN0aW9uIChzZXJ2ZXJTbmFwLCBjb21wbGV0ZSwgZmlsdGVyZWQpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFZpZXdDYWNoZSh0aGlzLmV2ZW50Q2FjaGVfLCBuZXcgQ2FjaGVOb2RlKHNlcnZlclNuYXAsIGNvbXBsZXRlLCBmaWx0ZXJlZCkpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7IUNhY2hlTm9kZX1cclxuICAgICAqL1xyXG4gICAgVmlld0NhY2hlLnByb3RvdHlwZS5nZXRFdmVudENhY2hlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmV2ZW50Q2FjaGVfO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7P05vZGV9XHJcbiAgICAgKi9cclxuICAgIFZpZXdDYWNoZS5wcm90b3R5cGUuZ2V0Q29tcGxldGVFdmVudFNuYXAgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZXZlbnRDYWNoZV8uaXNGdWxseUluaXRpYWxpemVkKClcclxuICAgICAgICAgICAgPyB0aGlzLmV2ZW50Q2FjaGVfLmdldE5vZGUoKVxyXG4gICAgICAgICAgICA6IG51bGw7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHshQ2FjaGVOb2RlfVxyXG4gICAgICovXHJcbiAgICBWaWV3Q2FjaGUucHJvdG90eXBlLmdldFNlcnZlckNhY2hlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlcnZlckNhY2hlXztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4gez9Ob2RlfVxyXG4gICAgICovXHJcbiAgICBWaWV3Q2FjaGUucHJvdG90eXBlLmdldENvbXBsZXRlU2VydmVyU25hcCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZXJ2ZXJDYWNoZV8uaXNGdWxseUluaXRpYWxpemVkKClcclxuICAgICAgICAgICAgPyB0aGlzLnNlcnZlckNhY2hlXy5nZXROb2RlKClcclxuICAgICAgICAgICAgOiBudWxsO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGNvbnN0XHJcbiAgICAgKiBAdHlwZSB7Vmlld0NhY2hlfVxyXG4gICAgICovXHJcbiAgICBWaWV3Q2FjaGUuRW1wdHkgPSBuZXcgVmlld0NhY2hlKG5ldyBDYWNoZU5vZGUoQ2hpbGRyZW5Ob2RlLkVNUFRZX05PREUsIFxyXG4gICAgLypmdWxseUluaXRpYWxpemVkPSovIGZhbHNlLCBcclxuICAgIC8qZmlsdGVyZWQ9Ki8gZmFsc2UpLCBuZXcgQ2FjaGVOb2RlKENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFLCBcclxuICAgIC8qZnVsbHlJbml0aWFsaXplZD0qLyBmYWxzZSwgXHJcbiAgICAvKmZpbHRlcmVkPSovIGZhbHNlKSk7XHJcbiAgICByZXR1cm4gVmlld0NhY2hlO1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBzdHJ1Y3RcclxuICogQHBhcmFtIHshc3RyaW5nfSB0eXBlIFRoZSBldmVudCB0eXBlXHJcbiAqIEBwYXJhbSB7IU5vZGV9IHNuYXBzaG90Tm9kZSBUaGUgZGF0YVxyXG4gKiBAcGFyYW0ge3N0cmluZz19IGNoaWxkTmFtZSBUaGUgbmFtZSBmb3IgdGhpcyBjaGlsZCwgaWYgaXQncyBhIGNoaWxkIGV2ZW50XHJcbiAqIEBwYXJhbSB7Tm9kZT19IG9sZFNuYXAgVXNlZCBmb3IgaW50ZXJtZWRpYXRlIHByb2Nlc3Npbmcgb2YgY2hpbGQgY2hhbmdlZCBldmVudHNcclxuICogQHBhcmFtIHtzdHJpbmc9fSBwcmV2TmFtZSBUaGUgbmFtZSBmb3IgdGhlIHByZXZpb3VzIGNoaWxkLCBpZiBhcHBsaWNhYmxlXHJcbiAqL1xyXG52YXIgQ2hhbmdlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQ2hhbmdlKHR5cGUsIHNuYXBzaG90Tm9kZSwgY2hpbGROYW1lLCBvbGRTbmFwLCBwcmV2TmFtZSkge1xyXG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcbiAgICAgICAgdGhpcy5zbmFwc2hvdE5vZGUgPSBzbmFwc2hvdE5vZGU7XHJcbiAgICAgICAgdGhpcy5jaGlsZE5hbWUgPSBjaGlsZE5hbWU7XHJcbiAgICAgICAgdGhpcy5vbGRTbmFwID0gb2xkU25hcDtcclxuICAgICAgICB0aGlzLnByZXZOYW1lID0gcHJldk5hbWU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IU5vZGV9IHNuYXBzaG90XHJcbiAgICAgKiBAcmV0dXJuIHshQ2hhbmdlfVxyXG4gICAgICovXHJcbiAgICBDaGFuZ2UudmFsdWVDaGFuZ2UgPSBmdW5jdGlvbiAoc25hcHNob3QpIHtcclxuICAgICAgICByZXR1cm4gbmV3IENoYW5nZShDaGFuZ2UuVkFMVUUsIHNuYXBzaG90KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjaGlsZEtleVxyXG4gICAgICogQHBhcmFtIHshTm9kZX0gc25hcHNob3RcclxuICAgICAqIEByZXR1cm4geyFDaGFuZ2V9XHJcbiAgICAgKi9cclxuICAgIENoYW5nZS5jaGlsZEFkZGVkQ2hhbmdlID0gZnVuY3Rpb24gKGNoaWxkS2V5LCBzbmFwc2hvdCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgQ2hhbmdlKENoYW5nZS5DSElMRF9BRERFRCwgc25hcHNob3QsIGNoaWxkS2V5KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjaGlsZEtleVxyXG4gICAgICogQHBhcmFtIHshTm9kZX0gc25hcHNob3RcclxuICAgICAqIEByZXR1cm4geyFDaGFuZ2V9XHJcbiAgICAgKi9cclxuICAgIENoYW5nZS5jaGlsZFJlbW92ZWRDaGFuZ2UgPSBmdW5jdGlvbiAoY2hpbGRLZXksIHNuYXBzaG90KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDaGFuZ2UoQ2hhbmdlLkNISUxEX1JFTU9WRUQsIHNuYXBzaG90LCBjaGlsZEtleSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2hpbGRLZXlcclxuICAgICAqIEBwYXJhbSB7IU5vZGV9IG5ld1NuYXBzaG90XHJcbiAgICAgKiBAcGFyYW0geyFOb2RlfSBvbGRTbmFwc2hvdFxyXG4gICAgICogQHJldHVybiB7IUNoYW5nZX1cclxuICAgICAqL1xyXG4gICAgQ2hhbmdlLmNoaWxkQ2hhbmdlZENoYW5nZSA9IGZ1bmN0aW9uIChjaGlsZEtleSwgbmV3U25hcHNob3QsIG9sZFNuYXBzaG90KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDaGFuZ2UoQ2hhbmdlLkNISUxEX0NIQU5HRUQsIG5ld1NuYXBzaG90LCBjaGlsZEtleSwgb2xkU25hcHNob3QpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNoaWxkS2V5XHJcbiAgICAgKiBAcGFyYW0geyFOb2RlfSBzbmFwc2hvdFxyXG4gICAgICogQHJldHVybiB7IUNoYW5nZX1cclxuICAgICAqL1xyXG4gICAgQ2hhbmdlLmNoaWxkTW92ZWRDaGFuZ2UgPSBmdW5jdGlvbiAoY2hpbGRLZXksIHNuYXBzaG90KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDaGFuZ2UoQ2hhbmdlLkNISUxEX01PVkVELCBzbmFwc2hvdCwgY2hpbGRLZXkpO1xyXG4gICAgfTtcclxuICAgIC8vZXZlbnQgdHlwZXNcclxuICAgIC8qKiBFdmVudCB0eXBlIGZvciBhIGNoaWxkIGFkZGVkICovXHJcbiAgICBDaGFuZ2UuQ0hJTERfQURERUQgPSAnY2hpbGRfYWRkZWQnO1xyXG4gICAgLyoqIEV2ZW50IHR5cGUgZm9yIGEgY2hpbGQgcmVtb3ZlZCAqL1xyXG4gICAgQ2hhbmdlLkNISUxEX1JFTU9WRUQgPSAnY2hpbGRfcmVtb3ZlZCc7XHJcbiAgICAvKiogRXZlbnQgdHlwZSBmb3IgYSBjaGlsZCBjaGFuZ2VkICovXHJcbiAgICBDaGFuZ2UuQ0hJTERfQ0hBTkdFRCA9ICdjaGlsZF9jaGFuZ2VkJztcclxuICAgIC8qKiBFdmVudCB0eXBlIGZvciBhIGNoaWxkIG1vdmVkICovXHJcbiAgICBDaGFuZ2UuQ0hJTERfTU9WRUQgPSAnY2hpbGRfbW92ZWQnO1xyXG4gICAgLyoqIEV2ZW50IHR5cGUgZm9yIGEgdmFsdWUgY2hhbmdlICovXHJcbiAgICBDaGFuZ2UuVkFMVUUgPSAndmFsdWUnO1xyXG4gICAgcmV0dXJuIENoYW5nZTtcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIERvZXNuJ3QgcmVhbGx5IGZpbHRlciBub2RlcyBidXQgYXBwbGllcyBhbiBpbmRleCB0byB0aGUgbm9kZSBhbmQga2VlcHMgdHJhY2sgb2YgYW55IGNoYW5nZXNcclxuICpcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBpbXBsZW1lbnRzIHtOb2RlRmlsdGVyfVxyXG4gKiBAcGFyYW0geyFJbmRleH0gaW5kZXhcclxuICovXHJcbnZhciBJbmRleGVkRmlsdGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gSW5kZXhlZEZpbHRlcihpbmRleF8pIHtcclxuICAgICAgICB0aGlzLmluZGV4XyA9IGluZGV4XztcclxuICAgIH1cclxuICAgIEluZGV4ZWRGaWx0ZXIucHJvdG90eXBlLnVwZGF0ZUNoaWxkID0gZnVuY3Rpb24gKHNuYXAsIGtleSwgbmV3Q2hpbGQsIGFmZmVjdGVkUGF0aCwgc291cmNlLCBvcHRDaGFuZ2VBY2N1bXVsYXRvcikge1xyXG4gICAgICAgIGFzc2VydChzbmFwLmlzSW5kZXhlZCh0aGlzLmluZGV4XyksICdBIG5vZGUgbXVzdCBiZSBpbmRleGVkIGlmIG9ubHkgYSBjaGlsZCBpcyB1cGRhdGVkJyk7XHJcbiAgICAgICAgdmFyIG9sZENoaWxkID0gc25hcC5nZXRJbW1lZGlhdGVDaGlsZChrZXkpO1xyXG4gICAgICAgIC8vIENoZWNrIGlmIGFueXRoaW5nIGFjdHVhbGx5IGNoYW5nZWQuXHJcbiAgICAgICAgaWYgKG9sZENoaWxkLmdldENoaWxkKGFmZmVjdGVkUGF0aCkuZXF1YWxzKG5ld0NoaWxkLmdldENoaWxkKGFmZmVjdGVkUGF0aCkpKSB7XHJcbiAgICAgICAgICAgIC8vIFRoZXJlJ3MgYW4gZWRnZSBjYXNlIHdoZXJlIGEgY2hpbGQgY2FuIGVudGVyIG9yIGxlYXZlIHRoZSB2aWV3IGJlY2F1c2UgYWZmZWN0ZWRQYXRoIHdhcyBzZXQgdG8gbnVsbC5cclxuICAgICAgICAgICAgLy8gSW4gdGhpcyBjYXNlLCBhZmZlY3RlZFBhdGggd2lsbCBhcHBlYXIgbnVsbCBpbiBib3RoIHRoZSBvbGQgYW5kIG5ldyBzbmFwc2hvdHMuICBTbyB3ZSBuZWVkXHJcbiAgICAgICAgICAgIC8vIHRvIGF2b2lkIHRyZWF0aW5nIHRoZXNlIGNhc2VzIGFzIFwibm90aGluZyBjaGFuZ2VkLlwiXHJcbiAgICAgICAgICAgIGlmIChvbGRDaGlsZC5pc0VtcHR5KCkgPT09IG5ld0NoaWxkLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gTm90aGluZyBjaGFuZ2VkLlxyXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBhc3NlcnQgc2hvdWxkIGJlIHZhbGlkLCBidXQgaXQncyBleHBlbnNpdmUgKGNhbiBkb21pbmF0ZSBwZXJmIHRlc3RpbmcpIHNvIGRvbid0IGFjdHVhbGx5IGRvIGl0LlxyXG4gICAgICAgICAgICAgICAgLy9hc3NlcnQob2xkQ2hpbGQuZXF1YWxzKG5ld0NoaWxkKSwgJ09sZCBhbmQgbmV3IHNuYXBzaG90cyBzaG91bGQgYmUgZXF1YWwuJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc25hcDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0Q2hhbmdlQWNjdW11bGF0b3IgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpZiAobmV3Q2hpbGQuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc25hcC5oYXNDaGlsZChrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0Q2hhbmdlQWNjdW11bGF0b3IudHJhY2tDaGlsZENoYW5nZShDaGFuZ2UuY2hpbGRSZW1vdmVkQ2hhbmdlKGtleSwgb2xkQ2hpbGQpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGFzc2VydChzbmFwLmlzTGVhZk5vZGUoKSwgJ0EgY2hpbGQgcmVtb3ZlIHdpdGhvdXQgYW4gb2xkIGNoaWxkIG9ubHkgbWFrZXMgc2Vuc2Ugb24gYSBsZWFmIG5vZGUnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChvbGRDaGlsZC5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgICAgIG9wdENoYW5nZUFjY3VtdWxhdG9yLnRyYWNrQ2hpbGRDaGFuZ2UoQ2hhbmdlLmNoaWxkQWRkZWRDaGFuZ2Uoa2V5LCBuZXdDaGlsZCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgb3B0Q2hhbmdlQWNjdW11bGF0b3IudHJhY2tDaGlsZENoYW5nZShDaGFuZ2UuY2hpbGRDaGFuZ2VkQ2hhbmdlKGtleSwgbmV3Q2hpbGQsIG9sZENoaWxkKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHNuYXAuaXNMZWFmTm9kZSgpICYmIG5ld0NoaWxkLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gc25hcDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgbm9kZSBpcyBpbmRleGVkXHJcbiAgICAgICAgICAgIHJldHVybiBzbmFwLnVwZGF0ZUltbWVkaWF0ZUNoaWxkKGtleSwgbmV3Q2hpbGQpLndpdGhJbmRleCh0aGlzLmluZGV4Xyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgSW5kZXhlZEZpbHRlci5wcm90b3R5cGUudXBkYXRlRnVsbE5vZGUgPSBmdW5jdGlvbiAob2xkU25hcCwgbmV3U25hcCwgb3B0Q2hhbmdlQWNjdW11bGF0b3IpIHtcclxuICAgICAgICBpZiAob3B0Q2hhbmdlQWNjdW11bGF0b3IgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpZiAoIW9sZFNuYXAuaXNMZWFmTm9kZSgpKSB7XHJcbiAgICAgICAgICAgICAgICBvbGRTbmFwLmZvckVhY2hDaGlsZChQUklPUklUWV9JTkRFWCwgZnVuY3Rpb24gKGtleSwgY2hpbGROb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFuZXdTbmFwLmhhc0NoaWxkKGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0Q2hhbmdlQWNjdW11bGF0b3IudHJhY2tDaGlsZENoYW5nZShDaGFuZ2UuY2hpbGRSZW1vdmVkQ2hhbmdlKGtleSwgY2hpbGROb2RlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFuZXdTbmFwLmlzTGVhZk5vZGUoKSkge1xyXG4gICAgICAgICAgICAgICAgbmV3U25hcC5mb3JFYWNoQ2hpbGQoUFJJT1JJVFlfSU5ERVgsIGZ1bmN0aW9uIChrZXksIGNoaWxkTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvbGRTbmFwLmhhc0NoaWxkKGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9sZENoaWxkID0gb2xkU25hcC5nZXRJbW1lZGlhdGVDaGlsZChrZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW9sZENoaWxkLmVxdWFscyhjaGlsZE5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRDaGFuZ2VBY2N1bXVsYXRvci50cmFja0NoaWxkQ2hhbmdlKENoYW5nZS5jaGlsZENoYW5nZWRDaGFuZ2Uoa2V5LCBjaGlsZE5vZGUsIG9sZENoaWxkKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdENoYW5nZUFjY3VtdWxhdG9yLnRyYWNrQ2hpbGRDaGFuZ2UoQ2hhbmdlLmNoaWxkQWRkZWRDaGFuZ2Uoa2V5LCBjaGlsZE5vZGUpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3U25hcC53aXRoSW5kZXgodGhpcy5pbmRleF8pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgSW5kZXhlZEZpbHRlci5wcm90b3R5cGUudXBkYXRlUHJpb3JpdHkgPSBmdW5jdGlvbiAob2xkU25hcCwgbmV3UHJpb3JpdHkpIHtcclxuICAgICAgICBpZiAob2xkU25hcC5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG9sZFNuYXAudXBkYXRlUHJpb3JpdHkobmV3UHJpb3JpdHkpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIEluZGV4ZWRGaWx0ZXIucHJvdG90eXBlLmZpbHRlcnNOb2RlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBJbmRleGVkRmlsdGVyLnByb3RvdHlwZS5nZXRJbmRleGVkRmlsdGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgSW5kZXhlZEZpbHRlci5wcm90b3R5cGUuZ2V0SW5kZXggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5kZXhfO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBJbmRleGVkRmlsdGVyO1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgQ2hpbGRDaGFuZ2VBY2N1bXVsYXRvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIENoaWxkQ2hhbmdlQWNjdW11bGF0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5jaGFuZ2VNYXAgPSBuZXcgTWFwKCk7XHJcbiAgICB9XHJcbiAgICBDaGlsZENoYW5nZUFjY3VtdWxhdG9yLnByb3RvdHlwZS50cmFja0NoaWxkQ2hhbmdlID0gZnVuY3Rpb24gKGNoYW5nZSkge1xyXG4gICAgICAgIHZhciB0eXBlID0gY2hhbmdlLnR5cGU7XHJcbiAgICAgICAgdmFyIGNoaWxkS2V5ID0gY2hhbmdlLmNoaWxkTmFtZTtcclxuICAgICAgICBhc3NlcnQodHlwZSA9PT0gQ2hhbmdlLkNISUxEX0FEREVEIHx8XHJcbiAgICAgICAgICAgIHR5cGUgPT09IENoYW5nZS5DSElMRF9DSEFOR0VEIHx8XHJcbiAgICAgICAgICAgIHR5cGUgPT09IENoYW5nZS5DSElMRF9SRU1PVkVELCAnT25seSBjaGlsZCBjaGFuZ2VzIHN1cHBvcnRlZCBmb3IgdHJhY2tpbmcnKTtcclxuICAgICAgICBhc3NlcnQoY2hpbGRLZXkgIT09ICcucHJpb3JpdHknLCAnT25seSBub24tcHJpb3JpdHkgY2hpbGQgY2hhbmdlcyBjYW4gYmUgdHJhY2tlZC4nKTtcclxuICAgICAgICB2YXIgb2xkQ2hhbmdlID0gdGhpcy5jaGFuZ2VNYXAuZ2V0KGNoaWxkS2V5KTtcclxuICAgICAgICBpZiAob2xkQ2hhbmdlKSB7XHJcbiAgICAgICAgICAgIHZhciBvbGRUeXBlID0gb2xkQ2hhbmdlLnR5cGU7XHJcbiAgICAgICAgICAgIGlmICh0eXBlID09PSBDaGFuZ2UuQ0hJTERfQURERUQgJiYgb2xkVHlwZSA9PT0gQ2hhbmdlLkNISUxEX1JFTU9WRUQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlTWFwLnNldChjaGlsZEtleSwgQ2hhbmdlLmNoaWxkQ2hhbmdlZENoYW5nZShjaGlsZEtleSwgY2hhbmdlLnNuYXBzaG90Tm9kZSwgb2xkQ2hhbmdlLnNuYXBzaG90Tm9kZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGUgPT09IENoYW5nZS5DSElMRF9SRU1PVkVEICYmXHJcbiAgICAgICAgICAgICAgICBvbGRUeXBlID09PSBDaGFuZ2UuQ0hJTERfQURERUQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlTWFwLmRlbGV0ZShjaGlsZEtleSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZSA9PT0gQ2hhbmdlLkNISUxEX1JFTU9WRUQgJiZcclxuICAgICAgICAgICAgICAgIG9sZFR5cGUgPT09IENoYW5nZS5DSElMRF9DSEFOR0VEKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZU1hcC5zZXQoY2hpbGRLZXksIENoYW5nZS5jaGlsZFJlbW92ZWRDaGFuZ2UoY2hpbGRLZXksIG9sZENoYW5nZS5vbGRTbmFwKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZSA9PT0gQ2hhbmdlLkNISUxEX0NIQU5HRUQgJiZcclxuICAgICAgICAgICAgICAgIG9sZFR5cGUgPT09IENoYW5nZS5DSElMRF9BRERFRCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VNYXAuc2V0KGNoaWxkS2V5LCBDaGFuZ2UuY2hpbGRBZGRlZENoYW5nZShjaGlsZEtleSwgY2hhbmdlLnNuYXBzaG90Tm9kZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGUgPT09IENoYW5nZS5DSElMRF9DSEFOR0VEICYmXHJcbiAgICAgICAgICAgICAgICBvbGRUeXBlID09PSBDaGFuZ2UuQ0hJTERfQ0hBTkdFRCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VNYXAuc2V0KGNoaWxkS2V5LCBDaGFuZ2UuY2hpbGRDaGFuZ2VkQ2hhbmdlKGNoaWxkS2V5LCBjaGFuZ2Uuc25hcHNob3ROb2RlLCBvbGRDaGFuZ2Uub2xkU25hcCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgYXNzZXJ0aW9uRXJyb3IoJ0lsbGVnYWwgY29tYmluYXRpb24gb2YgY2hhbmdlczogJyArXHJcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlICtcclxuICAgICAgICAgICAgICAgICAgICAnIG9jY3VycmVkIGFmdGVyICcgK1xyXG4gICAgICAgICAgICAgICAgICAgIG9sZENoYW5nZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlTWFwLnNldChjaGlsZEtleSwgY2hhbmdlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQ2hpbGRDaGFuZ2VBY2N1bXVsYXRvci5wcm90b3R5cGUuZ2V0Q2hhbmdlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLmNoYW5nZU1hcC52YWx1ZXMoKSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIENoaWxkQ2hhbmdlQWNjdW11bGF0b3I7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBBbiBpbXBsZW1lbnRhdGlvbiBvZiBDb21wbGV0ZUNoaWxkU291cmNlIHRoYXQgbmV2ZXIgcmV0dXJucyBhbnkgYWRkaXRpb25hbCBjaGlsZHJlblxyXG4gKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQGltcGxlbWVudHMgQ29tcGxldGVDaGlsZFNvdXJjZVxyXG4gKi9cclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxyXG52YXIgTm9Db21wbGV0ZUNoaWxkU291cmNlXyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE5vQ29tcGxldGVDaGlsZFNvdXJjZV8oKSB7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIE5vQ29tcGxldGVDaGlsZFNvdXJjZV8ucHJvdG90eXBlLmdldENvbXBsZXRlQ2hpbGQgPSBmdW5jdGlvbiAoY2hpbGRLZXkpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIE5vQ29tcGxldGVDaGlsZFNvdXJjZV8ucHJvdG90eXBlLmdldENoaWxkQWZ0ZXJDaGlsZCA9IGZ1bmN0aW9uIChpbmRleCwgY2hpbGQsIHJldmVyc2UpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gTm9Db21wbGV0ZUNoaWxkU291cmNlXztcclxufSgpKTtcclxuLyoqXHJcbiAqIFNpbmdsZXRvbiBpbnN0YW5jZS5cclxuICogQGNvbnN0XHJcbiAqIEB0eXBlIHshQ29tcGxldGVDaGlsZFNvdXJjZX1cclxuICovXHJcbnZhciBOT19DT01QTEVURV9DSElMRF9TT1VSQ0UgPSBuZXcgTm9Db21wbGV0ZUNoaWxkU291cmNlXygpO1xyXG4vKipcclxuICogQW4gaW1wbGVtZW50YXRpb24gb2YgQ29tcGxldGVDaGlsZFNvdXJjZSB0aGF0IHVzZXMgYSBXcml0ZVRyZWUgaW4gYWRkaXRpb24gdG8gYW55IG90aGVyIHNlcnZlciBkYXRhIG9yXHJcbiAqIG9sZCBldmVudCBjYWNoZXMgYXZhaWxhYmxlIHRvIGNhbGN1bGF0ZSBjb21wbGV0ZSBjaGlsZHJlbi5cclxuICpcclxuICpcclxuICogQGltcGxlbWVudHMgQ29tcGxldGVDaGlsZFNvdXJjZVxyXG4gKi9cclxudmFyIFdyaXRlVHJlZUNvbXBsZXRlQ2hpbGRTb3VyY2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IVdyaXRlVHJlZVJlZn0gd3JpdGVzX1xyXG4gICAgICogQHBhcmFtIHshVmlld0NhY2hlfSB2aWV3Q2FjaGVfXHJcbiAgICAgKiBAcGFyYW0gez9Ob2RlfSBvcHRDb21wbGV0ZVNlcnZlckNhY2hlX1xyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBXcml0ZVRyZWVDb21wbGV0ZUNoaWxkU291cmNlKHdyaXRlc18sIHZpZXdDYWNoZV8sIG9wdENvbXBsZXRlU2VydmVyQ2FjaGVfKSB7XHJcbiAgICAgICAgaWYgKG9wdENvbXBsZXRlU2VydmVyQ2FjaGVfID09PSB2b2lkIDApIHsgb3B0Q29tcGxldGVTZXJ2ZXJDYWNoZV8gPSBudWxsOyB9XHJcbiAgICAgICAgdGhpcy53cml0ZXNfID0gd3JpdGVzXztcclxuICAgICAgICB0aGlzLnZpZXdDYWNoZV8gPSB2aWV3Q2FjaGVfO1xyXG4gICAgICAgIHRoaXMub3B0Q29tcGxldGVTZXJ2ZXJDYWNoZV8gPSBvcHRDb21wbGV0ZVNlcnZlckNhY2hlXztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgV3JpdGVUcmVlQ29tcGxldGVDaGlsZFNvdXJjZS5wcm90b3R5cGUuZ2V0Q29tcGxldGVDaGlsZCA9IGZ1bmN0aW9uIChjaGlsZEtleSkge1xyXG4gICAgICAgIHZhciBub2RlID0gdGhpcy52aWV3Q2FjaGVfLmdldEV2ZW50Q2FjaGUoKTtcclxuICAgICAgICBpZiAobm9kZS5pc0NvbXBsZXRlRm9yQ2hpbGQoY2hpbGRLZXkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBub2RlLmdldE5vZGUoKS5nZXRJbW1lZGlhdGVDaGlsZChjaGlsZEtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgc2VydmVyTm9kZSA9IHRoaXMub3B0Q29tcGxldGVTZXJ2ZXJDYWNoZV8gIT0gbnVsbFxyXG4gICAgICAgICAgICAgICAgPyBuZXcgQ2FjaGVOb2RlKHRoaXMub3B0Q29tcGxldGVTZXJ2ZXJDYWNoZV8sIHRydWUsIGZhbHNlKVxyXG4gICAgICAgICAgICAgICAgOiB0aGlzLnZpZXdDYWNoZV8uZ2V0U2VydmVyQ2FjaGUoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMud3JpdGVzXy5jYWxjQ29tcGxldGVDaGlsZChjaGlsZEtleSwgc2VydmVyTm9kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgV3JpdGVUcmVlQ29tcGxldGVDaGlsZFNvdXJjZS5wcm90b3R5cGUuZ2V0Q2hpbGRBZnRlckNoaWxkID0gZnVuY3Rpb24gKGluZGV4LCBjaGlsZCwgcmV2ZXJzZSkge1xyXG4gICAgICAgIHZhciBjb21wbGV0ZVNlcnZlckRhdGEgPSB0aGlzLm9wdENvbXBsZXRlU2VydmVyQ2FjaGVfICE9IG51bGxcclxuICAgICAgICAgICAgPyB0aGlzLm9wdENvbXBsZXRlU2VydmVyQ2FjaGVfXHJcbiAgICAgICAgICAgIDogdGhpcy52aWV3Q2FjaGVfLmdldENvbXBsZXRlU2VydmVyU25hcCgpO1xyXG4gICAgICAgIHZhciBub2RlcyA9IHRoaXMud3JpdGVzXy5jYWxjSW5kZXhlZFNsaWNlKGNvbXBsZXRlU2VydmVyRGF0YSwgY2hpbGQsIDEsIHJldmVyc2UsIGluZGV4KTtcclxuICAgICAgICBpZiAobm9kZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5vZGVzWzBdO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gV3JpdGVUcmVlQ29tcGxldGVDaGlsZFNvdXJjZTtcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAc3RydWN0XHJcbiAqL1xyXG52YXIgUHJvY2Vzc29yUmVzdWx0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFWaWV3Q2FjaGV9IHZpZXdDYWNoZVxyXG4gICAgICogQHBhcmFtIHshQXJyYXkuPCFDaGFuZ2U+fSBjaGFuZ2VzXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIFByb2Nlc3NvclJlc3VsdCh2aWV3Q2FjaGUsIGNoYW5nZXMpIHtcclxuICAgICAgICB0aGlzLnZpZXdDYWNoZSA9IHZpZXdDYWNoZTtcclxuICAgICAgICB0aGlzLmNoYW5nZXMgPSBjaGFuZ2VzO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFByb2Nlc3NvclJlc3VsdDtcclxufSgpKTtcclxuLyoqXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxudmFyIFZpZXdQcm9jZXNzb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IU5vZGVGaWx0ZXJ9IGZpbHRlcl9cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gVmlld1Byb2Nlc3NvcihmaWx0ZXJfKSB7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJfID0gZmlsdGVyXztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshVmlld0NhY2hlfSB2aWV3Q2FjaGVcclxuICAgICAqL1xyXG4gICAgVmlld1Byb2Nlc3Nvci5wcm90b3R5cGUuYXNzZXJ0SW5kZXhlZCA9IGZ1bmN0aW9uICh2aWV3Q2FjaGUpIHtcclxuICAgICAgICBhc3NlcnQodmlld0NhY2hlLmdldEV2ZW50Q2FjaGUoKS5nZXROb2RlKCkuaXNJbmRleGVkKHRoaXMuZmlsdGVyXy5nZXRJbmRleCgpKSwgJ0V2ZW50IHNuYXAgbm90IGluZGV4ZWQnKTtcclxuICAgICAgICBhc3NlcnQodmlld0NhY2hlLmdldFNlcnZlckNhY2hlKCkuZ2V0Tm9kZSgpLmlzSW5kZXhlZCh0aGlzLmZpbHRlcl8uZ2V0SW5kZXgoKSksICdTZXJ2ZXIgc25hcCBub3QgaW5kZXhlZCcpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshVmlld0NhY2hlfSBvbGRWaWV3Q2FjaGVcclxuICAgICAqIEBwYXJhbSB7IU9wZXJhdGlvbn0gb3BlcmF0aW9uXHJcbiAgICAgKiBAcGFyYW0geyFXcml0ZVRyZWVSZWZ9IHdyaXRlc0NhY2hlXHJcbiAgICAgKiBAcGFyYW0gez9Ob2RlfSBjb21wbGV0ZUNhY2hlXHJcbiAgICAgKiBAcmV0dXJuIHshUHJvY2Vzc29yUmVzdWx0fVxyXG4gICAgICovXHJcbiAgICBWaWV3UHJvY2Vzc29yLnByb3RvdHlwZS5hcHBseU9wZXJhdGlvbiA9IGZ1bmN0aW9uIChvbGRWaWV3Q2FjaGUsIG9wZXJhdGlvbiwgd3JpdGVzQ2FjaGUsIGNvbXBsZXRlQ2FjaGUpIHtcclxuICAgICAgICB2YXIgYWNjdW11bGF0b3IgPSBuZXcgQ2hpbGRDaGFuZ2VBY2N1bXVsYXRvcigpO1xyXG4gICAgICAgIHZhciBuZXdWaWV3Q2FjaGUsIGZpbHRlclNlcnZlck5vZGU7XHJcbiAgICAgICAgaWYgKG9wZXJhdGlvbi50eXBlID09PSBPcGVyYXRpb25UeXBlLk9WRVJXUklURSkge1xyXG4gICAgICAgICAgICB2YXIgb3ZlcndyaXRlID0gb3BlcmF0aW9uO1xyXG4gICAgICAgICAgICBpZiAob3ZlcndyaXRlLnNvdXJjZS5mcm9tVXNlcikge1xyXG4gICAgICAgICAgICAgICAgbmV3Vmlld0NhY2hlID0gdGhpcy5hcHBseVVzZXJPdmVyd3JpdGVfKG9sZFZpZXdDYWNoZSwgb3ZlcndyaXRlLnBhdGgsIG92ZXJ3cml0ZS5zbmFwLCB3cml0ZXNDYWNoZSwgY29tcGxldGVDYWNoZSwgYWNjdW11bGF0b3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYXNzZXJ0KG92ZXJ3cml0ZS5zb3VyY2UuZnJvbVNlcnZlciwgJ1Vua25vd24gc291cmNlLicpO1xyXG4gICAgICAgICAgICAgICAgLy8gV2UgZmlsdGVyIHRoZSBub2RlIGlmIGl0J3MgYSB0YWdnZWQgdXBkYXRlIG9yIHRoZSBub2RlIGhhcyBiZWVuIHByZXZpb3VzbHkgZmlsdGVyZWQgIGFuZCB0aGVcclxuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBpcyBub3QgYXQgdGhlIHJvb3QgaW4gd2hpY2ggY2FzZSBpdCBpcyBvayAoYW5kIG5lY2Vzc2FyeSkgdG8gbWFyayB0aGUgbm9kZSB1bmZpbHRlcmVkXHJcbiAgICAgICAgICAgICAgICAvLyBhZ2FpblxyXG4gICAgICAgICAgICAgICAgZmlsdGVyU2VydmVyTm9kZSA9XHJcbiAgICAgICAgICAgICAgICAgICAgb3ZlcndyaXRlLnNvdXJjZS50YWdnZWQgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKG9sZFZpZXdDYWNoZS5nZXRTZXJ2ZXJDYWNoZSgpLmlzRmlsdGVyZWQoKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIW92ZXJ3cml0ZS5wYXRoLmlzRW1wdHkoKSk7XHJcbiAgICAgICAgICAgICAgICBuZXdWaWV3Q2FjaGUgPSB0aGlzLmFwcGx5U2VydmVyT3ZlcndyaXRlXyhvbGRWaWV3Q2FjaGUsIG92ZXJ3cml0ZS5wYXRoLCBvdmVyd3JpdGUuc25hcCwgd3JpdGVzQ2FjaGUsIGNvbXBsZXRlQ2FjaGUsIGZpbHRlclNlcnZlck5vZGUsIGFjY3VtdWxhdG9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChvcGVyYXRpb24udHlwZSA9PT0gT3BlcmF0aW9uVHlwZS5NRVJHRSkge1xyXG4gICAgICAgICAgICB2YXIgbWVyZ2UgPSBvcGVyYXRpb247XHJcbiAgICAgICAgICAgIGlmIChtZXJnZS5zb3VyY2UuZnJvbVVzZXIpIHtcclxuICAgICAgICAgICAgICAgIG5ld1ZpZXdDYWNoZSA9IHRoaXMuYXBwbHlVc2VyTWVyZ2VfKG9sZFZpZXdDYWNoZSwgbWVyZ2UucGF0aCwgbWVyZ2UuY2hpbGRyZW4sIHdyaXRlc0NhY2hlLCBjb21wbGV0ZUNhY2hlLCBhY2N1bXVsYXRvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBhc3NlcnQobWVyZ2Uuc291cmNlLmZyb21TZXJ2ZXIsICdVbmtub3duIHNvdXJjZS4nKTtcclxuICAgICAgICAgICAgICAgIC8vIFdlIGZpbHRlciB0aGUgbm9kZSBpZiBpdCdzIGEgdGFnZ2VkIHVwZGF0ZSBvciB0aGUgbm9kZSBoYXMgYmVlbiBwcmV2aW91c2x5IGZpbHRlcmVkXHJcbiAgICAgICAgICAgICAgICBmaWx0ZXJTZXJ2ZXJOb2RlID1cclxuICAgICAgICAgICAgICAgICAgICBtZXJnZS5zb3VyY2UudGFnZ2VkIHx8IG9sZFZpZXdDYWNoZS5nZXRTZXJ2ZXJDYWNoZSgpLmlzRmlsdGVyZWQoKTtcclxuICAgICAgICAgICAgICAgIG5ld1ZpZXdDYWNoZSA9IHRoaXMuYXBwbHlTZXJ2ZXJNZXJnZV8ob2xkVmlld0NhY2hlLCBtZXJnZS5wYXRoLCBtZXJnZS5jaGlsZHJlbiwgd3JpdGVzQ2FjaGUsIGNvbXBsZXRlQ2FjaGUsIGZpbHRlclNlcnZlck5vZGUsIGFjY3VtdWxhdG9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChvcGVyYXRpb24udHlwZSA9PT0gT3BlcmF0aW9uVHlwZS5BQ0tfVVNFUl9XUklURSkge1xyXG4gICAgICAgICAgICB2YXIgYWNrVXNlcldyaXRlID0gb3BlcmF0aW9uO1xyXG4gICAgICAgICAgICBpZiAoIWFja1VzZXJXcml0ZS5yZXZlcnQpIHtcclxuICAgICAgICAgICAgICAgIG5ld1ZpZXdDYWNoZSA9IHRoaXMuYWNrVXNlcldyaXRlXyhvbGRWaWV3Q2FjaGUsIGFja1VzZXJXcml0ZS5wYXRoLCBhY2tVc2VyV3JpdGUuYWZmZWN0ZWRUcmVlLCB3cml0ZXNDYWNoZSwgY29tcGxldGVDYWNoZSwgYWNjdW11bGF0b3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbmV3Vmlld0NhY2hlID0gdGhpcy5yZXZlcnRVc2VyV3JpdGVfKG9sZFZpZXdDYWNoZSwgYWNrVXNlcldyaXRlLnBhdGgsIHdyaXRlc0NhY2hlLCBjb21wbGV0ZUNhY2hlLCBhY2N1bXVsYXRvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAob3BlcmF0aW9uLnR5cGUgPT09IE9wZXJhdGlvblR5cGUuTElTVEVOX0NPTVBMRVRFKSB7XHJcbiAgICAgICAgICAgIG5ld1ZpZXdDYWNoZSA9IHRoaXMubGlzdGVuQ29tcGxldGVfKG9sZFZpZXdDYWNoZSwgb3BlcmF0aW9uLnBhdGgsIHdyaXRlc0NhY2hlLCBhY2N1bXVsYXRvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBhc3NlcnRpb25FcnJvcignVW5rbm93biBvcGVyYXRpb24gdHlwZTogJyArIG9wZXJhdGlvbi50eXBlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGNoYW5nZXMgPSBhY2N1bXVsYXRvci5nZXRDaGFuZ2VzKCk7XHJcbiAgICAgICAgVmlld1Byb2Nlc3Nvci5tYXliZUFkZFZhbHVlRXZlbnRfKG9sZFZpZXdDYWNoZSwgbmV3Vmlld0NhY2hlLCBjaGFuZ2VzKTtcclxuICAgICAgICByZXR1cm4gbmV3IFByb2Nlc3NvclJlc3VsdChuZXdWaWV3Q2FjaGUsIGNoYW5nZXMpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshVmlld0NhY2hlfSBvbGRWaWV3Q2FjaGVcclxuICAgICAqIEBwYXJhbSB7IVZpZXdDYWNoZX0gbmV3Vmlld0NhY2hlXHJcbiAgICAgKiBAcGFyYW0geyFBcnJheS48IUNoYW5nZT59IGFjY3VtdWxhdG9yXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBWaWV3UHJvY2Vzc29yLm1heWJlQWRkVmFsdWVFdmVudF8gPSBmdW5jdGlvbiAob2xkVmlld0NhY2hlLCBuZXdWaWV3Q2FjaGUsIGFjY3VtdWxhdG9yKSB7XHJcbiAgICAgICAgdmFyIGV2ZW50U25hcCA9IG5ld1ZpZXdDYWNoZS5nZXRFdmVudENhY2hlKCk7XHJcbiAgICAgICAgaWYgKGV2ZW50U25hcC5pc0Z1bGx5SW5pdGlhbGl6ZWQoKSkge1xyXG4gICAgICAgICAgICB2YXIgaXNMZWFmT3JFbXB0eSA9IGV2ZW50U25hcC5nZXROb2RlKCkuaXNMZWFmTm9kZSgpIHx8IGV2ZW50U25hcC5nZXROb2RlKCkuaXNFbXB0eSgpO1xyXG4gICAgICAgICAgICB2YXIgb2xkQ29tcGxldGVTbmFwID0gb2xkVmlld0NhY2hlLmdldENvbXBsZXRlRXZlbnRTbmFwKCk7XHJcbiAgICAgICAgICAgIGlmIChhY2N1bXVsYXRvci5sZW5ndGggPiAwIHx8XHJcbiAgICAgICAgICAgICAgICAhb2xkVmlld0NhY2hlLmdldEV2ZW50Q2FjaGUoKS5pc0Z1bGx5SW5pdGlhbGl6ZWQoKSB8fFxyXG4gICAgICAgICAgICAgICAgKGlzTGVhZk9yRW1wdHkgJiZcclxuICAgICAgICAgICAgICAgICAgICAhZXZlbnRTbmFwLmdldE5vZGUoKS5lcXVhbHMoLyoqIEB0eXBlIHshTm9kZX0gKi8gb2xkQ29tcGxldGVTbmFwKSkgfHxcclxuICAgICAgICAgICAgICAgICFldmVudFNuYXAuZ2V0Tm9kZSgpLmdldFByaW9yaXR5KCkuZXF1YWxzKG9sZENvbXBsZXRlU25hcC5nZXRQcmlvcml0eSgpKSkge1xyXG4gICAgICAgICAgICAgICAgYWNjdW11bGF0b3IucHVzaChDaGFuZ2UudmFsdWVDaGFuZ2UoXHJcbiAgICAgICAgICAgICAgICAvKiogQHR5cGUgeyFOb2RlfSAqLyBuZXdWaWV3Q2FjaGUuZ2V0Q29tcGxldGVFdmVudFNuYXAoKSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshVmlld0NhY2hlfSB2aWV3Q2FjaGVcclxuICAgICAqIEBwYXJhbSB7IVBhdGh9IGNoYW5nZVBhdGhcclxuICAgICAqIEBwYXJhbSB7IVdyaXRlVHJlZVJlZn0gd3JpdGVzQ2FjaGVcclxuICAgICAqIEBwYXJhbSB7IUNvbXBsZXRlQ2hpbGRTb3VyY2V9IHNvdXJjZVxyXG4gICAgICogQHBhcmFtIHshQ2hpbGRDaGFuZ2VBY2N1bXVsYXRvcn0gYWNjdW11bGF0b3JcclxuICAgICAqIEByZXR1cm4geyFWaWV3Q2FjaGV9XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBWaWV3UHJvY2Vzc29yLnByb3RvdHlwZS5nZW5lcmF0ZUV2ZW50Q2FjaGVBZnRlclNlcnZlckV2ZW50XyA9IGZ1bmN0aW9uICh2aWV3Q2FjaGUsIGNoYW5nZVBhdGgsIHdyaXRlc0NhY2hlLCBzb3VyY2UsIGFjY3VtdWxhdG9yKSB7XHJcbiAgICAgICAgdmFyIG9sZEV2ZW50U25hcCA9IHZpZXdDYWNoZS5nZXRFdmVudENhY2hlKCk7XHJcbiAgICAgICAgaWYgKHdyaXRlc0NhY2hlLnNoYWRvd2luZ1dyaXRlKGNoYW5nZVBhdGgpICE9IG51bGwpIHtcclxuICAgICAgICAgICAgLy8gd2UgaGF2ZSBhIHNoYWRvd2luZyB3cml0ZSwgaWdub3JlIGNoYW5nZXNcclxuICAgICAgICAgICAgcmV0dXJuIHZpZXdDYWNoZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBuZXdFdmVudENhY2hlID0gdm9pZCAwLCBzZXJ2ZXJOb2RlID0gdm9pZCAwO1xyXG4gICAgICAgICAgICBpZiAoY2hhbmdlUGF0aC5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgICAgIC8vIFRPRE86IGZpZ3VyZSBvdXQgaG93IHRoaXMgcGxheXMgd2l0aCBcInNsaWRpbmcgYWNrIHdpbmRvd3NcIlxyXG4gICAgICAgICAgICAgICAgYXNzZXJ0KHZpZXdDYWNoZS5nZXRTZXJ2ZXJDYWNoZSgpLmlzRnVsbHlJbml0aWFsaXplZCgpLCAnSWYgY2hhbmdlIHBhdGggaXMgZW1wdHksIHdlIG11c3QgaGF2ZSBjb21wbGV0ZSBzZXJ2ZXIgZGF0YScpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHZpZXdDYWNoZS5nZXRTZXJ2ZXJDYWNoZSgpLmlzRmlsdGVyZWQoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gc3BlY2lhbCBjYXNlIHRoaXMsIGJlY2F1c2Ugd2UgbmVlZCB0byBvbmx5IGFwcGx5IHdyaXRlcyB0byBjb21wbGV0ZSBjaGlsZHJlbiwgb3JcclxuICAgICAgICAgICAgICAgICAgICAvLyB3ZSBtaWdodCBlbmQgdXAgcmFpc2luZyBldmVudHMgZm9yIGluY29tcGxldGUgY2hpbGRyZW4uIElmIHRoZSBzZXJ2ZXIgZGF0YSBpcyBmaWx0ZXJlZCBkZWVwXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gd3JpdGVzIGNhbm5vdCBiZSBndWFyYW50ZWVkIHRvIGJlIGNvbXBsZXRlXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlcnZlckNhY2hlID0gdmlld0NhY2hlLmdldENvbXBsZXRlU2VydmVyU25hcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb21wbGV0ZUNoaWxkcmVuID0gc2VydmVyQ2FjaGUgaW5zdGFuY2VvZiBDaGlsZHJlbk5vZGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBzZXJ2ZXJDYWNoZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb21wbGV0ZUV2ZW50Q2hpbGRyZW4gPSB3cml0ZXNDYWNoZS5jYWxjQ29tcGxldGVFdmVudENoaWxkcmVuKGNvbXBsZXRlQ2hpbGRyZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld0V2ZW50Q2FjaGUgPSB0aGlzLmZpbHRlcl8udXBkYXRlRnVsbE5vZGUodmlld0NhY2hlLmdldEV2ZW50Q2FjaGUoKS5nZXROb2RlKCksIGNvbXBsZXRlRXZlbnRDaGlsZHJlbiwgYWNjdW11bGF0b3IpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbXBsZXRlTm9kZSA9IHdyaXRlc0NhY2hlLmNhbGNDb21wbGV0ZUV2ZW50Q2FjaGUodmlld0NhY2hlLmdldENvbXBsZXRlU2VydmVyU25hcCgpKTtcclxuICAgICAgICAgICAgICAgICAgICBuZXdFdmVudENhY2hlID0gdGhpcy5maWx0ZXJfLnVwZGF0ZUZ1bGxOb2RlKHZpZXdDYWNoZS5nZXRFdmVudENhY2hlKCkuZ2V0Tm9kZSgpLCBjb21wbGV0ZU5vZGUsIGFjY3VtdWxhdG9yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciBjaGlsZEtleSA9IGNoYW5nZVBhdGguZ2V0RnJvbnQoKTtcclxuICAgICAgICAgICAgICAgIGlmIChjaGlsZEtleSA9PT0gJy5wcmlvcml0eScpIHtcclxuICAgICAgICAgICAgICAgICAgICBhc3NlcnQoY2hhbmdlUGF0aC5nZXRMZW5ndGgoKSA9PT0gMSwgXCJDYW4ndCBoYXZlIGEgcHJpb3JpdHkgd2l0aCBhZGRpdGlvbmFsIHBhdGggY29tcG9uZW50c1wiKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgb2xkRXZlbnROb2RlID0gb2xkRXZlbnRTbmFwLmdldE5vZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJOb2RlID0gdmlld0NhY2hlLmdldFNlcnZlckNhY2hlKCkuZ2V0Tm9kZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHdlIG1pZ2h0IGhhdmUgb3ZlcndyaXRlcyBmb3IgdGhpcyBwcmlvcml0eVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciB1cGRhdGVkUHJpb3JpdHkgPSB3cml0ZXNDYWNoZS5jYWxjRXZlbnRDYWNoZUFmdGVyU2VydmVyT3ZlcndyaXRlKGNoYW5nZVBhdGgsIG9sZEV2ZW50Tm9kZSwgc2VydmVyTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVwZGF0ZWRQcmlvcml0eSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0V2ZW50Q2FjaGUgPSB0aGlzLmZpbHRlcl8udXBkYXRlUHJpb3JpdHkob2xkRXZlbnROb2RlLCB1cGRhdGVkUHJpb3JpdHkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJpb3JpdHkgZGlkbid0IGNoYW5nZSwga2VlcCBvbGQgbm9kZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdFdmVudENhY2hlID0gb2xkRXZlbnRTbmFwLmdldE5vZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGRDaGFuZ2VQYXRoID0gY2hhbmdlUGF0aC5wb3BGcm9udCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBjaGlsZFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdFdmVudENoaWxkID0gdm9pZCAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvbGRFdmVudFNuYXAuaXNDb21wbGV0ZUZvckNoaWxkKGNoaWxkS2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJOb2RlID0gdmlld0NhY2hlLmdldFNlcnZlckNhY2hlKCkuZ2V0Tm9kZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnRDaGlsZFVwZGF0ZSA9IHdyaXRlc0NhY2hlLmNhbGNFdmVudENhY2hlQWZ0ZXJTZXJ2ZXJPdmVyd3JpdGUoY2hhbmdlUGF0aCwgb2xkRXZlbnRTbmFwLmdldE5vZGUoKSwgc2VydmVyTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudENoaWxkVXBkYXRlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0V2ZW50Q2hpbGQgPSBvbGRFdmVudFNuYXBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZ2V0Tm9kZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmdldEltbWVkaWF0ZUNoaWxkKGNoaWxkS2V5KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC51cGRhdGVDaGlsZChjaGlsZENoYW5nZVBhdGgsIGV2ZW50Q2hpbGRVcGRhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm90aGluZyBjaGFuZ2VkLCBqdXN0IGtlZXAgdGhlIG9sZCBjaGlsZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3RXZlbnRDaGlsZCA9IG9sZEV2ZW50U25hcFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5nZXROb2RlKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZ2V0SW1tZWRpYXRlQ2hpbGQoY2hpbGRLZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdFdmVudENoaWxkID0gd3JpdGVzQ2FjaGUuY2FsY0NvbXBsZXRlQ2hpbGQoY2hpbGRLZXksIHZpZXdDYWNoZS5nZXRTZXJ2ZXJDYWNoZSgpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0V2ZW50Q2hpbGQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdFdmVudENhY2hlID0gdGhpcy5maWx0ZXJfLnVwZGF0ZUNoaWxkKG9sZEV2ZW50U25hcC5nZXROb2RlKCksIGNoaWxkS2V5LCBuZXdFdmVudENoaWxkLCBjaGlsZENoYW5nZVBhdGgsIHNvdXJjZSwgYWNjdW11bGF0b3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbm8gY29tcGxldGUgY2hpbGQgYXZhaWxhYmxlIG9yIG5vIGNoYW5nZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdFdmVudENhY2hlID0gb2xkRXZlbnRTbmFwLmdldE5vZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHZpZXdDYWNoZS51cGRhdGVFdmVudFNuYXAobmV3RXZlbnRDYWNoZSwgb2xkRXZlbnRTbmFwLmlzRnVsbHlJbml0aWFsaXplZCgpIHx8IGNoYW5nZVBhdGguaXNFbXB0eSgpLCB0aGlzLmZpbHRlcl8uZmlsdGVyc05vZGVzKCkpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IVZpZXdDYWNoZX0gb2xkVmlld0NhY2hlXHJcbiAgICAgKiBAcGFyYW0geyFQYXRofSBjaGFuZ2VQYXRoXHJcbiAgICAgKiBAcGFyYW0geyFOb2RlfSBjaGFuZ2VkU25hcFxyXG4gICAgICogQHBhcmFtIHshV3JpdGVUcmVlUmVmfSB3cml0ZXNDYWNoZVxyXG4gICAgICogQHBhcmFtIHs/Tm9kZX0gY29tcGxldGVDYWNoZVxyXG4gICAgICogQHBhcmFtIHtib29sZWFufSBmaWx0ZXJTZXJ2ZXJOb2RlXHJcbiAgICAgKiBAcGFyYW0geyFDaGlsZENoYW5nZUFjY3VtdWxhdG9yfSBhY2N1bXVsYXRvclxyXG4gICAgICogQHJldHVybiB7IVZpZXdDYWNoZX1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIFZpZXdQcm9jZXNzb3IucHJvdG90eXBlLmFwcGx5U2VydmVyT3ZlcndyaXRlXyA9IGZ1bmN0aW9uIChvbGRWaWV3Q2FjaGUsIGNoYW5nZVBhdGgsIGNoYW5nZWRTbmFwLCB3cml0ZXNDYWNoZSwgY29tcGxldGVDYWNoZSwgZmlsdGVyU2VydmVyTm9kZSwgYWNjdW11bGF0b3IpIHtcclxuICAgICAgICB2YXIgb2xkU2VydmVyU25hcCA9IG9sZFZpZXdDYWNoZS5nZXRTZXJ2ZXJDYWNoZSgpO1xyXG4gICAgICAgIHZhciBuZXdTZXJ2ZXJDYWNoZTtcclxuICAgICAgICB2YXIgc2VydmVyRmlsdGVyID0gZmlsdGVyU2VydmVyTm9kZVxyXG4gICAgICAgICAgICA/IHRoaXMuZmlsdGVyX1xyXG4gICAgICAgICAgICA6IHRoaXMuZmlsdGVyXy5nZXRJbmRleGVkRmlsdGVyKCk7XHJcbiAgICAgICAgaWYgKGNoYW5nZVBhdGguaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgIG5ld1NlcnZlckNhY2hlID0gc2VydmVyRmlsdGVyLnVwZGF0ZUZ1bGxOb2RlKG9sZFNlcnZlclNuYXAuZ2V0Tm9kZSgpLCBjaGFuZ2VkU25hcCwgbnVsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHNlcnZlckZpbHRlci5maWx0ZXJzTm9kZXMoKSAmJiAhb2xkU2VydmVyU25hcC5pc0ZpbHRlcmVkKCkpIHtcclxuICAgICAgICAgICAgLy8gd2Ugd2FudCB0byBmaWx0ZXIgdGhlIHNlcnZlciBub2RlLCBidXQgd2UgZGlkbid0IGZpbHRlciB0aGUgc2VydmVyIG5vZGUgeWV0LCBzbyBzaW11bGF0ZSBhIGZ1bGwgdXBkYXRlXHJcbiAgICAgICAgICAgIHZhciBuZXdTZXJ2ZXJOb2RlID0gb2xkU2VydmVyU25hcFxyXG4gICAgICAgICAgICAgICAgLmdldE5vZGUoKVxyXG4gICAgICAgICAgICAgICAgLnVwZGF0ZUNoaWxkKGNoYW5nZVBhdGgsIGNoYW5nZWRTbmFwKTtcclxuICAgICAgICAgICAgbmV3U2VydmVyQ2FjaGUgPSBzZXJ2ZXJGaWx0ZXIudXBkYXRlRnVsbE5vZGUob2xkU2VydmVyU25hcC5nZXROb2RlKCksIG5ld1NlcnZlck5vZGUsIG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGNoaWxkS2V5ID0gY2hhbmdlUGF0aC5nZXRGcm9udCgpO1xyXG4gICAgICAgICAgICBpZiAoIW9sZFNlcnZlclNuYXAuaXNDb21wbGV0ZUZvclBhdGgoY2hhbmdlUGF0aCkgJiZcclxuICAgICAgICAgICAgICAgIGNoYW5nZVBhdGguZ2V0TGVuZ3RoKCkgPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBXZSBkb24ndCB1cGRhdGUgaW5jb21wbGV0ZSBub2RlcyB3aXRoIHVwZGF0ZXMgaW50ZW5kZWQgZm9yIG90aGVyIGxpc3RlbmVyc1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9sZFZpZXdDYWNoZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgY2hpbGRDaGFuZ2VQYXRoID0gY2hhbmdlUGF0aC5wb3BGcm9udCgpO1xyXG4gICAgICAgICAgICB2YXIgY2hpbGROb2RlID0gb2xkU2VydmVyU25hcC5nZXROb2RlKCkuZ2V0SW1tZWRpYXRlQ2hpbGQoY2hpbGRLZXkpO1xyXG4gICAgICAgICAgICB2YXIgbmV3Q2hpbGROb2RlID0gY2hpbGROb2RlLnVwZGF0ZUNoaWxkKGNoaWxkQ2hhbmdlUGF0aCwgY2hhbmdlZFNuYXApO1xyXG4gICAgICAgICAgICBpZiAoY2hpbGRLZXkgPT09ICcucHJpb3JpdHknKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdTZXJ2ZXJDYWNoZSA9IHNlcnZlckZpbHRlci51cGRhdGVQcmlvcml0eShvbGRTZXJ2ZXJTbmFwLmdldE5vZGUoKSwgbmV3Q2hpbGROb2RlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG5ld1NlcnZlckNhY2hlID0gc2VydmVyRmlsdGVyLnVwZGF0ZUNoaWxkKG9sZFNlcnZlclNuYXAuZ2V0Tm9kZSgpLCBjaGlsZEtleSwgbmV3Q2hpbGROb2RlLCBjaGlsZENoYW5nZVBhdGgsIE5PX0NPTVBMRVRFX0NISUxEX1NPVVJDRSwgbnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG5ld1ZpZXdDYWNoZSA9IG9sZFZpZXdDYWNoZS51cGRhdGVTZXJ2ZXJTbmFwKG5ld1NlcnZlckNhY2hlLCBvbGRTZXJ2ZXJTbmFwLmlzRnVsbHlJbml0aWFsaXplZCgpIHx8IGNoYW5nZVBhdGguaXNFbXB0eSgpLCBzZXJ2ZXJGaWx0ZXIuZmlsdGVyc05vZGVzKCkpO1xyXG4gICAgICAgIHZhciBzb3VyY2UgPSBuZXcgV3JpdGVUcmVlQ29tcGxldGVDaGlsZFNvdXJjZSh3cml0ZXNDYWNoZSwgbmV3Vmlld0NhY2hlLCBjb21wbGV0ZUNhY2hlKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZW5lcmF0ZUV2ZW50Q2FjaGVBZnRlclNlcnZlckV2ZW50XyhuZXdWaWV3Q2FjaGUsIGNoYW5nZVBhdGgsIHdyaXRlc0NhY2hlLCBzb3VyY2UsIGFjY3VtdWxhdG9yKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IVZpZXdDYWNoZX0gb2xkVmlld0NhY2hlXHJcbiAgICAgKiBAcGFyYW0geyFQYXRofSBjaGFuZ2VQYXRoXHJcbiAgICAgKiBAcGFyYW0geyFOb2RlfSBjaGFuZ2VkU25hcFxyXG4gICAgICogQHBhcmFtIHshV3JpdGVUcmVlUmVmfSB3cml0ZXNDYWNoZVxyXG4gICAgICogQHBhcmFtIHs/Tm9kZX0gY29tcGxldGVDYWNoZVxyXG4gICAgICogQHBhcmFtIHshQ2hpbGRDaGFuZ2VBY2N1bXVsYXRvcn0gYWNjdW11bGF0b3JcclxuICAgICAqIEByZXR1cm4geyFWaWV3Q2FjaGV9XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBWaWV3UHJvY2Vzc29yLnByb3RvdHlwZS5hcHBseVVzZXJPdmVyd3JpdGVfID0gZnVuY3Rpb24gKG9sZFZpZXdDYWNoZSwgY2hhbmdlUGF0aCwgY2hhbmdlZFNuYXAsIHdyaXRlc0NhY2hlLCBjb21wbGV0ZUNhY2hlLCBhY2N1bXVsYXRvcikge1xyXG4gICAgICAgIHZhciBvbGRFdmVudFNuYXAgPSBvbGRWaWV3Q2FjaGUuZ2V0RXZlbnRDYWNoZSgpO1xyXG4gICAgICAgIHZhciBuZXdWaWV3Q2FjaGUsIG5ld0V2ZW50Q2FjaGU7XHJcbiAgICAgICAgdmFyIHNvdXJjZSA9IG5ldyBXcml0ZVRyZWVDb21wbGV0ZUNoaWxkU291cmNlKHdyaXRlc0NhY2hlLCBvbGRWaWV3Q2FjaGUsIGNvbXBsZXRlQ2FjaGUpO1xyXG4gICAgICAgIGlmIChjaGFuZ2VQYXRoLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICBuZXdFdmVudENhY2hlID0gdGhpcy5maWx0ZXJfLnVwZGF0ZUZ1bGxOb2RlKG9sZFZpZXdDYWNoZS5nZXRFdmVudENhY2hlKCkuZ2V0Tm9kZSgpLCBjaGFuZ2VkU25hcCwgYWNjdW11bGF0b3IpO1xyXG4gICAgICAgICAgICBuZXdWaWV3Q2FjaGUgPSBvbGRWaWV3Q2FjaGUudXBkYXRlRXZlbnRTbmFwKG5ld0V2ZW50Q2FjaGUsIHRydWUsIHRoaXMuZmlsdGVyXy5maWx0ZXJzTm9kZXMoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgY2hpbGRLZXkgPSBjaGFuZ2VQYXRoLmdldEZyb250KCk7XHJcbiAgICAgICAgICAgIGlmIChjaGlsZEtleSA9PT0gJy5wcmlvcml0eScpIHtcclxuICAgICAgICAgICAgICAgIG5ld0V2ZW50Q2FjaGUgPSB0aGlzLmZpbHRlcl8udXBkYXRlUHJpb3JpdHkob2xkVmlld0NhY2hlLmdldEV2ZW50Q2FjaGUoKS5nZXROb2RlKCksIGNoYW5nZWRTbmFwKTtcclxuICAgICAgICAgICAgICAgIG5ld1ZpZXdDYWNoZSA9IG9sZFZpZXdDYWNoZS51cGRhdGVFdmVudFNuYXAobmV3RXZlbnRDYWNoZSwgb2xkRXZlbnRTbmFwLmlzRnVsbHlJbml0aWFsaXplZCgpLCBvbGRFdmVudFNuYXAuaXNGaWx0ZXJlZCgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciBjaGlsZENoYW5nZVBhdGggPSBjaGFuZ2VQYXRoLnBvcEZyb250KCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgb2xkQ2hpbGQgPSBvbGRFdmVudFNuYXAuZ2V0Tm9kZSgpLmdldEltbWVkaWF0ZUNoaWxkKGNoaWxkS2V5KTtcclxuICAgICAgICAgICAgICAgIHZhciBuZXdDaGlsZCA9IHZvaWQgMDtcclxuICAgICAgICAgICAgICAgIGlmIChjaGlsZENoYW5nZVBhdGguaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hpbGQgb3ZlcndyaXRlLCB3ZSBjYW4gcmVwbGFjZSB0aGUgY2hpbGRcclxuICAgICAgICAgICAgICAgICAgICBuZXdDaGlsZCA9IGNoYW5nZWRTbmFwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkTm9kZSA9IHNvdXJjZS5nZXRDb21wbGV0ZUNoaWxkKGNoaWxkS2V5KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGROb2RlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkQ2hhbmdlUGF0aC5nZXRCYWNrKCkgPT09ICcucHJpb3JpdHknICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZE5vZGUuZ2V0Q2hpbGQoY2hpbGRDaGFuZ2VQYXRoLnBhcmVudCgpKS5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBwcmlvcml0eSB1cGRhdGUgb24gYW4gZW1wdHkgbm9kZS4gSWYgdGhpcyBub2RlIGV4aXN0cyBvbiB0aGUgc2VydmVyLCB0aGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNlcnZlciB3aWxsIHNlbmQgZG93biB0aGUgcHJpb3JpdHkgaW4gdGhlIHVwZGF0ZSwgc28gaWdub3JlIGZvciBub3dcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NoaWxkID0gY2hpbGROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3Q2hpbGQgPSBjaGlsZE5vZGUudXBkYXRlQ2hpbGQoY2hpbGRDaGFuZ2VQYXRoLCBjaGFuZ2VkU25hcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZXJlIGlzIG5vIGNvbXBsZXRlIGNoaWxkIG5vZGUgYXZhaWxhYmxlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NoaWxkID0gQ2hpbGRyZW5Ob2RlLkVNUFRZX05PREU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFvbGRDaGlsZC5lcXVhbHMobmV3Q2hpbGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0V2ZW50U25hcCA9IHRoaXMuZmlsdGVyXy51cGRhdGVDaGlsZChvbGRFdmVudFNuYXAuZ2V0Tm9kZSgpLCBjaGlsZEtleSwgbmV3Q2hpbGQsIGNoaWxkQ2hhbmdlUGF0aCwgc291cmNlLCBhY2N1bXVsYXRvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3Vmlld0NhY2hlID0gb2xkVmlld0NhY2hlLnVwZGF0ZUV2ZW50U25hcChuZXdFdmVudFNuYXAsIG9sZEV2ZW50U25hcC5pc0Z1bGx5SW5pdGlhbGl6ZWQoKSwgdGhpcy5maWx0ZXJfLmZpbHRlcnNOb2RlcygpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld1ZpZXdDYWNoZSA9IG9sZFZpZXdDYWNoZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3Vmlld0NhY2hlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshVmlld0NhY2hlfSB2aWV3Q2FjaGVcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjaGlsZEtleVxyXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIFZpZXdQcm9jZXNzb3IuY2FjaGVIYXNDaGlsZF8gPSBmdW5jdGlvbiAodmlld0NhY2hlLCBjaGlsZEtleSkge1xyXG4gICAgICAgIHJldHVybiB2aWV3Q2FjaGUuZ2V0RXZlbnRDYWNoZSgpLmlzQ29tcGxldGVGb3JDaGlsZChjaGlsZEtleSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFWaWV3Q2FjaGV9IHZpZXdDYWNoZVxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gcGF0aFxyXG4gICAgICogQHBhcmFtIHtJbW11dGFibGVUcmVlLjwhTm9kZT59IGNoYW5nZWRDaGlsZHJlblxyXG4gICAgICogQHBhcmFtIHshV3JpdGVUcmVlUmVmfSB3cml0ZXNDYWNoZVxyXG4gICAgICogQHBhcmFtIHs/Tm9kZX0gc2VydmVyQ2FjaGVcclxuICAgICAqIEBwYXJhbSB7IUNoaWxkQ2hhbmdlQWNjdW11bGF0b3J9IGFjY3VtdWxhdG9yXHJcbiAgICAgKiBAcmV0dXJuIHshVmlld0NhY2hlfVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgVmlld1Byb2Nlc3Nvci5wcm90b3R5cGUuYXBwbHlVc2VyTWVyZ2VfID0gZnVuY3Rpb24gKHZpZXdDYWNoZSwgcGF0aCwgY2hhbmdlZENoaWxkcmVuLCB3cml0ZXNDYWNoZSwgc2VydmVyQ2FjaGUsIGFjY3VtdWxhdG9yKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAvLyBIQUNLOiBJbiB0aGUgY2FzZSBvZiBhIGxpbWl0IHF1ZXJ5LCB0aGVyZSBtYXkgYmUgc29tZSBjaGFuZ2VzIHRoYXQgYnVtcCB0aGluZ3Mgb3V0IG9mIHRoZVxyXG4gICAgICAgIC8vIHdpbmRvdyBsZWF2aW5nIHJvb20gZm9yIG5ldyBpdGVtcy4gIEl0J3MgaW1wb3J0YW50IHdlIHByb2Nlc3MgdGhlc2UgY2hhbmdlcyBmaXJzdCwgc28gd2VcclxuICAgICAgICAvLyBpdGVyYXRlIHRoZSBjaGFuZ2VzIHR3aWNlLCBmaXJzdCBwcm9jZXNzaW5nIGFueSB0aGF0IGFmZmVjdCBpdGVtcyBjdXJyZW50bHkgaW4gdmlldy5cclxuICAgICAgICAvLyBUT0RPOiBJIGNvbnNpZGVyIGFuIGl0ZW0gXCJpbiB2aWV3XCIgaWYgY2FjaGVIYXNDaGlsZCBpcyB0cnVlLCB3aGljaCBjaGVja3MgYm90aCB0aGUgc2VydmVyXHJcbiAgICAgICAgLy8gYW5kIGV2ZW50IHNuYXAuICBJJ20gbm90IHN1cmUgaWYgdGhpcyB3aWxsIHJlc3VsdCBpbiBlZGdlIGNhc2VzIHdoZW4gYSBjaGlsZCBpcyBpbiBvbmUgYnV0XHJcbiAgICAgICAgLy8gbm90IHRoZSBvdGhlci5cclxuICAgICAgICB2YXIgY3VyVmlld0NhY2hlID0gdmlld0NhY2hlO1xyXG4gICAgICAgIGNoYW5nZWRDaGlsZHJlbi5mb3JlYWNoKGZ1bmN0aW9uIChyZWxhdGl2ZVBhdGgsIGNoaWxkTm9kZSkge1xyXG4gICAgICAgICAgICB2YXIgd3JpdGVQYXRoID0gcGF0aC5jaGlsZChyZWxhdGl2ZVBhdGgpO1xyXG4gICAgICAgICAgICBpZiAoVmlld1Byb2Nlc3Nvci5jYWNoZUhhc0NoaWxkXyh2aWV3Q2FjaGUsIHdyaXRlUGF0aC5nZXRGcm9udCgpKSkge1xyXG4gICAgICAgICAgICAgICAgY3VyVmlld0NhY2hlID0gX3RoaXMuYXBwbHlVc2VyT3ZlcndyaXRlXyhjdXJWaWV3Q2FjaGUsIHdyaXRlUGF0aCwgY2hpbGROb2RlLCB3cml0ZXNDYWNoZSwgc2VydmVyQ2FjaGUsIGFjY3VtdWxhdG9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNoYW5nZWRDaGlsZHJlbi5mb3JlYWNoKGZ1bmN0aW9uIChyZWxhdGl2ZVBhdGgsIGNoaWxkTm9kZSkge1xyXG4gICAgICAgICAgICB2YXIgd3JpdGVQYXRoID0gcGF0aC5jaGlsZChyZWxhdGl2ZVBhdGgpO1xyXG4gICAgICAgICAgICBpZiAoIVZpZXdQcm9jZXNzb3IuY2FjaGVIYXNDaGlsZF8odmlld0NhY2hlLCB3cml0ZVBhdGguZ2V0RnJvbnQoKSkpIHtcclxuICAgICAgICAgICAgICAgIGN1clZpZXdDYWNoZSA9IF90aGlzLmFwcGx5VXNlck92ZXJ3cml0ZV8oY3VyVmlld0NhY2hlLCB3cml0ZVBhdGgsIGNoaWxkTm9kZSwgd3JpdGVzQ2FjaGUsIHNlcnZlckNhY2hlLCBhY2N1bXVsYXRvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gY3VyVmlld0NhY2hlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshTm9kZX0gbm9kZVxyXG4gICAgICogQHBhcmFtIHtJbW11dGFibGVUcmVlLjwhTm9kZT59IG1lcmdlXHJcbiAgICAgKiBAcmV0dXJuIHshTm9kZX1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIFZpZXdQcm9jZXNzb3IucHJvdG90eXBlLmFwcGx5TWVyZ2VfID0gZnVuY3Rpb24gKG5vZGUsIG1lcmdlKSB7XHJcbiAgICAgICAgbWVyZ2UuZm9yZWFjaChmdW5jdGlvbiAocmVsYXRpdmVQYXRoLCBjaGlsZE5vZGUpIHtcclxuICAgICAgICAgICAgbm9kZSA9IG5vZGUudXBkYXRlQ2hpbGQocmVsYXRpdmVQYXRoLCBjaGlsZE5vZGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBub2RlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshVmlld0NhY2hlfSB2aWV3Q2FjaGVcclxuICAgICAqIEBwYXJhbSB7IVBhdGh9IHBhdGhcclxuICAgICAqIEBwYXJhbSB7IUltbXV0YWJsZVRyZWUuPCFOb2RlPn0gY2hhbmdlZENoaWxkcmVuXHJcbiAgICAgKiBAcGFyYW0geyFXcml0ZVRyZWVSZWZ9IHdyaXRlc0NhY2hlXHJcbiAgICAgKiBAcGFyYW0gez9Ob2RlfSBzZXJ2ZXJDYWNoZVxyXG4gICAgICogQHBhcmFtIHtib29sZWFufSBmaWx0ZXJTZXJ2ZXJOb2RlXHJcbiAgICAgKiBAcGFyYW0geyFDaGlsZENoYW5nZUFjY3VtdWxhdG9yfSBhY2N1bXVsYXRvclxyXG4gICAgICogQHJldHVybiB7IVZpZXdDYWNoZX1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIFZpZXdQcm9jZXNzb3IucHJvdG90eXBlLmFwcGx5U2VydmVyTWVyZ2VfID0gZnVuY3Rpb24gKHZpZXdDYWNoZSwgcGF0aCwgY2hhbmdlZENoaWxkcmVuLCB3cml0ZXNDYWNoZSwgc2VydmVyQ2FjaGUsIGZpbHRlclNlcnZlck5vZGUsIGFjY3VtdWxhdG9yKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGEgY2FjaGUgeWV0LCB0aGlzIG1lcmdlIHdhcyBpbnRlbmRlZCBmb3IgYSBwcmV2aW91c2x5IGxpc3RlbiBpbiB0aGUgc2FtZSBsb2NhdGlvbi4gSWdub3JlIGl0IGFuZFxyXG4gICAgICAgIC8vIHdhaXQgZm9yIHRoZSBjb21wbGV0ZSBkYXRhIHVwZGF0ZSBjb21pbmcgc29vbi5cclxuICAgICAgICBpZiAodmlld0NhY2hlLmdldFNlcnZlckNhY2hlKCkuZ2V0Tm9kZSgpLmlzRW1wdHkoKSAmJlxyXG4gICAgICAgICAgICAhdmlld0NhY2hlLmdldFNlcnZlckNhY2hlKCkuaXNGdWxseUluaXRpYWxpemVkKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZpZXdDYWNoZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gSEFDSzogSW4gdGhlIGNhc2Ugb2YgYSBsaW1pdCBxdWVyeSwgdGhlcmUgbWF5IGJlIHNvbWUgY2hhbmdlcyB0aGF0IGJ1bXAgdGhpbmdzIG91dCBvZiB0aGVcclxuICAgICAgICAvLyB3aW5kb3cgbGVhdmluZyByb29tIGZvciBuZXcgaXRlbXMuICBJdCdzIGltcG9ydGFudCB3ZSBwcm9jZXNzIHRoZXNlIGNoYW5nZXMgZmlyc3QsIHNvIHdlXHJcbiAgICAgICAgLy8gaXRlcmF0ZSB0aGUgY2hhbmdlcyB0d2ljZSwgZmlyc3QgcHJvY2Vzc2luZyBhbnkgdGhhdCBhZmZlY3QgaXRlbXMgY3VycmVudGx5IGluIHZpZXcuXHJcbiAgICAgICAgLy8gVE9ETzogSSBjb25zaWRlciBhbiBpdGVtIFwiaW4gdmlld1wiIGlmIGNhY2hlSGFzQ2hpbGQgaXMgdHJ1ZSwgd2hpY2ggY2hlY2tzIGJvdGggdGhlIHNlcnZlclxyXG4gICAgICAgIC8vIGFuZCBldmVudCBzbmFwLiAgSSdtIG5vdCBzdXJlIGlmIHRoaXMgd2lsbCByZXN1bHQgaW4gZWRnZSBjYXNlcyB3aGVuIGEgY2hpbGQgaXMgaW4gb25lIGJ1dFxyXG4gICAgICAgIC8vIG5vdCB0aGUgb3RoZXIuXHJcbiAgICAgICAgdmFyIGN1clZpZXdDYWNoZSA9IHZpZXdDYWNoZTtcclxuICAgICAgICB2YXIgdmlld01lcmdlVHJlZTtcclxuICAgICAgICBpZiAocGF0aC5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgdmlld01lcmdlVHJlZSA9IGNoYW5nZWRDaGlsZHJlbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZpZXdNZXJnZVRyZWUgPSBJbW11dGFibGVUcmVlLkVtcHR5LnNldFRyZWUocGF0aCwgY2hhbmdlZENoaWxkcmVuKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHNlcnZlck5vZGUgPSB2aWV3Q2FjaGUuZ2V0U2VydmVyQ2FjaGUoKS5nZXROb2RlKCk7XHJcbiAgICAgICAgdmlld01lcmdlVHJlZS5jaGlsZHJlbi5pbm9yZGVyVHJhdmVyc2FsKGZ1bmN0aW9uIChjaGlsZEtleSwgY2hpbGRUcmVlKSB7XHJcbiAgICAgICAgICAgIGlmIChzZXJ2ZXJOb2RlLmhhc0NoaWxkKGNoaWxkS2V5KSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNlcnZlckNoaWxkID0gdmlld0NhY2hlXHJcbiAgICAgICAgICAgICAgICAgICAgLmdldFNlcnZlckNhY2hlKClcclxuICAgICAgICAgICAgICAgICAgICAuZ2V0Tm9kZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgLmdldEltbWVkaWF0ZUNoaWxkKGNoaWxkS2V5KTtcclxuICAgICAgICAgICAgICAgIHZhciBuZXdDaGlsZCA9IF90aGlzLmFwcGx5TWVyZ2VfKHNlcnZlckNoaWxkLCBjaGlsZFRyZWUpO1xyXG4gICAgICAgICAgICAgICAgY3VyVmlld0NhY2hlID0gX3RoaXMuYXBwbHlTZXJ2ZXJPdmVyd3JpdGVfKGN1clZpZXdDYWNoZSwgbmV3IFBhdGgoY2hpbGRLZXkpLCBuZXdDaGlsZCwgd3JpdGVzQ2FjaGUsIHNlcnZlckNhY2hlLCBmaWx0ZXJTZXJ2ZXJOb2RlLCBhY2N1bXVsYXRvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB2aWV3TWVyZ2VUcmVlLmNoaWxkcmVuLmlub3JkZXJUcmF2ZXJzYWwoZnVuY3Rpb24gKGNoaWxkS2V5LCBjaGlsZE1lcmdlVHJlZSkge1xyXG4gICAgICAgICAgICB2YXIgaXNVbmtub3duRGVlcE1lcmdlID0gIXZpZXdDYWNoZS5nZXRTZXJ2ZXJDYWNoZSgpLmlzQ29tcGxldGVGb3JDaGlsZChjaGlsZEtleSkgJiZcclxuICAgICAgICAgICAgICAgIGNoaWxkTWVyZ2VUcmVlLnZhbHVlID09IG51bGw7XHJcbiAgICAgICAgICAgIGlmICghc2VydmVyTm9kZS5oYXNDaGlsZChjaGlsZEtleSkgJiYgIWlzVW5rbm93bkRlZXBNZXJnZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNlcnZlckNoaWxkID0gdmlld0NhY2hlXHJcbiAgICAgICAgICAgICAgICAgICAgLmdldFNlcnZlckNhY2hlKClcclxuICAgICAgICAgICAgICAgICAgICAuZ2V0Tm9kZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgLmdldEltbWVkaWF0ZUNoaWxkKGNoaWxkS2V5KTtcclxuICAgICAgICAgICAgICAgIHZhciBuZXdDaGlsZCA9IF90aGlzLmFwcGx5TWVyZ2VfKHNlcnZlckNoaWxkLCBjaGlsZE1lcmdlVHJlZSk7XHJcbiAgICAgICAgICAgICAgICBjdXJWaWV3Q2FjaGUgPSBfdGhpcy5hcHBseVNlcnZlck92ZXJ3cml0ZV8oY3VyVmlld0NhY2hlLCBuZXcgUGF0aChjaGlsZEtleSksIG5ld0NoaWxkLCB3cml0ZXNDYWNoZSwgc2VydmVyQ2FjaGUsIGZpbHRlclNlcnZlck5vZGUsIGFjY3VtdWxhdG9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBjdXJWaWV3Q2FjaGU7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFWaWV3Q2FjaGV9IHZpZXdDYWNoZVxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gYWNrUGF0aFxyXG4gICAgICogQHBhcmFtIHshSW1tdXRhYmxlVHJlZTwhYm9vbGVhbj59IGFmZmVjdGVkVHJlZVxyXG4gICAgICogQHBhcmFtIHshV3JpdGVUcmVlUmVmfSB3cml0ZXNDYWNoZVxyXG4gICAgICogQHBhcmFtIHs/Tm9kZX0gY29tcGxldGVDYWNoZVxyXG4gICAgICogQHBhcmFtIHshQ2hpbGRDaGFuZ2VBY2N1bXVsYXRvcn0gYWNjdW11bGF0b3JcclxuICAgICAqIEByZXR1cm4geyFWaWV3Q2FjaGV9XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBWaWV3UHJvY2Vzc29yLnByb3RvdHlwZS5hY2tVc2VyV3JpdGVfID0gZnVuY3Rpb24gKHZpZXdDYWNoZSwgYWNrUGF0aCwgYWZmZWN0ZWRUcmVlLCB3cml0ZXNDYWNoZSwgY29tcGxldGVDYWNoZSwgYWNjdW11bGF0b3IpIHtcclxuICAgICAgICBpZiAod3JpdGVzQ2FjaGUuc2hhZG93aW5nV3JpdGUoYWNrUGF0aCkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdmlld0NhY2hlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBPbmx5IGZpbHRlciBzZXJ2ZXIgbm9kZSBpZiBpdCBpcyBjdXJyZW50bHkgZmlsdGVyZWRcclxuICAgICAgICB2YXIgZmlsdGVyU2VydmVyTm9kZSA9IHZpZXdDYWNoZS5nZXRTZXJ2ZXJDYWNoZSgpLmlzRmlsdGVyZWQoKTtcclxuICAgICAgICAvLyBFc3NlbnRpYWxseSB3ZSdsbCBqdXN0IGdldCBvdXIgZXhpc3Rpbmcgc2VydmVyIGNhY2hlIGZvciB0aGUgYWZmZWN0ZWQgcGF0aHMgYW5kIHJlLWFwcGx5IGl0IGFzIGEgc2VydmVyIHVwZGF0ZVxyXG4gICAgICAgIC8vIG5vdyB0aGF0IGl0IHdvbid0IGJlIHNoYWRvd2VkLlxyXG4gICAgICAgIHZhciBzZXJ2ZXJDYWNoZSA9IHZpZXdDYWNoZS5nZXRTZXJ2ZXJDYWNoZSgpO1xyXG4gICAgICAgIGlmIChhZmZlY3RlZFRyZWUudmFsdWUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAvLyBUaGlzIGlzIGFuIG92ZXJ3cml0ZS5cclxuICAgICAgICAgICAgaWYgKChhY2tQYXRoLmlzRW1wdHkoKSAmJiBzZXJ2ZXJDYWNoZS5pc0Z1bGx5SW5pdGlhbGl6ZWQoKSkgfHxcclxuICAgICAgICAgICAgICAgIHNlcnZlckNhY2hlLmlzQ29tcGxldGVGb3JQYXRoKGFja1BhdGgpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hcHBseVNlcnZlck92ZXJ3cml0ZV8odmlld0NhY2hlLCBhY2tQYXRoLCBzZXJ2ZXJDYWNoZS5nZXROb2RlKCkuZ2V0Q2hpbGQoYWNrUGF0aCksIHdyaXRlc0NhY2hlLCBjb21wbGV0ZUNhY2hlLCBmaWx0ZXJTZXJ2ZXJOb2RlLCBhY2N1bXVsYXRvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoYWNrUGF0aC5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBnb29meSBlZGdlIGNhc2Ugd2hlcmUgd2UgYXJlIGFja2luZyBkYXRhIGF0IHRoaXMgbG9jYXRpb24gYnV0IGRvbid0IGhhdmUgZnVsbCBkYXRhLiAgV2VcclxuICAgICAgICAgICAgICAgIC8vIHNob3VsZCBqdXN0IHJlLWFwcGx5IHdoYXRldmVyIHdlIGhhdmUgaW4gb3VyIGNhY2hlIGFzIGEgbWVyZ2UuXHJcbiAgICAgICAgICAgICAgICB2YXIgY2hhbmdlZENoaWxkcmVuXzEgPSBJbW11dGFibGVUcmVlLkVtcHR5O1xyXG4gICAgICAgICAgICAgICAgc2VydmVyQ2FjaGUuZ2V0Tm9kZSgpLmZvckVhY2hDaGlsZChLRVlfSU5ERVgsIGZ1bmN0aW9uIChuYW1lLCBub2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlZENoaWxkcmVuXzEgPSBjaGFuZ2VkQ2hpbGRyZW5fMS5zZXQobmV3IFBhdGgobmFtZSksIG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hcHBseVNlcnZlck1lcmdlXyh2aWV3Q2FjaGUsIGFja1BhdGgsIGNoYW5nZWRDaGlsZHJlbl8xLCB3cml0ZXNDYWNoZSwgY29tcGxldGVDYWNoZSwgZmlsdGVyU2VydmVyTm9kZSwgYWNjdW11bGF0b3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpZXdDYWNoZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gVGhpcyBpcyBhIG1lcmdlLlxyXG4gICAgICAgICAgICB2YXIgY2hhbmdlZENoaWxkcmVuXzIgPSBJbW11dGFibGVUcmVlLkVtcHR5O1xyXG4gICAgICAgICAgICBhZmZlY3RlZFRyZWUuZm9yZWFjaChmdW5jdGlvbiAobWVyZ2VQYXRoLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNlcnZlckNhY2hlUGF0aCA9IGFja1BhdGguY2hpbGQobWVyZ2VQYXRoKTtcclxuICAgICAgICAgICAgICAgIGlmIChzZXJ2ZXJDYWNoZS5pc0NvbXBsZXRlRm9yUGF0aChzZXJ2ZXJDYWNoZVBhdGgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlZENoaWxkcmVuXzIgPSBjaGFuZ2VkQ2hpbGRyZW5fMi5zZXQobWVyZ2VQYXRoLCBzZXJ2ZXJDYWNoZS5nZXROb2RlKCkuZ2V0Q2hpbGQoc2VydmVyQ2FjaGVQYXRoKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hcHBseVNlcnZlck1lcmdlXyh2aWV3Q2FjaGUsIGFja1BhdGgsIGNoYW5nZWRDaGlsZHJlbl8yLCB3cml0ZXNDYWNoZSwgY29tcGxldGVDYWNoZSwgZmlsdGVyU2VydmVyTm9kZSwgYWNjdW11bGF0b3IpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IVZpZXdDYWNoZX0gdmlld0NhY2hlXHJcbiAgICAgKiBAcGFyYW0geyFQYXRofSBwYXRoXHJcbiAgICAgKiBAcGFyYW0geyFXcml0ZVRyZWVSZWZ9IHdyaXRlc0NhY2hlXHJcbiAgICAgKiBAcGFyYW0geyFDaGlsZENoYW5nZUFjY3VtdWxhdG9yfSBhY2N1bXVsYXRvclxyXG4gICAgICogQHJldHVybiB7IVZpZXdDYWNoZX1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIFZpZXdQcm9jZXNzb3IucHJvdG90eXBlLmxpc3RlbkNvbXBsZXRlXyA9IGZ1bmN0aW9uICh2aWV3Q2FjaGUsIHBhdGgsIHdyaXRlc0NhY2hlLCBhY2N1bXVsYXRvcikge1xyXG4gICAgICAgIHZhciBvbGRTZXJ2ZXJOb2RlID0gdmlld0NhY2hlLmdldFNlcnZlckNhY2hlKCk7XHJcbiAgICAgICAgdmFyIG5ld1ZpZXdDYWNoZSA9IHZpZXdDYWNoZS51cGRhdGVTZXJ2ZXJTbmFwKG9sZFNlcnZlck5vZGUuZ2V0Tm9kZSgpLCBvbGRTZXJ2ZXJOb2RlLmlzRnVsbHlJbml0aWFsaXplZCgpIHx8IHBhdGguaXNFbXB0eSgpLCBvbGRTZXJ2ZXJOb2RlLmlzRmlsdGVyZWQoKSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2VuZXJhdGVFdmVudENhY2hlQWZ0ZXJTZXJ2ZXJFdmVudF8obmV3Vmlld0NhY2hlLCBwYXRoLCB3cml0ZXNDYWNoZSwgTk9fQ09NUExFVEVfQ0hJTERfU09VUkNFLCBhY2N1bXVsYXRvcik7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFWaWV3Q2FjaGV9IHZpZXdDYWNoZVxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gcGF0aFxyXG4gICAgICogQHBhcmFtIHshV3JpdGVUcmVlUmVmfSB3cml0ZXNDYWNoZVxyXG4gICAgICogQHBhcmFtIHs/Tm9kZX0gY29tcGxldGVTZXJ2ZXJDYWNoZVxyXG4gICAgICogQHBhcmFtIHshQ2hpbGRDaGFuZ2VBY2N1bXVsYXRvcn0gYWNjdW11bGF0b3JcclxuICAgICAqIEByZXR1cm4geyFWaWV3Q2FjaGV9XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBWaWV3UHJvY2Vzc29yLnByb3RvdHlwZS5yZXZlcnRVc2VyV3JpdGVfID0gZnVuY3Rpb24gKHZpZXdDYWNoZSwgcGF0aCwgd3JpdGVzQ2FjaGUsIGNvbXBsZXRlU2VydmVyQ2FjaGUsIGFjY3VtdWxhdG9yKSB7XHJcbiAgICAgICAgdmFyIGNvbXBsZXRlO1xyXG4gICAgICAgIGlmICh3cml0ZXNDYWNoZS5zaGFkb3dpbmdXcml0ZShwYXRoKSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2aWV3Q2FjaGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgc291cmNlID0gbmV3IFdyaXRlVHJlZUNvbXBsZXRlQ2hpbGRTb3VyY2Uod3JpdGVzQ2FjaGUsIHZpZXdDYWNoZSwgY29tcGxldGVTZXJ2ZXJDYWNoZSk7XHJcbiAgICAgICAgICAgIHZhciBvbGRFdmVudENhY2hlID0gdmlld0NhY2hlLmdldEV2ZW50Q2FjaGUoKS5nZXROb2RlKCk7XHJcbiAgICAgICAgICAgIHZhciBuZXdFdmVudENhY2hlID0gdm9pZCAwO1xyXG4gICAgICAgICAgICBpZiAocGF0aC5pc0VtcHR5KCkgfHwgcGF0aC5nZXRGcm9udCgpID09PSAnLnByaW9yaXR5Jykge1xyXG4gICAgICAgICAgICAgICAgdmFyIG5ld05vZGUgPSB2b2lkIDA7XHJcbiAgICAgICAgICAgICAgICBpZiAodmlld0NhY2hlLmdldFNlcnZlckNhY2hlKCkuaXNGdWxseUluaXRpYWxpemVkKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdOb2RlID0gd3JpdGVzQ2FjaGUuY2FsY0NvbXBsZXRlRXZlbnRDYWNoZSh2aWV3Q2FjaGUuZ2V0Q29tcGxldGVTZXJ2ZXJTbmFwKCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlcnZlckNoaWxkcmVuID0gdmlld0NhY2hlLmdldFNlcnZlckNhY2hlKCkuZ2V0Tm9kZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGFzc2VydChzZXJ2ZXJDaGlsZHJlbiBpbnN0YW5jZW9mIENoaWxkcmVuTm9kZSwgJ3NlcnZlckNoaWxkcmVuIHdvdWxkIGJlIGNvbXBsZXRlIGlmIGxlYWYgbm9kZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld05vZGUgPSB3cml0ZXNDYWNoZS5jYWxjQ29tcGxldGVFdmVudENoaWxkcmVuKHNlcnZlckNoaWxkcmVuKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG5ld05vZGUgPSBuZXdOb2RlO1xyXG4gICAgICAgICAgICAgICAgbmV3RXZlbnRDYWNoZSA9IHRoaXMuZmlsdGVyXy51cGRhdGVGdWxsTm9kZShvbGRFdmVudENhY2hlLCBuZXdOb2RlLCBhY2N1bXVsYXRvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2hpbGRLZXkgPSBwYXRoLmdldEZyb250KCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbmV3Q2hpbGQgPSB3cml0ZXNDYWNoZS5jYWxjQ29tcGxldGVDaGlsZChjaGlsZEtleSwgdmlld0NhY2hlLmdldFNlcnZlckNhY2hlKCkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5ld0NoaWxkID09IG51bGwgJiZcclxuICAgICAgICAgICAgICAgICAgICB2aWV3Q2FjaGUuZ2V0U2VydmVyQ2FjaGUoKS5pc0NvbXBsZXRlRm9yQ2hpbGQoY2hpbGRLZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3Q2hpbGQgPSBvbGRFdmVudENhY2hlLmdldEltbWVkaWF0ZUNoaWxkKGNoaWxkS2V5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChuZXdDaGlsZCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3RXZlbnRDYWNoZSA9IHRoaXMuZmlsdGVyXy51cGRhdGVDaGlsZChvbGRFdmVudENhY2hlLCBjaGlsZEtleSwgbmV3Q2hpbGQsIHBhdGgucG9wRnJvbnQoKSwgc291cmNlLCBhY2N1bXVsYXRvcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh2aWV3Q2FjaGUuZ2V0RXZlbnRDYWNoZSgpLmdldE5vZGUoKS5oYXNDaGlsZChjaGlsZEtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBObyBjb21wbGV0ZSBjaGlsZCBhdmFpbGFibGUsIGRlbGV0ZSB0aGUgZXhpc3Rpbmcgb25lLCBpZiBhbnlcclxuICAgICAgICAgICAgICAgICAgICBuZXdFdmVudENhY2hlID0gdGhpcy5maWx0ZXJfLnVwZGF0ZUNoaWxkKG9sZEV2ZW50Q2FjaGUsIGNoaWxkS2V5LCBDaGlsZHJlbk5vZGUuRU1QVFlfTk9ERSwgcGF0aC5wb3BGcm9udCgpLCBzb3VyY2UsIGFjY3VtdWxhdG9yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld0V2ZW50Q2FjaGUgPSBvbGRFdmVudENhY2hlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG5ld0V2ZW50Q2FjaGUuaXNFbXB0eSgpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgdmlld0NhY2hlLmdldFNlcnZlckNhY2hlKCkuaXNGdWxseUluaXRpYWxpemVkKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBXZSBtaWdodCBoYXZlIHJldmVydGVkIGFsbCBjaGlsZCB3cml0ZXMuIE1heWJlIHRoZSBvbGQgZXZlbnQgd2FzIGEgbGVhZiBub2RlXHJcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGUgPSB3cml0ZXNDYWNoZS5jYWxjQ29tcGxldGVFdmVudENhY2hlKHZpZXdDYWNoZS5nZXRDb21wbGV0ZVNlcnZlclNuYXAoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBsZXRlLmlzTGVhZk5vZGUoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdFdmVudENhY2hlID0gdGhpcy5maWx0ZXJfLnVwZGF0ZUZ1bGxOb2RlKG5ld0V2ZW50Q2FjaGUsIGNvbXBsZXRlLCBhY2N1bXVsYXRvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbXBsZXRlID1cclxuICAgICAgICAgICAgICAgIHZpZXdDYWNoZS5nZXRTZXJ2ZXJDYWNoZSgpLmlzRnVsbHlJbml0aWFsaXplZCgpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgd3JpdGVzQ2FjaGUuc2hhZG93aW5nV3JpdGUoUGF0aC5FbXB0eSkgIT0gbnVsbDtcclxuICAgICAgICAgICAgcmV0dXJuIHZpZXdDYWNoZS51cGRhdGVFdmVudFNuYXAobmV3RXZlbnRDYWNoZSwgY29tcGxldGUsIHRoaXMuZmlsdGVyXy5maWx0ZXJzTm9kZXMoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBWaWV3UHJvY2Vzc29yO1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQW4gRXZlbnRHZW5lcmF0b3IgaXMgdXNlZCB0byBjb252ZXJ0IFwicmF3XCIgY2hhbmdlcyAoQ2hhbmdlKSBhcyBjb21wdXRlZCBieSB0aGVcclxuICogQ2FjaGVEaWZmZXIgaW50byBhY3R1YWwgZXZlbnRzIChFdmVudCkgdGhhdCBjYW4gYmUgcmFpc2VkLiAgU2VlIGdlbmVyYXRlRXZlbnRzRm9yQ2hhbmdlcygpXHJcbiAqIGZvciBkZXRhaWxzLlxyXG4gKlxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbnZhciBFdmVudEdlbmVyYXRvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IVF1ZXJ5fSBxdWVyeV9cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gRXZlbnRHZW5lcmF0b3IocXVlcnlfKSB7XHJcbiAgICAgICAgdGhpcy5xdWVyeV8gPSBxdWVyeV87XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKiBAdHlwZSB7IUluZGV4fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuaW5kZXhfID0gdGhpcy5xdWVyeV8uZ2V0UXVlcnlQYXJhbXMoKS5nZXRJbmRleCgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHaXZlbiBhIHNldCBvZiByYXcgY2hhbmdlcyAobm8gbW92ZWQgZXZlbnRzIGFuZCBwcmV2TmFtZSBub3Qgc3BlY2lmaWVkIHlldCksIGFuZCBhIHNldCBvZlxyXG4gICAgICogRXZlbnRSZWdpc3RyYXRpb25zIHRoYXQgc2hvdWxkIGJlIG5vdGlmaWVkIG9mIHRoZXNlIGNoYW5nZXMsIGdlbmVyYXRlIHRoZSBhY3R1YWwgZXZlbnRzIHRvIGJlIHJhaXNlZC5cclxuICAgICAqXHJcbiAgICAgKiBOb3RlczpcclxuICAgICAqICAtIGNoaWxkX21vdmVkIGV2ZW50cyB3aWxsIGJlIHN5bnRoZXNpemVkIGF0IHRoaXMgdGltZSBmb3IgYW55IGNoaWxkX2NoYW5nZWQgZXZlbnRzIHRoYXQgYWZmZWN0XHJcbiAgICAgKiAgICBvdXIgaW5kZXguXHJcbiAgICAgKiAgLSBwcmV2TmFtZSB3aWxsIGJlIGNhbGN1bGF0ZWQgYmFzZWQgb24gdGhlIGluZGV4IG9yZGVyaW5nLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IUFycmF5LjwhQ2hhbmdlPn0gY2hhbmdlc1xyXG4gICAgICogQHBhcmFtIHshTm9kZX0gZXZlbnRDYWNoZVxyXG4gICAgICogQHBhcmFtIHshQXJyYXkuPCFFdmVudFJlZ2lzdHJhdGlvbj59IGV2ZW50UmVnaXN0cmF0aW9uc1xyXG4gICAgICogQHJldHVybiB7IUFycmF5LjwhRXZlbnQ+fVxyXG4gICAgICovXHJcbiAgICBFdmVudEdlbmVyYXRvci5wcm90b3R5cGUuZ2VuZXJhdGVFdmVudHNGb3JDaGFuZ2VzID0gZnVuY3Rpb24gKGNoYW5nZXMsIGV2ZW50Q2FjaGUsIGV2ZW50UmVnaXN0cmF0aW9ucykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGV2ZW50cyA9IFtdO1xyXG4gICAgICAgIHZhciBtb3ZlcyA9IFtdO1xyXG4gICAgICAgIGNoYW5nZXMuZm9yRWFjaChmdW5jdGlvbiAoY2hhbmdlKSB7XHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2UudHlwZSA9PT0gQ2hhbmdlLkNISUxEX0NIQU5HRUQgJiZcclxuICAgICAgICAgICAgICAgIF90aGlzLmluZGV4Xy5pbmRleGVkVmFsdWVDaGFuZ2VkKGNoYW5nZS5vbGRTbmFwLCBjaGFuZ2Uuc25hcHNob3ROb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgbW92ZXMucHVzaChDaGFuZ2UuY2hpbGRNb3ZlZENoYW5nZShjaGFuZ2UuY2hpbGROYW1lLCBjaGFuZ2Uuc25hcHNob3ROb2RlKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmdlbmVyYXRlRXZlbnRzRm9yVHlwZV8oZXZlbnRzLCBDaGFuZ2UuQ0hJTERfUkVNT1ZFRCwgY2hhbmdlcywgZXZlbnRSZWdpc3RyYXRpb25zLCBldmVudENhY2hlKTtcclxuICAgICAgICB0aGlzLmdlbmVyYXRlRXZlbnRzRm9yVHlwZV8oZXZlbnRzLCBDaGFuZ2UuQ0hJTERfQURERUQsIGNoYW5nZXMsIGV2ZW50UmVnaXN0cmF0aW9ucywgZXZlbnRDYWNoZSk7XHJcbiAgICAgICAgdGhpcy5nZW5lcmF0ZUV2ZW50c0ZvclR5cGVfKGV2ZW50cywgQ2hhbmdlLkNISUxEX01PVkVELCBtb3ZlcywgZXZlbnRSZWdpc3RyYXRpb25zLCBldmVudENhY2hlKTtcclxuICAgICAgICB0aGlzLmdlbmVyYXRlRXZlbnRzRm9yVHlwZV8oZXZlbnRzLCBDaGFuZ2UuQ0hJTERfQ0hBTkdFRCwgY2hhbmdlcywgZXZlbnRSZWdpc3RyYXRpb25zLCBldmVudENhY2hlKTtcclxuICAgICAgICB0aGlzLmdlbmVyYXRlRXZlbnRzRm9yVHlwZV8oZXZlbnRzLCBDaGFuZ2UuVkFMVUUsIGNoYW5nZXMsIGV2ZW50UmVnaXN0cmF0aW9ucywgZXZlbnRDYWNoZSk7XHJcbiAgICAgICAgcmV0dXJuIGV2ZW50cztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEdpdmVuIGNoYW5nZXMgb2YgYSBzaW5nbGUgY2hhbmdlIHR5cGUsIGdlbmVyYXRlIHRoZSBjb3JyZXNwb25kaW5nIGV2ZW50cy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFBcnJheS48IUV2ZW50Pn0gZXZlbnRzXHJcbiAgICAgKiBAcGFyYW0geyFzdHJpbmd9IGV2ZW50VHlwZVxyXG4gICAgICogQHBhcmFtIHshQXJyYXkuPCFDaGFuZ2U+fSBjaGFuZ2VzXHJcbiAgICAgKiBAcGFyYW0geyFBcnJheS48IUV2ZW50UmVnaXN0cmF0aW9uPn0gcmVnaXN0cmF0aW9uc1xyXG4gICAgICogQHBhcmFtIHshTm9kZX0gZXZlbnRDYWNoZVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgRXZlbnRHZW5lcmF0b3IucHJvdG90eXBlLmdlbmVyYXRlRXZlbnRzRm9yVHlwZV8gPSBmdW5jdGlvbiAoZXZlbnRzLCBldmVudFR5cGUsIGNoYW5nZXMsIHJlZ2lzdHJhdGlvbnMsIGV2ZW50Q2FjaGUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBmaWx0ZXJlZENoYW5nZXMgPSBjaGFuZ2VzLmZpbHRlcihmdW5jdGlvbiAoY2hhbmdlKSB7IHJldHVybiBjaGFuZ2UudHlwZSA9PT0gZXZlbnRUeXBlOyB9KTtcclxuICAgICAgICBmaWx0ZXJlZENoYW5nZXMuc29ydCh0aGlzLmNvbXBhcmVDaGFuZ2VzXy5iaW5kKHRoaXMpKTtcclxuICAgICAgICBmaWx0ZXJlZENoYW5nZXMuZm9yRWFjaChmdW5jdGlvbiAoY2hhbmdlKSB7XHJcbiAgICAgICAgICAgIHZhciBtYXRlcmlhbGl6ZWRDaGFuZ2UgPSBfdGhpcy5tYXRlcmlhbGl6ZVNpbmdsZUNoYW5nZV8oY2hhbmdlLCBldmVudENhY2hlKTtcclxuICAgICAgICAgICAgcmVnaXN0cmF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChyZWdpc3RyYXRpb24pIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZWdpc3RyYXRpb24ucmVzcG9uZHNUbyhjaGFuZ2UudHlwZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBldmVudHMucHVzaChyZWdpc3RyYXRpb24uY3JlYXRlRXZlbnQobWF0ZXJpYWxpemVkQ2hhbmdlLCBfdGhpcy5xdWVyeV8pKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFDaGFuZ2V9IGNoYW5nZVxyXG4gICAgICogQHBhcmFtIHshTm9kZX0gZXZlbnRDYWNoZVxyXG4gICAgICogQHJldHVybiB7IUNoYW5nZX1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIEV2ZW50R2VuZXJhdG9yLnByb3RvdHlwZS5tYXRlcmlhbGl6ZVNpbmdsZUNoYW5nZV8gPSBmdW5jdGlvbiAoY2hhbmdlLCBldmVudENhY2hlKSB7XHJcbiAgICAgICAgaWYgKGNoYW5nZS50eXBlID09PSAndmFsdWUnIHx8IGNoYW5nZS50eXBlID09PSAnY2hpbGRfcmVtb3ZlZCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNoYW5nZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNoYW5nZS5wcmV2TmFtZSA9IGV2ZW50Q2FjaGUuZ2V0UHJlZGVjZXNzb3JDaGlsZE5hbWUoXHJcbiAgICAgICAgICAgIC8qKiBAdHlwZSB7IXN0cmluZ30gKi9cclxuICAgICAgICAgICAgY2hhbmdlLmNoaWxkTmFtZSwgY2hhbmdlLnNuYXBzaG90Tm9kZSwgdGhpcy5pbmRleF8pO1xyXG4gICAgICAgICAgICByZXR1cm4gY2hhbmdlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IUNoYW5nZX0gYVxyXG4gICAgICogQHBhcmFtIHshQ2hhbmdlfSBiXHJcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBFdmVudEdlbmVyYXRvci5wcm90b3R5cGUuY29tcGFyZUNoYW5nZXNfID0gZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICBpZiAoYS5jaGlsZE5hbWUgPT0gbnVsbCB8fCBiLmNoaWxkTmFtZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IGFzc2VydGlvbkVycm9yKCdTaG91bGQgb25seSBjb21wYXJlIGNoaWxkXyBldmVudHMuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBhV3JhcHBlZCA9IG5ldyBOYW1lZE5vZGUoYS5jaGlsZE5hbWUsIGEuc25hcHNob3ROb2RlKTtcclxuICAgICAgICB2YXIgYldyYXBwZWQgPSBuZXcgTmFtZWROb2RlKGIuY2hpbGROYW1lLCBiLnNuYXBzaG90Tm9kZSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5kZXhfLmNvbXBhcmUoYVdyYXBwZWQsIGJXcmFwcGVkKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRXZlbnRHZW5lcmF0b3I7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBBIHZpZXcgcmVwcmVzZW50cyBhIHNwZWNpZmljIGxvY2F0aW9uIGFuZCBxdWVyeSB0aGF0IGhhcyAxIG9yIG1vcmUgZXZlbnQgcmVnaXN0cmF0aW9ucy5cclxuICpcclxuICogSXQgZG9lcyBzZXZlcmFsIHRoaW5nczpcclxuICogIC0gTWFpbnRhaW5zIHRoZSBsaXN0IG9mIGV2ZW50IHJlZ2lzdHJhdGlvbnMgZm9yIHRoaXMgbG9jYXRpb24vcXVlcnkuXHJcbiAqICAtIE1haW50YWlucyBhIGNhY2hlIG9mIHRoZSBkYXRhIHZpc2libGUgZm9yIHRoaXMgbG9jYXRpb24vcXVlcnkuXHJcbiAqICAtIEFwcGxpZXMgbmV3IG9wZXJhdGlvbnMgKHZpYSBhcHBseU9wZXJhdGlvbiksIHVwZGF0ZXMgdGhlIGNhY2hlLCBhbmQgYmFzZWQgb24gdGhlIGV2ZW50XHJcbiAqICAgIHJlZ2lzdHJhdGlvbnMgcmV0dXJucyB0aGUgc2V0IG9mIGV2ZW50cyB0byBiZSByYWlzZWQuXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxudmFyIFZpZXcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFRdWVyeX0gcXVlcnlfXHJcbiAgICAgKiBAcGFyYW0geyFWaWV3Q2FjaGV9IGluaXRpYWxWaWV3Q2FjaGVcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gVmlldyhxdWVyeV8sIGluaXRpYWxWaWV3Q2FjaGUpIHtcclxuICAgICAgICB0aGlzLnF1ZXJ5XyA9IHF1ZXJ5XztcclxuICAgICAgICB0aGlzLmV2ZW50UmVnaXN0cmF0aW9uc18gPSBbXTtcclxuICAgICAgICB2YXIgcGFyYW1zID0gdGhpcy5xdWVyeV8uZ2V0UXVlcnlQYXJhbXMoKTtcclxuICAgICAgICB2YXIgaW5kZXhGaWx0ZXIgPSBuZXcgSW5kZXhlZEZpbHRlcihwYXJhbXMuZ2V0SW5kZXgoKSk7XHJcbiAgICAgICAgdmFyIGZpbHRlciA9IHBhcmFtcy5nZXROb2RlRmlsdGVyKCk7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHR5cGUge1ZpZXdQcm9jZXNzb3J9XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnByb2Nlc3Nvcl8gPSBuZXcgVmlld1Byb2Nlc3NvcihmaWx0ZXIpO1xyXG4gICAgICAgIHZhciBpbml0aWFsU2VydmVyQ2FjaGUgPSBpbml0aWFsVmlld0NhY2hlLmdldFNlcnZlckNhY2hlKCk7XHJcbiAgICAgICAgdmFyIGluaXRpYWxFdmVudENhY2hlID0gaW5pdGlhbFZpZXdDYWNoZS5nZXRFdmVudENhY2hlKCk7XHJcbiAgICAgICAgLy8gRG9uJ3QgZmlsdGVyIHNlcnZlciBub2RlIHdpdGggb3RoZXIgZmlsdGVyIHRoYW4gaW5kZXgsIHdhaXQgZm9yIHRhZ2dlZCBsaXN0ZW5cclxuICAgICAgICB2YXIgc2VydmVyU25hcCA9IGluZGV4RmlsdGVyLnVwZGF0ZUZ1bGxOb2RlKENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFLCBpbml0aWFsU2VydmVyQ2FjaGUuZ2V0Tm9kZSgpLCBudWxsKTtcclxuICAgICAgICB2YXIgZXZlbnRTbmFwID0gZmlsdGVyLnVwZGF0ZUZ1bGxOb2RlKENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFLCBpbml0aWFsRXZlbnRDYWNoZS5nZXROb2RlKCksIG51bGwpO1xyXG4gICAgICAgIHZhciBuZXdTZXJ2ZXJDYWNoZSA9IG5ldyBDYWNoZU5vZGUoc2VydmVyU25hcCwgaW5pdGlhbFNlcnZlckNhY2hlLmlzRnVsbHlJbml0aWFsaXplZCgpLCBpbmRleEZpbHRlci5maWx0ZXJzTm9kZXMoKSk7XHJcbiAgICAgICAgdmFyIG5ld0V2ZW50Q2FjaGUgPSBuZXcgQ2FjaGVOb2RlKGV2ZW50U25hcCwgaW5pdGlhbEV2ZW50Q2FjaGUuaXNGdWxseUluaXRpYWxpemVkKCksIGZpbHRlci5maWx0ZXJzTm9kZXMoKSk7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHR5cGUgeyFWaWV3Q2FjaGV9XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnZpZXdDYWNoZV8gPSBuZXcgVmlld0NhY2hlKG5ld0V2ZW50Q2FjaGUsIG5ld1NlcnZlckNhY2hlKTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAdHlwZSB7IUV2ZW50R2VuZXJhdG9yfVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5ldmVudEdlbmVyYXRvcl8gPSBuZXcgRXZlbnRHZW5lcmF0b3IodGhpcy5xdWVyeV8pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHshUXVlcnl9XHJcbiAgICAgKi9cclxuICAgIFZpZXcucHJvdG90eXBlLmdldFF1ZXJ5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnF1ZXJ5XztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4gez9Ob2RlfVxyXG4gICAgICovXHJcbiAgICBWaWV3LnByb3RvdHlwZS5nZXRTZXJ2ZXJDYWNoZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52aWV3Q2FjaGVfLmdldFNlcnZlckNhY2hlKCkuZ2V0Tm9kZSgpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gcGF0aFxyXG4gICAgICogQHJldHVybiB7P05vZGV9XHJcbiAgICAgKi9cclxuICAgIFZpZXcucHJvdG90eXBlLmdldENvbXBsZXRlU2VydmVyQ2FjaGUgPSBmdW5jdGlvbiAocGF0aCkge1xyXG4gICAgICAgIHZhciBjYWNoZSA9IHRoaXMudmlld0NhY2hlXy5nZXRDb21wbGV0ZVNlcnZlclNuYXAoKTtcclxuICAgICAgICBpZiAoY2FjaGUpIHtcclxuICAgICAgICAgICAgLy8gSWYgdGhpcyBpc24ndCBhIFwibG9hZHNBbGxEYXRhXCIgdmlldywgdGhlbiBjYWNoZSBpc24ndCBhY3R1YWxseSBhIGNvbXBsZXRlIGNhY2hlIGFuZFxyXG4gICAgICAgICAgICAvLyB3ZSBuZWVkIHRvIHNlZSBpZiBpdCBjb250YWlucyB0aGUgY2hpbGQgd2UncmUgaW50ZXJlc3RlZCBpbi5cclxuICAgICAgICAgICAgaWYgKHRoaXMucXVlcnlfLmdldFF1ZXJ5UGFyYW1zKCkubG9hZHNBbGxEYXRhKCkgfHxcclxuICAgICAgICAgICAgICAgICghcGF0aC5pc0VtcHR5KCkgJiYgIWNhY2hlLmdldEltbWVkaWF0ZUNoaWxkKHBhdGguZ2V0RnJvbnQoKSkuaXNFbXB0eSgpKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhY2hlLmdldENoaWxkKHBhdGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgVmlldy5wcm90b3R5cGUuaXNFbXB0eSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5ldmVudFJlZ2lzdHJhdGlvbnNfLmxlbmd0aCA9PT0gMDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IUV2ZW50UmVnaXN0cmF0aW9ufSBldmVudFJlZ2lzdHJhdGlvblxyXG4gICAgICovXHJcbiAgICBWaWV3LnByb3RvdHlwZS5hZGRFdmVudFJlZ2lzdHJhdGlvbiA9IGZ1bmN0aW9uIChldmVudFJlZ2lzdHJhdGlvbikge1xyXG4gICAgICAgIHRoaXMuZXZlbnRSZWdpc3RyYXRpb25zXy5wdXNoKGV2ZW50UmVnaXN0cmF0aW9uKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7P0V2ZW50UmVnaXN0cmF0aW9ufSBldmVudFJlZ2lzdHJhdGlvbiBJZiBudWxsLCByZW1vdmUgYWxsIGNhbGxiYWNrcy5cclxuICAgICAqIEBwYXJhbSB7RXJyb3I9fSBjYW5jZWxFcnJvciBJZiBhIGNhbmNlbEVycm9yIGlzIHByb3ZpZGVkLCBhcHByb3ByaWF0ZSBjYW5jZWwgZXZlbnRzIHdpbGwgYmUgcmV0dXJuZWQuXHJcbiAgICAgKiBAcmV0dXJuIHshQXJyYXkuPCFFdmVudD59IENhbmNlbCBldmVudHMsIGlmIGNhbmNlbEVycm9yIHdhcyBwcm92aWRlZC5cclxuICAgICAqL1xyXG4gICAgVmlldy5wcm90b3R5cGUucmVtb3ZlRXZlbnRSZWdpc3RyYXRpb24gPSBmdW5jdGlvbiAoZXZlbnRSZWdpc3RyYXRpb24sIGNhbmNlbEVycm9yKSB7XHJcbiAgICAgICAgdmFyIGNhbmNlbEV2ZW50cyA9IFtdO1xyXG4gICAgICAgIGlmIChjYW5jZWxFcnJvcikge1xyXG4gICAgICAgICAgICBhc3NlcnQoZXZlbnRSZWdpc3RyYXRpb24gPT0gbnVsbCwgJ0EgY2FuY2VsIHNob3VsZCBjYW5jZWwgYWxsIGV2ZW50IHJlZ2lzdHJhdGlvbnMuJyk7XHJcbiAgICAgICAgICAgIHZhciBwYXRoXzEgPSB0aGlzLnF1ZXJ5Xy5wYXRoO1xyXG4gICAgICAgICAgICB0aGlzLmV2ZW50UmVnaXN0cmF0aW9uc18uZm9yRWFjaChmdW5jdGlvbiAocmVnaXN0cmF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBjYW5jZWxFcnJvciAvKiogQHR5cGUgeyFFcnJvcn0gKi8gPSBjYW5jZWxFcnJvcjtcclxuICAgICAgICAgICAgICAgIHZhciBtYXliZUV2ZW50ID0gcmVnaXN0cmF0aW9uLmNyZWF0ZUNhbmNlbEV2ZW50KGNhbmNlbEVycm9yLCBwYXRoXzEpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG1heWJlRXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYW5jZWxFdmVudHMucHVzaChtYXliZUV2ZW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChldmVudFJlZ2lzdHJhdGlvbikge1xyXG4gICAgICAgICAgICB2YXIgcmVtYWluaW5nID0gW107XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ldmVudFJlZ2lzdHJhdGlvbnNfLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZXhpc3RpbmcgPSB0aGlzLmV2ZW50UmVnaXN0cmF0aW9uc19baV07XHJcbiAgICAgICAgICAgICAgICBpZiAoIWV4aXN0aW5nLm1hdGNoZXMoZXZlbnRSZWdpc3RyYXRpb24pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVtYWluaW5nLnB1c2goZXhpc3RpbmcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZXZlbnRSZWdpc3RyYXRpb24uaGFzQW55Q2FsbGJhY2soKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFdlJ3JlIHJlbW92aW5nIGp1c3QgdGhpcyBvbmVcclxuICAgICAgICAgICAgICAgICAgICByZW1haW5pbmcgPSByZW1haW5pbmcuY29uY2F0KHRoaXMuZXZlbnRSZWdpc3RyYXRpb25zXy5zbGljZShpICsgMSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuZXZlbnRSZWdpc3RyYXRpb25zXyA9IHJlbWFpbmluZztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXZlbnRSZWdpc3RyYXRpb25zXyA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY2FuY2VsRXZlbnRzO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQXBwbGllcyB0aGUgZ2l2ZW4gT3BlcmF0aW9uLCB1cGRhdGVzIG91ciBjYWNoZSwgYW5kIHJldHVybnMgdGhlIGFwcHJvcHJpYXRlIGV2ZW50cy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFPcGVyYXRpb259IG9wZXJhdGlvblxyXG4gICAgICogQHBhcmFtIHshV3JpdGVUcmVlUmVmfSB3cml0ZXNDYWNoZVxyXG4gICAgICogQHBhcmFtIHs/Tm9kZX0gY29tcGxldGVTZXJ2ZXJDYWNoZVxyXG4gICAgICogQHJldHVybiB7IUFycmF5LjwhRXZlbnQ+fVxyXG4gICAgICovXHJcbiAgICBWaWV3LnByb3RvdHlwZS5hcHBseU9wZXJhdGlvbiA9IGZ1bmN0aW9uIChvcGVyYXRpb24sIHdyaXRlc0NhY2hlLCBjb21wbGV0ZVNlcnZlckNhY2hlKSB7XHJcbiAgICAgICAgaWYgKG9wZXJhdGlvbi50eXBlID09PSBPcGVyYXRpb25UeXBlLk1FUkdFICYmXHJcbiAgICAgICAgICAgIG9wZXJhdGlvbi5zb3VyY2UucXVlcnlJZCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBhc3NlcnQodGhpcy52aWV3Q2FjaGVfLmdldENvbXBsZXRlU2VydmVyU25hcCgpLCAnV2Ugc2hvdWxkIGFsd2F5cyBoYXZlIGEgZnVsbCBjYWNoZSBiZWZvcmUgaGFuZGxpbmcgbWVyZ2VzJyk7XHJcbiAgICAgICAgICAgIGFzc2VydCh0aGlzLnZpZXdDYWNoZV8uZ2V0Q29tcGxldGVFdmVudFNuYXAoKSwgJ01pc3NpbmcgZXZlbnQgY2FjaGUsIGV2ZW4gdGhvdWdoIHdlIGhhdmUgYSBzZXJ2ZXIgY2FjaGUnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG9sZFZpZXdDYWNoZSA9IHRoaXMudmlld0NhY2hlXztcclxuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5wcm9jZXNzb3JfLmFwcGx5T3BlcmF0aW9uKG9sZFZpZXdDYWNoZSwgb3BlcmF0aW9uLCB3cml0ZXNDYWNoZSwgY29tcGxldGVTZXJ2ZXJDYWNoZSk7XHJcbiAgICAgICAgdGhpcy5wcm9jZXNzb3JfLmFzc2VydEluZGV4ZWQocmVzdWx0LnZpZXdDYWNoZSk7XHJcbiAgICAgICAgYXNzZXJ0KHJlc3VsdC52aWV3Q2FjaGUuZ2V0U2VydmVyQ2FjaGUoKS5pc0Z1bGx5SW5pdGlhbGl6ZWQoKSB8fFxyXG4gICAgICAgICAgICAhb2xkVmlld0NhY2hlLmdldFNlcnZlckNhY2hlKCkuaXNGdWxseUluaXRpYWxpemVkKCksICdPbmNlIGEgc2VydmVyIHNuYXAgaXMgY29tcGxldGUsIGl0IHNob3VsZCBuZXZlciBnbyBiYWNrJyk7XHJcbiAgICAgICAgdGhpcy52aWV3Q2FjaGVfID0gcmVzdWx0LnZpZXdDYWNoZTtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZW5lcmF0ZUV2ZW50c0ZvckNoYW5nZXNfKHJlc3VsdC5jaGFuZ2VzLCByZXN1bHQudmlld0NhY2hlLmdldEV2ZW50Q2FjaGUoKS5nZXROb2RlKCksIG51bGwpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshRXZlbnRSZWdpc3RyYXRpb259IHJlZ2lzdHJhdGlvblxyXG4gICAgICogQHJldHVybiB7IUFycmF5LjwhRXZlbnQ+fVxyXG4gICAgICovXHJcbiAgICBWaWV3LnByb3RvdHlwZS5nZXRJbml0aWFsRXZlbnRzID0gZnVuY3Rpb24gKHJlZ2lzdHJhdGlvbikge1xyXG4gICAgICAgIHZhciBldmVudFNuYXAgPSB0aGlzLnZpZXdDYWNoZV8uZ2V0RXZlbnRDYWNoZSgpO1xyXG4gICAgICAgIHZhciBpbml0aWFsQ2hhbmdlcyA9IFtdO1xyXG4gICAgICAgIGlmICghZXZlbnRTbmFwLmdldE5vZGUoKS5pc0xlYWZOb2RlKCkpIHtcclxuICAgICAgICAgICAgdmFyIGV2ZW50Tm9kZSA9IGV2ZW50U25hcC5nZXROb2RlKCk7XHJcbiAgICAgICAgICAgIGV2ZW50Tm9kZS5mb3JFYWNoQ2hpbGQoUFJJT1JJVFlfSU5ERVgsIGZ1bmN0aW9uIChrZXksIGNoaWxkTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgaW5pdGlhbENoYW5nZXMucHVzaChDaGFuZ2UuY2hpbGRBZGRlZENoYW5nZShrZXksIGNoaWxkTm9kZSkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGV2ZW50U25hcC5pc0Z1bGx5SW5pdGlhbGl6ZWQoKSkge1xyXG4gICAgICAgICAgICBpbml0aWFsQ2hhbmdlcy5wdXNoKENoYW5nZS52YWx1ZUNoYW5nZShldmVudFNuYXAuZ2V0Tm9kZSgpKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmdlbmVyYXRlRXZlbnRzRm9yQ2hhbmdlc18oaW5pdGlhbENoYW5nZXMsIGV2ZW50U25hcC5nZXROb2RlKCksIHJlZ2lzdHJhdGlvbik7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQHBhcmFtIHshQXJyYXkuPCFDaGFuZ2U+fSBjaGFuZ2VzXHJcbiAgICAgKiBAcGFyYW0geyFOb2RlfSBldmVudENhY2hlXHJcbiAgICAgKiBAcGFyYW0ge0V2ZW50UmVnaXN0cmF0aW9uPX0gZXZlbnRSZWdpc3RyYXRpb25cclxuICAgICAqIEByZXR1cm4geyFBcnJheS48IUV2ZW50Pn1cclxuICAgICAqL1xyXG4gICAgVmlldy5wcm90b3R5cGUuZ2VuZXJhdGVFdmVudHNGb3JDaGFuZ2VzXyA9IGZ1bmN0aW9uIChjaGFuZ2VzLCBldmVudENhY2hlLCBldmVudFJlZ2lzdHJhdGlvbikge1xyXG4gICAgICAgIHZhciByZWdpc3RyYXRpb25zID0gZXZlbnRSZWdpc3RyYXRpb25cclxuICAgICAgICAgICAgPyBbZXZlbnRSZWdpc3RyYXRpb25dXHJcbiAgICAgICAgICAgIDogdGhpcy5ldmVudFJlZ2lzdHJhdGlvbnNfO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmV2ZW50R2VuZXJhdG9yXy5nZW5lcmF0ZUV2ZW50c0ZvckNoYW5nZXMoY2hhbmdlcywgZXZlbnRDYWNoZSwgcmVnaXN0cmF0aW9ucyk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFZpZXc7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBfX3JlZmVyZW5jZUNvbnN0cnVjdG9yJDE7XHJcbi8qKlxyXG4gKiBTeW5jUG9pbnQgcmVwcmVzZW50cyBhIHNpbmdsZSBsb2NhdGlvbiBpbiBhIFN5bmNUcmVlIHdpdGggMSBvciBtb3JlIGV2ZW50IHJlZ2lzdHJhdGlvbnMsIG1lYW5pbmcgd2UgbmVlZCB0b1xyXG4gKiBtYWludGFpbiAxIG9yIG1vcmUgVmlld3MgYXQgdGhpcyBsb2NhdGlvbiB0byBjYWNoZSBzZXJ2ZXIgZGF0YSBhbmQgcmFpc2UgYXBwcm9wcmlhdGUgZXZlbnRzIGZvciBzZXJ2ZXIgY2hhbmdlc1xyXG4gKiBhbmQgdXNlciB3cml0ZXMgKHNldCwgdHJhbnNhY3Rpb24sIHVwZGF0ZSkuXHJcbiAqXHJcbiAqIEl0J3MgcmVzcG9uc2libGUgZm9yOlxyXG4gKiAgLSBNYWludGFpbmluZyB0aGUgc2V0IG9mIDEgb3IgbW9yZSB2aWV3cyBuZWNlc3NhcnkgYXQgdGhpcyBsb2NhdGlvbiAoYSBTeW5jUG9pbnQgd2l0aCAwIHZpZXdzIHNob3VsZCBiZSByZW1vdmVkKS5cclxuICogIC0gUHJveHlpbmcgdXNlciAvIHNlcnZlciBvcGVyYXRpb25zIHRvIHRoZSB2aWV3cyBhcyBhcHByb3ByaWF0ZSAoaS5lLiBhcHBseVNlcnZlck92ZXJ3cml0ZSxcclxuICogICAgYXBwbHlVc2VyT3ZlcndyaXRlLCBldGMuKVxyXG4gKi9cclxudmFyIFN5bmNQb2ludCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFN5bmNQb2ludCgpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgVmlld3MgYmVpbmcgdHJhY2tlZCBhdCB0aGlzIGxvY2F0aW9uIGluIHRoZSB0cmVlLCBzdG9yZWQgYXMgYSBtYXAgd2hlcmUgdGhlIGtleSBpcyBhXHJcbiAgICAgICAgICogcXVlcnlJZCBhbmQgdGhlIHZhbHVlIGlzIHRoZSBWaWV3IGZvciB0aGF0IHF1ZXJ5LlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogTk9URTogVGhpcyBsaXN0IHdpbGwgYmUgcXVpdGUgc21hbGwgKHVzdWFsbHkgMSwgYnV0IHBlcmhhcHMgMiBvciAzOyBhbnkgbW9yZSBpcyBhbiBvZGQgdXNlIGNhc2UpLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMudmlld3MgPSBuZXcgTWFwKCk7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3luY1BvaW50LCBcIl9fcmVmZXJlbmNlQ29uc3RydWN0b3JcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBhc3NlcnQoX19yZWZlcmVuY2VDb25zdHJ1Y3RvciQxLCAnUmVmZXJlbmNlLnRzIGhhcyBub3QgYmVlbiBsb2FkZWQnKTtcclxuICAgICAgICAgICAgcmV0dXJuIF9fcmVmZXJlbmNlQ29uc3RydWN0b3IkMTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbCkge1xyXG4gICAgICAgICAgICBhc3NlcnQoIV9fcmVmZXJlbmNlQ29uc3RydWN0b3IkMSwgJ19fcmVmZXJlbmNlQ29uc3RydWN0b3IgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkJyk7XHJcbiAgICAgICAgICAgIF9fcmVmZXJlbmNlQ29uc3RydWN0b3IkMSA9IHZhbDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBTeW5jUG9pbnQucHJvdG90eXBlLmlzRW1wdHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmlld3Muc2l6ZSA9PT0gMDtcclxuICAgIH07XHJcbiAgICBTeW5jUG9pbnQucHJvdG90eXBlLmFwcGx5T3BlcmF0aW9uID0gZnVuY3Rpb24gKG9wZXJhdGlvbiwgd3JpdGVzQ2FjaGUsIG9wdENvbXBsZXRlU2VydmVyQ2FjaGUpIHtcclxuICAgICAgICB2YXIgZV8xLCBfYTtcclxuICAgICAgICB2YXIgcXVlcnlJZCA9IG9wZXJhdGlvbi5zb3VyY2UucXVlcnlJZDtcclxuICAgICAgICBpZiAocXVlcnlJZCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB2YXIgdmlldyA9IHRoaXMudmlld3MuZ2V0KHF1ZXJ5SWQpO1xyXG4gICAgICAgICAgICBhc3NlcnQodmlldyAhPSBudWxsLCAnU3luY1RyZWUgZ2F2ZSB1cyBhbiBvcCBmb3IgYW4gaW52YWxpZCBxdWVyeS4nKTtcclxuICAgICAgICAgICAgcmV0dXJuIHZpZXcuYXBwbHlPcGVyYXRpb24ob3BlcmF0aW9uLCB3cml0ZXNDYWNoZSwgb3B0Q29tcGxldGVTZXJ2ZXJDYWNoZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgZXZlbnRzID0gW107XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfYiA9IF9fdmFsdWVzKHRoaXMudmlld3MudmFsdWVzKCkpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZpZXcgPSBfYy52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBldmVudHMgPSBldmVudHMuY29uY2F0KHZpZXcuYXBwbHlPcGVyYXRpb24ob3BlcmF0aW9uLCB3cml0ZXNDYWNoZSwgb3B0Q29tcGxldGVTZXJ2ZXJDYWNoZSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XHJcbiAgICAgICAgICAgIGZpbmFsbHkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGV2ZW50cztcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBZGQgYW4gZXZlbnQgY2FsbGJhY2sgZm9yIHRoZSBzcGVjaWZpZWQgcXVlcnkuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHshUXVlcnl9IHF1ZXJ5XHJcbiAgICAgKiBAcGFyYW0geyFFdmVudFJlZ2lzdHJhdGlvbn0gZXZlbnRSZWdpc3RyYXRpb25cclxuICAgICAqIEBwYXJhbSB7IVdyaXRlVHJlZVJlZn0gd3JpdGVzQ2FjaGVcclxuICAgICAqIEBwYXJhbSB7P05vZGV9IHNlcnZlckNhY2hlIENvbXBsZXRlIHNlcnZlciBjYWNoZSwgaWYgd2UgaGF2ZSBpdC5cclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gc2VydmVyQ2FjaGVDb21wbGV0ZVxyXG4gICAgICogQHJldHVybiB7IUFycmF5LjwhRXZlbnQ+fSBFdmVudHMgdG8gcmFpc2UuXHJcbiAgICAgKi9cclxuICAgIFN5bmNQb2ludC5wcm90b3R5cGUuYWRkRXZlbnRSZWdpc3RyYXRpb24gPSBmdW5jdGlvbiAocXVlcnksIGV2ZW50UmVnaXN0cmF0aW9uLCB3cml0ZXNDYWNoZSwgc2VydmVyQ2FjaGUsIHNlcnZlckNhY2hlQ29tcGxldGUpIHtcclxuICAgICAgICB2YXIgcXVlcnlJZCA9IHF1ZXJ5LnF1ZXJ5SWRlbnRpZmllcigpO1xyXG4gICAgICAgIHZhciB2aWV3ID0gdGhpcy52aWV3cy5nZXQocXVlcnlJZCk7XHJcbiAgICAgICAgaWYgKCF2aWV3KSB7XHJcbiAgICAgICAgICAgIC8vIFRPRE86IG1ha2Ugd3JpdGVzQ2FjaGUgdGFrZSBmbGFnIGZvciBjb21wbGV0ZSBzZXJ2ZXIgbm9kZVxyXG4gICAgICAgICAgICB2YXIgZXZlbnRDYWNoZSA9IHdyaXRlc0NhY2hlLmNhbGNDb21wbGV0ZUV2ZW50Q2FjaGUoc2VydmVyQ2FjaGVDb21wbGV0ZSA/IHNlcnZlckNhY2hlIDogbnVsbCk7XHJcbiAgICAgICAgICAgIHZhciBldmVudENhY2hlQ29tcGxldGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKGV2ZW50Q2FjaGUpIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50Q2FjaGVDb21wbGV0ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoc2VydmVyQ2FjaGUgaW5zdGFuY2VvZiBDaGlsZHJlbk5vZGUpIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50Q2FjaGUgPSB3cml0ZXNDYWNoZS5jYWxjQ29tcGxldGVFdmVudENoaWxkcmVuKHNlcnZlckNhY2hlKTtcclxuICAgICAgICAgICAgICAgIGV2ZW50Q2FjaGVDb21wbGV0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZXZlbnRDYWNoZSA9IENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFO1xyXG4gICAgICAgICAgICAgICAgZXZlbnRDYWNoZUNvbXBsZXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHZpZXdDYWNoZSA9IG5ldyBWaWV3Q2FjaGUobmV3IENhY2hlTm9kZShcclxuICAgICAgICAgICAgLyoqIEB0eXBlIHshTm9kZX0gKi8gZXZlbnRDYWNoZSwgZXZlbnRDYWNoZUNvbXBsZXRlLCBmYWxzZSksIG5ldyBDYWNoZU5vZGUoXHJcbiAgICAgICAgICAgIC8qKiBAdHlwZSB7IU5vZGV9ICovIHNlcnZlckNhY2hlLCBzZXJ2ZXJDYWNoZUNvbXBsZXRlLCBmYWxzZSkpO1xyXG4gICAgICAgICAgICB2aWV3ID0gbmV3IFZpZXcocXVlcnksIHZpZXdDYWNoZSk7XHJcbiAgICAgICAgICAgIHRoaXMudmlld3Muc2V0KHF1ZXJ5SWQsIHZpZXcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBUaGlzIGlzIGd1YXJhbnRlZWQgdG8gZXhpc3Qgbm93LCB3ZSBqdXN0IGNyZWF0ZWQgYW55dGhpbmcgdGhhdCB3YXMgbWlzc2luZ1xyXG4gICAgICAgIHZpZXcuYWRkRXZlbnRSZWdpc3RyYXRpb24oZXZlbnRSZWdpc3RyYXRpb24pO1xyXG4gICAgICAgIHJldHVybiB2aWV3LmdldEluaXRpYWxFdmVudHMoZXZlbnRSZWdpc3RyYXRpb24pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlIGV2ZW50IGNhbGxiYWNrKHMpLiAgUmV0dXJuIGNhbmNlbEV2ZW50cyBpZiBhIGNhbmNlbEVycm9yIGlzIHNwZWNpZmllZC5cclxuICAgICAqXHJcbiAgICAgKiBJZiBxdWVyeSBpcyB0aGUgZGVmYXVsdCBxdWVyeSwgd2UnbGwgY2hlY2sgYWxsIHZpZXdzIGZvciB0aGUgc3BlY2lmaWVkIGV2ZW50UmVnaXN0cmF0aW9uLlxyXG4gICAgICogSWYgZXZlbnRSZWdpc3RyYXRpb24gaXMgbnVsbCwgd2UnbGwgcmVtb3ZlIGFsbCBjYWxsYmFja3MgZm9yIHRoZSBzcGVjaWZpZWQgdmlldyhzKS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFRdWVyeX0gcXVlcnlcclxuICAgICAqIEBwYXJhbSB7P0V2ZW50UmVnaXN0cmF0aW9ufSBldmVudFJlZ2lzdHJhdGlvbiBJZiBudWxsLCByZW1vdmUgYWxsIGNhbGxiYWNrcy5cclxuICAgICAqIEBwYXJhbSB7RXJyb3I9fSBjYW5jZWxFcnJvciBJZiBhIGNhbmNlbEVycm9yIGlzIHByb3ZpZGVkLCBhcHByb3ByaWF0ZSBjYW5jZWwgZXZlbnRzIHdpbGwgYmUgcmV0dXJuZWQuXHJcbiAgICAgKiBAcmV0dXJuIHt7cmVtb3ZlZDohQXJyYXkuPCFRdWVyeT4sIGV2ZW50czohQXJyYXkuPCFFdmVudD59fSByZW1vdmVkIHF1ZXJpZXMgYW5kIGFueSBjYW5jZWwgZXZlbnRzXHJcbiAgICAgKi9cclxuICAgIFN5bmNQb2ludC5wcm90b3R5cGUucmVtb3ZlRXZlbnRSZWdpc3RyYXRpb24gPSBmdW5jdGlvbiAocXVlcnksIGV2ZW50UmVnaXN0cmF0aW9uLCBjYW5jZWxFcnJvcikge1xyXG4gICAgICAgIHZhciBlXzIsIF9hO1xyXG4gICAgICAgIHZhciBxdWVyeUlkID0gcXVlcnkucXVlcnlJZGVudGlmaWVyKCk7XHJcbiAgICAgICAgdmFyIHJlbW92ZWQgPSBbXTtcclxuICAgICAgICB2YXIgY2FuY2VsRXZlbnRzID0gW107XHJcbiAgICAgICAgdmFyIGhhZENvbXBsZXRlVmlldyA9IHRoaXMuaGFzQ29tcGxldGVWaWV3KCk7XHJcbiAgICAgICAgaWYgKHF1ZXJ5SWQgPT09ICdkZWZhdWx0Jykge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgLy8gV2hlbiB5b3UgZG8gcmVmLm9mZiguLi4pLCB3ZSBzZWFyY2ggYWxsIHZpZXdzIGZvciB0aGUgcmVnaXN0cmF0aW9uIHRvIHJlbW92ZS5cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9iID0gX192YWx1ZXModGhpcy52aWV3cy5lbnRyaWVzKCkpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9kID0gX19yZWFkKF9jLnZhbHVlLCAyKSwgdmlld1F1ZXJ5SWQgPSBfZFswXSwgdmlldyA9IF9kWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbEV2ZW50cyA9IGNhbmNlbEV2ZW50cy5jb25jYXQodmlldy5yZW1vdmVFdmVudFJlZ2lzdHJhdGlvbihldmVudFJlZ2lzdHJhdGlvbiwgY2FuY2VsRXJyb3IpKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmlldy5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3cy5kZWxldGUodmlld1F1ZXJ5SWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSdsbCBkZWFsIHdpdGggY29tcGxldGUgdmlld3MgbGF0ZXIuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdmlldy5nZXRRdWVyeSgpLmdldFF1ZXJ5UGFyYW1zKCkubG9hZHNBbGxEYXRhKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZWQucHVzaCh2aWV3LmdldFF1ZXJ5KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlXzJfMSkgeyBlXzIgPSB7IGVycm9yOiBlXzJfMSB9OyB9XHJcbiAgICAgICAgICAgIGZpbmFsbHkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yOyB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIHJlbW92ZSB0aGUgY2FsbGJhY2sgZnJvbSB0aGUgc3BlY2lmaWMgdmlldy5cclxuICAgICAgICAgICAgdmFyIHZpZXcgPSB0aGlzLnZpZXdzLmdldChxdWVyeUlkKTtcclxuICAgICAgICAgICAgaWYgKHZpZXcpIHtcclxuICAgICAgICAgICAgICAgIGNhbmNlbEV2ZW50cyA9IGNhbmNlbEV2ZW50cy5jb25jYXQodmlldy5yZW1vdmVFdmVudFJlZ2lzdHJhdGlvbihldmVudFJlZ2lzdHJhdGlvbiwgY2FuY2VsRXJyb3IpKTtcclxuICAgICAgICAgICAgICAgIGlmICh2aWV3LmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlld3MuZGVsZXRlKHF1ZXJ5SWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFdlJ2xsIGRlYWwgd2l0aCBjb21wbGV0ZSB2aWV3cyBsYXRlci5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXZpZXcuZ2V0UXVlcnkoKS5nZXRRdWVyeVBhcmFtcygpLmxvYWRzQWxsRGF0YSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZWQucHVzaCh2aWV3LmdldFF1ZXJ5KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaGFkQ29tcGxldGVWaWV3ICYmICF0aGlzLmhhc0NvbXBsZXRlVmlldygpKSB7XHJcbiAgICAgICAgICAgIC8vIFdlIHJlbW92ZWQgb3VyIGxhc3QgY29tcGxldGUgdmlldy5cclxuICAgICAgICAgICAgcmVtb3ZlZC5wdXNoKG5ldyBTeW5jUG9pbnQuX19yZWZlcmVuY2VDb25zdHJ1Y3RvcihxdWVyeS5yZXBvLCBxdWVyeS5wYXRoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7IHJlbW92ZWQ6IHJlbW92ZWQsIGV2ZW50czogY2FuY2VsRXZlbnRzIH07XHJcbiAgICB9O1xyXG4gICAgU3luY1BvaW50LnByb3RvdHlwZS5nZXRRdWVyeVZpZXdzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBlXzMsIF9hO1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfYiA9IF9fdmFsdWVzKHRoaXMudmlld3MudmFsdWVzKCkpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmlldyA9IF9jLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKCF2aWV3LmdldFF1ZXJ5KCkuZ2V0UXVlcnlQYXJhbXMoKS5sb2Fkc0FsbERhdGEoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHZpZXcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlXzNfMSkgeyBlXzMgPSB7IGVycm9yOiBlXzNfMSB9OyB9XHJcbiAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzMpIHRocm93IGVfMy5lcnJvcjsgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHBhdGggVGhlIHBhdGggdG8gdGhlIGRlc2lyZWQgY29tcGxldGUgc25hcHNob3RcclxuICAgICAqIEByZXR1cm4gQSBjb21wbGV0ZSBjYWNoZSwgaWYgaXQgZXhpc3RzXHJcbiAgICAgKi9cclxuICAgIFN5bmNQb2ludC5wcm90b3R5cGUuZ2V0Q29tcGxldGVTZXJ2ZXJDYWNoZSA9IGZ1bmN0aW9uIChwYXRoKSB7XHJcbiAgICAgICAgdmFyIGVfNCwgX2E7XHJcbiAgICAgICAgdmFyIHNlcnZlckNhY2hlID0gbnVsbDtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfYiA9IF9fdmFsdWVzKHRoaXMudmlld3MudmFsdWVzKCkpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmlldyA9IF9jLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgc2VydmVyQ2FjaGUgPSBzZXJ2ZXJDYWNoZSB8fCB2aWV3LmdldENvbXBsZXRlU2VydmVyQ2FjaGUocGF0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVfNF8xKSB7IGVfNCA9IHsgZXJyb3I6IGVfNF8xIH07IH1cclxuICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGlmIChfYyAmJiAhX2MuZG9uZSAmJiAoX2EgPSBfYi5yZXR1cm4pKSBfYS5jYWxsKF9iKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfNCkgdGhyb3cgZV80LmVycm9yOyB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzZXJ2ZXJDYWNoZTtcclxuICAgIH07XHJcbiAgICBTeW5jUG9pbnQucHJvdG90eXBlLnZpZXdGb3JRdWVyeSA9IGZ1bmN0aW9uIChxdWVyeSkge1xyXG4gICAgICAgIHZhciBwYXJhbXMgPSBxdWVyeS5nZXRRdWVyeVBhcmFtcygpO1xyXG4gICAgICAgIGlmIChwYXJhbXMubG9hZHNBbGxEYXRhKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q29tcGxldGVWaWV3KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgcXVlcnlJZCA9IHF1ZXJ5LnF1ZXJ5SWRlbnRpZmllcigpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy52aWV3cy5nZXQocXVlcnlJZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFN5bmNQb2ludC5wcm90b3R5cGUudmlld0V4aXN0c0ZvclF1ZXJ5ID0gZnVuY3Rpb24gKHF1ZXJ5KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmlld0ZvclF1ZXJ5KHF1ZXJ5KSAhPSBudWxsO1xyXG4gICAgfTtcclxuICAgIFN5bmNQb2ludC5wcm90b3R5cGUuaGFzQ29tcGxldGVWaWV3ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldENvbXBsZXRlVmlldygpICE9IG51bGw7XHJcbiAgICB9O1xyXG4gICAgU3luY1BvaW50LnByb3RvdHlwZS5nZXRDb21wbGV0ZVZpZXcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGVfNSwgX2E7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgZm9yICh2YXIgX2IgPSBfX3ZhbHVlcyh0aGlzLnZpZXdzLnZhbHVlcygpKSwgX2MgPSBfYi5uZXh0KCk7ICFfYy5kb25lOyBfYyA9IF9iLm5leHQoKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHZpZXcgPSBfYy52YWx1ZTtcclxuICAgICAgICAgICAgICAgIGlmICh2aWV3LmdldFF1ZXJ5KCkuZ2V0UXVlcnlQYXJhbXMoKS5sb2Fkc0FsbERhdGEoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2aWV3O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlXzVfMSkgeyBlXzUgPSB7IGVycm9yOiBlXzVfMSB9OyB9XHJcbiAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzUpIHRocm93IGVfNS5lcnJvcjsgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gU3luY1BvaW50O1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogVGhpcyBjbGFzcyBob2xkcyBhIGNvbGxlY3Rpb24gb2Ygd3JpdGVzIHRoYXQgY2FuIGJlIGFwcGxpZWQgdG8gbm9kZXMgaW4gdW5pc29uLiBJdCBhYnN0cmFjdHMgYXdheSB0aGUgbG9naWMgd2l0aFxyXG4gKiBkZWFsaW5nIHdpdGggcHJpb3JpdHkgd3JpdGVzIGFuZCBtdWx0aXBsZSBuZXN0ZWQgd3JpdGVzLiBBdCBhbnkgZ2l2ZW4gcGF0aCB0aGVyZSBpcyBvbmx5IGFsbG93ZWQgdG8gYmUgb25lIHdyaXRlXHJcbiAqIG1vZGlmeWluZyB0aGF0IHBhdGguIEFueSB3cml0ZSB0byBhbiBleGlzdGluZyBwYXRoIG9yIHNoYWRvd2luZyBhbiBleGlzdGluZyBwYXRoIHdpbGwgbW9kaWZ5IHRoYXQgZXhpc3Rpbmcgd3JpdGVcclxuICogdG8gcmVmbGVjdCB0aGUgd3JpdGUgYWRkZWQuXHJcbiAqL1xyXG52YXIgQ29tcG91bmRXcml0ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIENvbXBvdW5kV3JpdGUod3JpdGVUcmVlXykge1xyXG4gICAgICAgIHRoaXMud3JpdGVUcmVlXyA9IHdyaXRlVHJlZV87XHJcbiAgICB9XHJcbiAgICBDb21wb3VuZFdyaXRlLnByb3RvdHlwZS5hZGRXcml0ZSA9IGZ1bmN0aW9uIChwYXRoLCBub2RlKSB7XHJcbiAgICAgICAgaWYgKHBhdGguaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcG91bmRXcml0ZShuZXcgSW1tdXRhYmxlVHJlZShub2RlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgcm9vdG1vc3QgPSB0aGlzLndyaXRlVHJlZV8uZmluZFJvb3RNb3N0VmFsdWVBbmRQYXRoKHBhdGgpO1xyXG4gICAgICAgICAgICBpZiAocm9vdG1vc3QgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJvb3RNb3N0UGF0aCA9IHJvb3Rtb3N0LnBhdGg7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSByb290bW9zdC52YWx1ZTtcclxuICAgICAgICAgICAgICAgIHZhciByZWxhdGl2ZVBhdGggPSBQYXRoLnJlbGF0aXZlUGF0aChyb290TW9zdFBhdGgsIHBhdGgpO1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS51cGRhdGVDaGlsZChyZWxhdGl2ZVBhdGgsIG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21wb3VuZFdyaXRlKHRoaXMud3JpdGVUcmVlXy5zZXQocm9vdE1vc3RQYXRoLCB2YWx1ZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN1YnRyZWUgPSBuZXcgSW1tdXRhYmxlVHJlZShub2RlKTtcclxuICAgICAgICAgICAgICAgIHZhciBuZXdXcml0ZVRyZWUgPSB0aGlzLndyaXRlVHJlZV8uc2V0VHJlZShwYXRoLCBzdWJ0cmVlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcG91bmRXcml0ZShuZXdXcml0ZVRyZWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIENvbXBvdW5kV3JpdGUucHJvdG90eXBlLmFkZFdyaXRlcyA9IGZ1bmN0aW9uIChwYXRoLCB1cGRhdGVzKSB7XHJcbiAgICAgICAgdmFyIG5ld1dyaXRlID0gdGhpcztcclxuICAgICAgICBlYWNoKHVwZGF0ZXMsIGZ1bmN0aW9uIChjaGlsZEtleSwgbm9kZSkge1xyXG4gICAgICAgICAgICBuZXdXcml0ZSA9IG5ld1dyaXRlLmFkZFdyaXRlKHBhdGguY2hpbGQoY2hpbGRLZXkpLCBub2RlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gbmV3V3JpdGU7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBXaWxsIHJlbW92ZSBhIHdyaXRlIGF0IHRoZSBnaXZlbiBwYXRoIGFuZCBkZWVwZXIgcGF0aHMuIFRoaXMgd2lsbCA8ZW0+bm90PC9lbT4gbW9kaWZ5IGEgd3JpdGUgYXQgYSBoaWdoZXJcclxuICAgICAqIGxvY2F0aW9uLCB3aGljaCBtdXN0IGJlIHJlbW92ZWQgYnkgY2FsbGluZyB0aGlzIG1ldGhvZCB3aXRoIHRoYXQgcGF0aC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gcGF0aCBUaGUgcGF0aCBhdCB3aGljaCBhIHdyaXRlIGFuZCBhbGwgZGVlcGVyIHdyaXRlcyBzaG91bGQgYmUgcmVtb3ZlZFxyXG4gICAgICogQHJldHVybiB7IUNvbXBvdW5kV3JpdGV9IFRoZSBuZXcgQ29tcG91bmRXcml0ZSB3aXRoIHRoZSByZW1vdmVkIHBhdGhcclxuICAgICAqL1xyXG4gICAgQ29tcG91bmRXcml0ZS5wcm90b3R5cGUucmVtb3ZlV3JpdGUgPSBmdW5jdGlvbiAocGF0aCkge1xyXG4gICAgICAgIGlmIChwYXRoLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gQ29tcG91bmRXcml0ZS5FbXB0eTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBuZXdXcml0ZVRyZWUgPSB0aGlzLndyaXRlVHJlZV8uc2V0VHJlZShwYXRoLCBJbW11dGFibGVUcmVlLkVtcHR5KTtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21wb3VuZFdyaXRlKG5ld1dyaXRlVHJlZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRoaXMgQ29tcG91bmRXcml0ZSB3aWxsIGZ1bGx5IG92ZXJ3cml0ZSBhIG5vZGUgYXQgYSBnaXZlbiBsb2NhdGlvbiBhbmQgY2FuIHRoZXJlZm9yZSBiZVxyXG4gICAgICogY29uc2lkZXJlZCBcImNvbXBsZXRlXCIuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHBhdGggVGhlIHBhdGggdG8gY2hlY2sgZm9yXHJcbiAgICAgKiBAcmV0dXJuIFdoZXRoZXIgdGhlcmUgaXMgYSBjb21wbGV0ZSB3cml0ZSBhdCB0aGF0IHBhdGhcclxuICAgICAqL1xyXG4gICAgQ29tcG91bmRXcml0ZS5wcm90b3R5cGUuaGFzQ29tcGxldGVXcml0ZSA9IGZ1bmN0aW9uIChwYXRoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q29tcGxldGVOb2RlKHBhdGgpICE9IG51bGw7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgbm9kZSBmb3IgYSBwYXRoIGlmIGFuZCBvbmx5IGlmIHRoZSBub2RlIGlzIGEgXCJjb21wbGV0ZVwiIG92ZXJ3cml0ZSBhdCB0aGF0IHBhdGguIFRoaXMgd2lsbCBub3QgYWdncmVnYXRlXHJcbiAgICAgKiB3cml0ZXMgZnJvbSBkZWVwZXIgcGF0aHMsIGJ1dCB3aWxsIHJldHVybiBjaGlsZCBub2RlcyBmcm9tIGEgbW9yZSBzaGFsbG93IHBhdGguXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHBhdGggVGhlIHBhdGggdG8gZ2V0IGEgY29tcGxldGUgd3JpdGVcclxuICAgICAqIEByZXR1cm4gVGhlIG5vZGUgaWYgY29tcGxldGUgYXQgdGhhdCBwYXRoLCBvciBudWxsIG90aGVyd2lzZS5cclxuICAgICAqL1xyXG4gICAgQ29tcG91bmRXcml0ZS5wcm90b3R5cGUuZ2V0Q29tcGxldGVOb2RlID0gZnVuY3Rpb24gKHBhdGgpIHtcclxuICAgICAgICB2YXIgcm9vdG1vc3QgPSB0aGlzLndyaXRlVHJlZV8uZmluZFJvb3RNb3N0VmFsdWVBbmRQYXRoKHBhdGgpO1xyXG4gICAgICAgIGlmIChyb290bW9zdCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLndyaXRlVHJlZV9cclxuICAgICAgICAgICAgICAgIC5nZXQocm9vdG1vc3QucGF0aClcclxuICAgICAgICAgICAgICAgIC5nZXRDaGlsZChQYXRoLnJlbGF0aXZlUGF0aChyb290bW9zdC5wYXRoLCBwYXRoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGFsbCBjaGlsZHJlbiB0aGF0IGFyZSBndWFyYW50ZWVkIHRvIGJlIGEgY29tcGxldGUgb3ZlcndyaXRlLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4gQSBsaXN0IG9mIGFsbCBjb21wbGV0ZSBjaGlsZHJlbi5cclxuICAgICAqL1xyXG4gICAgQ29tcG91bmRXcml0ZS5wcm90b3R5cGUuZ2V0Q29tcGxldGVDaGlsZHJlbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgY2hpbGRyZW4gPSBbXTtcclxuICAgICAgICB2YXIgbm9kZSA9IHRoaXMud3JpdGVUcmVlXy52YWx1ZTtcclxuICAgICAgICBpZiAobm9kZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIC8vIElmIGl0J3MgYSBsZWFmIG5vZGUsIGl0IGhhcyBubyBjaGlsZHJlbjsgc28gbm90aGluZyB0byBkby5cclxuICAgICAgICAgICAgaWYgKCFub2RlLmlzTGVhZk5vZGUoKSkge1xyXG4gICAgICAgICAgICAgICAgbm9kZS5mb3JFYWNoQ2hpbGQoUFJJT1JJVFlfSU5ERVgsIGZ1bmN0aW9uIChjaGlsZE5hbWUsIGNoaWxkTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuLnB1c2gobmV3IE5hbWVkTm9kZShjaGlsZE5hbWUsIGNoaWxkTm9kZSkpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMud3JpdGVUcmVlXy5jaGlsZHJlbi5pbm9yZGVyVHJhdmVyc2FsKGZ1bmN0aW9uIChjaGlsZE5hbWUsIGNoaWxkVHJlZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkVHJlZS52YWx1ZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4ucHVzaChuZXcgTmFtZWROb2RlKGNoaWxkTmFtZSwgY2hpbGRUcmVlLnZhbHVlKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY2hpbGRyZW47XHJcbiAgICB9O1xyXG4gICAgQ29tcG91bmRXcml0ZS5wcm90b3R5cGUuY2hpbGRDb21wb3VuZFdyaXRlID0gZnVuY3Rpb24gKHBhdGgpIHtcclxuICAgICAgICBpZiAocGF0aC5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgc2hhZG93aW5nTm9kZSA9IHRoaXMuZ2V0Q29tcGxldGVOb2RlKHBhdGgpO1xyXG4gICAgICAgICAgICBpZiAoc2hhZG93aW5nTm9kZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbXBvdW5kV3JpdGUobmV3IEltbXV0YWJsZVRyZWUoc2hhZG93aW5nTm9kZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21wb3VuZFdyaXRlKHRoaXMud3JpdGVUcmVlXy5zdWJ0cmVlKHBhdGgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGlzIENvbXBvdW5kV3JpdGUgaXMgZW1wdHkgYW5kIHRoZXJlZm9yZSBkb2VzIG5vdCBtb2RpZnkgYW55IG5vZGVzLlxyXG4gICAgICogQHJldHVybiBXaGV0aGVyIHRoaXMgQ29tcG91bmRXcml0ZSBpcyBlbXB0eVxyXG4gICAgICovXHJcbiAgICBDb21wb3VuZFdyaXRlLnByb3RvdHlwZS5pc0VtcHR5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLndyaXRlVHJlZV8uaXNFbXB0eSgpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQXBwbGllcyB0aGlzIENvbXBvdW5kV3JpdGUgdG8gYSBub2RlLiBUaGUgbm9kZSBpcyByZXR1cm5lZCB3aXRoIGFsbCB3cml0ZXMgZnJvbSB0aGlzIENvbXBvdW5kV3JpdGUgYXBwbGllZCB0byB0aGVcclxuICAgICAqIG5vZGVcclxuICAgICAqIEBwYXJhbSBub2RlIFRoZSBub2RlIHRvIGFwcGx5IHRoaXMgQ29tcG91bmRXcml0ZSB0b1xyXG4gICAgICogQHJldHVybiBUaGUgbm9kZSB3aXRoIGFsbCB3cml0ZXMgYXBwbGllZFxyXG4gICAgICovXHJcbiAgICBDb21wb3VuZFdyaXRlLnByb3RvdHlwZS5hcHBseSA9IGZ1bmN0aW9uIChub2RlKSB7XHJcbiAgICAgICAgcmV0dXJuIGFwcGx5U3VidHJlZVdyaXRlKFBhdGguRW1wdHksIHRoaXMud3JpdGVUcmVlXywgbm9kZSk7XHJcbiAgICB9O1xyXG4gICAgQ29tcG91bmRXcml0ZS5FbXB0eSA9IG5ldyBDb21wb3VuZFdyaXRlKG5ldyBJbW11dGFibGVUcmVlKG51bGwpKTtcclxuICAgIHJldHVybiBDb21wb3VuZFdyaXRlO1xyXG59KCkpO1xyXG5mdW5jdGlvbiBhcHBseVN1YnRyZWVXcml0ZShyZWxhdGl2ZVBhdGgsIHdyaXRlVHJlZSwgbm9kZSkge1xyXG4gICAgaWYgKHdyaXRlVHJlZS52YWx1ZSAhPSBudWxsKSB7XHJcbiAgICAgICAgLy8gU2luY2UgdGhlcmUgYSB3cml0ZSBpcyBhbHdheXMgYSBsZWFmLCB3ZSdyZSBkb25lIGhlcmVcclxuICAgICAgICByZXR1cm4gbm9kZS51cGRhdGVDaGlsZChyZWxhdGl2ZVBhdGgsIHdyaXRlVHJlZS52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB2YXIgcHJpb3JpdHlXcml0ZV8xID0gbnVsbDtcclxuICAgICAgICB3cml0ZVRyZWUuY2hpbGRyZW4uaW5vcmRlclRyYXZlcnNhbChmdW5jdGlvbiAoY2hpbGRLZXksIGNoaWxkVHJlZSkge1xyXG4gICAgICAgICAgICBpZiAoY2hpbGRLZXkgPT09ICcucHJpb3JpdHknKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBBcHBseSBwcmlvcml0aWVzIGF0IHRoZSBlbmQgc28gd2UgZG9uJ3QgdXBkYXRlIHByaW9yaXRpZXMgZm9yIGVpdGhlciBlbXB0eSBub2RlcyBvciBmb3JnZXRcclxuICAgICAgICAgICAgICAgIC8vIHRvIGFwcGx5IHByaW9yaXRpZXMgdG8gZW1wdHkgbm9kZXMgdGhhdCBhcmUgbGF0ZXIgZmlsbGVkXHJcbiAgICAgICAgICAgICAgICBhc3NlcnQoY2hpbGRUcmVlLnZhbHVlICE9PSBudWxsLCAnUHJpb3JpdHkgd3JpdGVzIG11c3QgYWx3YXlzIGJlIGxlYWYgbm9kZXMnKTtcclxuICAgICAgICAgICAgICAgIHByaW9yaXR5V3JpdGVfMSA9IGNoaWxkVHJlZS52YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG5vZGUgPSBhcHBseVN1YnRyZWVXcml0ZShyZWxhdGl2ZVBhdGguY2hpbGQoY2hpbGRLZXkpLCBjaGlsZFRyZWUsIG5vZGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gSWYgdGhlcmUgd2FzIGEgcHJpb3JpdHkgd3JpdGUsIHdlIG9ubHkgYXBwbHkgaXQgaWYgdGhlIG5vZGUgaXMgbm90IGVtcHR5XHJcbiAgICAgICAgaWYgKCFub2RlLmdldENoaWxkKHJlbGF0aXZlUGF0aCkuaXNFbXB0eSgpICYmIHByaW9yaXR5V3JpdGVfMSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBub2RlID0gbm9kZS51cGRhdGVDaGlsZChyZWxhdGl2ZVBhdGguY2hpbGQoJy5wcmlvcml0eScpLCBwcmlvcml0eVdyaXRlXzEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbm9kZTtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogV3JpdGVUcmVlIHRyYWNrcyBhbGwgcGVuZGluZyB1c2VyLWluaXRpYXRlZCB3cml0ZXMgYW5kIGhhcyBtZXRob2RzIHRvIGNhbGN1bGF0ZSB0aGUgcmVzdWx0IG9mIG1lcmdpbmcgdGhlbVxyXG4gKiB3aXRoIHVuZGVybHlpbmcgc2VydmVyIGRhdGEgKHRvIGNyZWF0ZSBcImV2ZW50IGNhY2hlXCIgZGF0YSkuICBQZW5kaW5nIHdyaXRlcyBhcmUgYWRkZWQgd2l0aCBhZGRPdmVyd3JpdGUoKVxyXG4gKiBhbmQgYWRkTWVyZ2UoKSwgYW5kIHJlbW92ZWQgd2l0aCByZW1vdmVXcml0ZSgpLlxyXG4gKlxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbnZhciBXcml0ZVRyZWUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBXcml0ZVRyZWUoKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSB0cmVlIHRyYWNraW5nIHRoZSByZXN1bHQgb2YgYXBwbHlpbmcgYWxsIHZpc2libGUgd3JpdGVzLiAgVGhpcyBkb2VzIG5vdCBpbmNsdWRlIHRyYW5zYWN0aW9ucyB3aXRoXHJcbiAgICAgICAgICogYXBwbHlMb2NhbGx5PWZhbHNlIG9yIHdyaXRlcyB0aGF0IGFyZSBjb21wbGV0ZWx5IHNoYWRvd2VkIGJ5IG90aGVyIHdyaXRlcy5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEB0eXBlIHshQ29tcG91bmRXcml0ZX1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMudmlzaWJsZVdyaXRlc18gPSBDb21wb3VuZFdyaXRlLkVtcHR5O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgbGlzdCBvZiBhbGwgcGVuZGluZyB3cml0ZXMsIHJlZ2FyZGxlc3Mgb2YgdmlzaWJpbGl0eSBhbmQgc2hhZG93ZWQtbmVzcy4gIFVzZWQgdG8gY2FsY3VsYXRlIGFyYml0cmFyeVxyXG4gICAgICAgICAqIHNldHMgb2YgdGhlIGNoYW5nZWQgZGF0YSwgc3VjaCBhcyBoaWRkZW4gd3JpdGVzIChmcm9tIHRyYW5zYWN0aW9ucykgb3IgY2hhbmdlcyB3aXRoIGNlcnRhaW4gd3JpdGVzIGV4Y2x1ZGVkIChhbHNvXHJcbiAgICAgICAgICogdXNlZCBieSB0cmFuc2FjdGlvbnMpLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHR5cGUgeyFBcnJheS48IVdyaXRlUmVjb3JkPn1cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuYWxsV3JpdGVzXyA9IFtdO1xyXG4gICAgICAgIHRoaXMubGFzdFdyaXRlSWRfID0gLTE7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZSBhIG5ldyBXcml0ZVRyZWVSZWYgZm9yIHRoZSBnaXZlbiBwYXRoLiBGb3IgdXNlIHdpdGggYSBuZXcgc3luYyBwb2ludCBhdCB0aGUgZ2l2ZW4gcGF0aC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFQYXRofSBwYXRoXHJcbiAgICAgKiBAcmV0dXJuIHshV3JpdGVUcmVlUmVmfVxyXG4gICAgICovXHJcbiAgICBXcml0ZVRyZWUucHJvdG90eXBlLmNoaWxkV3JpdGVzID0gZnVuY3Rpb24gKHBhdGgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFdyaXRlVHJlZVJlZihwYXRoLCB0aGlzKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJlY29yZCBhIG5ldyBvdmVyd3JpdGUgZnJvbSB1c2VyIGNvZGUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gcGF0aFxyXG4gICAgICogQHBhcmFtIHshTm9kZX0gc25hcFxyXG4gICAgICogQHBhcmFtIHshbnVtYmVyfSB3cml0ZUlkXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSB2aXNpYmxlIFRoaXMgaXMgc2V0IHRvIGZhbHNlIGJ5IHNvbWUgdHJhbnNhY3Rpb25zLiBJdCBzaG91bGQgYmUgZXhjbHVkZWQgZnJvbSBldmVudCBjYWNoZXNcclxuICAgICAqL1xyXG4gICAgV3JpdGVUcmVlLnByb3RvdHlwZS5hZGRPdmVyd3JpdGUgPSBmdW5jdGlvbiAocGF0aCwgc25hcCwgd3JpdGVJZCwgdmlzaWJsZSkge1xyXG4gICAgICAgIGFzc2VydCh3cml0ZUlkID4gdGhpcy5sYXN0V3JpdGVJZF8sICdTdGFja2luZyBhbiBvbGRlciB3cml0ZSBvbiB0b3Agb2YgbmV3ZXIgb25lcycpO1xyXG4gICAgICAgIGlmICh2aXNpYmxlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdmlzaWJsZSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYWxsV3JpdGVzXy5wdXNoKHtcclxuICAgICAgICAgICAgcGF0aDogcGF0aCxcclxuICAgICAgICAgICAgc25hcDogc25hcCxcclxuICAgICAgICAgICAgd3JpdGVJZDogd3JpdGVJZCxcclxuICAgICAgICAgICAgdmlzaWJsZTogdmlzaWJsZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmICh2aXNpYmxlKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmlzaWJsZVdyaXRlc18gPSB0aGlzLnZpc2libGVXcml0ZXNfLmFkZFdyaXRlKHBhdGgsIHNuYXApO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmxhc3RXcml0ZUlkXyA9IHdyaXRlSWQ7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZWNvcmQgYSBuZXcgbWVyZ2UgZnJvbSB1c2VyIGNvZGUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gcGF0aFxyXG4gICAgICogQHBhcmFtIHshT2JqZWN0LjxzdHJpbmcsICFOb2RlPn0gY2hhbmdlZENoaWxkcmVuXHJcbiAgICAgKiBAcGFyYW0geyFudW1iZXJ9IHdyaXRlSWRcclxuICAgICAqL1xyXG4gICAgV3JpdGVUcmVlLnByb3RvdHlwZS5hZGRNZXJnZSA9IGZ1bmN0aW9uIChwYXRoLCBjaGFuZ2VkQ2hpbGRyZW4sIHdyaXRlSWQpIHtcclxuICAgICAgICBhc3NlcnQod3JpdGVJZCA+IHRoaXMubGFzdFdyaXRlSWRfLCAnU3RhY2tpbmcgYW4gb2xkZXIgbWVyZ2Ugb24gdG9wIG9mIG5ld2VyIG9uZXMnKTtcclxuICAgICAgICB0aGlzLmFsbFdyaXRlc18ucHVzaCh7XHJcbiAgICAgICAgICAgIHBhdGg6IHBhdGgsXHJcbiAgICAgICAgICAgIGNoaWxkcmVuOiBjaGFuZ2VkQ2hpbGRyZW4sXHJcbiAgICAgICAgICAgIHdyaXRlSWQ6IHdyaXRlSWQsXHJcbiAgICAgICAgICAgIHZpc2libGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnZpc2libGVXcml0ZXNfID0gdGhpcy52aXNpYmxlV3JpdGVzXy5hZGRXcml0ZXMocGF0aCwgY2hhbmdlZENoaWxkcmVuKTtcclxuICAgICAgICB0aGlzLmxhc3RXcml0ZUlkXyA9IHdyaXRlSWQ7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFudW1iZXJ9IHdyaXRlSWRcclxuICAgICAqIEByZXR1cm4gez9Xcml0ZVJlY29yZH1cclxuICAgICAqL1xyXG4gICAgV3JpdGVUcmVlLnByb3RvdHlwZS5nZXRXcml0ZSA9IGZ1bmN0aW9uICh3cml0ZUlkKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmFsbFdyaXRlc18ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIHJlY29yZCA9IHRoaXMuYWxsV3JpdGVzX1tpXTtcclxuICAgICAgICAgICAgaWYgKHJlY29yZC53cml0ZUlkID09PSB3cml0ZUlkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVjb3JkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlIGEgd3JpdGUgKGVpdGhlciBhbiBvdmVyd3JpdGUgb3IgbWVyZ2UpIHRoYXQgaGFzIGJlZW4gc3VjY2Vzc2Z1bGx5IGFja25vd2xlZGdlIGJ5IHRoZSBzZXJ2ZXIuIFJlY2FsY3VsYXRlc1xyXG4gICAgICogdGhlIHRyZWUgaWYgbmVjZXNzYXJ5LiAgV2UgcmV0dXJuIHRydWUgaWYgaXQgbWF5IGhhdmUgYmVlbiB2aXNpYmxlLCBtZWFuaW5nIHZpZXdzIG5lZWQgdG8gcmVldmFsdWF0ZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFudW1iZXJ9IHdyaXRlSWRcclxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgdGhlIHdyaXRlIG1heSBoYXZlIGJlZW4gdmlzaWJsZSAobWVhbmluZyB3ZSdsbCBuZWVkIHRvIHJlZXZhbHVhdGUgLyByYWlzZVxyXG4gICAgICogZXZlbnRzIGFzIGEgcmVzdWx0KS5cclxuICAgICAqL1xyXG4gICAgV3JpdGVUcmVlLnByb3RvdHlwZS5yZW1vdmVXcml0ZSA9IGZ1bmN0aW9uICh3cml0ZUlkKSB7XHJcbiAgICAgICAgLy8gTm90ZTogZGlzYWJsaW5nIHRoaXMgY2hlY2suIEl0IGNvdWxkIGJlIGEgdHJhbnNhY3Rpb24gdGhhdCBwcmVlbXB0ZWQgYW5vdGhlciB0cmFuc2FjdGlvbiwgYW5kIHRodXMgd2FzIGFwcGxpZWRcclxuICAgICAgICAvLyBvdXQgb2Ygb3JkZXIuXHJcbiAgICAgICAgLy9jb25zdCB2YWxpZENsZWFyID0gcmV2ZXJ0IHx8IHRoaXMuYWxsV3JpdGVzXy5sZW5ndGggPT09IDAgfHwgd3JpdGVJZCA8PSB0aGlzLmFsbFdyaXRlc19bMF0ud3JpdGVJZDtcclxuICAgICAgICAvL2Fzc2VydCh2YWxpZENsZWFyLCBcIkVpdGhlciB3ZSBkb24ndCBoYXZlIHRoaXMgd3JpdGUsIG9yIGl0J3MgdGhlIGZpcnN0IG9uZSBpbiB0aGUgcXVldWVcIik7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgaWR4ID0gdGhpcy5hbGxXcml0ZXNfLmZpbmRJbmRleChmdW5jdGlvbiAocykge1xyXG4gICAgICAgICAgICByZXR1cm4gcy53cml0ZUlkID09PSB3cml0ZUlkO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGFzc2VydChpZHggPj0gMCwgJ3JlbW92ZVdyaXRlIGNhbGxlZCB3aXRoIG5vbmV4aXN0ZW50IHdyaXRlSWQuJyk7XHJcbiAgICAgICAgdmFyIHdyaXRlVG9SZW1vdmUgPSB0aGlzLmFsbFdyaXRlc19baWR4XTtcclxuICAgICAgICB0aGlzLmFsbFdyaXRlc18uc3BsaWNlKGlkeCwgMSk7XHJcbiAgICAgICAgdmFyIHJlbW92ZWRXcml0ZVdhc1Zpc2libGUgPSB3cml0ZVRvUmVtb3ZlLnZpc2libGU7XHJcbiAgICAgICAgdmFyIHJlbW92ZWRXcml0ZU92ZXJsYXBzV2l0aE90aGVyV3JpdGVzID0gZmFsc2U7XHJcbiAgICAgICAgdmFyIGkgPSB0aGlzLmFsbFdyaXRlc18ubGVuZ3RoIC0gMTtcclxuICAgICAgICB3aGlsZSAocmVtb3ZlZFdyaXRlV2FzVmlzaWJsZSAmJiBpID49IDApIHtcclxuICAgICAgICAgICAgdmFyIGN1cnJlbnRXcml0ZSA9IHRoaXMuYWxsV3JpdGVzX1tpXTtcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRXcml0ZS52aXNpYmxlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA+PSBpZHggJiZcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY29yZENvbnRhaW5zUGF0aF8oY3VycmVudFdyaXRlLCB3cml0ZVRvUmVtb3ZlLnBhdGgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHJlbW92ZWQgd3JpdGUgd2FzIGNvbXBsZXRlbHkgc2hhZG93ZWQgYnkgYSBzdWJzZXF1ZW50IHdyaXRlLlxyXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZWRXcml0ZVdhc1Zpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHdyaXRlVG9SZW1vdmUucGF0aC5jb250YWlucyhjdXJyZW50V3JpdGUucGF0aCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBFaXRoZXIgd2UncmUgY292ZXJpbmcgc29tZSB3cml0ZXMgb3IgdGhleSdyZSBjb3ZlcmluZyBwYXJ0IG9mIHVzIChkZXBlbmRpbmcgb24gd2hpY2ggY2FtZSBmaXJzdCkuXHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlZFdyaXRlT3ZlcmxhcHNXaXRoT3RoZXJXcml0ZXMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGktLTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFyZW1vdmVkV3JpdGVXYXNWaXNpYmxlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocmVtb3ZlZFdyaXRlT3ZlcmxhcHNXaXRoT3RoZXJXcml0ZXMpIHtcclxuICAgICAgICAgICAgLy8gVGhlcmUncyBzb21lIHNoYWRvd2luZyBnb2luZyBvbi4gSnVzdCByZWJ1aWxkIHRoZSB2aXNpYmxlIHdyaXRlcyBmcm9tIHNjcmF0Y2guXHJcbiAgICAgICAgICAgIHRoaXMucmVzZXRUcmVlXygpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIFRoZXJlJ3Mgbm8gc2hhZG93aW5nLiAgV2UgY2FuIHNhZmVseSBqdXN0IHJlbW92ZSB0aGUgd3JpdGUocykgZnJvbSB2aXNpYmxlV3JpdGVzLlxyXG4gICAgICAgICAgICBpZiAod3JpdGVUb1JlbW92ZS5zbmFwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpc2libGVXcml0ZXNfID0gdGhpcy52aXNpYmxlV3JpdGVzXy5yZW1vdmVXcml0ZSh3cml0ZVRvUmVtb3ZlLnBhdGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gd3JpdGVUb1JlbW92ZS5jaGlsZHJlbjtcclxuICAgICAgICAgICAgICAgIGVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZE5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy52aXNpYmxlV3JpdGVzXyA9IF90aGlzLnZpc2libGVXcml0ZXNfLnJlbW92ZVdyaXRlKHdyaXRlVG9SZW1vdmUucGF0aC5jaGlsZChjaGlsZE5hbWUpKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybiBhIGNvbXBsZXRlIHNuYXBzaG90IGZvciB0aGUgZ2l2ZW4gcGF0aCBpZiB0aGVyZSdzIHZpc2libGUgd3JpdGUgZGF0YSBhdCB0aGF0IHBhdGgsIGVsc2UgbnVsbC5cclxuICAgICAqIE5vIHNlcnZlciBkYXRhIGlzIGNvbnNpZGVyZWQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gcGF0aFxyXG4gICAgICogQHJldHVybiB7P05vZGV9XHJcbiAgICAgKi9cclxuICAgIFdyaXRlVHJlZS5wcm90b3R5cGUuZ2V0Q29tcGxldGVXcml0ZURhdGEgPSBmdW5jdGlvbiAocGF0aCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZpc2libGVXcml0ZXNfLmdldENvbXBsZXRlTm9kZShwYXRoKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEdpdmVuIG9wdGlvbmFsLCB1bmRlcmx5aW5nIHNlcnZlciBkYXRhLCBhbmQgYW4gb3B0aW9uYWwgc2V0IG9mIGNvbnN0cmFpbnRzIChleGNsdWRlIHNvbWUgc2V0cywgaW5jbHVkZSBoaWRkZW5cclxuICAgICAqIHdyaXRlcyksIGF0dGVtcHQgdG8gY2FsY3VsYXRlIGEgY29tcGxldGUgc25hcHNob3QgZm9yIHRoZSBnaXZlbiBwYXRoXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gdHJlZVBhdGhcclxuICAgICAqIEBwYXJhbSB7P05vZGV9IGNvbXBsZXRlU2VydmVyQ2FjaGVcclxuICAgICAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj49fSB3cml0ZUlkc1RvRXhjbHVkZSBBbiBvcHRpb25hbCBzZXQgdG8gYmUgZXhjbHVkZWRcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IGluY2x1ZGVIaWRkZW5Xcml0ZXMgRGVmYXVsdHMgdG8gZmFsc2UsIHdoZXRoZXIgb3Igbm90IHRvIGxheWVyIG9uIHdyaXRlcyB3aXRoIHZpc2libGUgc2V0IHRvIGZhbHNlXHJcbiAgICAgKiBAcmV0dXJuIHs/Tm9kZX1cclxuICAgICAqL1xyXG4gICAgV3JpdGVUcmVlLnByb3RvdHlwZS5jYWxjQ29tcGxldGVFdmVudENhY2hlID0gZnVuY3Rpb24gKHRyZWVQYXRoLCBjb21wbGV0ZVNlcnZlckNhY2hlLCB3cml0ZUlkc1RvRXhjbHVkZSwgaW5jbHVkZUhpZGRlbldyaXRlcykge1xyXG4gICAgICAgIGlmICghd3JpdGVJZHNUb0V4Y2x1ZGUgJiYgIWluY2x1ZGVIaWRkZW5Xcml0ZXMpIHtcclxuICAgICAgICAgICAgdmFyIHNoYWRvd2luZ05vZGUgPSB0aGlzLnZpc2libGVXcml0ZXNfLmdldENvbXBsZXRlTm9kZSh0cmVlUGF0aCk7XHJcbiAgICAgICAgICAgIGlmIChzaGFkb3dpbmdOb2RlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzaGFkb3dpbmdOb2RlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN1Yk1lcmdlID0gdGhpcy52aXNpYmxlV3JpdGVzXy5jaGlsZENvbXBvdW5kV3JpdGUodHJlZVBhdGgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHN1Yk1lcmdlLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb21wbGV0ZVNlcnZlckNhY2hlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY29tcGxldGVTZXJ2ZXJDYWNoZSA9PSBudWxsICYmXHJcbiAgICAgICAgICAgICAgICAgICAgIXN1Yk1lcmdlLmhhc0NvbXBsZXRlV3JpdGUoUGF0aC5FbXB0eSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBXZSB3b3VsZG4ndCBoYXZlIGEgY29tcGxldGUgc25hcHNob3QsIHNpbmNlIHRoZXJlJ3Mgbm8gdW5kZXJseWluZyBkYXRhIGFuZCBubyBjb21wbGV0ZSBzaGFkb3dcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBsYXllcmVkQ2FjaGUgPSBjb21wbGV0ZVNlcnZlckNhY2hlIHx8IENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdWJNZXJnZS5hcHBseShsYXllcmVkQ2FjaGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgbWVyZ2UgPSB0aGlzLnZpc2libGVXcml0ZXNfLmNoaWxkQ29tcG91bmRXcml0ZSh0cmVlUGF0aCk7XHJcbiAgICAgICAgICAgIGlmICghaW5jbHVkZUhpZGRlbldyaXRlcyAmJiBtZXJnZS5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb21wbGV0ZVNlcnZlckNhY2hlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIHNlcnZlciBjYWNoZSBpcyBudWxsLCBhbmQgd2UgZG9uJ3QgaGF2ZSBhIGNvbXBsZXRlIGNhY2hlLCB3ZSBuZWVkIHRvIHJldHVybiBudWxsXHJcbiAgICAgICAgICAgICAgICBpZiAoIWluY2x1ZGVIaWRkZW5Xcml0ZXMgJiZcclxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZVNlcnZlckNhY2hlID09IG51bGwgJiZcclxuICAgICAgICAgICAgICAgICAgICAhbWVyZ2UuaGFzQ29tcGxldGVXcml0ZShQYXRoLkVtcHR5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZpbHRlciA9IGZ1bmN0aW9uICh3cml0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCh3cml0ZS52aXNpYmxlIHx8IGluY2x1ZGVIaWRkZW5Xcml0ZXMpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoIXdyaXRlSWRzVG9FeGNsdWRlIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIX53cml0ZUlkc1RvRXhjbHVkZS5pbmRleE9mKHdyaXRlLndyaXRlSWQpKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHdyaXRlLnBhdGguY29udGFpbnModHJlZVBhdGgpIHx8IHRyZWVQYXRoLmNvbnRhaW5zKHdyaXRlLnBhdGgpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWVyZ2VBdFBhdGggPSBXcml0ZVRyZWUubGF5ZXJUcmVlXyh0aGlzLmFsbFdyaXRlc18sIGZpbHRlciwgdHJlZVBhdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBsYXllcmVkQ2FjaGUgPSBjb21wbGV0ZVNlcnZlckNhY2hlIHx8IENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtZXJnZUF0UGF0aC5hcHBseShsYXllcmVkQ2FjaGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogV2l0aCBvcHRpb25hbCwgdW5kZXJseWluZyBzZXJ2ZXIgZGF0YSwgYXR0ZW1wdCB0byByZXR1cm4gYSBjaGlsZHJlbiBub2RlIG9mIGNoaWxkcmVuIHRoYXQgd2UgaGF2ZSBjb21wbGV0ZSBkYXRhIGZvci5cclxuICAgICAqIFVzZWQgd2hlbiBjcmVhdGluZyBuZXcgdmlld3MsIHRvIHByZS1maWxsIHRoZWlyIGNvbXBsZXRlIGV2ZW50IGNoaWxkcmVuIHNuYXBzaG90LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IVBhdGh9IHRyZWVQYXRoXHJcbiAgICAgKiBAcGFyYW0gez9DaGlsZHJlbk5vZGV9IGNvbXBsZXRlU2VydmVyQ2hpbGRyZW5cclxuICAgICAqIEByZXR1cm4geyFDaGlsZHJlbk5vZGV9XHJcbiAgICAgKi9cclxuICAgIFdyaXRlVHJlZS5wcm90b3R5cGUuY2FsY0NvbXBsZXRlRXZlbnRDaGlsZHJlbiA9IGZ1bmN0aW9uICh0cmVlUGF0aCwgY29tcGxldGVTZXJ2ZXJDaGlsZHJlbikge1xyXG4gICAgICAgIHZhciBjb21wbGV0ZUNoaWxkcmVuID0gQ2hpbGRyZW5Ob2RlLkVNUFRZX05PREU7XHJcbiAgICAgICAgdmFyIHRvcExldmVsU2V0ID0gdGhpcy52aXNpYmxlV3JpdGVzXy5nZXRDb21wbGV0ZU5vZGUodHJlZVBhdGgpO1xyXG4gICAgICAgIGlmICh0b3BMZXZlbFNldCkge1xyXG4gICAgICAgICAgICBpZiAoIXRvcExldmVsU2V0LmlzTGVhZk5vZGUoKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gd2UncmUgc2hhZG93aW5nIGV2ZXJ5dGhpbmcuIFJldHVybiB0aGUgY2hpbGRyZW4uXHJcbiAgICAgICAgICAgICAgICB0b3BMZXZlbFNldC5mb3JFYWNoQ2hpbGQoUFJJT1JJVFlfSU5ERVgsIGZ1bmN0aW9uIChjaGlsZE5hbWUsIGNoaWxkU25hcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlQ2hpbGRyZW4gPSBjb21wbGV0ZUNoaWxkcmVuLnVwZGF0ZUltbWVkaWF0ZUNoaWxkKGNoaWxkTmFtZSwgY2hpbGRTbmFwKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBjb21wbGV0ZUNoaWxkcmVuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjb21wbGV0ZVNlcnZlckNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIC8vIExheWVyIGFueSBjaGlsZHJlbiB3ZSBoYXZlIG9uIHRvcCBvZiB0aGlzXHJcbiAgICAgICAgICAgIC8vIFdlIGtub3cgd2UgZG9uJ3QgaGF2ZSBhIHRvcC1sZXZlbCBzZXQsIHNvIGp1c3QgZW51bWVyYXRlIGV4aXN0aW5nIGNoaWxkcmVuXHJcbiAgICAgICAgICAgIHZhciBtZXJnZV8xID0gdGhpcy52aXNpYmxlV3JpdGVzXy5jaGlsZENvbXBvdW5kV3JpdGUodHJlZVBhdGgpO1xyXG4gICAgICAgICAgICBjb21wbGV0ZVNlcnZlckNoaWxkcmVuLmZvckVhY2hDaGlsZChQUklPUklUWV9JTkRFWCwgZnVuY3Rpb24gKGNoaWxkTmFtZSwgY2hpbGROb2RlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IG1lcmdlXzFcclxuICAgICAgICAgICAgICAgICAgICAuY2hpbGRDb21wb3VuZFdyaXRlKG5ldyBQYXRoKGNoaWxkTmFtZSkpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFwcGx5KGNoaWxkTm9kZSk7XHJcbiAgICAgICAgICAgICAgICBjb21wbGV0ZUNoaWxkcmVuID0gY29tcGxldGVDaGlsZHJlbi51cGRhdGVJbW1lZGlhdGVDaGlsZChjaGlsZE5hbWUsIG5vZGUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgLy8gQWRkIGFueSBjb21wbGV0ZSBjaGlsZHJlbiB3ZSBoYXZlIGZyb20gdGhlIHNldFxyXG4gICAgICAgICAgICBtZXJnZV8xLmdldENvbXBsZXRlQ2hpbGRyZW4oKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lZE5vZGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbXBsZXRlQ2hpbGRyZW4gPSBjb21wbGV0ZUNoaWxkcmVuLnVwZGF0ZUltbWVkaWF0ZUNoaWxkKG5hbWVkTm9kZS5uYW1lLCBuYW1lZE5vZGUubm9kZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gY29tcGxldGVDaGlsZHJlbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIFdlIGRvbid0IGhhdmUgYW55dGhpbmcgdG8gbGF5ZXIgb24gdG9wIG9mLiBMYXllciBvbiBhbnkgY2hpbGRyZW4gd2UgaGF2ZVxyXG4gICAgICAgICAgICAvLyBOb3RlIHRoYXQgd2UgY2FuIHJldHVybiBhbiBlbXB0eSBzbmFwIGlmIHdlIGhhdmUgYSBkZWZpbmVkIGRlbGV0ZVxyXG4gICAgICAgICAgICB2YXIgbWVyZ2UgPSB0aGlzLnZpc2libGVXcml0ZXNfLmNoaWxkQ29tcG91bmRXcml0ZSh0cmVlUGF0aCk7XHJcbiAgICAgICAgICAgIG1lcmdlLmdldENvbXBsZXRlQ2hpbGRyZW4oKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lZE5vZGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbXBsZXRlQ2hpbGRyZW4gPSBjb21wbGV0ZUNoaWxkcmVuLnVwZGF0ZUltbWVkaWF0ZUNoaWxkKG5hbWVkTm9kZS5uYW1lLCBuYW1lZE5vZGUubm9kZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gY29tcGxldGVDaGlsZHJlbjtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBHaXZlbiB0aGF0IHRoZSB1bmRlcmx5aW5nIHNlcnZlciBkYXRhIGhhcyB1cGRhdGVkLCBkZXRlcm1pbmUgd2hhdCwgaWYgYW55dGhpbmcsIG5lZWRzIHRvIGJlXHJcbiAgICAgKiBhcHBsaWVkIHRvIHRoZSBldmVudCBjYWNoZS5cclxuICAgICAqXHJcbiAgICAgKiBQb3NzaWJpbGl0aWVzOlxyXG4gICAgICpcclxuICAgICAqIDEuIE5vIHdyaXRlcyBhcmUgc2hhZG93aW5nLiBFdmVudHMgc2hvdWxkIGJlIHJhaXNlZCwgdGhlIHNuYXAgdG8gYmUgYXBwbGllZCBjb21lcyBmcm9tIHRoZSBzZXJ2ZXIgZGF0YVxyXG4gICAgICpcclxuICAgICAqIDIuIFNvbWUgd3JpdGUgaXMgY29tcGxldGVseSBzaGFkb3dpbmcuIE5vIGV2ZW50cyB0byBiZSByYWlzZWRcclxuICAgICAqXHJcbiAgICAgKiAzLiBJcyBwYXJ0aWFsbHkgc2hhZG93ZWQuIEV2ZW50c1xyXG4gICAgICpcclxuICAgICAqIEVpdGhlciBleGlzdGluZ0V2ZW50U25hcCBvciBleGlzdGluZ1NlcnZlclNuYXAgbXVzdCBleGlzdFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IVBhdGh9IHRyZWVQYXRoXHJcbiAgICAgKiBAcGFyYW0geyFQYXRofSBjaGlsZFBhdGhcclxuICAgICAqIEBwYXJhbSB7P05vZGV9IGV4aXN0aW5nRXZlbnRTbmFwXHJcbiAgICAgKiBAcGFyYW0gez9Ob2RlfSBleGlzdGluZ1NlcnZlclNuYXBcclxuICAgICAqIEByZXR1cm4gez9Ob2RlfVxyXG4gICAgICovXHJcbiAgICBXcml0ZVRyZWUucHJvdG90eXBlLmNhbGNFdmVudENhY2hlQWZ0ZXJTZXJ2ZXJPdmVyd3JpdGUgPSBmdW5jdGlvbiAodHJlZVBhdGgsIGNoaWxkUGF0aCwgZXhpc3RpbmdFdmVudFNuYXAsIGV4aXN0aW5nU2VydmVyU25hcCkge1xyXG4gICAgICAgIGFzc2VydChleGlzdGluZ0V2ZW50U25hcCB8fCBleGlzdGluZ1NlcnZlclNuYXAsICdFaXRoZXIgZXhpc3RpbmdFdmVudFNuYXAgb3IgZXhpc3RpbmdTZXJ2ZXJTbmFwIG11c3QgZXhpc3QnKTtcclxuICAgICAgICB2YXIgcGF0aCA9IHRyZWVQYXRoLmNoaWxkKGNoaWxkUGF0aCk7XHJcbiAgICAgICAgaWYgKHRoaXMudmlzaWJsZVdyaXRlc18uaGFzQ29tcGxldGVXcml0ZShwYXRoKSkge1xyXG4gICAgICAgICAgICAvLyBBdCB0aGlzIHBvaW50IHdlIGNhbiBwcm9iYWJseSBndWFyYW50ZWUgdGhhdCB3ZSdyZSBpbiBjYXNlIDIsIG1lYW5pbmcgbm8gZXZlbnRzXHJcbiAgICAgICAgICAgIC8vIE1heSBuZWVkIHRvIGNoZWNrIHZpc2liaWxpdHkgd2hpbGUgZG9pbmcgdGhlIGZpbmRSb290TW9zdFZhbHVlQW5kUGF0aCBjYWxsXHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gTm8gY29tcGxldGUgc2hhZG93aW5nLiBXZSdyZSBlaXRoZXIgcGFydGlhbGx5IHNoYWRvd2luZyBvciBub3Qgc2hhZG93aW5nIGF0IGFsbC5cclxuICAgICAgICAgICAgdmFyIGNoaWxkTWVyZ2UgPSB0aGlzLnZpc2libGVXcml0ZXNfLmNoaWxkQ29tcG91bmRXcml0ZShwYXRoKTtcclxuICAgICAgICAgICAgaWYgKGNoaWxkTWVyZ2UuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBXZSdyZSBub3Qgc2hhZG93aW5nIGF0IGFsbC4gQ2FzZSAxXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXhpc3RpbmdTZXJ2ZXJTbmFwLmdldENoaWxkKGNoaWxkUGF0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGNvdWxkIGJlIG1vcmUgZWZmaWNpZW50IGlmIHRoZSBzZXJ2ZXJOb2RlICsgdXBkYXRlcyBkb2Vzbid0IGNoYW5nZSB0aGUgZXZlbnRTbmFwXHJcbiAgICAgICAgICAgICAgICAvLyBIb3dldmVyIHRoaXMgaXMgdHJpY2t5IHRvIGZpbmQgb3V0LCBzaW5jZSB1c2VyIHVwZGF0ZXMgZG9uJ3QgbmVjZXNzYXJ5IGNoYW5nZSB0aGUgc2VydmVyXHJcbiAgICAgICAgICAgICAgICAvLyBzbmFwLCBlLmcuIHByaW9yaXR5IHVwZGF0ZXMgb24gZW1wdHkgbm9kZXMsIG9yIGRlZXAgZGVsZXRlcy4gQW5vdGhlciBzcGVjaWFsIGNhc2UgaXMgaWYgdGhlIHNlcnZlclxyXG4gICAgICAgICAgICAgICAgLy8gYWRkcyBub2RlcywgYnV0IGRvZXNuJ3QgY2hhbmdlIGFueSBleGlzdGluZyB3cml0ZXMuIEl0IGlzIHRoZXJlZm9yZSBub3QgZW5vdWdoIHRvXHJcbiAgICAgICAgICAgICAgICAvLyBvbmx5IGNoZWNrIGlmIHRoZSB1cGRhdGVzIGNoYW5nZSB0aGUgc2VydmVyTm9kZS5cclxuICAgICAgICAgICAgICAgIC8vIE1heWJlIGNoZWNrIGlmIHRoZSBtZXJnZSB0cmVlIGNvbnRhaW5zIHRoZXNlIHNwZWNpYWwgY2FzZXMgYW5kIG9ubHkgZG8gYSBmdWxsIG92ZXJ3cml0ZSBpbiB0aGF0IGNhc2U/XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hpbGRNZXJnZS5hcHBseShleGlzdGluZ1NlcnZlclNuYXAuZ2V0Q2hpbGQoY2hpbGRQYXRoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgY29tcGxldGUgY2hpbGQgZm9yIGEgZ2l2ZW4gc2VydmVyIHNuYXAgYWZ0ZXIgYXBwbHlpbmcgYWxsIHVzZXIgd3JpdGVzIG9yIG51bGwgaWYgdGhlcmUgaXMgbm9cclxuICAgICAqIGNvbXBsZXRlIGNoaWxkIGZvciB0aGlzIENoaWxkS2V5LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IVBhdGh9IHRyZWVQYXRoXHJcbiAgICAgKiBAcGFyYW0geyFzdHJpbmd9IGNoaWxkS2V5XHJcbiAgICAgKiBAcGFyYW0geyFDYWNoZU5vZGV9IGV4aXN0aW5nU2VydmVyU25hcFxyXG4gICAgICogQHJldHVybiB7P05vZGV9XHJcbiAgICAgKi9cclxuICAgIFdyaXRlVHJlZS5wcm90b3R5cGUuY2FsY0NvbXBsZXRlQ2hpbGQgPSBmdW5jdGlvbiAodHJlZVBhdGgsIGNoaWxkS2V5LCBleGlzdGluZ1NlcnZlclNuYXApIHtcclxuICAgICAgICB2YXIgcGF0aCA9IHRyZWVQYXRoLmNoaWxkKGNoaWxkS2V5KTtcclxuICAgICAgICB2YXIgc2hhZG93aW5nTm9kZSA9IHRoaXMudmlzaWJsZVdyaXRlc18uZ2V0Q29tcGxldGVOb2RlKHBhdGgpO1xyXG4gICAgICAgIGlmIChzaGFkb3dpbmdOb2RlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNoYWRvd2luZ05vZGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoZXhpc3RpbmdTZXJ2ZXJTbmFwLmlzQ29tcGxldGVGb3JDaGlsZChjaGlsZEtleSkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjaGlsZE1lcmdlID0gdGhpcy52aXNpYmxlV3JpdGVzXy5jaGlsZENvbXBvdW5kV3JpdGUocGF0aCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hpbGRNZXJnZS5hcHBseShleGlzdGluZ1NlcnZlclNuYXAuZ2V0Tm9kZSgpLmdldEltbWVkaWF0ZUNoaWxkKGNoaWxkS2V5KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSBub2RlIGlmIHRoZXJlIGlzIGEgY29tcGxldGUgb3ZlcndyaXRlIGZvciB0aGlzIHBhdGguIE1vcmUgc3BlY2lmaWNhbGx5LCBpZiB0aGVyZSBpcyBhIHdyaXRlIGF0XHJcbiAgICAgKiBhIGhpZ2hlciBwYXRoLCB0aGlzIHdpbGwgcmV0dXJuIHRoZSBjaGlsZCBvZiB0aGF0IHdyaXRlIHJlbGF0aXZlIHRvIHRoZSB3cml0ZSBhbmQgdGhpcyBwYXRoLlxyXG4gICAgICogUmV0dXJucyBudWxsIGlmIHRoZXJlIGlzIG5vIHdyaXRlIGF0IHRoaXMgcGF0aC5cclxuICAgICAqL1xyXG4gICAgV3JpdGVUcmVlLnByb3RvdHlwZS5zaGFkb3dpbmdXcml0ZSA9IGZ1bmN0aW9uIChwYXRoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmlzaWJsZVdyaXRlc18uZ2V0Q29tcGxldGVOb2RlKHBhdGgpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBtZXRob2QgaXMgdXNlZCB3aGVuIHByb2Nlc3NpbmcgY2hpbGQgcmVtb3ZlIGV2ZW50cyBvbiBhIHF1ZXJ5LiBJZiB3ZSBjYW4sIHdlIHB1bGwgaW4gY2hpbGRyZW4gdGhhdCB3ZXJlIG91dHNpZGVcclxuICAgICAqIHRoZSB3aW5kb3csIGJ1dCBtYXkgbm93IGJlIGluIHRoZSB3aW5kb3cuXHJcbiAgICAgKi9cclxuICAgIFdyaXRlVHJlZS5wcm90b3R5cGUuY2FsY0luZGV4ZWRTbGljZSA9IGZ1bmN0aW9uICh0cmVlUGF0aCwgY29tcGxldGVTZXJ2ZXJEYXRhLCBzdGFydFBvc3QsIGNvdW50LCByZXZlcnNlLCBpbmRleCkge1xyXG4gICAgICAgIHZhciB0b0l0ZXJhdGU7XHJcbiAgICAgICAgdmFyIG1lcmdlID0gdGhpcy52aXNpYmxlV3JpdGVzXy5jaGlsZENvbXBvdW5kV3JpdGUodHJlZVBhdGgpO1xyXG4gICAgICAgIHZhciBzaGFkb3dpbmdOb2RlID0gbWVyZ2UuZ2V0Q29tcGxldGVOb2RlKFBhdGguRW1wdHkpO1xyXG4gICAgICAgIGlmIChzaGFkb3dpbmdOb2RlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdG9JdGVyYXRlID0gc2hhZG93aW5nTm9kZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoY29tcGxldGVTZXJ2ZXJEYXRhICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdG9JdGVyYXRlID0gbWVyZ2UuYXBwbHkoY29tcGxldGVTZXJ2ZXJEYXRhKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIG5vIGNoaWxkcmVuIHRvIGl0ZXJhdGUgb25cclxuICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0b0l0ZXJhdGUgPSB0b0l0ZXJhdGUud2l0aEluZGV4KGluZGV4KTtcclxuICAgICAgICBpZiAoIXRvSXRlcmF0ZS5pc0VtcHR5KCkgJiYgIXRvSXRlcmF0ZS5pc0xlYWZOb2RlKCkpIHtcclxuICAgICAgICAgICAgdmFyIG5vZGVzID0gW107XHJcbiAgICAgICAgICAgIHZhciBjbXAgPSBpbmRleC5nZXRDb21wYXJlKCk7XHJcbiAgICAgICAgICAgIHZhciBpdGVyID0gcmV2ZXJzZVxyXG4gICAgICAgICAgICAgICAgPyB0b0l0ZXJhdGUuZ2V0UmV2ZXJzZUl0ZXJhdG9yRnJvbShzdGFydFBvc3QsIGluZGV4KVxyXG4gICAgICAgICAgICAgICAgOiB0b0l0ZXJhdGUuZ2V0SXRlcmF0b3JGcm9tKHN0YXJ0UG9zdCwgaW5kZXgpO1xyXG4gICAgICAgICAgICB2YXIgbmV4dCA9IGl0ZXIuZ2V0TmV4dCgpO1xyXG4gICAgICAgICAgICB3aGlsZSAobmV4dCAmJiBub2Rlcy5sZW5ndGggPCBjb3VudCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNtcChuZXh0LCBzdGFydFBvc3QpICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZXMucHVzaChuZXh0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG5leHQgPSBpdGVyLmdldE5leHQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbm9kZXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFdyaXRlVHJlZS5wcm90b3R5cGUucmVjb3JkQ29udGFpbnNQYXRoXyA9IGZ1bmN0aW9uICh3cml0ZVJlY29yZCwgcGF0aCkge1xyXG4gICAgICAgIGlmICh3cml0ZVJlY29yZC5zbmFwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB3cml0ZVJlY29yZC5wYXRoLmNvbnRhaW5zKHBhdGgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgY2hpbGROYW1lIGluIHdyaXRlUmVjb3JkLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAod3JpdGVSZWNvcmQuY2hpbGRyZW4uaGFzT3duUHJvcGVydHkoY2hpbGROYW1lKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHdyaXRlUmVjb3JkLnBhdGguY2hpbGQoY2hpbGROYW1lKS5jb250YWlucyhwYXRoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZS1sYXllciB0aGUgd3JpdGVzIGFuZCBtZXJnZXMgaW50byBhIHRyZWUgc28gd2UgY2FuIGVmZmljaWVudGx5IGNhbGN1bGF0ZSBldmVudCBzbmFwc2hvdHNcclxuICAgICAqL1xyXG4gICAgV3JpdGVUcmVlLnByb3RvdHlwZS5yZXNldFRyZWVfID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMudmlzaWJsZVdyaXRlc18gPSBXcml0ZVRyZWUubGF5ZXJUcmVlXyh0aGlzLmFsbFdyaXRlc18sIFdyaXRlVHJlZS5EZWZhdWx0RmlsdGVyXywgUGF0aC5FbXB0eSk7XHJcbiAgICAgICAgaWYgKHRoaXMuYWxsV3JpdGVzXy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMubGFzdFdyaXRlSWRfID0gdGhpcy5hbGxXcml0ZXNfW3RoaXMuYWxsV3JpdGVzXy5sZW5ndGggLSAxXS53cml0ZUlkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5sYXN0V3JpdGVJZF8gPSAtMTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgZGVmYXVsdCBmaWx0ZXIgdXNlZCB3aGVuIGNvbnN0cnVjdGluZyB0aGUgdHJlZS4gS2VlcCBldmVyeXRoaW5nIHRoYXQncyB2aXNpYmxlLlxyXG4gICAgICovXHJcbiAgICBXcml0ZVRyZWUuRGVmYXVsdEZpbHRlcl8gPSBmdW5jdGlvbiAod3JpdGUpIHtcclxuICAgICAgICByZXR1cm4gd3JpdGUudmlzaWJsZTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFN0YXRpYyBtZXRob2QuIEdpdmVuIGFuIGFycmF5IG9mIFdyaXRlUmVjb3JkcywgYSBmaWx0ZXIgZm9yIHdoaWNoIG9uZXMgdG8gaW5jbHVkZSwgYW5kIGEgcGF0aCwgY29uc3RydWN0IHRoZSB0cmVlIG9mXHJcbiAgICAgKiBldmVudCBkYXRhIGF0IHRoYXQgcGF0aC5cclxuICAgICAqL1xyXG4gICAgV3JpdGVUcmVlLmxheWVyVHJlZV8gPSBmdW5jdGlvbiAod3JpdGVzLCBmaWx0ZXIsIHRyZWVSb290KSB7XHJcbiAgICAgICAgdmFyIGNvbXBvdW5kV3JpdGUgPSBDb21wb3VuZFdyaXRlLkVtcHR5O1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgd3JpdGVzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIHZhciB3cml0ZSA9IHdyaXRlc1tpXTtcclxuICAgICAgICAgICAgLy8gVGhlb3J5LCBhIGxhdGVyIHNldCB3aWxsIGVpdGhlcjpcclxuICAgICAgICAgICAgLy8gYSkgYWJvcnQgYSByZWxldmFudCB0cmFuc2FjdGlvbiwgc28gbm8gbmVlZCB0byB3b3JyeSBhYm91dCBleGNsdWRpbmcgaXQgZnJvbSBjYWxjdWxhdGluZyB0aGF0IHRyYW5zYWN0aW9uXHJcbiAgICAgICAgICAgIC8vIGIpIG5vdCBiZSByZWxldmFudCB0byBhIHRyYW5zYWN0aW9uIChzZXBhcmF0ZSBicmFuY2gpLCBzbyBhZ2FpbiB3aWxsIG5vdCBhZmZlY3QgdGhlIGRhdGEgZm9yIHRoYXQgdHJhbnNhY3Rpb25cclxuICAgICAgICAgICAgaWYgKGZpbHRlcih3cml0ZSkpIHtcclxuICAgICAgICAgICAgICAgIHZhciB3cml0ZVBhdGggPSB3cml0ZS5wYXRoO1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlbGF0aXZlUGF0aCA9IHZvaWQgMDtcclxuICAgICAgICAgICAgICAgIGlmICh3cml0ZS5zbmFwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRyZWVSb290LmNvbnRhaW5zKHdyaXRlUGF0aCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmVQYXRoID0gUGF0aC5yZWxhdGl2ZVBhdGgodHJlZVJvb3QsIHdyaXRlUGF0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvdW5kV3JpdGUgPSBjb21wb3VuZFdyaXRlLmFkZFdyaXRlKHJlbGF0aXZlUGF0aCwgd3JpdGUuc25hcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHdyaXRlUGF0aC5jb250YWlucyh0cmVlUm9vdCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmVQYXRoID0gUGF0aC5yZWxhdGl2ZVBhdGgod3JpdGVQYXRoLCB0cmVlUm9vdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvdW5kV3JpdGUgPSBjb21wb3VuZFdyaXRlLmFkZFdyaXRlKFBhdGguRW1wdHksIHdyaXRlLnNuYXAuZ2V0Q2hpbGQocmVsYXRpdmVQYXRoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAod3JpdGUuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHJlZVJvb3QuY29udGFpbnMod3JpdGVQYXRoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZVBhdGggPSBQYXRoLnJlbGF0aXZlUGF0aCh0cmVlUm9vdCwgd3JpdGVQYXRoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcG91bmRXcml0ZSA9IGNvbXBvdW5kV3JpdGUuYWRkV3JpdGVzKHJlbGF0aXZlUGF0aCwgd3JpdGUuY2hpbGRyZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh3cml0ZVBhdGguY29udGFpbnModHJlZVJvb3QpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbGF0aXZlUGF0aCA9IFBhdGgucmVsYXRpdmVQYXRoKHdyaXRlUGF0aCwgdHJlZVJvb3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVsYXRpdmVQYXRoLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG91bmRXcml0ZSA9IGNvbXBvdW5kV3JpdGUuYWRkV3JpdGVzKFBhdGguRW1wdHksIHdyaXRlLmNoaWxkcmVuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHNhZmVHZXQod3JpdGUuY2hpbGRyZW4sIHJlbGF0aXZlUGF0aC5nZXRGcm9udCgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZXJlIGV4aXN0cyBhIGNoaWxkIGluIHRoaXMgbm9kZSB0aGF0IG1hdGNoZXMgdGhlIHJvb3QgcGF0aFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWVwTm9kZSA9IGNoaWxkLmdldENoaWxkKHJlbGF0aXZlUGF0aC5wb3BGcm9udCgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb3VuZFdyaXRlID0gY29tcG91bmRXcml0ZS5hZGRXcml0ZShQYXRoLkVtcHR5LCBkZWVwTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBhc3NlcnRpb25FcnJvcignV3JpdGVSZWNvcmQgc2hvdWxkIGhhdmUgLnNuYXAgb3IgLmNoaWxkcmVuJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNvbXBvdW5kV3JpdGU7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFdyaXRlVHJlZTtcclxufSgpKTtcclxuLyoqXHJcbiAqIEEgV3JpdGVUcmVlUmVmIHdyYXBzIGEgV3JpdGVUcmVlIGFuZCBhIHBhdGgsIGZvciBjb252ZW5pZW50IGFjY2VzcyB0byBhIHBhcnRpY3VsYXIgc3VidHJlZS4gIEFsbCBvZiB0aGUgbWV0aG9kc1xyXG4gKiBqdXN0IHByb3h5IHRvIHRoZSB1bmRlcmx5aW5nIFdyaXRlVHJlZS5cclxuICpcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG52YXIgV3JpdGVUcmVlUmVmID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFQYXRofSBwYXRoXHJcbiAgICAgKiBAcGFyYW0geyFXcml0ZVRyZWV9IHdyaXRlVHJlZVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBXcml0ZVRyZWVSZWYocGF0aCwgd3JpdGVUcmVlKSB7XHJcbiAgICAgICAgdGhpcy50cmVlUGF0aF8gPSBwYXRoO1xyXG4gICAgICAgIHRoaXMud3JpdGVUcmVlXyA9IHdyaXRlVHJlZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSWYgcG9zc2libGUsIHJldHVybnMgYSBjb21wbGV0ZSBldmVudCBjYWNoZSwgdXNpbmcgdGhlIHVuZGVybHlpbmcgc2VydmVyIGRhdGEgaWYgcG9zc2libGUuIEluIGFkZGl0aW9uLCBjYW4gYmUgdXNlZFxyXG4gICAgICogdG8gZ2V0IGEgY2FjaGUgdGhhdCBpbmNsdWRlcyBoaWRkZW4gd3JpdGVzLCBhbmQgZXhjbHVkZXMgYXJiaXRyYXJ5IHdyaXRlcy4gTm90ZSB0aGF0IGN1c3RvbWl6aW5nIHRoZSByZXR1cm5lZCBub2RlXHJcbiAgICAgKiBjYW4gbGVhZCB0byBhIG1vcmUgZXhwZW5zaXZlIGNhbGN1bGF0aW9uLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7P05vZGV9IGNvbXBsZXRlU2VydmVyQ2FjaGVcclxuICAgICAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj49fSB3cml0ZUlkc1RvRXhjbHVkZSBPcHRpb25hbCB3cml0ZXMgdG8gZXhjbHVkZS5cclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IGluY2x1ZGVIaWRkZW5Xcml0ZXMgRGVmYXVsdHMgdG8gZmFsc2UsIHdoZXRoZXIgb3Igbm90IHRvIGxheWVyIG9uIHdyaXRlcyB3aXRoIHZpc2libGUgc2V0IHRvIGZhbHNlXHJcbiAgICAgKiBAcmV0dXJuIHs/Tm9kZX1cclxuICAgICAqL1xyXG4gICAgV3JpdGVUcmVlUmVmLnByb3RvdHlwZS5jYWxjQ29tcGxldGVFdmVudENhY2hlID0gZnVuY3Rpb24gKGNvbXBsZXRlU2VydmVyQ2FjaGUsIHdyaXRlSWRzVG9FeGNsdWRlLCBpbmNsdWRlSGlkZGVuV3JpdGVzKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud3JpdGVUcmVlXy5jYWxjQ29tcGxldGVFdmVudENhY2hlKHRoaXMudHJlZVBhdGhfLCBjb21wbGV0ZVNlcnZlckNhY2hlLCB3cml0ZUlkc1RvRXhjbHVkZSwgaW5jbHVkZUhpZGRlbldyaXRlcyk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBJZiBwb3NzaWJsZSwgcmV0dXJucyBhIGNoaWxkcmVuIG5vZGUgY29udGFpbmluZyBhbGwgb2YgdGhlIGNvbXBsZXRlIGNoaWxkcmVuIHdlIGhhdmUgZGF0YSBmb3IuIFRoZSByZXR1cm5lZCBkYXRhIGlzIGFcclxuICAgICAqIG1peCBvZiB0aGUgZ2l2ZW4gc2VydmVyIGRhdGEgYW5kIHdyaXRlIGRhdGEuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHs/Q2hpbGRyZW5Ob2RlfSBjb21wbGV0ZVNlcnZlckNoaWxkcmVuXHJcbiAgICAgKiBAcmV0dXJuIHshQ2hpbGRyZW5Ob2RlfVxyXG4gICAgICovXHJcbiAgICBXcml0ZVRyZWVSZWYucHJvdG90eXBlLmNhbGNDb21wbGV0ZUV2ZW50Q2hpbGRyZW4gPSBmdW5jdGlvbiAoY29tcGxldGVTZXJ2ZXJDaGlsZHJlbikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLndyaXRlVHJlZV8uY2FsY0NvbXBsZXRlRXZlbnRDaGlsZHJlbih0aGlzLnRyZWVQYXRoXywgY29tcGxldGVTZXJ2ZXJDaGlsZHJlbik7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBHaXZlbiB0aGF0IGVpdGhlciB0aGUgdW5kZXJseWluZyBzZXJ2ZXIgZGF0YSBoYXMgdXBkYXRlZCBvciB0aGUgb3V0c3RhbmRpbmcgd3JpdGVzIGhhdmUgdXBkYXRlZCwgZGV0ZXJtaW5lIHdoYXQsXHJcbiAgICAgKiBpZiBhbnl0aGluZywgbmVlZHMgdG8gYmUgYXBwbGllZCB0byB0aGUgZXZlbnQgY2FjaGUuXHJcbiAgICAgKlxyXG4gICAgICogUG9zc2liaWxpdGllczpcclxuICAgICAqXHJcbiAgICAgKiAxLiBObyB3cml0ZXMgYXJlIHNoYWRvd2luZy4gRXZlbnRzIHNob3VsZCBiZSByYWlzZWQsIHRoZSBzbmFwIHRvIGJlIGFwcGxpZWQgY29tZXMgZnJvbSB0aGUgc2VydmVyIGRhdGFcclxuICAgICAqXHJcbiAgICAgKiAyLiBTb21lIHdyaXRlIGlzIGNvbXBsZXRlbHkgc2hhZG93aW5nLiBObyBldmVudHMgdG8gYmUgcmFpc2VkXHJcbiAgICAgKlxyXG4gICAgICogMy4gSXMgcGFydGlhbGx5IHNoYWRvd2VkLiBFdmVudHMgc2hvdWxkIGJlIHJhaXNlZFxyXG4gICAgICpcclxuICAgICAqIEVpdGhlciBleGlzdGluZ0V2ZW50U25hcCBvciBleGlzdGluZ1NlcnZlclNuYXAgbXVzdCBleGlzdCwgdGhpcyBpcyB2YWxpZGF0ZWQgdmlhIGFuIGFzc2VydFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IVBhdGh9IHBhdGhcclxuICAgICAqIEBwYXJhbSB7P05vZGV9IGV4aXN0aW5nRXZlbnRTbmFwXHJcbiAgICAgKiBAcGFyYW0gez9Ob2RlfSBleGlzdGluZ1NlcnZlclNuYXBcclxuICAgICAqIEByZXR1cm4gez9Ob2RlfVxyXG4gICAgICovXHJcbiAgICBXcml0ZVRyZWVSZWYucHJvdG90eXBlLmNhbGNFdmVudENhY2hlQWZ0ZXJTZXJ2ZXJPdmVyd3JpdGUgPSBmdW5jdGlvbiAocGF0aCwgZXhpc3RpbmdFdmVudFNuYXAsIGV4aXN0aW5nU2VydmVyU25hcCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLndyaXRlVHJlZV8uY2FsY0V2ZW50Q2FjaGVBZnRlclNlcnZlck92ZXJ3cml0ZSh0aGlzLnRyZWVQYXRoXywgcGF0aCwgZXhpc3RpbmdFdmVudFNuYXAsIGV4aXN0aW5nU2VydmVyU25hcCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgbm9kZSBpZiB0aGVyZSBpcyBhIGNvbXBsZXRlIG92ZXJ3cml0ZSBmb3IgdGhpcyBwYXRoLiBNb3JlIHNwZWNpZmljYWxseSwgaWYgdGhlcmUgaXMgYSB3cml0ZSBhdFxyXG4gICAgICogYSBoaWdoZXIgcGF0aCwgdGhpcyB3aWxsIHJldHVybiB0aGUgY2hpbGQgb2YgdGhhdCB3cml0ZSByZWxhdGl2ZSB0byB0aGUgd3JpdGUgYW5kIHRoaXMgcGF0aC5cclxuICAgICAqIFJldHVybnMgbnVsbCBpZiB0aGVyZSBpcyBubyB3cml0ZSBhdCB0aGlzIHBhdGguXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHshUGF0aH0gcGF0aFxyXG4gICAgICogQHJldHVybiB7P05vZGV9XHJcbiAgICAgKi9cclxuICAgIFdyaXRlVHJlZVJlZi5wcm90b3R5cGUuc2hhZG93aW5nV3JpdGUgPSBmdW5jdGlvbiAocGF0aCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLndyaXRlVHJlZV8uc2hhZG93aW5nV3JpdGUodGhpcy50cmVlUGF0aF8uY2hpbGQocGF0aCkpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBtZXRob2QgaXMgdXNlZCB3aGVuIHByb2Nlc3NpbmcgY2hpbGQgcmVtb3ZlIGV2ZW50cyBvbiBhIHF1ZXJ5LiBJZiB3ZSBjYW4sIHdlIHB1bGwgaW4gY2hpbGRyZW4gdGhhdCB3ZXJlIG91dHNpZGVcclxuICAgICAqIHRoZSB3aW5kb3csIGJ1dCBtYXkgbm93IGJlIGluIHRoZSB3aW5kb3dcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gez9Ob2RlfSBjb21wbGV0ZVNlcnZlckRhdGFcclxuICAgICAqIEBwYXJhbSB7IU5hbWVkTm9kZX0gc3RhcnRQb3N0XHJcbiAgICAgKiBAcGFyYW0geyFudW1iZXJ9IGNvdW50XHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJldmVyc2VcclxuICAgICAqIEBwYXJhbSB7IUluZGV4fSBpbmRleFxyXG4gICAgICogQHJldHVybiB7IUFycmF5LjwhTmFtZWROb2RlPn1cclxuICAgICAqL1xyXG4gICAgV3JpdGVUcmVlUmVmLnByb3RvdHlwZS5jYWxjSW5kZXhlZFNsaWNlID0gZnVuY3Rpb24gKGNvbXBsZXRlU2VydmVyRGF0YSwgc3RhcnRQb3N0LCBjb3VudCwgcmV2ZXJzZSwgaW5kZXgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53cml0ZVRyZWVfLmNhbGNJbmRleGVkU2xpY2UodGhpcy50cmVlUGF0aF8sIGNvbXBsZXRlU2VydmVyRGF0YSwgc3RhcnRQb3N0LCBjb3VudCwgcmV2ZXJzZSwgaW5kZXgpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIGNvbXBsZXRlIGNoaWxkIGZvciBhIGdpdmVuIHNlcnZlciBzbmFwIGFmdGVyIGFwcGx5aW5nIGFsbCB1c2VyIHdyaXRlcyBvciBudWxsIGlmIHRoZXJlIGlzIG5vXHJcbiAgICAgKiBjb21wbGV0ZSBjaGlsZCBmb3IgdGhpcyBDaGlsZEtleS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFzdHJpbmd9IGNoaWxkS2V5XHJcbiAgICAgKiBAcGFyYW0geyFDYWNoZU5vZGV9IGV4aXN0aW5nU2VydmVyQ2FjaGVcclxuICAgICAqIEByZXR1cm4gez9Ob2RlfVxyXG4gICAgICovXHJcbiAgICBXcml0ZVRyZWVSZWYucHJvdG90eXBlLmNhbGNDb21wbGV0ZUNoaWxkID0gZnVuY3Rpb24gKGNoaWxkS2V5LCBleGlzdGluZ1NlcnZlckNhY2hlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud3JpdGVUcmVlXy5jYWxjQ29tcGxldGVDaGlsZCh0aGlzLnRyZWVQYXRoXywgY2hpbGRLZXksIGV4aXN0aW5nU2VydmVyQ2FjaGUpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJuIGEgV3JpdGVUcmVlUmVmIGZvciBhIGNoaWxkLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjaGlsZE5hbWVcclxuICAgICAqIEByZXR1cm4geyFXcml0ZVRyZWVSZWZ9XHJcbiAgICAgKi9cclxuICAgIFdyaXRlVHJlZVJlZi5wcm90b3R5cGUuY2hpbGQgPSBmdW5jdGlvbiAoY2hpbGROYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBXcml0ZVRyZWVSZWYodGhpcy50cmVlUGF0aF8uY2hpbGQoY2hpbGROYW1lKSwgdGhpcy53cml0ZVRyZWVfKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gV3JpdGVUcmVlUmVmO1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogU3luY1RyZWUgaXMgdGhlIGNlbnRyYWwgY2xhc3MgZm9yIG1hbmFnaW5nIGV2ZW50IGNhbGxiYWNrIHJlZ2lzdHJhdGlvbiwgZGF0YSBjYWNoaW5nLCB2aWV3c1xyXG4gKiAocXVlcnkgcHJvY2Vzc2luZyksIGFuZCBldmVudCBnZW5lcmF0aW9uLiAgVGhlcmUgYXJlIHR5cGljYWxseSB0d28gU3luY1RyZWUgaW5zdGFuY2VzIGZvclxyXG4gKiBlYWNoIFJlcG8sIG9uZSBmb3IgdGhlIG5vcm1hbCBGaXJlYmFzZSBkYXRhLCBhbmQgb25lIGZvciB0aGUgLmluZm8gZGF0YS5cclxuICpcclxuICogSXQgaGFzIGEgbnVtYmVyIG9mIHJlc3BvbnNpYmlsaXRpZXMsIGluY2x1ZGluZzpcclxuICogIC0gVHJhY2tpbmcgYWxsIHVzZXIgZXZlbnQgY2FsbGJhY2tzIChyZWdpc3RlcmVkIHZpYSBhZGRFdmVudFJlZ2lzdHJhdGlvbigpIGFuZCByZW1vdmVFdmVudFJlZ2lzdHJhdGlvbigpKS5cclxuICogIC0gQXBwbHlpbmcgYW5kIGNhY2hpbmcgZGF0YSBjaGFuZ2VzIGZvciB1c2VyIHNldCgpLCB0cmFuc2FjdGlvbigpLCBhbmQgdXBkYXRlKCkgY2FsbHNcclxuICogICAgKGFwcGx5VXNlck92ZXJ3cml0ZSgpLCBhcHBseVVzZXJNZXJnZSgpKS5cclxuICogIC0gQXBwbHlpbmcgYW5kIGNhY2hpbmcgZGF0YSBjaGFuZ2VzIGZvciBzZXJ2ZXIgZGF0YSBjaGFuZ2VzIChhcHBseVNlcnZlck92ZXJ3cml0ZSgpLFxyXG4gKiAgICBhcHBseVNlcnZlck1lcmdlKCkpLlxyXG4gKiAgLSBHZW5lcmF0aW5nIHVzZXItZmFjaW5nIGV2ZW50cyBmb3Igc2VydmVyIGFuZCB1c2VyIGNoYW5nZXMgKGFsbCBvZiB0aGUgYXBwbHkqIG1ldGhvZHNcclxuICogICAgcmV0dXJuIHRoZSBzZXQgb2YgZXZlbnRzIHRoYXQgbmVlZCB0byBiZSByYWlzZWQgYXMgYSByZXN1bHQpLlxyXG4gKiAgLSBNYWludGFpbmluZyB0aGUgYXBwcm9wcmlhdGUgc2V0IG9mIHNlcnZlciBsaXN0ZW5zIHRvIGVuc3VyZSB3ZSBhcmUgYWx3YXlzIHN1YnNjcmliZWRcclxuICogICAgdG8gdGhlIGNvcnJlY3Qgc2V0IG9mIHBhdGhzIGFuZCBxdWVyaWVzIHRvIHNhdGlzZnkgdGhlIGN1cnJlbnQgc2V0IG9mIHVzZXIgZXZlbnRcclxuICogICAgY2FsbGJhY2tzIChsaXN0ZW5zIGFyZSBzdGFydGVkL3N0b3BwZWQgdXNpbmcgdGhlIHByb3ZpZGVkIGxpc3RlblByb3ZpZGVyKS5cclxuICpcclxuICogTk9URTogQWx0aG91Z2ggU3luY1RyZWUgdHJhY2tzIGV2ZW50IGNhbGxiYWNrcyBhbmQgY2FsY3VsYXRlcyBldmVudHMgdG8gcmFpc2UsIHRoZSBhY3R1YWxcclxuICogZXZlbnRzIGFyZSByZXR1cm5lZCB0byB0aGUgY2FsbGVyIHJhdGhlciB0aGFuIHJhaXNlZCBzeW5jaHJvbm91c2x5LlxyXG4gKlxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbnZhciBTeW5jVHJlZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshTGlzdGVuUHJvdmlkZXJ9IGxpc3RlblByb3ZpZGVyXyBVc2VkIGJ5IFN5bmNUcmVlIHRvIHN0YXJ0IC8gc3RvcCBsaXN0ZW5pbmdcclxuICAgICAqICAgdG8gc2VydmVyIGRhdGEuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIFN5bmNUcmVlKGxpc3RlblByb3ZpZGVyXykge1xyXG4gICAgICAgIHRoaXMubGlzdGVuUHJvdmlkZXJfID0gbGlzdGVuUHJvdmlkZXJfO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRyZWUgb2YgU3luY1BvaW50cy4gIFRoZXJlJ3MgYSBTeW5jUG9pbnQgYXQgYW55IGxvY2F0aW9uIHRoYXQgaGFzIDEgb3IgbW9yZSB2aWV3cy5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnN5bmNQb2ludFRyZWVfID0gSW1tdXRhYmxlVHJlZS5FbXB0eTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIHRyZWUgb2YgYWxsIHBlbmRpbmcgdXNlciB3cml0ZXMgKHVzZXItaW5pdGlhdGVkIHNldCgpJ3MsIHRyYW5zYWN0aW9uKCkncywgdXBkYXRlKCkncywgZXRjLikuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5wZW5kaW5nV3JpdGVUcmVlXyA9IG5ldyBXcml0ZVRyZWUoKTtcclxuICAgICAgICB0aGlzLnRhZ1RvUXVlcnlNYXAgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgdGhpcy5xdWVyeVRvVGFnTWFwID0gbmV3IE1hcCgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBcHBseSB0aGUgZGF0YSBjaGFuZ2VzIGZvciBhIHVzZXItZ2VuZXJhdGVkIHNldCgpIG9yIHRyYW5zYWN0aW9uKCkgY2FsbC5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIEV2ZW50cyB0byByYWlzZS5cclxuICAgICAqL1xyXG4gICAgU3luY1RyZWUucHJvdG90eXBlLmFwcGx5VXNlck92ZXJ3cml0ZSA9IGZ1bmN0aW9uIChwYXRoLCBuZXdEYXRhLCB3cml0ZUlkLCB2aXNpYmxlKSB7XHJcbiAgICAgICAgLy8gUmVjb3JkIHBlbmRpbmcgd3JpdGUuXHJcbiAgICAgICAgdGhpcy5wZW5kaW5nV3JpdGVUcmVlXy5hZGRPdmVyd3JpdGUocGF0aCwgbmV3RGF0YSwgd3JpdGVJZCwgdmlzaWJsZSk7XHJcbiAgICAgICAgaWYgKCF2aXNpYmxlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFwcGx5T3BlcmF0aW9uVG9TeW5jUG9pbnRzXyhuZXcgT3ZlcndyaXRlKE9wZXJhdGlvblNvdXJjZS5Vc2VyLCBwYXRoLCBuZXdEYXRhKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQXBwbHkgdGhlIGRhdGEgZnJvbSBhIHVzZXItZ2VuZXJhdGVkIHVwZGF0ZSgpIGNhbGxcclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIEV2ZW50cyB0byByYWlzZS5cclxuICAgICAqL1xyXG4gICAgU3luY1RyZWUucHJvdG90eXBlLmFwcGx5VXNlck1lcmdlID0gZnVuY3Rpb24gKHBhdGgsIGNoYW5nZWRDaGlsZHJlbiwgd3JpdGVJZCkge1xyXG4gICAgICAgIC8vIFJlY29yZCBwZW5kaW5nIG1lcmdlLlxyXG4gICAgICAgIHRoaXMucGVuZGluZ1dyaXRlVHJlZV8uYWRkTWVyZ2UocGF0aCwgY2hhbmdlZENoaWxkcmVuLCB3cml0ZUlkKTtcclxuICAgICAgICB2YXIgY2hhbmdlVHJlZSA9IEltbXV0YWJsZVRyZWUuZnJvbU9iamVjdChjaGFuZ2VkQ2hpbGRyZW4pO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFwcGx5T3BlcmF0aW9uVG9TeW5jUG9pbnRzXyhuZXcgTWVyZ2UoT3BlcmF0aW9uU291cmNlLlVzZXIsIHBhdGgsIGNoYW5nZVRyZWUpKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEFja25vd2xlZGdlIGEgcGVuZGluZyB1c2VyIHdyaXRlIHRoYXQgd2FzIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCB3aXRoIGFwcGx5VXNlck92ZXJ3cml0ZSgpIG9yIGFwcGx5VXNlck1lcmdlKCkuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHJldmVydCBUcnVlIGlmIHRoZSBnaXZlbiB3cml0ZSBmYWlsZWQgYW5kIG5lZWRzIHRvIGJlIHJldmVydGVkXHJcbiAgICAgKiBAcmV0dXJuIEV2ZW50cyB0byByYWlzZS5cclxuICAgICAqL1xyXG4gICAgU3luY1RyZWUucHJvdG90eXBlLmFja1VzZXJXcml0ZSA9IGZ1bmN0aW9uICh3cml0ZUlkLCByZXZlcnQpIHtcclxuICAgICAgICBpZiAocmV2ZXJ0ID09PSB2b2lkIDApIHsgcmV2ZXJ0ID0gZmFsc2U7IH1cclxuICAgICAgICB2YXIgd3JpdGUgPSB0aGlzLnBlbmRpbmdXcml0ZVRyZWVfLmdldFdyaXRlKHdyaXRlSWQpO1xyXG4gICAgICAgIHZhciBuZWVkVG9SZWV2YWx1YXRlID0gdGhpcy5wZW5kaW5nV3JpdGVUcmVlXy5yZW1vdmVXcml0ZSh3cml0ZUlkKTtcclxuICAgICAgICBpZiAoIW5lZWRUb1JlZXZhbHVhdGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGFmZmVjdGVkVHJlZV8xID0gSW1tdXRhYmxlVHJlZS5FbXB0eTtcclxuICAgICAgICAgICAgaWYgKHdyaXRlLnNuYXAgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgLy8gb3ZlcndyaXRlXHJcbiAgICAgICAgICAgICAgICBhZmZlY3RlZFRyZWVfMSA9IGFmZmVjdGVkVHJlZV8xLnNldChQYXRoLkVtcHR5LCB0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGVhY2god3JpdGUuY2hpbGRyZW4sIGZ1bmN0aW9uIChwYXRoU3RyaW5nLCBub2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWZmZWN0ZWRUcmVlXzEgPSBhZmZlY3RlZFRyZWVfMS5zZXQobmV3IFBhdGgocGF0aFN0cmluZyksIG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlPcGVyYXRpb25Ub1N5bmNQb2ludHNfKG5ldyBBY2tVc2VyV3JpdGUod3JpdGUucGF0aCwgYWZmZWN0ZWRUcmVlXzEsIHJldmVydCkpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEFwcGx5IG5ldyBzZXJ2ZXIgZGF0YSBmb3IgdGhlIHNwZWNpZmllZCBwYXRoLi5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIEV2ZW50cyB0byByYWlzZS5cclxuICAgICAqL1xyXG4gICAgU3luY1RyZWUucHJvdG90eXBlLmFwcGx5U2VydmVyT3ZlcndyaXRlID0gZnVuY3Rpb24gKHBhdGgsIG5ld0RhdGEpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hcHBseU9wZXJhdGlvblRvU3luY1BvaW50c18obmV3IE92ZXJ3cml0ZShPcGVyYXRpb25Tb3VyY2UuU2VydmVyLCBwYXRoLCBuZXdEYXRhKSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBcHBseSBuZXcgc2VydmVyIGRhdGEgdG8gYmUgbWVyZ2VkIGluIGF0IHRoZSBzcGVjaWZpZWQgcGF0aC5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIEV2ZW50cyB0byByYWlzZS5cclxuICAgICAqL1xyXG4gICAgU3luY1RyZWUucHJvdG90eXBlLmFwcGx5U2VydmVyTWVyZ2UgPSBmdW5jdGlvbiAocGF0aCwgY2hhbmdlZENoaWxkcmVuKSB7XHJcbiAgICAgICAgdmFyIGNoYW5nZVRyZWUgPSBJbW11dGFibGVUcmVlLmZyb21PYmplY3QoY2hhbmdlZENoaWxkcmVuKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5hcHBseU9wZXJhdGlvblRvU3luY1BvaW50c18obmV3IE1lcmdlKE9wZXJhdGlvblNvdXJjZS5TZXJ2ZXIsIHBhdGgsIGNoYW5nZVRyZWUpKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEFwcGx5IGEgbGlzdGVuIGNvbXBsZXRlIGZvciBhIHF1ZXJ5XHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiBFdmVudHMgdG8gcmFpc2UuXHJcbiAgICAgKi9cclxuICAgIFN5bmNUcmVlLnByb3RvdHlwZS5hcHBseUxpc3RlbkNvbXBsZXRlID0gZnVuY3Rpb24gKHBhdGgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hcHBseU9wZXJhdGlvblRvU3luY1BvaW50c18obmV3IExpc3RlbkNvbXBsZXRlKE9wZXJhdGlvblNvdXJjZS5TZXJ2ZXIsIHBhdGgpKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEFwcGx5IG5ldyBzZXJ2ZXIgZGF0YSBmb3IgdGhlIHNwZWNpZmllZCB0YWdnZWQgcXVlcnkuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiBFdmVudHMgdG8gcmFpc2UuXHJcbiAgICAgKi9cclxuICAgIFN5bmNUcmVlLnByb3RvdHlwZS5hcHBseVRhZ2dlZFF1ZXJ5T3ZlcndyaXRlID0gZnVuY3Rpb24gKHBhdGgsIHNuYXAsIHRhZykge1xyXG4gICAgICAgIHZhciBxdWVyeUtleSA9IHRoaXMucXVlcnlLZXlGb3JUYWdfKHRhZyk7XHJcbiAgICAgICAgaWYgKHF1ZXJ5S2V5ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdmFyIHIgPSBTeW5jVHJlZS5wYXJzZVF1ZXJ5S2V5XyhxdWVyeUtleSk7XHJcbiAgICAgICAgICAgIHZhciBxdWVyeVBhdGggPSByLnBhdGgsIHF1ZXJ5SWQgPSByLnF1ZXJ5SWQ7XHJcbiAgICAgICAgICAgIHZhciByZWxhdGl2ZVBhdGggPSBQYXRoLnJlbGF0aXZlUGF0aChxdWVyeVBhdGgsIHBhdGgpO1xyXG4gICAgICAgICAgICB2YXIgb3AgPSBuZXcgT3ZlcndyaXRlKE9wZXJhdGlvblNvdXJjZS5mb3JTZXJ2ZXJUYWdnZWRRdWVyeShxdWVyeUlkKSwgcmVsYXRpdmVQYXRoLCBzbmFwKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlUYWdnZWRPcGVyYXRpb25fKHF1ZXJ5UGF0aCwgb3ApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gUXVlcnkgbXVzdCBoYXZlIGJlZW4gcmVtb3ZlZCBhbHJlYWR5XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBcHBseSBzZXJ2ZXIgZGF0YSB0byBiZSBtZXJnZWQgaW4gZm9yIHRoZSBzcGVjaWZpZWQgdGFnZ2VkIHF1ZXJ5LlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4gRXZlbnRzIHRvIHJhaXNlLlxyXG4gICAgICovXHJcbiAgICBTeW5jVHJlZS5wcm90b3R5cGUuYXBwbHlUYWdnZWRRdWVyeU1lcmdlID0gZnVuY3Rpb24gKHBhdGgsIGNoYW5nZWRDaGlsZHJlbiwgdGFnKSB7XHJcbiAgICAgICAgdmFyIHF1ZXJ5S2V5ID0gdGhpcy5xdWVyeUtleUZvclRhZ18odGFnKTtcclxuICAgICAgICBpZiAocXVlcnlLZXkpIHtcclxuICAgICAgICAgICAgdmFyIHIgPSBTeW5jVHJlZS5wYXJzZVF1ZXJ5S2V5XyhxdWVyeUtleSk7XHJcbiAgICAgICAgICAgIHZhciBxdWVyeVBhdGggPSByLnBhdGgsIHF1ZXJ5SWQgPSByLnF1ZXJ5SWQ7XHJcbiAgICAgICAgICAgIHZhciByZWxhdGl2ZVBhdGggPSBQYXRoLnJlbGF0aXZlUGF0aChxdWVyeVBhdGgsIHBhdGgpO1xyXG4gICAgICAgICAgICB2YXIgY2hhbmdlVHJlZSA9IEltbXV0YWJsZVRyZWUuZnJvbU9iamVjdChjaGFuZ2VkQ2hpbGRyZW4pO1xyXG4gICAgICAgICAgICB2YXIgb3AgPSBuZXcgTWVyZ2UoT3BlcmF0aW9uU291cmNlLmZvclNlcnZlclRhZ2dlZFF1ZXJ5KHF1ZXJ5SWQpLCByZWxhdGl2ZVBhdGgsIGNoYW5nZVRyZWUpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hcHBseVRhZ2dlZE9wZXJhdGlvbl8ocXVlcnlQYXRoLCBvcCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBXZSd2ZSBhbHJlYWR5IHJlbW92ZWQgdGhlIHF1ZXJ5LiBObyBiaWcgZGVhbCwgaWdub3JlIHRoZSB1cGRhdGVcclxuICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEFwcGx5IGEgbGlzdGVuIGNvbXBsZXRlIGZvciBhIHRhZ2dlZCBxdWVyeVxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4gRXZlbnRzIHRvIHJhaXNlLlxyXG4gICAgICovXHJcbiAgICBTeW5jVHJlZS5wcm90b3R5cGUuYXBwbHlUYWdnZWRMaXN0ZW5Db21wbGV0ZSA9IGZ1bmN0aW9uIChwYXRoLCB0YWcpIHtcclxuICAgICAgICB2YXIgcXVlcnlLZXkgPSB0aGlzLnF1ZXJ5S2V5Rm9yVGFnXyh0YWcpO1xyXG4gICAgICAgIGlmIChxdWVyeUtleSkge1xyXG4gICAgICAgICAgICB2YXIgciA9IFN5bmNUcmVlLnBhcnNlUXVlcnlLZXlfKHF1ZXJ5S2V5KTtcclxuICAgICAgICAgICAgdmFyIHF1ZXJ5UGF0aCA9IHIucGF0aCwgcXVlcnlJZCA9IHIucXVlcnlJZDtcclxuICAgICAgICAgICAgdmFyIHJlbGF0aXZlUGF0aCA9IFBhdGgucmVsYXRpdmVQYXRoKHF1ZXJ5UGF0aCwgcGF0aCk7XHJcbiAgICAgICAgICAgIHZhciBvcCA9IG5ldyBMaXN0ZW5Db21wbGV0ZShPcGVyYXRpb25Tb3VyY2UuZm9yU2VydmVyVGFnZ2VkUXVlcnkocXVlcnlJZCksIHJlbGF0aXZlUGF0aCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFwcGx5VGFnZ2VkT3BlcmF0aW9uXyhxdWVyeVBhdGgsIG9wKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIFdlJ3ZlIGFscmVhZHkgcmVtb3ZlZCB0aGUgcXVlcnkuIE5vIGJpZyBkZWFsLCBpZ25vcmUgdGhlIHVwZGF0ZVxyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQWRkIGFuIGV2ZW50IGNhbGxiYWNrIGZvciB0aGUgc3BlY2lmaWVkIHF1ZXJ5LlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4gRXZlbnRzIHRvIHJhaXNlLlxyXG4gICAgICovXHJcbiAgICBTeW5jVHJlZS5wcm90b3R5cGUuYWRkRXZlbnRSZWdpc3RyYXRpb24gPSBmdW5jdGlvbiAocXVlcnksIGV2ZW50UmVnaXN0cmF0aW9uKSB7XHJcbiAgICAgICAgdmFyIHBhdGggPSBxdWVyeS5wYXRoO1xyXG4gICAgICAgIHZhciBzZXJ2ZXJDYWNoZSA9IG51bGw7XHJcbiAgICAgICAgdmFyIGZvdW5kQW5jZXN0b3JEZWZhdWx0VmlldyA9IGZhbHNlO1xyXG4gICAgICAgIC8vIEFueSBjb3ZlcmluZyB3cml0ZXMgd2lsbCBuZWNlc3NhcmlseSBiZSBhdCB0aGUgcm9vdCwgc28gcmVhbGx5IGFsbCB3ZSBuZWVkIHRvIGZpbmQgaXMgdGhlIHNlcnZlciBjYWNoZS5cclxuICAgICAgICAvLyBDb25zaWRlciBvcHRpbWl6aW5nIHRoaXMgb25jZSB0aGVyZSdzIGEgYmV0dGVyIHVuZGVyc3RhbmRpbmcgb2Ygd2hhdCBhY3R1YWwgYmVoYXZpb3Igd2lsbCBiZS5cclxuICAgICAgICB0aGlzLnN5bmNQb2ludFRyZWVfLmZvcmVhY2hPblBhdGgocGF0aCwgZnVuY3Rpb24gKHBhdGhUb1N5bmNQb2ludCwgc3ApIHtcclxuICAgICAgICAgICAgdmFyIHJlbGF0aXZlUGF0aCA9IFBhdGgucmVsYXRpdmVQYXRoKHBhdGhUb1N5bmNQb2ludCwgcGF0aCk7XHJcbiAgICAgICAgICAgIHNlcnZlckNhY2hlID0gc2VydmVyQ2FjaGUgfHwgc3AuZ2V0Q29tcGxldGVTZXJ2ZXJDYWNoZShyZWxhdGl2ZVBhdGgpO1xyXG4gICAgICAgICAgICBmb3VuZEFuY2VzdG9yRGVmYXVsdFZpZXcgPVxyXG4gICAgICAgICAgICAgICAgZm91bmRBbmNlc3RvckRlZmF1bHRWaWV3IHx8IHNwLmhhc0NvbXBsZXRlVmlldygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciBzeW5jUG9pbnQgPSB0aGlzLnN5bmNQb2ludFRyZWVfLmdldChwYXRoKTtcclxuICAgICAgICBpZiAoIXN5bmNQb2ludCkge1xyXG4gICAgICAgICAgICBzeW5jUG9pbnQgPSBuZXcgU3luY1BvaW50KCk7XHJcbiAgICAgICAgICAgIHRoaXMuc3luY1BvaW50VHJlZV8gPSB0aGlzLnN5bmNQb2ludFRyZWVfLnNldChwYXRoLCBzeW5jUG9pbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZm91bmRBbmNlc3RvckRlZmF1bHRWaWV3ID1cclxuICAgICAgICAgICAgICAgIGZvdW5kQW5jZXN0b3JEZWZhdWx0VmlldyB8fCBzeW5jUG9pbnQuaGFzQ29tcGxldGVWaWV3KCk7XHJcbiAgICAgICAgICAgIHNlcnZlckNhY2hlID0gc2VydmVyQ2FjaGUgfHwgc3luY1BvaW50LmdldENvbXBsZXRlU2VydmVyQ2FjaGUoUGF0aC5FbXB0eSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBzZXJ2ZXJDYWNoZUNvbXBsZXRlO1xyXG4gICAgICAgIGlmIChzZXJ2ZXJDYWNoZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHNlcnZlckNhY2hlQ29tcGxldGUgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgc2VydmVyQ2FjaGVDb21wbGV0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBzZXJ2ZXJDYWNoZSA9IENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFO1xyXG4gICAgICAgICAgICB2YXIgc3VidHJlZSA9IHRoaXMuc3luY1BvaW50VHJlZV8uc3VidHJlZShwYXRoKTtcclxuICAgICAgICAgICAgc3VidHJlZS5mb3JlYWNoQ2hpbGQoZnVuY3Rpb24gKGNoaWxkTmFtZSwgY2hpbGRTeW5jUG9pbnQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjb21wbGV0ZUNhY2hlID0gY2hpbGRTeW5jUG9pbnQuZ2V0Q29tcGxldGVTZXJ2ZXJDYWNoZShQYXRoLkVtcHR5KTtcclxuICAgICAgICAgICAgICAgIGlmIChjb21wbGV0ZUNhY2hlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VydmVyQ2FjaGUgPSBzZXJ2ZXJDYWNoZS51cGRhdGVJbW1lZGlhdGVDaGlsZChjaGlsZE5hbWUsIGNvbXBsZXRlQ2FjaGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHZpZXdBbHJlYWR5RXhpc3RzID0gc3luY1BvaW50LnZpZXdFeGlzdHNGb3JRdWVyeShxdWVyeSk7XHJcbiAgICAgICAgaWYgKCF2aWV3QWxyZWFkeUV4aXN0cyAmJiAhcXVlcnkuZ2V0UXVlcnlQYXJhbXMoKS5sb2Fkc0FsbERhdGEoKSkge1xyXG4gICAgICAgICAgICAvLyBXZSBuZWVkIHRvIHRyYWNrIGEgdGFnIGZvciB0aGlzIHF1ZXJ5XHJcbiAgICAgICAgICAgIHZhciBxdWVyeUtleSA9IFN5bmNUcmVlLm1ha2VRdWVyeUtleV8ocXVlcnkpO1xyXG4gICAgICAgICAgICBhc3NlcnQoIXRoaXMucXVlcnlUb1RhZ01hcC5oYXMocXVlcnlLZXkpLCAnVmlldyBkb2VzIG5vdCBleGlzdCwgYnV0IHdlIGhhdmUgYSB0YWcnKTtcclxuICAgICAgICAgICAgdmFyIHRhZyA9IFN5bmNUcmVlLmdldE5leHRRdWVyeVRhZ18oKTtcclxuICAgICAgICAgICAgdGhpcy5xdWVyeVRvVGFnTWFwLnNldChxdWVyeUtleSwgdGFnKTtcclxuICAgICAgICAgICAgdGhpcy50YWdUb1F1ZXJ5TWFwLnNldCh0YWcsIHF1ZXJ5S2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHdyaXRlc0NhY2hlID0gdGhpcy5wZW5kaW5nV3JpdGVUcmVlXy5jaGlsZFdyaXRlcyhwYXRoKTtcclxuICAgICAgICB2YXIgZXZlbnRzID0gc3luY1BvaW50LmFkZEV2ZW50UmVnaXN0cmF0aW9uKHF1ZXJ5LCBldmVudFJlZ2lzdHJhdGlvbiwgd3JpdGVzQ2FjaGUsIHNlcnZlckNhY2hlLCBzZXJ2ZXJDYWNoZUNvbXBsZXRlKTtcclxuICAgICAgICBpZiAoIXZpZXdBbHJlYWR5RXhpc3RzICYmICFmb3VuZEFuY2VzdG9yRGVmYXVsdFZpZXcpIHtcclxuICAgICAgICAgICAgdmFyIHZpZXcgLyoqIEB0eXBlICFWaWV3ICovID0gc3luY1BvaW50LnZpZXdGb3JRdWVyeShxdWVyeSk7XHJcbiAgICAgICAgICAgIGV2ZW50cyA9IGV2ZW50cy5jb25jYXQodGhpcy5zZXR1cExpc3RlbmVyXyhxdWVyeSwgdmlldykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZXZlbnRzO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlIGV2ZW50IGNhbGxiYWNrKHMpLlxyXG4gICAgICpcclxuICAgICAqIElmIHF1ZXJ5IGlzIHRoZSBkZWZhdWx0IHF1ZXJ5LCB3ZSdsbCBjaGVjayBhbGwgcXVlcmllcyBmb3IgdGhlIHNwZWNpZmllZCBldmVudFJlZ2lzdHJhdGlvbi5cclxuICAgICAqIElmIGV2ZW50UmVnaXN0cmF0aW9uIGlzIG51bGwsIHdlJ2xsIHJlbW92ZSBhbGwgY2FsbGJhY2tzIGZvciB0aGUgc3BlY2lmaWVkIHF1ZXJ5L3F1ZXJpZXMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGV2ZW50UmVnaXN0cmF0aW9uIElmIG51bGwsIGFsbCBjYWxsYmFja3MgYXJlIHJlbW92ZWQuXHJcbiAgICAgKiBAcGFyYW0gY2FuY2VsRXJyb3IgSWYgYSBjYW5jZWxFcnJvciBpcyBwcm92aWRlZCwgYXBwcm9wcmlhdGUgY2FuY2VsIGV2ZW50cyB3aWxsIGJlIHJldHVybmVkLlxyXG4gICAgICogQHJldHVybiBDYW5jZWwgZXZlbnRzLCBpZiBjYW5jZWxFcnJvciB3YXMgcHJvdmlkZWQuXHJcbiAgICAgKi9cclxuICAgIFN5bmNUcmVlLnByb3RvdHlwZS5yZW1vdmVFdmVudFJlZ2lzdHJhdGlvbiA9IGZ1bmN0aW9uIChxdWVyeSwgZXZlbnRSZWdpc3RyYXRpb24sIGNhbmNlbEVycm9yKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAvLyBGaW5kIHRoZSBzeW5jUG9pbnQgZmlyc3QuIFRoZW4gZGVhbCB3aXRoIHdoZXRoZXIgb3Igbm90IGl0IGhhcyBtYXRjaGluZyBsaXN0ZW5lcnNcclxuICAgICAgICB2YXIgcGF0aCA9IHF1ZXJ5LnBhdGg7XHJcbiAgICAgICAgdmFyIG1heWJlU3luY1BvaW50ID0gdGhpcy5zeW5jUG9pbnRUcmVlXy5nZXQocGF0aCk7XHJcbiAgICAgICAgdmFyIGNhbmNlbEV2ZW50cyA9IFtdO1xyXG4gICAgICAgIC8vIEEgcmVtb3ZhbCBvbiBhIGRlZmF1bHQgcXVlcnkgYWZmZWN0cyBhbGwgcXVlcmllcyBhdCB0aGF0IGxvY2F0aW9uLiBBIHJlbW92YWwgb24gYW4gaW5kZXhlZCBxdWVyeSwgZXZlbiBvbmUgd2l0aG91dFxyXG4gICAgICAgIC8vIG90aGVyIHF1ZXJ5IGNvbnN0cmFpbnRzLCBkb2VzICpub3QqIGFmZmVjdCBhbGwgcXVlcmllcyBhdCB0aGF0IGxvY2F0aW9uLiBTbyB0aGlzIGNoZWNrIG11c3QgYmUgZm9yICdkZWZhdWx0JywgYW5kXHJcbiAgICAgICAgLy8gbm90IGxvYWRzQWxsRGF0YSgpLlxyXG4gICAgICAgIGlmIChtYXliZVN5bmNQb2ludCAmJlxyXG4gICAgICAgICAgICAocXVlcnkucXVlcnlJZGVudGlmaWVyKCkgPT09ICdkZWZhdWx0JyB8fFxyXG4gICAgICAgICAgICAgICAgbWF5YmVTeW5jUG9pbnQudmlld0V4aXN0c0ZvclF1ZXJ5KHF1ZXJ5KSkpIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEB0eXBlIHt7cmVtb3ZlZDogIUFycmF5LjwhUXVlcnk+LCBldmVudHM6ICFBcnJheS48IUV2ZW50Pn19XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICB2YXIgcmVtb3ZlZEFuZEV2ZW50cyA9IG1heWJlU3luY1BvaW50LnJlbW92ZUV2ZW50UmVnaXN0cmF0aW9uKHF1ZXJ5LCBldmVudFJlZ2lzdHJhdGlvbiwgY2FuY2VsRXJyb3IpO1xyXG4gICAgICAgICAgICBpZiAobWF5YmVTeW5jUG9pbnQuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN5bmNQb2ludFRyZWVfID0gdGhpcy5zeW5jUG9pbnRUcmVlXy5yZW1vdmUocGF0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHJlbW92ZWQgPSByZW1vdmVkQW5kRXZlbnRzLnJlbW92ZWQ7XHJcbiAgICAgICAgICAgIGNhbmNlbEV2ZW50cyA9IHJlbW92ZWRBbmRFdmVudHMuZXZlbnRzO1xyXG4gICAgICAgICAgICAvLyBXZSBtYXkgaGF2ZSBqdXN0IHJlbW92ZWQgb25lIG9mIG1hbnkgbGlzdGVuZXJzIGFuZCBjYW4gc2hvcnQtY2lyY3VpdCB0aGlzIHdob2xlIHByb2Nlc3NcclxuICAgICAgICAgICAgLy8gV2UgbWF5IGFsc28gbm90IGhhdmUgcmVtb3ZlZCBhIGRlZmF1bHQgbGlzdGVuZXIsIGluIHdoaWNoIGNhc2UgYWxsIG9mIHRoZSBkZXNjZW5kYW50IGxpc3RlbmVycyBzaG91bGQgYWxyZWFkeSBiZVxyXG4gICAgICAgICAgICAvLyBwcm9wZXJseSBzZXQgdXAuXHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIC8vIFNpbmNlIGluZGV4ZWQgcXVlcmllcyBjYW4gc2hhZG93IGlmIHRoZXkgZG9uJ3QgaGF2ZSBvdGhlciBxdWVyeSBjb25zdHJhaW50cywgY2hlY2sgZm9yIGxvYWRzQWxsRGF0YSgpLCBpbnN0ZWFkIG9mXHJcbiAgICAgICAgICAgIC8vIHF1ZXJ5SWQgPT09ICdkZWZhdWx0J1xyXG4gICAgICAgICAgICB2YXIgcmVtb3ZpbmdEZWZhdWx0ID0gLTEgIT09XHJcbiAgICAgICAgICAgICAgICByZW1vdmVkLmZpbmRJbmRleChmdW5jdGlvbiAocXVlcnkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcXVlcnkuZ2V0UXVlcnlQYXJhbXMoKS5sb2Fkc0FsbERhdGEoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB2YXIgY292ZXJlZCA9IHRoaXMuc3luY1BvaW50VHJlZV8uZmluZE9uUGF0aChwYXRoLCBmdW5jdGlvbiAocmVsYXRpdmVQYXRoLCBwYXJlbnRTeW5jUG9pbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJlbnRTeW5jUG9pbnQuaGFzQ29tcGxldGVWaWV3KCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAocmVtb3ZpbmdEZWZhdWx0ICYmICFjb3ZlcmVkKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3VidHJlZSA9IHRoaXMuc3luY1BvaW50VHJlZV8uc3VidHJlZShwYXRoKTtcclxuICAgICAgICAgICAgICAgIC8vIFRoZXJlIGFyZSBwb3RlbnRpYWxseSBjaGlsZCBsaXN0ZW5lcnMuIERldGVybWluZSB3aGF0IGlmIGFueSBsaXN0ZW5zIHdlIG5lZWQgdG8gc2VuZCBiZWZvcmUgZXhlY3V0aW5nIHRoZVxyXG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZhbFxyXG4gICAgICAgICAgICAgICAgaWYgKCFzdWJ0cmVlLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gZm9sZCBvdmVyIG91ciBzdWJ0cmVlIGFuZCBjb2xsZWN0IHRoZSBsaXN0ZW5lcnMgdG8gc2VuZFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdWaWV3cyA9IHRoaXMuY29sbGVjdERpc3RpbmN0Vmlld3NGb3JTdWJUcmVlXyhzdWJ0cmVlKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBPaywgd2UndmUgY29sbGVjdGVkIGFsbCB0aGUgbGlzdGVucyB3ZSBuZWVkLiBTZXQgdGhlbSB1cC5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5ld1ZpZXdzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2aWV3ID0gbmV3Vmlld3NbaV0sIG5ld1F1ZXJ5ID0gdmlldy5nZXRRdWVyeSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGlzdGVuZXIgPSB0aGlzLmNyZWF0ZUxpc3RlbmVyRm9yVmlld18odmlldyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuUHJvdmlkZXJfLnN0YXJ0TGlzdGVuaW5nKFN5bmNUcmVlLnF1ZXJ5Rm9yTGlzdGVuaW5nXyhuZXdRdWVyeSksIHRoaXMudGFnRm9yUXVlcnlfKG5ld1F1ZXJ5KSwgbGlzdGVuZXIuaGFzaEZuLCBsaXN0ZW5lci5vbkNvbXBsZXRlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gSWYgd2UgcmVtb3ZlZCBhbnl0aGluZyBhbmQgd2UncmUgbm90IGNvdmVyZWQgYnkgYSBoaWdoZXIgdXAgbGlzdGVuLCB3ZSBuZWVkIHRvIHN0b3AgbGlzdGVuaW5nIG9uIHRoaXMgcXVlcnlcclxuICAgICAgICAgICAgLy8gVGhlIGFib3ZlIGJsb2NrIGhhcyB1cyBjb3ZlcmVkIGluIHRlcm1zIG9mIG1ha2luZyBzdXJlIHdlJ3JlIHNldCB1cCBvbiBsaXN0ZW5zIGxvd2VyIGluIHRoZSB0cmVlLlxyXG4gICAgICAgICAgICAvLyBBbHNvLCBub3RlIHRoYXQgaWYgd2UgaGF2ZSBhIGNhbmNlbEVycm9yLCBpdCdzIGFscmVhZHkgYmVlbiByZW1vdmVkIGF0IHRoZSBwcm92aWRlciBsZXZlbC5cclxuICAgICAgICAgICAgaWYgKCFjb3ZlcmVkICYmIHJlbW92ZWQubGVuZ3RoID4gMCAmJiAhY2FuY2VsRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIC8vIElmIHdlIHJlbW92ZWQgYSBkZWZhdWx0LCB0aGVuIHdlIHdlcmVuJ3QgbGlzdGVuaW5nIG9uIGFueSBvZiB0aGUgb3RoZXIgcXVlcmllcyBoZXJlLiBKdXN0IGNhbmNlbCB0aGUgb25lXHJcbiAgICAgICAgICAgICAgICAvLyBkZWZhdWx0LiBPdGhlcndpc2UsIHdlIG5lZWQgdG8gaXRlcmF0ZSB0aHJvdWdoIGFuZCBjYW5jZWwgZWFjaCBpbmRpdmlkdWFsIHF1ZXJ5XHJcbiAgICAgICAgICAgICAgICBpZiAocmVtb3ZpbmdEZWZhdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgZG9uJ3QgdGFnIGRlZmF1bHQgbGlzdGVuZXJzXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlZmF1bHRUYWcgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuUHJvdmlkZXJfLnN0b3BMaXN0ZW5pbmcoU3luY1RyZWUucXVlcnlGb3JMaXN0ZW5pbmdfKHF1ZXJ5KSwgZGVmYXVsdFRhZyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZW1vdmVkLmZvckVhY2goZnVuY3Rpb24gKHF1ZXJ5VG9SZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhZ1RvUmVtb3ZlID0gX3RoaXMucXVlcnlUb1RhZ01hcC5nZXQoU3luY1RyZWUubWFrZVF1ZXJ5S2V5XyhxdWVyeVRvUmVtb3ZlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmxpc3RlblByb3ZpZGVyXy5zdG9wTGlzdGVuaW5nKFN5bmNUcmVlLnF1ZXJ5Rm9yTGlzdGVuaW5nXyhxdWVyeVRvUmVtb3ZlKSwgdGFnVG9SZW1vdmUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIE5vdywgY2xlYXIgYWxsIG9mIHRoZSB0YWdzIHdlJ3JlIHRyYWNraW5nIGZvciB0aGUgcmVtb3ZlZCBsaXN0ZW5zXHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlVGFnc18ocmVtb3ZlZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjYW5jZWxFdmVudHM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgY29tcGxldGUgY2FjaGUsIGlmIHdlIGhhdmUgb25lLCBvZiB0aGUgZGF0YSBhdCBhIHBhcnRpY3VsYXIgcGF0aC4gSWYgdGhlIGxvY2F0aW9uIGRvZXMgbm90IGhhdmUgYVxyXG4gICAgICogbGlzdGVuZXIgYWJvdmUgaXQsIHdlIHdpbGwgZ2V0IGEgZmFsc2UgXCJudWxsXCIuIFRoaXMgc2hvdWxkbid0IGJlIGEgcHJvYmxlbSBiZWNhdXNlIHRyYW5zYWN0aW9ucyB3aWxsIGFsd2F5c1xyXG4gICAgICogaGF2ZSBhIGxpc3RlbmVyIGFib3ZlLCBhbmQgYXRvbWljIG9wZXJhdGlvbnMgd291bGQgY29ycmVjdGx5IHNob3cgYSBqaXR0ZXIgb2YgPGluY3JlbWVudCB2YWx1ZT4gLT5cclxuICAgICAqICAgICA8aW5jcmVtZW50ZWQgdG90YWw+IGFzIHRoZSB3cml0ZSBpcyBhcHBsaWVkIGxvY2FsbHkgYW5kIHRoZW4gYWNrbm93bGVkZ2VkIGF0IHRoZSBzZXJ2ZXIuXHJcbiAgICAgKlxyXG4gICAgICogTm90ZTogdGhpcyBtZXRob2Qgd2lsbCAqaW5jbHVkZSogaGlkZGVuIHdyaXRlcyBmcm9tIHRyYW5zYWN0aW9uIHdpdGggYXBwbHlMb2NhbGx5IHNldCB0byBmYWxzZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gcGF0aCBUaGUgcGF0aCB0byB0aGUgZGF0YSB3ZSB3YW50XHJcbiAgICAgKiBAcGFyYW0gd3JpdGVJZHNUb0V4Y2x1ZGUgQSBzcGVjaWZpYyBzZXQgdG8gYmUgZXhjbHVkZWRcclxuICAgICAqL1xyXG4gICAgU3luY1RyZWUucHJvdG90eXBlLmNhbGNDb21wbGV0ZUV2ZW50Q2FjaGUgPSBmdW5jdGlvbiAocGF0aCwgd3JpdGVJZHNUb0V4Y2x1ZGUpIHtcclxuICAgICAgICB2YXIgaW5jbHVkZUhpZGRlblNldHMgPSB0cnVlO1xyXG4gICAgICAgIHZhciB3cml0ZVRyZWUgPSB0aGlzLnBlbmRpbmdXcml0ZVRyZWVfO1xyXG4gICAgICAgIHZhciBzZXJ2ZXJDYWNoZSA9IHRoaXMuc3luY1BvaW50VHJlZV8uZmluZE9uUGF0aChwYXRoLCBmdW5jdGlvbiAocGF0aFNvRmFyLCBzeW5jUG9pbnQpIHtcclxuICAgICAgICAgICAgdmFyIHJlbGF0aXZlUGF0aCA9IFBhdGgucmVsYXRpdmVQYXRoKHBhdGhTb0ZhciwgcGF0aCk7XHJcbiAgICAgICAgICAgIHZhciBzZXJ2ZXJDYWNoZSA9IHN5bmNQb2ludC5nZXRDb21wbGV0ZVNlcnZlckNhY2hlKHJlbGF0aXZlUGF0aCk7XHJcbiAgICAgICAgICAgIGlmIChzZXJ2ZXJDYWNoZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlcnZlckNhY2hlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHdyaXRlVHJlZS5jYWxjQ29tcGxldGVFdmVudENhY2hlKHBhdGgsIHNlcnZlckNhY2hlLCB3cml0ZUlkc1RvRXhjbHVkZSwgaW5jbHVkZUhpZGRlblNldHMpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBjb2xsYXBzZXMgbXVsdGlwbGUgdW5maWx0ZXJlZCB2aWV3cyBpbnRvIGEgc2luZ2xlIHZpZXcsIHNpbmNlIHdlIG9ubHkgbmVlZCBhIHNpbmdsZVxyXG4gICAgICogbGlzdGVuZXIgZm9yIHRoZW0uXHJcbiAgICAgKi9cclxuICAgIFN5bmNUcmVlLnByb3RvdHlwZS5jb2xsZWN0RGlzdGluY3RWaWV3c0ZvclN1YlRyZWVfID0gZnVuY3Rpb24gKHN1YnRyZWUpIHtcclxuICAgICAgICByZXR1cm4gc3VidHJlZS5mb2xkKGZ1bmN0aW9uIChyZWxhdGl2ZVBhdGgsIG1heWJlQ2hpbGRTeW5jUG9pbnQsIGNoaWxkTWFwKSB7XHJcbiAgICAgICAgICAgIGlmIChtYXliZUNoaWxkU3luY1BvaW50ICYmIG1heWJlQ2hpbGRTeW5jUG9pbnQuaGFzQ29tcGxldGVWaWV3KCkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjb21wbGV0ZVZpZXcgPSBtYXliZUNoaWxkU3luY1BvaW50LmdldENvbXBsZXRlVmlldygpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtjb21wbGV0ZVZpZXddO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gTm8gY29tcGxldGUgdmlldyBoZXJlLCBmbGF0dGVuIGFueSBkZWVwZXIgbGlzdGVucyBpbnRvIGFuIGFycmF5XHJcbiAgICAgICAgICAgICAgICB2YXIgdmlld3NfMSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgaWYgKG1heWJlQ2hpbGRTeW5jUG9pbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2aWV3c18xID0gbWF5YmVDaGlsZFN5bmNQb2ludC5nZXRRdWVyeVZpZXdzKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlYWNoKGNoaWxkTWFwLCBmdW5jdGlvbiAoX2tleSwgY2hpbGRWaWV3cykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZpZXdzXzEgPSB2aWV3c18xLmNvbmNhdChjaGlsZFZpZXdzKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpZXdzXzE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBTeW5jVHJlZS5wcm90b3R5cGUucmVtb3ZlVGFnc18gPSBmdW5jdGlvbiAocXVlcmllcykge1xyXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgcXVlcmllcy5sZW5ndGg7ICsraikge1xyXG4gICAgICAgICAgICB2YXIgcmVtb3ZlZFF1ZXJ5ID0gcXVlcmllc1tqXTtcclxuICAgICAgICAgICAgaWYgKCFyZW1vdmVkUXVlcnkuZ2V0UXVlcnlQYXJhbXMoKS5sb2Fkc0FsbERhdGEoKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gV2Ugc2hvdWxkIGhhdmUgYSB0YWcgZm9yIHRoaXNcclxuICAgICAgICAgICAgICAgIHZhciByZW1vdmVkUXVlcnlLZXkgPSBTeW5jVHJlZS5tYWtlUXVlcnlLZXlfKHJlbW92ZWRRdWVyeSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVtb3ZlZFF1ZXJ5VGFnID0gdGhpcy5xdWVyeVRvVGFnTWFwLmdldChyZW1vdmVkUXVlcnlLZXkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5xdWVyeVRvVGFnTWFwLmRlbGV0ZShyZW1vdmVkUXVlcnlLZXkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50YWdUb1F1ZXJ5TWFwLmRlbGV0ZShyZW1vdmVkUXVlcnlUYWcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogTm9ybWFsaXplcyBhIHF1ZXJ5IHRvIGEgcXVlcnkgd2Ugc2VuZCB0aGUgc2VydmVyIGZvciBsaXN0ZW5pbmdcclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIFRoZSBub3JtYWxpemVkIHF1ZXJ5XHJcbiAgICAgKi9cclxuICAgIFN5bmNUcmVlLnF1ZXJ5Rm9yTGlzdGVuaW5nXyA9IGZ1bmN0aW9uIChxdWVyeSkge1xyXG4gICAgICAgIGlmIChxdWVyeS5nZXRRdWVyeVBhcmFtcygpLmxvYWRzQWxsRGF0YSgpICYmXHJcbiAgICAgICAgICAgICFxdWVyeS5nZXRRdWVyeVBhcmFtcygpLmlzRGVmYXVsdCgpKSB7XHJcbiAgICAgICAgICAgIC8vIFdlIHRyZWF0IHF1ZXJpZXMgdGhhdCBsb2FkIGFsbCBkYXRhIGFzIGRlZmF1bHQgcXVlcmllc1xyXG4gICAgICAgICAgICAvLyBDYXN0IGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHJlZigpIHRlY2huaWNhbGx5IHJldHVybnMgRmlyZWJhc2Ugd2hpY2ggaXMgYWN0dWFsbHkgZmIuYXBpLkZpcmViYXNlIHdoaWNoIGluaGVyaXRzXHJcbiAgICAgICAgICAgIC8vIGZyb20gUXVlcnlcclxuICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5LmdldFJlZigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEZvciBhIGdpdmVuIG5ldyBsaXN0ZW4sIG1hbmFnZSB0aGUgZGUtZHVwbGljYXRpb24gb2Ygb3V0c3RhbmRpbmcgc3Vic2NyaXB0aW9ucy5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIFRoaXMgbWV0aG9kIGNhbiByZXR1cm4gZXZlbnRzIHRvIHN1cHBvcnQgc3luY2hyb25vdXMgZGF0YSBzb3VyY2VzXHJcbiAgICAgKi9cclxuICAgIFN5bmNUcmVlLnByb3RvdHlwZS5zZXR1cExpc3RlbmVyXyA9IGZ1bmN0aW9uIChxdWVyeSwgdmlldykge1xyXG4gICAgICAgIHZhciBwYXRoID0gcXVlcnkucGF0aDtcclxuICAgICAgICB2YXIgdGFnID0gdGhpcy50YWdGb3JRdWVyeV8ocXVlcnkpO1xyXG4gICAgICAgIHZhciBsaXN0ZW5lciA9IHRoaXMuY3JlYXRlTGlzdGVuZXJGb3JWaWV3Xyh2aWV3KTtcclxuICAgICAgICB2YXIgZXZlbnRzID0gdGhpcy5saXN0ZW5Qcm92aWRlcl8uc3RhcnRMaXN0ZW5pbmcoU3luY1RyZWUucXVlcnlGb3JMaXN0ZW5pbmdfKHF1ZXJ5KSwgdGFnLCBsaXN0ZW5lci5oYXNoRm4sIGxpc3RlbmVyLm9uQ29tcGxldGUpO1xyXG4gICAgICAgIHZhciBzdWJ0cmVlID0gdGhpcy5zeW5jUG9pbnRUcmVlXy5zdWJ0cmVlKHBhdGgpO1xyXG4gICAgICAgIC8vIFRoZSByb290IG9mIHRoaXMgc3VidHJlZSBoYXMgb3VyIHF1ZXJ5LiBXZSdyZSBoZXJlIGJlY2F1c2Ugd2UgZGVmaW5pdGVseSBuZWVkIHRvIHNlbmQgYSBsaXN0ZW4gZm9yIHRoYXQsIGJ1dCB3ZVxyXG4gICAgICAgIC8vIG1heSBuZWVkIHRvIHNoYWRvdyBvdGhlciBsaXN0ZW5zIGFzIHdlbGwuXHJcbiAgICAgICAgaWYgKHRhZykge1xyXG4gICAgICAgICAgICBhc3NlcnQoIXN1YnRyZWUudmFsdWUuaGFzQ29tcGxldGVWaWV3KCksIFwiSWYgd2UncmUgYWRkaW5nIGEgcXVlcnksIGl0IHNob3VsZG4ndCBiZSBzaGFkb3dlZFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIFNoYWRvdyBldmVyeXRoaW5nIGF0IG9yIGJlbG93IHRoaXMgbG9jYXRpb24sIHRoaXMgaXMgYSBkZWZhdWx0IGxpc3RlbmVyLlxyXG4gICAgICAgICAgICB2YXIgcXVlcmllc1RvU3RvcCA9IHN1YnRyZWUuZm9sZChmdW5jdGlvbiAocmVsYXRpdmVQYXRoLCBtYXliZUNoaWxkU3luY1BvaW50LCBjaGlsZE1hcCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFyZWxhdGl2ZVBhdGguaXNFbXB0eSgpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgbWF5YmVDaGlsZFN5bmNQb2ludCAmJlxyXG4gICAgICAgICAgICAgICAgICAgIG1heWJlQ2hpbGRTeW5jUG9pbnQuaGFzQ29tcGxldGVWaWV3KCkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW21heWJlQ2hpbGRTeW5jUG9pbnQuZ2V0Q29tcGxldGVWaWV3KCkuZ2V0UXVlcnkoKV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBObyBkZWZhdWx0IGxpc3RlbmVyIGhlcmUsIGZsYXR0ZW4gYW55IGRlZXBlciBxdWVyaWVzIGludG8gYW4gYXJyYXlcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcXVlcmllc18xID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1heWJlQ2hpbGRTeW5jUG9pbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcmllc18xID0gcXVlcmllc18xLmNvbmNhdChtYXliZUNoaWxkU3luY1BvaW50LmdldFF1ZXJ5Vmlld3MoKS5tYXAoZnVuY3Rpb24gKHZpZXcpIHsgcmV0dXJuIHZpZXcuZ2V0UXVlcnkoKTsgfSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlYWNoKGNoaWxkTWFwLCBmdW5jdGlvbiAoX2tleSwgY2hpbGRRdWVyaWVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJpZXNfMSA9IHF1ZXJpZXNfMS5jb25jYXQoY2hpbGRRdWVyaWVzKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcXVlcmllc18xO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWVyaWVzVG9TdG9wLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcXVlcnlUb1N0b3AgPSBxdWVyaWVzVG9TdG9wW2ldO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5Qcm92aWRlcl8uc3RvcExpc3RlbmluZyhTeW5jVHJlZS5xdWVyeUZvckxpc3RlbmluZ18ocXVlcnlUb1N0b3ApLCB0aGlzLnRhZ0ZvclF1ZXJ5XyhxdWVyeVRvU3RvcCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBldmVudHM7XHJcbiAgICB9O1xyXG4gICAgU3luY1RyZWUucHJvdG90eXBlLmNyZWF0ZUxpc3RlbmVyRm9yVmlld18gPSBmdW5jdGlvbiAodmlldykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHF1ZXJ5ID0gdmlldy5nZXRRdWVyeSgpO1xyXG4gICAgICAgIHZhciB0YWcgPSB0aGlzLnRhZ0ZvclF1ZXJ5XyhxdWVyeSk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaGFzaEZuOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2FjaGUgPSB2aWV3LmdldFNlcnZlckNhY2hlKCkgfHwgQ2hpbGRyZW5Ob2RlLkVNUFRZX05PREU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FjaGUuaGFzaCgpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvbkNvbXBsZXRlOiBmdW5jdGlvbiAoc3RhdHVzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09PSAnb2snKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuYXBwbHlUYWdnZWRMaXN0ZW5Db21wbGV0ZShxdWVyeS5wYXRoLCB0YWcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmFwcGx5TGlzdGVuQ29tcGxldGUocXVlcnkucGF0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgYSBsaXN0ZW4gZmFpbGVkLCBraWxsIGFsbCBvZiB0aGUgbGlzdGVuZXJzIGhlcmUsIG5vdCBqdXN0IHRoZSBvbmUgdGhhdCB0cmlnZ2VyZWQgdGhlIGVycm9yLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIE5vdGUgdGhhdCB0aGlzIG1heSBuZWVkIHRvIGJlIHNjb3BlZCB0byBqdXN0IHRoaXMgbGlzdGVuZXIgaWYgd2UgY2hhbmdlIHBlcm1pc3Npb25zIG9uIGZpbHRlcmVkIGNoaWxkcmVuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yID0gZXJyb3JGb3JTZXJ2ZXJDb2RlKHN0YXR1cywgcXVlcnkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5yZW1vdmVFdmVudFJlZ2lzdHJhdGlvbihxdWVyeSwgXHJcbiAgICAgICAgICAgICAgICAgICAgLypldmVudFJlZ2lzdHJhdGlvbiovIG51bGwsIGVycm9yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBHaXZlbiBhIHF1ZXJ5LCBjb21wdXRlcyBhIFwicXVlcnlLZXlcIiBzdWl0YWJsZSBmb3IgdXNlIGluIG91ciBxdWVyeVRvVGFnTWFwXy5cclxuICAgICAqL1xyXG4gICAgU3luY1RyZWUubWFrZVF1ZXJ5S2V5XyA9IGZ1bmN0aW9uIChxdWVyeSkge1xyXG4gICAgICAgIHJldHVybiBxdWVyeS5wYXRoLnRvU3RyaW5nKCkgKyAnJCcgKyBxdWVyeS5xdWVyeUlkZW50aWZpZXIoKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEdpdmVuIGEgcXVlcnlLZXkgKGNyZWF0ZWQgYnkgbWFrZVF1ZXJ5S2V5KSwgcGFyc2UgaXQgYmFjayBpbnRvIGEgcGF0aCBhbmQgcXVlcnlJZC5cclxuICAgICAqL1xyXG4gICAgU3luY1RyZWUucGFyc2VRdWVyeUtleV8gPSBmdW5jdGlvbiAocXVlcnlLZXkpIHtcclxuICAgICAgICB2YXIgc3BsaXRJbmRleCA9IHF1ZXJ5S2V5LmluZGV4T2YoJyQnKTtcclxuICAgICAgICBhc3NlcnQoc3BsaXRJbmRleCAhPT0gLTEgJiYgc3BsaXRJbmRleCA8IHF1ZXJ5S2V5Lmxlbmd0aCAtIDEsICdCYWQgcXVlcnlLZXkuJyk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcXVlcnlJZDogcXVlcnlLZXkuc3Vic3RyKHNwbGl0SW5kZXggKyAxKSxcclxuICAgICAgICAgICAgcGF0aDogbmV3IFBhdGgocXVlcnlLZXkuc3Vic3RyKDAsIHNwbGl0SW5kZXgpKVxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm4gdGhlIHF1ZXJ5IGFzc29jaWF0ZWQgd2l0aCB0aGUgZ2l2ZW4gdGFnLCBpZiB3ZSBoYXZlIG9uZVxyXG4gICAgICovXHJcbiAgICBTeW5jVHJlZS5wcm90b3R5cGUucXVlcnlLZXlGb3JUYWdfID0gZnVuY3Rpb24gKHRhZykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRhZ1RvUXVlcnlNYXAuZ2V0KHRhZyk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm4gdGhlIHRhZyBhc3NvY2lhdGVkIHdpdGggdGhlIGdpdmVuIHF1ZXJ5LlxyXG4gICAgICovXHJcbiAgICBTeW5jVHJlZS5wcm90b3R5cGUudGFnRm9yUXVlcnlfID0gZnVuY3Rpb24gKHF1ZXJ5KSB7XHJcbiAgICAgICAgdmFyIHF1ZXJ5S2V5ID0gU3luY1RyZWUubWFrZVF1ZXJ5S2V5XyhxdWVyeSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucXVlcnlUb1RhZ01hcC5nZXQocXVlcnlLZXkpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogU3RhdGljIGFjY2Vzc29yIGZvciBxdWVyeSB0YWdzLlxyXG4gICAgICovXHJcbiAgICBTeW5jVHJlZS5nZXROZXh0UXVlcnlUYWdfID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBTeW5jVHJlZS5uZXh0UXVlcnlUYWdfKys7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBIGhlbHBlciBtZXRob2QgdG8gYXBwbHkgdGFnZ2VkIG9wZXJhdGlvbnNcclxuICAgICAqL1xyXG4gICAgU3luY1RyZWUucHJvdG90eXBlLmFwcGx5VGFnZ2VkT3BlcmF0aW9uXyA9IGZ1bmN0aW9uIChxdWVyeVBhdGgsIG9wZXJhdGlvbikge1xyXG4gICAgICAgIHZhciBzeW5jUG9pbnQgPSB0aGlzLnN5bmNQb2ludFRyZWVfLmdldChxdWVyeVBhdGgpO1xyXG4gICAgICAgIGFzc2VydChzeW5jUG9pbnQsIFwiTWlzc2luZyBzeW5jIHBvaW50IGZvciBxdWVyeSB0YWcgdGhhdCB3ZSdyZSB0cmFja2luZ1wiKTtcclxuICAgICAgICB2YXIgd3JpdGVzQ2FjaGUgPSB0aGlzLnBlbmRpbmdXcml0ZVRyZWVfLmNoaWxkV3JpdGVzKHF1ZXJ5UGF0aCk7XHJcbiAgICAgICAgcmV0dXJuIHN5bmNQb2ludC5hcHBseU9wZXJhdGlvbihvcGVyYXRpb24sIHdyaXRlc0NhY2hlLCBcclxuICAgICAgICAvKnNlcnZlckNhY2hlPSovIG51bGwpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQSBoZWxwZXIgbWV0aG9kIHRoYXQgdmlzaXRzIGFsbCBkZXNjZW5kYW50IGFuZCBhbmNlc3RvciBTeW5jUG9pbnRzLCBhcHBseWluZyB0aGUgb3BlcmF0aW9uLlxyXG4gICAgICpcclxuICAgICAqIE5PVEVTOlxyXG4gICAgICogLSBEZXNjZW5kYW50IFN5bmNQb2ludHMgd2lsbCBiZSB2aXNpdGVkIGZpcnN0IChzaW5jZSB3ZSByYWlzZSBldmVudHMgZGVwdGgtZmlyc3QpLlxyXG4gICAgICpcclxuICAgICAqIC0gV2UgY2FsbCBhcHBseU9wZXJhdGlvbigpIG9uIGVhY2ggU3luY1BvaW50IHBhc3NpbmcgdGhyZWUgdGhpbmdzOlxyXG4gICAgICogICAxLiBBIHZlcnNpb24gb2YgdGhlIE9wZXJhdGlvbiB0aGF0IGhhcyBiZWVuIG1hZGUgcmVsYXRpdmUgdG8gdGhlIFN5bmNQb2ludCBsb2NhdGlvbi5cclxuICAgICAqICAgMi4gQSBXcml0ZVRyZWVSZWYgb2YgYW55IHdyaXRlcyB3ZSBoYXZlIGNhY2hlZCBhdCB0aGUgU3luY1BvaW50IGxvY2F0aW9uLlxyXG4gICAgICogICAzLiBBIHNuYXBzaG90IE5vZGUgd2l0aCBjYWNoZWQgc2VydmVyIGRhdGEsIGlmIHdlIGhhdmUgaXQuXHJcbiAgICAgKlxyXG4gICAgICogLSBXZSBjb25jYXRlbmF0ZSBhbGwgb2YgdGhlIGV2ZW50cyByZXR1cm5lZCBieSBlYWNoIFN5bmNQb2ludCBhbmQgcmV0dXJuIHRoZSByZXN1bHQuXHJcbiAgICAgKi9cclxuICAgIFN5bmNUcmVlLnByb3RvdHlwZS5hcHBseU9wZXJhdGlvblRvU3luY1BvaW50c18gPSBmdW5jdGlvbiAob3BlcmF0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlPcGVyYXRpb25IZWxwZXJfKG9wZXJhdGlvbiwgdGhpcy5zeW5jUG9pbnRUcmVlXywgXHJcbiAgICAgICAgLypzZXJ2ZXJDYWNoZT0qLyBudWxsLCB0aGlzLnBlbmRpbmdXcml0ZVRyZWVfLmNoaWxkV3JpdGVzKFBhdGguRW1wdHkpKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJlY3Vyc2l2ZSBoZWxwZXIgZm9yIGFwcGx5T3BlcmF0aW9uVG9TeW5jUG9pbnRzX1xyXG4gICAgICovXHJcbiAgICBTeW5jVHJlZS5wcm90b3R5cGUuYXBwbHlPcGVyYXRpb25IZWxwZXJfID0gZnVuY3Rpb24gKG9wZXJhdGlvbiwgc3luY1BvaW50VHJlZSwgc2VydmVyQ2FjaGUsIHdyaXRlc0NhY2hlKSB7XHJcbiAgICAgICAgaWYgKG9wZXJhdGlvbi5wYXRoLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hcHBseU9wZXJhdGlvbkRlc2NlbmRhbnRzSGVscGVyXyhvcGVyYXRpb24sIHN5bmNQb2ludFRyZWUsIHNlcnZlckNhY2hlLCB3cml0ZXNDYWNoZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgc3luY1BvaW50ID0gc3luY1BvaW50VHJlZS5nZXQoUGF0aC5FbXB0eSk7XHJcbiAgICAgICAgICAgIC8vIElmIHdlIGRvbid0IGhhdmUgY2FjaGVkIHNlcnZlciBkYXRhLCBzZWUgaWYgd2UgY2FuIGdldCBpdCBmcm9tIHRoaXMgU3luY1BvaW50LlxyXG4gICAgICAgICAgICBpZiAoc2VydmVyQ2FjaGUgPT0gbnVsbCAmJiBzeW5jUG9pbnQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgc2VydmVyQ2FjaGUgPSBzeW5jUG9pbnQuZ2V0Q29tcGxldGVTZXJ2ZXJDYWNoZShQYXRoLkVtcHR5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgZXZlbnRzID0gW107XHJcbiAgICAgICAgICAgIHZhciBjaGlsZE5hbWUgPSBvcGVyYXRpb24ucGF0aC5nZXRGcm9udCgpO1xyXG4gICAgICAgICAgICB2YXIgY2hpbGRPcGVyYXRpb24gPSBvcGVyYXRpb24ub3BlcmF0aW9uRm9yQ2hpbGQoY2hpbGROYW1lKTtcclxuICAgICAgICAgICAgdmFyIGNoaWxkVHJlZSA9IHN5bmNQb2ludFRyZWUuY2hpbGRyZW4uZ2V0KGNoaWxkTmFtZSk7XHJcbiAgICAgICAgICAgIGlmIChjaGlsZFRyZWUgJiYgY2hpbGRPcGVyYXRpb24pIHtcclxuICAgICAgICAgICAgICAgIHZhciBjaGlsZFNlcnZlckNhY2hlID0gc2VydmVyQ2FjaGVcclxuICAgICAgICAgICAgICAgICAgICA/IHNlcnZlckNhY2hlLmdldEltbWVkaWF0ZUNoaWxkKGNoaWxkTmFtZSlcclxuICAgICAgICAgICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2hpbGRXcml0ZXNDYWNoZSA9IHdyaXRlc0NhY2hlLmNoaWxkKGNoaWxkTmFtZSk7XHJcbiAgICAgICAgICAgICAgICBldmVudHMgPSBldmVudHMuY29uY2F0KHRoaXMuYXBwbHlPcGVyYXRpb25IZWxwZXJfKGNoaWxkT3BlcmF0aW9uLCBjaGlsZFRyZWUsIGNoaWxkU2VydmVyQ2FjaGUsIGNoaWxkV3JpdGVzQ2FjaGUpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoc3luY1BvaW50KSB7XHJcbiAgICAgICAgICAgICAgICBldmVudHMgPSBldmVudHMuY29uY2F0KHN5bmNQb2ludC5hcHBseU9wZXJhdGlvbihvcGVyYXRpb24sIHdyaXRlc0NhY2hlLCBzZXJ2ZXJDYWNoZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBldmVudHM7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmVjdXJzaXZlIGhlbHBlciBmb3IgYXBwbHlPcGVyYXRpb25Ub1N5bmNQb2ludHNfXHJcbiAgICAgKi9cclxuICAgIFN5bmNUcmVlLnByb3RvdHlwZS5hcHBseU9wZXJhdGlvbkRlc2NlbmRhbnRzSGVscGVyXyA9IGZ1bmN0aW9uIChvcGVyYXRpb24sIHN5bmNQb2ludFRyZWUsIHNlcnZlckNhY2hlLCB3cml0ZXNDYWNoZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHN5bmNQb2ludCA9IHN5bmNQb2ludFRyZWUuZ2V0KFBhdGguRW1wdHkpO1xyXG4gICAgICAgIC8vIElmIHdlIGRvbid0IGhhdmUgY2FjaGVkIHNlcnZlciBkYXRhLCBzZWUgaWYgd2UgY2FuIGdldCBpdCBmcm9tIHRoaXMgU3luY1BvaW50LlxyXG4gICAgICAgIGlmIChzZXJ2ZXJDYWNoZSA9PSBudWxsICYmIHN5bmNQb2ludCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHNlcnZlckNhY2hlID0gc3luY1BvaW50LmdldENvbXBsZXRlU2VydmVyQ2FjaGUoUGF0aC5FbXB0eSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBldmVudHMgPSBbXTtcclxuICAgICAgICBzeW5jUG9pbnRUcmVlLmNoaWxkcmVuLmlub3JkZXJUcmF2ZXJzYWwoZnVuY3Rpb24gKGNoaWxkTmFtZSwgY2hpbGRUcmVlKSB7XHJcbiAgICAgICAgICAgIHZhciBjaGlsZFNlcnZlckNhY2hlID0gc2VydmVyQ2FjaGVcclxuICAgICAgICAgICAgICAgID8gc2VydmVyQ2FjaGUuZ2V0SW1tZWRpYXRlQ2hpbGQoY2hpbGROYW1lKVxyXG4gICAgICAgICAgICAgICAgOiBudWxsO1xyXG4gICAgICAgICAgICB2YXIgY2hpbGRXcml0ZXNDYWNoZSA9IHdyaXRlc0NhY2hlLmNoaWxkKGNoaWxkTmFtZSk7XHJcbiAgICAgICAgICAgIHZhciBjaGlsZE9wZXJhdGlvbiA9IG9wZXJhdGlvbi5vcGVyYXRpb25Gb3JDaGlsZChjaGlsZE5hbWUpO1xyXG4gICAgICAgICAgICBpZiAoY2hpbGRPcGVyYXRpb24pIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50cyA9IGV2ZW50cy5jb25jYXQoX3RoaXMuYXBwbHlPcGVyYXRpb25EZXNjZW5kYW50c0hlbHBlcl8oY2hpbGRPcGVyYXRpb24sIGNoaWxkVHJlZSwgY2hpbGRTZXJ2ZXJDYWNoZSwgY2hpbGRXcml0ZXNDYWNoZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKHN5bmNQb2ludCkge1xyXG4gICAgICAgICAgICBldmVudHMgPSBldmVudHMuY29uY2F0KHN5bmNQb2ludC5hcHBseU9wZXJhdGlvbihvcGVyYXRpb24sIHdyaXRlc0NhY2hlLCBzZXJ2ZXJDYWNoZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZXZlbnRzO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogU3RhdGljIHRyYWNrZXIgZm9yIG5leHQgcXVlcnkgdGFnLlxyXG4gICAgICovXHJcbiAgICBTeW5jVHJlZS5uZXh0UXVlcnlUYWdfID0gMTtcclxuICAgIHJldHVybiBTeW5jVHJlZTtcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIE11dGFibGUgb2JqZWN0IHdoaWNoIGJhc2ljYWxseSBqdXN0IHN0b3JlcyBhIHJlZmVyZW5jZSB0byB0aGUgXCJsYXRlc3RcIiBpbW11dGFibGUgc25hcHNob3QuXHJcbiAqXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxudmFyIFNuYXBzaG90SG9sZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gU25hcHNob3RIb2xkZXIoKSB7XHJcbiAgICAgICAgdGhpcy5yb290Tm9kZV8gPSBDaGlsZHJlbk5vZGUuRU1QVFlfTk9ERTtcclxuICAgIH1cclxuICAgIFNuYXBzaG90SG9sZGVyLnByb3RvdHlwZS5nZXROb2RlID0gZnVuY3Rpb24gKHBhdGgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yb290Tm9kZV8uZ2V0Q2hpbGQocGF0aCk7XHJcbiAgICB9O1xyXG4gICAgU25hcHNob3RIb2xkZXIucHJvdG90eXBlLnVwZGF0ZVNuYXBzaG90ID0gZnVuY3Rpb24gKHBhdGgsIG5ld1NuYXBzaG90Tm9kZSkge1xyXG4gICAgICAgIHRoaXMucm9vdE5vZGVfID0gdGhpcy5yb290Tm9kZV8udXBkYXRlQ2hpbGQocGF0aCwgbmV3U25hcHNob3ROb2RlKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gU25hcHNob3RIb2xkZXI7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBUcmFja3MgYSBjb2xsZWN0aW9uIG9mIHN0YXRzLlxyXG4gKlxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbnZhciBTdGF0c0NvbGxlY3Rpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBTdGF0c0NvbGxlY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5jb3VudGVyc18gPSB7fTtcclxuICAgIH1cclxuICAgIFN0YXRzQ29sbGVjdGlvbi5wcm90b3R5cGUuaW5jcmVtZW50Q291bnRlciA9IGZ1bmN0aW9uIChuYW1lLCBhbW91bnQpIHtcclxuICAgICAgICBpZiAoYW1vdW50ID09PSB2b2lkIDApIHsgYW1vdW50ID0gMTsgfVxyXG4gICAgICAgIGlmICghY29udGFpbnModGhpcy5jb3VudGVyc18sIG5hbWUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY291bnRlcnNfW25hbWVdID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb3VudGVyc19bbmFtZV0gKz0gYW1vdW50O1xyXG4gICAgfTtcclxuICAgIFN0YXRzQ29sbGVjdGlvbi5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBkZWVwQ29weSh0aGlzLmNvdW50ZXJzXyk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFN0YXRzQ29sbGVjdGlvbjtcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIFN0YXRzTWFuYWdlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFN0YXRzTWFuYWdlcigpIHtcclxuICAgIH1cclxuICAgIFN0YXRzTWFuYWdlci5nZXRDb2xsZWN0aW9uID0gZnVuY3Rpb24gKHJlcG9JbmZvKSB7XHJcbiAgICAgICAgdmFyIGhhc2hTdHJpbmcgPSByZXBvSW5mby50b1N0cmluZygpO1xyXG4gICAgICAgIGlmICghdGhpcy5jb2xsZWN0aW9uc19baGFzaFN0cmluZ10pIHtcclxuICAgICAgICAgICAgdGhpcy5jb2xsZWN0aW9uc19baGFzaFN0cmluZ10gPSBuZXcgU3RhdHNDb2xsZWN0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbGxlY3Rpb25zX1toYXNoU3RyaW5nXTtcclxuICAgIH07XHJcbiAgICBTdGF0c01hbmFnZXIuZ2V0T3JDcmVhdGVSZXBvcnRlciA9IGZ1bmN0aW9uIChyZXBvSW5mbywgY3JlYXRvckZ1bmN0aW9uKSB7XHJcbiAgICAgICAgdmFyIGhhc2hTdHJpbmcgPSByZXBvSW5mby50b1N0cmluZygpO1xyXG4gICAgICAgIGlmICghdGhpcy5yZXBvcnRlcnNfW2hhc2hTdHJpbmddKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVwb3J0ZXJzX1toYXNoU3RyaW5nXSA9IGNyZWF0b3JGdW5jdGlvbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5yZXBvcnRlcnNfW2hhc2hTdHJpbmddO1xyXG4gICAgfTtcclxuICAgIFN0YXRzTWFuYWdlci5jb2xsZWN0aW9uc18gPSB7fTtcclxuICAgIFN0YXRzTWFuYWdlci5yZXBvcnRlcnNfID0ge307XHJcbiAgICByZXR1cm4gU3RhdHNNYW5hZ2VyO1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogUmV0dXJucyB0aGUgZGVsdGEgZnJvbSB0aGUgcHJldmlvdXMgY2FsbCB0byBnZXQgc3RhdHMuXHJcbiAqXHJcbiAqIEBwYXJhbSBjb2xsZWN0aW9uXyBUaGUgY29sbGVjdGlvbiB0byBcImxpc3RlblwiIHRvLlxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbnZhciBTdGF0c0xpc3RlbmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gU3RhdHNMaXN0ZW5lcihjb2xsZWN0aW9uXykge1xyXG4gICAgICAgIHRoaXMuY29sbGVjdGlvbl8gPSBjb2xsZWN0aW9uXztcclxuICAgICAgICB0aGlzLmxhc3RfID0gbnVsbDtcclxuICAgIH1cclxuICAgIFN0YXRzTGlzdGVuZXIucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgbmV3U3RhdHMgPSB0aGlzLmNvbGxlY3Rpb25fLmdldCgpO1xyXG4gICAgICAgIHZhciBkZWx0YSA9IF9fYXNzaWduKHt9LCBuZXdTdGF0cyk7XHJcbiAgICAgICAgaWYgKHRoaXMubGFzdF8pIHtcclxuICAgICAgICAgICAgZWFjaCh0aGlzLmxhc3RfLCBmdW5jdGlvbiAoc3RhdCwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGRlbHRhW3N0YXRdID0gZGVsdGFbc3RhdF0gLSB2YWx1ZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubGFzdF8gPSBuZXdTdGF0cztcclxuICAgICAgICByZXR1cm4gZGVsdGE7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFN0YXRzTGlzdGVuZXI7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8vIEFzc3VtaW5nIHNvbWUgYXBwcyBtYXkgaGF2ZSBhIHNob3J0IGFtb3VudCBvZiB0aW1lIG9uIHBhZ2UsIGFuZCBhIGJ1bGsgb2YgZmlyZWJhc2Ugb3BlcmF0aW9ucyBwcm9iYWJseVxyXG4vLyBoYXBwZW4gb24gcGFnZSBsb2FkLCB3ZSB0cnkgdG8gcmVwb3J0IG91ciBmaXJzdCBzZXQgb2Ygc3RhdHMgcHJldHR5IHF1aWNrbHksIGJ1dCB3ZSB3YWl0IGF0IGxlYXN0IDEwXHJcbi8vIHNlY29uZHMgdG8gdHJ5IHRvIGVuc3VyZSB0aGUgRmlyZWJhc2UgY29ubmVjdGlvbiBpcyBlc3RhYmxpc2hlZCAvIHNldHRsZWQuXHJcbnZhciBGSVJTVF9TVEFUU19NSU5fVElNRSA9IDEwICogMTAwMDtcclxudmFyIEZJUlNUX1NUQVRTX01BWF9USU1FID0gMzAgKiAxMDAwO1xyXG4vLyBXZSdsbCBjb250aW51ZSB0byByZXBvcnQgc3RhdHMgb24gYXZlcmFnZSBldmVyeSA1IG1pbnV0ZXMuXHJcbnZhciBSRVBPUlRfU1RBVFNfSU5URVJWQUwgPSA1ICogNjAgKiAxMDAwO1xyXG4vKipcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG52YXIgU3RhdHNSZXBvcnRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIGNvbGxlY3Rpb25cclxuICAgICAqIEBwYXJhbSBzZXJ2ZXJfXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIFN0YXRzUmVwb3J0ZXIoY29sbGVjdGlvbiwgc2VydmVyXykge1xyXG4gICAgICAgIHRoaXMuc2VydmVyXyA9IHNlcnZlcl87XHJcbiAgICAgICAgdGhpcy5zdGF0c1RvUmVwb3J0XyA9IHt9O1xyXG4gICAgICAgIHRoaXMuc3RhdHNMaXN0ZW5lcl8gPSBuZXcgU3RhdHNMaXN0ZW5lcihjb2xsZWN0aW9uKTtcclxuICAgICAgICB2YXIgdGltZW91dCA9IEZJUlNUX1NUQVRTX01JTl9USU1FICtcclxuICAgICAgICAgICAgKEZJUlNUX1NUQVRTX01BWF9USU1FIC0gRklSU1RfU1RBVFNfTUlOX1RJTUUpICogTWF0aC5yYW5kb20oKTtcclxuICAgICAgICBzZXRUaW1lb3V0Tm9uQmxvY2tpbmcodGhpcy5yZXBvcnRTdGF0c18uYmluZCh0aGlzKSwgTWF0aC5mbG9vcih0aW1lb3V0KSk7XHJcbiAgICB9XHJcbiAgICBTdGF0c1JlcG9ydGVyLnByb3RvdHlwZS5pbmNsdWRlU3RhdCA9IGZ1bmN0aW9uIChzdGF0KSB7XHJcbiAgICAgICAgdGhpcy5zdGF0c1RvUmVwb3J0X1tzdGF0XSA9IHRydWU7XHJcbiAgICB9O1xyXG4gICAgU3RhdHNSZXBvcnRlci5wcm90b3R5cGUucmVwb3J0U3RhdHNfID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHN0YXRzID0gdGhpcy5zdGF0c0xpc3RlbmVyXy5nZXQoKTtcclxuICAgICAgICB2YXIgcmVwb3J0ZWRTdGF0cyA9IHt9O1xyXG4gICAgICAgIHZhciBoYXZlU3RhdHNUb1JlcG9ydCA9IGZhbHNlO1xyXG4gICAgICAgIGVhY2goc3RhdHMsIGZ1bmN0aW9uIChzdGF0LCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAodmFsdWUgPiAwICYmIGNvbnRhaW5zKF90aGlzLnN0YXRzVG9SZXBvcnRfLCBzdGF0KSkge1xyXG4gICAgICAgICAgICAgICAgcmVwb3J0ZWRTdGF0c1tzdGF0XSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgaGF2ZVN0YXRzVG9SZXBvcnQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKGhhdmVTdGF0c1RvUmVwb3J0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VydmVyXy5yZXBvcnRTdGF0cyhyZXBvcnRlZFN0YXRzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gcXVldWUgb3VyIG5leHQgcnVuLlxyXG4gICAgICAgIHNldFRpbWVvdXROb25CbG9ja2luZyh0aGlzLnJlcG9ydFN0YXRzXy5iaW5kKHRoaXMpLCBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyICogUkVQT1JUX1NUQVRTX0lOVEVSVkFMKSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFN0YXRzUmVwb3J0ZXI7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBUaGUgZXZlbnQgcXVldWUgc2VydmVzIGEgZmV3IHB1cnBvc2VzOlxyXG4gKiAxLiBJdCBlbnN1cmVzIHdlIG1haW50YWluIGV2ZW50IG9yZGVyIGluIHRoZSBmYWNlIG9mIGV2ZW50IGNhbGxiYWNrcyBkb2luZyBvcGVyYXRpb25zIHRoYXQgcmVzdWx0IGluIG1vcmVcclxuICogICAgZXZlbnRzIGJlaW5nIHF1ZXVlZC5cclxuICogMi4gcmFpc2VRdWV1ZWRFdmVudHMoKSBoYW5kbGVzIGJlaW5nIGNhbGxlZCByZWVudHJhbnRseSBuaWNlbHkuICBUaGF0IGlzLCBpZiBpbiB0aGUgY291cnNlIG9mIHJhaXNpbmcgZXZlbnRzLFxyXG4gKiAgICByYWlzZVF1ZXVlZEV2ZW50cygpIGlzIGNhbGxlZCBhZ2FpbiwgdGhlIFwiaW5uZXJcIiBjYWxsIHdpbGwgcGljayB1cCByYWlzaW5nIGV2ZW50cyB3aGVyZSB0aGUgXCJvdXRlclwiIGNhbGxcclxuICogICAgbGVmdCBvZmYsIGVuc3VyaW5nIHRoYXQgdGhlIGV2ZW50cyBhcmUgc3RpbGwgcmFpc2VkIHN5bmNocm9ub3VzbHkgYW5kIGluIG9yZGVyLlxyXG4gKiAzLiBZb3UgY2FuIHVzZSByYWlzZUV2ZW50c0F0UGF0aCBhbmQgcmFpc2VFdmVudHNGb3JDaGFuZ2VkUGF0aCB0byBlbnN1cmUgb25seSByZWxldmFudCBwcmV2aW91c2x5LXF1ZXVlZFxyXG4gKiAgICBldmVudHMgYXJlIHJhaXNlZCBzeW5jaHJvbm91c2x5LlxyXG4gKlxyXG4gKiBOT1RFOiBUaGlzIGNhbiBhbGwgZ28gYXdheSBpZi93aGVuIHdlIG1vdmUgdG8gYXN5bmMgZXZlbnRzLlxyXG4gKlxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbnZhciBFdmVudFF1ZXVlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRXZlbnRRdWV1ZSgpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqIEB0eXBlIHshQXJyYXkuPEV2ZW50TGlzdD59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5ldmVudExpc3RzXyA9IFtdO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRyYWNrcyByZWN1cnNpb24gZGVwdGggb2YgcmFpc2VRdWV1ZWRFdmVudHNfLCBmb3IgZGVidWdnaW5nIHB1cnBvc2VzLlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICogQHR5cGUgeyFudW1iZXJ9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5yZWN1cnNpb25EZXB0aF8gPSAwO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFBcnJheS48RXZlbnQ+fSBldmVudERhdGFMaXN0IFRoZSBuZXcgZXZlbnRzIHRvIHF1ZXVlLlxyXG4gICAgICovXHJcbiAgICBFdmVudFF1ZXVlLnByb3RvdHlwZS5xdWV1ZUV2ZW50cyA9IGZ1bmN0aW9uIChldmVudERhdGFMaXN0KSB7XHJcbiAgICAgICAgLy8gV2UgZ3JvdXAgZXZlbnRzIGJ5IHBhdGgsIHN0b3JpbmcgdGhlbSBpbiBhIHNpbmdsZSBFdmVudExpc3QsIHRvIG1ha2UgaXQgZWFzaWVyIHRvIHNraXAgb3ZlciB0aGVtIHF1aWNrbHkuXHJcbiAgICAgICAgdmFyIGN1cnJMaXN0ID0gbnVsbDtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50RGF0YUxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIGV2ZW50RGF0YSA9IGV2ZW50RGF0YUxpc3RbaV07XHJcbiAgICAgICAgICAgIHZhciBldmVudFBhdGggPSBldmVudERhdGEuZ2V0UGF0aCgpO1xyXG4gICAgICAgICAgICBpZiAoY3Vyckxpc3QgIT09IG51bGwgJiYgIWV2ZW50UGF0aC5lcXVhbHMoY3Vyckxpc3QuZ2V0UGF0aCgpKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ldmVudExpc3RzXy5wdXNoKGN1cnJMaXN0KTtcclxuICAgICAgICAgICAgICAgIGN1cnJMaXN0ID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY3Vyckxpc3QgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGN1cnJMaXN0ID0gbmV3IEV2ZW50TGlzdChldmVudFBhdGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGN1cnJMaXN0LmFkZChldmVudERhdGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY3Vyckxpc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5ldmVudExpc3RzXy5wdXNoKGN1cnJMaXN0KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBRdWV1ZXMgdGhlIHNwZWNpZmllZCBldmVudHMgYW5kIHN5bmNocm9ub3VzbHkgcmFpc2VzIGFsbCBldmVudHMgKGluY2x1ZGluZyBwcmV2aW91c2x5IHF1ZXVlZCBvbmVzKVxyXG4gICAgICogZm9yIHRoZSBzcGVjaWZpZWQgcGF0aC5cclxuICAgICAqXHJcbiAgICAgKiBJdCBpcyBhc3N1bWVkIHRoYXQgdGhlIG5ldyBldmVudHMgYXJlIGFsbCBmb3IgdGhlIHNwZWNpZmllZCBwYXRoLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IVBhdGh9IHBhdGggVGhlIHBhdGggdG8gcmFpc2UgZXZlbnRzIGZvci5cclxuICAgICAqIEBwYXJhbSB7IUFycmF5LjxFdmVudD59IGV2ZW50RGF0YUxpc3QgVGhlIG5ldyBldmVudHMgdG8gcmFpc2UuXHJcbiAgICAgKi9cclxuICAgIEV2ZW50UXVldWUucHJvdG90eXBlLnJhaXNlRXZlbnRzQXRQYXRoID0gZnVuY3Rpb24gKHBhdGgsIGV2ZW50RGF0YUxpc3QpIHtcclxuICAgICAgICB0aGlzLnF1ZXVlRXZlbnRzKGV2ZW50RGF0YUxpc3QpO1xyXG4gICAgICAgIHRoaXMucmFpc2VRdWV1ZWRFdmVudHNNYXRjaGluZ1ByZWRpY2F0ZV8oZnVuY3Rpb24gKGV2ZW50UGF0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXZlbnRQYXRoLmVxdWFscyhwYXRoKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFF1ZXVlcyB0aGUgc3BlY2lmaWVkIGV2ZW50cyBhbmQgc3luY2hyb25vdXNseSByYWlzZXMgYWxsIGV2ZW50cyAoaW5jbHVkaW5nIHByZXZpb3VzbHkgcXVldWVkIG9uZXMpIGZvclxyXG4gICAgICogbG9jYXRpb25zIHJlbGF0ZWQgdG8gdGhlIHNwZWNpZmllZCBjaGFuZ2UgcGF0aCAoaS5lLiBhbGwgYW5jZXN0b3JzIGFuZCBkZXNjZW5kYW50cykuXHJcbiAgICAgKlxyXG4gICAgICogSXQgaXMgYXNzdW1lZCB0aGF0IHRoZSBuZXcgZXZlbnRzIGFyZSBhbGwgcmVsYXRlZCAoYW5jZXN0b3Igb3IgZGVzY2VuZGFudCkgdG8gdGhlIHNwZWNpZmllZCBwYXRoLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IVBhdGh9IGNoYW5nZWRQYXRoIFRoZSBwYXRoIHRvIHJhaXNlIGV2ZW50cyBmb3IuXHJcbiAgICAgKiBAcGFyYW0geyFBcnJheS48IUV2ZW50Pn0gZXZlbnREYXRhTGlzdCBUaGUgZXZlbnRzIHRvIHJhaXNlXHJcbiAgICAgKi9cclxuICAgIEV2ZW50UXVldWUucHJvdG90eXBlLnJhaXNlRXZlbnRzRm9yQ2hhbmdlZFBhdGggPSBmdW5jdGlvbiAoY2hhbmdlZFBhdGgsIGV2ZW50RGF0YUxpc3QpIHtcclxuICAgICAgICB0aGlzLnF1ZXVlRXZlbnRzKGV2ZW50RGF0YUxpc3QpO1xyXG4gICAgICAgIHRoaXMucmFpc2VRdWV1ZWRFdmVudHNNYXRjaGluZ1ByZWRpY2F0ZV8oZnVuY3Rpb24gKGV2ZW50UGF0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXZlbnRQYXRoLmNvbnRhaW5zKGNoYW5nZWRQYXRoKSB8fCBjaGFuZ2VkUGF0aC5jb250YWlucyhldmVudFBhdGgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshZnVuY3Rpb24oIVBhdGgpOmJvb2xlYW59IHByZWRpY2F0ZVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgRXZlbnRRdWV1ZS5wcm90b3R5cGUucmFpc2VRdWV1ZWRFdmVudHNNYXRjaGluZ1ByZWRpY2F0ZV8gPSBmdW5jdGlvbiAocHJlZGljYXRlKSB7XHJcbiAgICAgICAgdGhpcy5yZWN1cnNpb25EZXB0aF8rKztcclxuICAgICAgICB2YXIgc2VudEFsbCA9IHRydWU7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmV2ZW50TGlzdHNfLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBldmVudExpc3QgPSB0aGlzLmV2ZW50TGlzdHNfW2ldO1xyXG4gICAgICAgICAgICBpZiAoZXZlbnRMaXN0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnRQYXRoID0gZXZlbnRMaXN0LmdldFBhdGgoKTtcclxuICAgICAgICAgICAgICAgIGlmIChwcmVkaWNhdGUoZXZlbnRQYXRoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRMaXN0c19baV0ucmFpc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmV2ZW50TGlzdHNfW2ldID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbnRBbGwgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc2VudEFsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmV2ZW50TGlzdHNfID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucmVjdXJzaW9uRGVwdGhfLS07XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEV2ZW50UXVldWU7XHJcbn0oKSk7XHJcbi8qKlxyXG4gKiBAcGFyYW0geyFQYXRofSBwYXRoXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxudmFyIEV2ZW50TGlzdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEV2ZW50TGlzdChwYXRoXykge1xyXG4gICAgICAgIHRoaXMucGF0aF8gPSBwYXRoXztcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAdHlwZSB7IUFycmF5LjxFdmVudD59XHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmV2ZW50c18gPSBbXTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshRXZlbnR9IGV2ZW50RGF0YVxyXG4gICAgICovXHJcbiAgICBFdmVudExpc3QucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChldmVudERhdGEpIHtcclxuICAgICAgICB0aGlzLmV2ZW50c18ucHVzaChldmVudERhdGEpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogSXRlcmF0ZXMgdGhyb3VnaCB0aGUgbGlzdCBhbmQgcmFpc2VzIGVhY2ggZXZlbnRcclxuICAgICAqL1xyXG4gICAgRXZlbnRMaXN0LnByb3RvdHlwZS5yYWlzZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZXZlbnRzXy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgZXZlbnREYXRhID0gdGhpcy5ldmVudHNfW2ldO1xyXG4gICAgICAgICAgICBpZiAoZXZlbnREYXRhICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50c19baV0gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50Rm4gPSBldmVudERhdGEuZ2V0RXZlbnRSdW5uZXIoKTtcclxuICAgICAgICAgICAgICAgIGlmIChsb2dnZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBsb2coJ2V2ZW50OiAnICsgZXZlbnREYXRhLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZXhjZXB0aW9uR3VhcmQoZXZlbnRGbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHshUGF0aH1cclxuICAgICAqL1xyXG4gICAgRXZlbnRMaXN0LnByb3RvdHlwZS5nZXRQYXRoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBhdGhfO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBFdmVudExpc3Q7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBCYXNlIGNsYXNzIHRvIGJlIHVzZWQgaWYgeW91IHdhbnQgdG8gZW1pdCBldmVudHMuIENhbGwgdGhlIGNvbnN0cnVjdG9yIHdpdGhcclxuICogdGhlIHNldCBvZiBhbGxvd2VkIGV2ZW50IG5hbWVzLlxyXG4gKi9cclxudmFyIEV2ZW50RW1pdHRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshQXJyYXkuPHN0cmluZz59IGFsbG93ZWRFdmVudHNfXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIEV2ZW50RW1pdHRlcihhbGxvd2VkRXZlbnRzXykge1xyXG4gICAgICAgIHRoaXMuYWxsb3dlZEV2ZW50c18gPSBhbGxvd2VkRXZlbnRzXztcclxuICAgICAgICB0aGlzLmxpc3RlbmVyc18gPSB7fTtcclxuICAgICAgICBhc3NlcnQoQXJyYXkuaXNBcnJheShhbGxvd2VkRXZlbnRzXykgJiYgYWxsb3dlZEV2ZW50c18ubGVuZ3RoID4gMCwgJ1JlcXVpcmVzIGEgbm9uLWVtcHR5IGFycmF5Jyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFRvIGJlIGNhbGxlZCBieSBkZXJpdmVkIGNsYXNzZXMgdG8gdHJpZ2dlciBldmVudHMuXHJcbiAgICAgKiBAcGFyYW0geyFzdHJpbmd9IGV2ZW50VHlwZVxyXG4gICAgICogQHBhcmFtIHsuLi4qfSB2YXJBcmdzXHJcbiAgICAgKi9cclxuICAgIEV2ZW50RW1pdHRlci5wcm90b3R5cGUudHJpZ2dlciA9IGZ1bmN0aW9uIChldmVudFR5cGUpIHtcclxuICAgICAgICB2YXIgdmFyQXJncyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhckFyZ3NbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMubGlzdGVuZXJzX1tldmVudFR5cGVdKSkge1xyXG4gICAgICAgICAgICAvLyBDbG9uZSB0aGUgbGlzdCwgc2luY2UgY2FsbGJhY2tzIGNvdWxkIGFkZC9yZW1vdmUgbGlzdGVuZXJzLlxyXG4gICAgICAgICAgICB2YXIgbGlzdGVuZXJzID0gX19zcHJlYWQodGhpcy5saXN0ZW5lcnNfW2V2ZW50VHlwZV0pO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbGlzdGVuZXJzW2ldLmNhbGxiYWNrLmFwcGx5KGxpc3RlbmVyc1tpXS5jb250ZXh0LCB2YXJBcmdzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKGV2ZW50VHlwZSwgY2FsbGJhY2ssIGNvbnRleHQpIHtcclxuICAgICAgICB0aGlzLnZhbGlkYXRlRXZlbnRUeXBlXyhldmVudFR5cGUpO1xyXG4gICAgICAgIHRoaXMubGlzdGVuZXJzX1tldmVudFR5cGVdID0gdGhpcy5saXN0ZW5lcnNfW2V2ZW50VHlwZV0gfHwgW107XHJcbiAgICAgICAgdGhpcy5saXN0ZW5lcnNfW2V2ZW50VHlwZV0ucHVzaCh7IGNhbGxiYWNrOiBjYWxsYmFjaywgY29udGV4dDogY29udGV4dCB9KTtcclxuICAgICAgICB2YXIgZXZlbnREYXRhID0gdGhpcy5nZXRJbml0aWFsRXZlbnQoZXZlbnRUeXBlKTtcclxuICAgICAgICBpZiAoZXZlbnREYXRhKSB7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KGNvbnRleHQsIGV2ZW50RGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24gKGV2ZW50VHlwZSwgY2FsbGJhY2ssIGNvbnRleHQpIHtcclxuICAgICAgICB0aGlzLnZhbGlkYXRlRXZlbnRUeXBlXyhldmVudFR5cGUpO1xyXG4gICAgICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLmxpc3RlbmVyc19bZXZlbnRUeXBlXSB8fCBbXTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAobGlzdGVuZXJzW2ldLmNhbGxiYWNrID09PSBjYWxsYmFjayAmJlxyXG4gICAgICAgICAgICAgICAgKCFjb250ZXh0IHx8IGNvbnRleHQgPT09IGxpc3RlbmVyc1tpXS5jb250ZXh0KSkge1xyXG4gICAgICAgICAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnZhbGlkYXRlRXZlbnRUeXBlXyA9IGZ1bmN0aW9uIChldmVudFR5cGUpIHtcclxuICAgICAgICBhc3NlcnQodGhpcy5hbGxvd2VkRXZlbnRzXy5maW5kKGZ1bmN0aW9uIChldCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXQgPT09IGV2ZW50VHlwZTtcclxuICAgICAgICB9KSwgJ1Vua25vd24gZXZlbnQ6ICcgKyBldmVudFR5cGUpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBFdmVudEVtaXR0ZXI7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBAZXh0ZW5kcyB7RXZlbnRFbWl0dGVyfVxyXG4gKi9cclxudmFyIFZpc2liaWxpdHlNb25pdG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKFZpc2liaWxpdHlNb25pdG9yLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gVmlzaWJpbGl0eU1vbml0b3IoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgWyd2aXNpYmxlJ10pIHx8IHRoaXM7XHJcbiAgICAgICAgdmFyIGhpZGRlbjtcclxuICAgICAgICB2YXIgdmlzaWJpbGl0eUNoYW5nZTtcclxuICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudFsnaGlkZGVuJ10gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBPcGVyYSAxMi4xMCBhbmQgRmlyZWZveCAxOCBhbmQgbGF0ZXIgc3VwcG9ydFxyXG4gICAgICAgICAgICAgICAgdmlzaWJpbGl0eUNoYW5nZSA9ICd2aXNpYmlsaXR5Y2hhbmdlJztcclxuICAgICAgICAgICAgICAgIGhpZGRlbiA9ICdoaWRkZW4nO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkb2N1bWVudFsnbW96SGlkZGVuJ10gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICB2aXNpYmlsaXR5Q2hhbmdlID0gJ21venZpc2liaWxpdHljaGFuZ2UnO1xyXG4gICAgICAgICAgICAgICAgaGlkZGVuID0gJ21vekhpZGRlbic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGRvY3VtZW50Wydtc0hpZGRlbiddICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgdmlzaWJpbGl0eUNoYW5nZSA9ICdtc3Zpc2liaWxpdHljaGFuZ2UnO1xyXG4gICAgICAgICAgICAgICAgaGlkZGVuID0gJ21zSGlkZGVuJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZG9jdW1lbnRbJ3dlYmtpdEhpZGRlbiddICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgdmlzaWJpbGl0eUNoYW5nZSA9ICd3ZWJraXR2aXNpYmlsaXR5Y2hhbmdlJztcclxuICAgICAgICAgICAgICAgIGhpZGRlbiA9ICd3ZWJraXRIaWRkZW4nO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEluaXRpYWxseSwgd2UgYWx3YXlzIGFzc3VtZSB3ZSBhcmUgdmlzaWJsZS4gVGhpcyBlbnN1cmVzIHRoYXQgaW4gYnJvd3NlcnNcclxuICAgICAgICAvLyB3aXRob3V0IHBhZ2UgdmlzaWJpbGl0eSBzdXBwb3J0IG9yIGluIGNhc2VzIHdoZXJlIHdlIGFyZSBuZXZlciB2aXNpYmxlXHJcbiAgICAgICAgLy8gKGUuZy4gY2hyb21lIGV4dGVuc2lvbiksIHdlIGFjdCBhcyBpZiB3ZSBhcmUgdmlzaWJsZSwgaS5lLiBkb24ndCBkZWxheVxyXG4gICAgICAgIC8vIHJlY29ubmVjdHNcclxuICAgICAgICBfdGhpcy52aXNpYmxlXyA9IHRydWU7XHJcbiAgICAgICAgaWYgKHZpc2liaWxpdHlDaGFuZ2UpIHtcclxuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih2aXNpYmlsaXR5Q2hhbmdlLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmlzaWJsZSA9ICFkb2N1bWVudFtoaWRkZW5dO1xyXG4gICAgICAgICAgICAgICAgaWYgKHZpc2libGUgIT09IF90aGlzLnZpc2libGVfKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMudmlzaWJsZV8gPSB2aXNpYmxlO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnRyaWdnZXIoJ3Zpc2libGUnLCB2aXNpYmxlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICBWaXNpYmlsaXR5TW9uaXRvci5nZXRJbnN0YW5jZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFZpc2liaWxpdHlNb25pdG9yKCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFzdHJpbmd9IGV2ZW50VHlwZVxyXG4gICAgICogQHJldHVybiB7QXJyYXkuPGJvb2xlYW4+fVxyXG4gICAgICovXHJcbiAgICBWaXNpYmlsaXR5TW9uaXRvci5wcm90b3R5cGUuZ2V0SW5pdGlhbEV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50VHlwZSkge1xyXG4gICAgICAgIGFzc2VydChldmVudFR5cGUgPT09ICd2aXNpYmxlJywgJ1Vua25vd24gZXZlbnQgdHlwZTogJyArIGV2ZW50VHlwZSk7XHJcbiAgICAgICAgcmV0dXJuIFt0aGlzLnZpc2libGVfXTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gVmlzaWJpbGl0eU1vbml0b3I7XHJcbn0oRXZlbnRFbWl0dGVyKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBNb25pdG9ycyBvbmxpbmUgc3RhdGUgKGFzIHJlcG9ydGVkIGJ5IHdpbmRvdy5vbmxpbmUvb2ZmbGluZSBldmVudHMpLlxyXG4gKlxyXG4gKiBUaGUgZXhwZWN0YXRpb24gaXMgdGhhdCB0aGlzIGNvdWxkIGhhdmUgbWFueSBmYWxzZSBwb3NpdGl2ZXMgKHRoaW5rcyB3ZSBhcmUgb25saW5lXHJcbiAqIHdoZW4gd2UncmUgbm90KSwgYnV0IG5vIGZhbHNlIG5lZ2F0aXZlcy4gIFNvIHdlIGNhbiBzYWZlbHkgdXNlIGl0IHRvIGRldGVybWluZSB3aGVuXHJcbiAqIHdlIGRlZmluaXRlbHkgY2Fubm90IHJlYWNoIHRoZSBpbnRlcm5ldC5cclxuICpcclxuICogQGV4dGVuZHMge0V2ZW50RW1pdHRlcn1cclxuICovXHJcbnZhciBPbmxpbmVNb25pdG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKE9ubGluZU1vbml0b3IsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBPbmxpbmVNb25pdG9yKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIFsnb25saW5lJ10pIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMub25saW5lXyA9IHRydWU7XHJcbiAgICAgICAgLy8gV2UndmUgaGFkIHJlcGVhdGVkIGNvbXBsYWludHMgdGhhdCBDb3Jkb3ZhIGFwcHMgY2FuIGdldCBzdHVjayBcIm9mZmxpbmVcIiwgZS5nLlxyXG4gICAgICAgIC8vIGh0dHBzOi8vZm9ydW0uaW9uaWNmcmFtZXdvcmsuY29tL3QvZmlyZWJhc2UtY29ubmVjdGlvbi1pcy1sb3N0LWFuZC1uZXZlci1jb21lLWJhY2svNDM4MTBcclxuICAgICAgICAvLyBJdCB3b3VsZCBzZWVtIHRoYXQgdGhlICdvbmxpbmUnIGV2ZW50IGRvZXMgbm90IGFsd2F5cyBmaXJlIGNvbnNpc3RlbnRseS4gU28gd2UgZGlzYWJsZSBpdFxyXG4gICAgICAgIC8vIGZvciBDb3Jkb3ZhLlxyXG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxyXG4gICAgICAgICAgICB0eXBlb2Ygd2luZG93LmFkZEV2ZW50TGlzdGVuZXIgIT09ICd1bmRlZmluZWQnICYmXHJcbiAgICAgICAgICAgICFpc01vYmlsZUNvcmRvdmEoKSkge1xyXG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb25saW5lJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5vbmxpbmVfKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMub25saW5lXyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMudHJpZ2dlcignb25saW5lJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIGZhbHNlKTtcclxuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29mZmxpbmUnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMub25saW5lXykge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm9ubGluZV8gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy50cmlnZ2VyKCdvbmxpbmUnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgT25saW5lTW9uaXRvci5nZXRJbnN0YW5jZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IE9ubGluZU1vbml0b3IoKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IXN0cmluZ30gZXZlbnRUeXBlXHJcbiAgICAgKiBAcmV0dXJuIHtBcnJheS48Ym9vbGVhbj59XHJcbiAgICAgKi9cclxuICAgIE9ubGluZU1vbml0b3IucHJvdG90eXBlLmdldEluaXRpYWxFdmVudCA9IGZ1bmN0aW9uIChldmVudFR5cGUpIHtcclxuICAgICAgICBhc3NlcnQoZXZlbnRUeXBlID09PSAnb25saW5lJywgJ1Vua25vd24gZXZlbnQgdHlwZTogJyArIGV2ZW50VHlwZSk7XHJcbiAgICAgICAgcmV0dXJuIFt0aGlzLm9ubGluZV9dO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgT25saW5lTW9uaXRvci5wcm90b3R5cGUuY3VycmVudGx5T25saW5lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9ubGluZV87XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE9ubGluZU1vbml0b3I7XHJcbn0oRXZlbnRFbWl0dGVyKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBUaGlzIGNsYXNzIGVuc3VyZXMgdGhlIHBhY2tldHMgZnJvbSB0aGUgc2VydmVyIGFycml2ZSBpbiBvcmRlclxyXG4gKiBUaGlzIGNsYXNzIHRha2VzIGRhdGEgZnJvbSB0aGUgc2VydmVyIGFuZCBlbnN1cmVzIGl0IGdldHMgcGFzc2VkIGludG8gdGhlIGNhbGxiYWNrcyBpbiBvcmRlci5cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG52YXIgUGFja2V0UmVjZWl2ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBvbk1lc3NhZ2VfXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIFBhY2tldFJlY2VpdmVyKG9uTWVzc2FnZV8pIHtcclxuICAgICAgICB0aGlzLm9uTWVzc2FnZV8gPSBvbk1lc3NhZ2VfO1xyXG4gICAgICAgIHRoaXMucGVuZGluZ1Jlc3BvbnNlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuY3VycmVudFJlc3BvbnNlTnVtID0gMDtcclxuICAgICAgICB0aGlzLmNsb3NlQWZ0ZXJSZXNwb25zZSA9IC0xO1xyXG4gICAgICAgIHRoaXMub25DbG9zZSA9IG51bGw7XHJcbiAgICB9XHJcbiAgICBQYWNrZXRSZWNlaXZlci5wcm90b3R5cGUuY2xvc2VBZnRlciA9IGZ1bmN0aW9uIChyZXNwb25zZU51bSwgY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLmNsb3NlQWZ0ZXJSZXNwb25zZSA9IHJlc3BvbnNlTnVtO1xyXG4gICAgICAgIHRoaXMub25DbG9zZSA9IGNhbGxiYWNrO1xyXG4gICAgICAgIGlmICh0aGlzLmNsb3NlQWZ0ZXJSZXNwb25zZSA8IHRoaXMuY3VycmVudFJlc3BvbnNlTnVtKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25DbG9zZSgpO1xyXG4gICAgICAgICAgICB0aGlzLm9uQ2xvc2UgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEVhY2ggbWVzc2FnZSBmcm9tIHRoZSBzZXJ2ZXIgY29tZXMgd2l0aCBhIHJlc3BvbnNlIG51bWJlciwgYW5kIGFuIGFycmF5IG9mIGRhdGEuIFRoZSByZXNwb25zZU51bWJlclxyXG4gICAgICogYWxsb3dzIHVzIHRvIGVuc3VyZSB0aGF0IHdlIHByb2Nlc3MgdGhlbSBpbiB0aGUgcmlnaHQgb3JkZXIsIHNpbmNlIHdlIGNhbid0IGJlIGd1YXJhbnRlZWQgdGhhdCBhbGxcclxuICAgICAqIGJyb3dzZXJzIHdpbGwgcmVzcG9uZCBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGUgcmVxdWVzdHMgd2Ugc2VudFxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHJlcXVlc3ROdW1cclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGRhdGFcclxuICAgICAqL1xyXG4gICAgUGFja2V0UmVjZWl2ZXIucHJvdG90eXBlLmhhbmRsZVJlc3BvbnNlID0gZnVuY3Rpb24gKHJlcXVlc3ROdW0sIGRhdGEpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMucGVuZGluZ1Jlc3BvbnNlc1tyZXF1ZXN0TnVtXSA9IGRhdGE7XHJcbiAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciB0b1Byb2Nlc3MgPSB0aGlzXzEucGVuZGluZ1Jlc3BvbnNlc1t0aGlzXzEuY3VycmVudFJlc3BvbnNlTnVtXTtcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXNfMS5wZW5kaW5nUmVzcG9uc2VzW3RoaXNfMS5jdXJyZW50UmVzcG9uc2VOdW1dO1xyXG4gICAgICAgICAgICB2YXIgX2xvb3BfMiA9IGZ1bmN0aW9uIChpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodG9Qcm9jZXNzW2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXhjZXB0aW9uR3VhcmQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5vbk1lc3NhZ2VfKHRvUHJvY2Vzc1tpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9Qcm9jZXNzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICBfbG9vcF8yKGkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzXzEuY3VycmVudFJlc3BvbnNlTnVtID09PSB0aGlzXzEuY2xvc2VBZnRlclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpc18xLm9uQ2xvc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzXzEub25DbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXNfMS5vbkNsb3NlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBcImJyZWFrXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpc18xLmN1cnJlbnRSZXNwb25zZU51bSsrO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIHRoaXNfMSA9IHRoaXM7XHJcbiAgICAgICAgd2hpbGUgKHRoaXMucGVuZGluZ1Jlc3BvbnNlc1t0aGlzLmN1cnJlbnRSZXNwb25zZU51bV0pIHtcclxuICAgICAgICAgICAgdmFyIHN0YXRlXzEgPSBfbG9vcF8xKCk7XHJcbiAgICAgICAgICAgIGlmIChzdGF0ZV8xID09PSBcImJyZWFrXCIpXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFBhY2tldFJlY2VpdmVyO1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vLyBVUkwgcXVlcnkgcGFyYW1ldGVycyBhc3NvY2lhdGVkIHdpdGggbG9uZ3BvbGxpbmdcclxudmFyIEZJUkVCQVNFX0xPTkdQT0xMX1NUQVJUX1BBUkFNID0gJ3N0YXJ0JztcclxudmFyIEZJUkVCQVNFX0xPTkdQT0xMX0NMT1NFX0NPTU1BTkQgPSAnY2xvc2UnO1xyXG52YXIgRklSRUJBU0VfTE9OR1BPTExfQ09NTUFORF9DQl9OQU1FID0gJ3BMUENvbW1hbmQnO1xyXG52YXIgRklSRUJBU0VfTE9OR1BPTExfREFUQV9DQl9OQU1FID0gJ3BSVExQQ0InO1xyXG52YXIgRklSRUJBU0VfTE9OR1BPTExfSURfUEFSQU0gPSAnaWQnO1xyXG52YXIgRklSRUJBU0VfTE9OR1BPTExfUFdfUEFSQU0gPSAncHcnO1xyXG52YXIgRklSRUJBU0VfTE9OR1BPTExfU0VSSUFMX1BBUkFNID0gJ3Nlcic7XHJcbnZhciBGSVJFQkFTRV9MT05HUE9MTF9DQUxMQkFDS19JRF9QQVJBTSA9ICdjYic7XHJcbnZhciBGSVJFQkFTRV9MT05HUE9MTF9TRUdNRU5UX05VTV9QQVJBTSA9ICdzZWcnO1xyXG52YXIgRklSRUJBU0VfTE9OR1BPTExfU0VHTUVOVFNfSU5fUEFDS0VUID0gJ3RzJztcclxudmFyIEZJUkVCQVNFX0xPTkdQT0xMX0RBVEFfUEFSQU0gPSAnZCc7XHJcbnZhciBGSVJFQkFTRV9MT05HUE9MTF9ESVNDT05OX0ZSQU1FX1JFUVVFU1RfUEFSQU0gPSAnZGZyYW1lJztcclxuLy9EYXRhIHNpemUgY29uc3RhbnRzLlxyXG4vL1RPRE86IFBlcmY6IHRoZSBtYXhpbXVtIGxlbmd0aCBhY3R1YWxseSBkaWZmZXJzIGZyb20gYnJvd3NlciB0byBicm93c2VyLlxyXG4vLyBXZSBzaG91bGQgY2hlY2sgd2hhdCBicm93c2VyIHdlJ3JlIG9uIGFuZCBzZXQgYWNjb3JkaW5nbHkuXHJcbnZhciBNQVhfVVJMX0RBVEFfU0laRSA9IDE4NzA7XHJcbnZhciBTRUdfSEVBREVSX1NJWkUgPSAzMDsgLy9pZTogJnNlZz04Mjk5MjM0JnRzPTk4MjM4OTEyMyZkPVxyXG52YXIgTUFYX1BBWUxPQURfU0laRSA9IE1BWF9VUkxfREFUQV9TSVpFIC0gU0VHX0hFQURFUl9TSVpFO1xyXG4vKipcclxuICogS2VlcGFsaXZlIHBlcmlvZFxyXG4gKiBzZW5kIGEgZnJlc2ggcmVxdWVzdCBhdCBtaW5pbXVtIGV2ZXJ5IDI1IHNlY29uZHMuIE9wZXJhIGhhcyBhIG1heGltdW0gcmVxdWVzdFxyXG4gKiBsZW5ndGggb2YgMzAgc2Vjb25kcyB0aGF0IHdlIGNhbid0IGV4Y2VlZC5cclxuICogQGNvbnN0XHJcbiAqIEB0eXBlIHtudW1iZXJ9XHJcbiAqL1xyXG52YXIgS0VFUEFMSVZFX1JFUVVFU1RfSU5URVJWQUwgPSAyNTAwMDtcclxuLyoqXHJcbiAqIEhvdyBsb25nIHRvIHdhaXQgYmVmb3JlIGFib3J0aW5nIGEgbG9uZy1wb2xsaW5nIGNvbm5lY3Rpb24gYXR0ZW1wdC5cclxuICogQGNvbnN0XHJcbiAqIEB0eXBlIHtudW1iZXJ9XHJcbiAqL1xyXG52YXIgTFBfQ09OTkVDVF9USU1FT1VUID0gMzAwMDA7XHJcbi8qKlxyXG4gKiBUaGlzIGNsYXNzIG1hbmFnZXMgYSBzaW5nbGUgbG9uZy1wb2xsaW5nIGNvbm5lY3Rpb24uXHJcbiAqXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAaW1wbGVtZW50cyB7VHJhbnNwb3J0fVxyXG4gKi9cclxudmFyIEJyb3dzZXJQb2xsQ29ubmVjdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIGNvbm5JZCBBbiBpZGVudGlmaWVyIGZvciB0aGlzIGNvbm5lY3Rpb24sIHVzZWQgZm9yIGxvZ2dpbmdcclxuICAgICAqIEBwYXJhbSByZXBvSW5mbyBUaGUgaW5mbyBmb3IgdGhlIGVuZHBvaW50IHRvIHNlbmQgZGF0YSB0by5cclxuICAgICAqIEBwYXJhbSBhcHBsaWNhdGlvbklkIFRoZSBGaXJlYmFzZSBBcHAgSUQgZm9yIHRoaXMgcHJvamVjdC5cclxuICAgICAqIEBwYXJhbSB0cmFuc3BvcnRTZXNzaW9uSWQgT3B0aW9uYWwgdHJhbnNwb3J0U2Vzc2lvbmlkIGlmIHdlIGFyZSByZWNvbm5lY3RpbmcgZm9yIGFuIGV4aXN0aW5nXHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNwb3J0IHNlc3Npb25cclxuICAgICAqIEBwYXJhbSBsYXN0U2Vzc2lvbklkIE9wdGlvbmFsIGxhc3RTZXNzaW9uSWQgaWYgdGhlIFBlcnNpc3RlbnRDb25uZWN0aW9uIGhhcyBhbHJlYWR5IGNyZWF0ZWQgYVxyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbiBwcmV2aW91c2x5XHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIEJyb3dzZXJQb2xsQ29ubmVjdGlvbihjb25uSWQsIHJlcG9JbmZvLCBhcHBsaWNhdGlvbklkLCB0cmFuc3BvcnRTZXNzaW9uSWQsIGxhc3RTZXNzaW9uSWQpIHtcclxuICAgICAgICB0aGlzLmNvbm5JZCA9IGNvbm5JZDtcclxuICAgICAgICB0aGlzLnJlcG9JbmZvID0gcmVwb0luZm87XHJcbiAgICAgICAgdGhpcy5hcHBsaWNhdGlvbklkID0gYXBwbGljYXRpb25JZDtcclxuICAgICAgICB0aGlzLnRyYW5zcG9ydFNlc3Npb25JZCA9IHRyYW5zcG9ydFNlc3Npb25JZDtcclxuICAgICAgICB0aGlzLmxhc3RTZXNzaW9uSWQgPSBsYXN0U2Vzc2lvbklkO1xyXG4gICAgICAgIHRoaXMuYnl0ZXNTZW50ID0gMDtcclxuICAgICAgICB0aGlzLmJ5dGVzUmVjZWl2ZWQgPSAwO1xyXG4gICAgICAgIHRoaXMuZXZlckNvbm5lY3RlZF8gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmxvZ18gPSBsb2dXcmFwcGVyKGNvbm5JZCk7XHJcbiAgICAgICAgdGhpcy5zdGF0c18gPSBTdGF0c01hbmFnZXIuZ2V0Q29sbGVjdGlvbihyZXBvSW5mbyk7XHJcbiAgICAgICAgdGhpcy51cmxGbiA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcG9JbmZvLmNvbm5lY3Rpb25VUkwoTE9OR19QT0xMSU5HLCBwYXJhbXMpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKE9iamVjdCl9IG9uTWVzc2FnZSBDYWxsYmFjayB3aGVuIG1lc3NhZ2VzIGFycml2ZVxyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbigpfSBvbkRpc2Nvbm5lY3QgQ2FsbGJhY2sgd2l0aCBjb25uZWN0aW9uIGxvc3QuXHJcbiAgICAgKi9cclxuICAgIEJyb3dzZXJQb2xsQ29ubmVjdGlvbi5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uIChvbk1lc3NhZ2UsIG9uRGlzY29ubmVjdCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5jdXJTZWdtZW50TnVtID0gMDtcclxuICAgICAgICB0aGlzLm9uRGlzY29ubmVjdF8gPSBvbkRpc2Nvbm5lY3Q7XHJcbiAgICAgICAgdGhpcy5teVBhY2tldE9yZGVyZXIgPSBuZXcgUGFja2V0UmVjZWl2ZXIob25NZXNzYWdlKTtcclxuICAgICAgICB0aGlzLmlzQ2xvc2VkXyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuY29ubmVjdFRpbWVvdXRUaW1lcl8gPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMubG9nXygnVGltZWQgb3V0IHRyeWluZyB0byBjb25uZWN0LicpO1xyXG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgd2UgY2xlYXIgdGhlIGhvc3QgY2FjaGVcclxuICAgICAgICAgICAgX3RoaXMub25DbG9zZWRfKCk7XHJcbiAgICAgICAgICAgIF90aGlzLmNvbm5lY3RUaW1lb3V0VGltZXJfID0gbnVsbDtcclxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgICAgICB9LCBNYXRoLmZsb29yKExQX0NPTk5FQ1RfVElNRU9VVCkpO1xyXG4gICAgICAgIC8vIEVuc3VyZSB3ZSBkZWxheSB0aGUgY3JlYXRpb24gb2YgdGhlIGlmcmFtZSB1bnRpbCB0aGUgRE9NIGlzIGxvYWRlZC5cclxuICAgICAgICBleGVjdXRlV2hlbkRPTVJlYWR5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKF90aGlzLmlzQ2xvc2VkXykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vU2V0IHVwIGEgY2FsbGJhY2sgdGhhdCBnZXRzIHRyaWdnZXJlZCBvbmNlIGEgY29ubmVjdGlvbiBpcyBzZXQgdXAuXHJcbiAgICAgICAgICAgIF90aGlzLnNjcmlwdFRhZ0hvbGRlciA9IG5ldyBGaXJlYmFzZUlGcmFtZVNjcmlwdEhvbGRlcihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgX2EgPSBfX3JlYWQoYXJncywgNSksIGNvbW1hbmQgPSBfYVswXSwgYXJnMSA9IF9hWzFdLCBhcmcyID0gX2FbMl0sIGFyZzMgPSBfYVszXSwgYXJnNCA9IF9hWzRdO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuaW5jcmVtZW50SW5jb21pbmdCeXRlc18oYXJncyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIV90aGlzLnNjcmlwdFRhZ0hvbGRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjsgLy8gd2UgY2xvc2VkIHRoZSBjb25uZWN0aW9uLlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLmNvbm5lY3RUaW1lb3V0VGltZXJfKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLmNvbm5lY3RUaW1lb3V0VGltZXJfKTtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jb25uZWN0VGltZW91dFRpbWVyXyA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5ldmVyQ29ubmVjdGVkXyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29tbWFuZCA9PT0gRklSRUJBU0VfTE9OR1BPTExfU1RBUlRfUEFSQU0pIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5pZCA9IGFyZzE7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucGFzc3dvcmQgPSBhcmcyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY29tbWFuZCA9PT0gRklSRUJBU0VfTE9OR1BPTExfQ0xPU0VfQ09NTUFORCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIERvbid0IGNsZWFyIHRoZSBob3N0IGNhY2hlLiBXZSBnb3QgYSByZXNwb25zZSBmcm9tIHRoZSBzZXJ2ZXIsIHNvIHdlIGtub3cgaXQncyByZWFjaGFibGVcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXJnMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBhcmVuJ3QgZXhwZWN0aW5nIGFueSBtb3JlIGRhdGEgKG90aGVyIHRoYW4gd2hhdCB0aGUgc2VydmVyJ3MgYWxyZWFkeSBpbiB0aGUgcHJvY2VzcyBvZiBzZW5kaW5nIHVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRocm91Z2ggb3VyIGFscmVhZHkgb3BlbiBwb2xscyksIHNvIGRvbid0IHNlbmQgYW55IG1vcmUuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnNjcmlwdFRhZ0hvbGRlci5zZW5kTmV3UG9sbHMgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXJnMSBpbiB0aGlzIGNhc2UgaXMgdGhlIGxhc3QgcmVzcG9uc2UgbnVtYmVyIHNlbnQgYnkgdGhlIHNlcnZlci4gV2Ugc2hvdWxkIHRyeSB0byByZWNlaXZlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFsbCBvZiB0aGUgcmVzcG9uc2VzIHVwIHRvIHRoaXMgb25lIGJlZm9yZSBjbG9zaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm15UGFja2V0T3JkZXJlci5jbG9zZUFmdGVyKGFyZzEsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm9uQ2xvc2VkXygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm9uQ2xvc2VkXygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5yZWNvZ25pemVkIGNvbW1hbmQgcmVjZWl2ZWQ6ICcgKyBjb21tYW5kKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIF9hID0gX19yZWFkKGFyZ3MsIDIpLCBwTiA9IF9hWzBdLCBkYXRhID0gX2FbMV07XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5pbmNyZW1lbnRJbmNvbWluZ0J5dGVzXyhhcmdzKTtcclxuICAgICAgICAgICAgICAgIF90aGlzLm15UGFja2V0T3JkZXJlci5oYW5kbGVSZXNwb25zZShwTiwgZGF0YSk7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLm9uQ2xvc2VkXygpO1xyXG4gICAgICAgICAgICB9LCBfdGhpcy51cmxGbik7XHJcbiAgICAgICAgICAgIC8vU2VuZCB0aGUgaW5pdGlhbCByZXF1ZXN0IHRvIGNvbm5lY3QuIFRoZSBzZXJpYWwgbnVtYmVyIGlzIHNpbXBseSB0byBrZWVwIHRoZSBicm93c2VyIGZyb20gcHVsbGluZyBwcmV2aW91cyByZXN1bHRzXHJcbiAgICAgICAgICAgIC8vZnJvbSBjYWNoZS5cclxuICAgICAgICAgICAgdmFyIHVybFBhcmFtcyA9IHt9O1xyXG4gICAgICAgICAgICB1cmxQYXJhbXNbRklSRUJBU0VfTE9OR1BPTExfU1RBUlRfUEFSQU1dID0gJ3QnO1xyXG4gICAgICAgICAgICB1cmxQYXJhbXNbRklSRUJBU0VfTE9OR1BPTExfU0VSSUFMX1BBUkFNXSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDAwMCk7XHJcbiAgICAgICAgICAgIGlmIChfdGhpcy5zY3JpcHRUYWdIb2xkZXIudW5pcXVlQ2FsbGJhY2tJZGVudGlmaWVyKSB7XHJcbiAgICAgICAgICAgICAgICB1cmxQYXJhbXNbRklSRUJBU0VfTE9OR1BPTExfQ0FMTEJBQ0tfSURfUEFSQU1dID0gX3RoaXMuc2NyaXB0VGFnSG9sZGVyLnVuaXF1ZUNhbGxiYWNrSWRlbnRpZmllcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB1cmxQYXJhbXNbVkVSU0lPTl9QQVJBTV0gPSBQUk9UT0NPTF9WRVJTSU9OO1xyXG4gICAgICAgICAgICBpZiAoX3RoaXMudHJhbnNwb3J0U2Vzc2lvbklkKSB7XHJcbiAgICAgICAgICAgICAgICB1cmxQYXJhbXNbVFJBTlNQT1JUX1NFU1NJT05fUEFSQU1dID0gX3RoaXMudHJhbnNwb3J0U2Vzc2lvbklkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChfdGhpcy5sYXN0U2Vzc2lvbklkKSB7XHJcbiAgICAgICAgICAgICAgICB1cmxQYXJhbXNbTEFTVF9TRVNTSU9OX1BBUkFNXSA9IF90aGlzLmxhc3RTZXNzaW9uSWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKF90aGlzLmFwcGxpY2F0aW9uSWQpIHtcclxuICAgICAgICAgICAgICAgIHVybFBhcmFtc1tBUFBMSUNBVElPTl9JRF9QQVJBTV0gPSBfdGhpcy5hcHBsaWNhdGlvbklkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbG9jYXRpb24gIT09ICd1bmRlZmluZWQnICYmXHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbi5ocmVmICYmXHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbi5ocmVmLmluZGV4T2YoRk9SR0VfRE9NQUlOKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHVybFBhcmFtc1tSRUZFUkVSX1BBUkFNXSA9IEZPUkdFX1JFRjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgY29ubmVjdFVSTCA9IF90aGlzLnVybEZuKHVybFBhcmFtcyk7XHJcbiAgICAgICAgICAgIF90aGlzLmxvZ18oJ0Nvbm5lY3RpbmcgdmlhIGxvbmctcG9sbCB0byAnICsgY29ubmVjdFVSTCk7XHJcbiAgICAgICAgICAgIF90aGlzLnNjcmlwdFRhZ0hvbGRlci5hZGRUYWcoY29ubmVjdFVSTCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgLyogZG8gbm90aGluZyAqL1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIENhbGwgdGhpcyB3aGVuIGEgaGFuZHNoYWtlIGhhcyBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5IGFuZCB3ZSB3YW50IHRvIGNvbnNpZGVyIHRoZSBjb25uZWN0aW9uIGVzdGFibGlzaGVkXHJcbiAgICAgKi9cclxuICAgIEJyb3dzZXJQb2xsQ29ubmVjdGlvbi5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5zY3JpcHRUYWdIb2xkZXIuc3RhcnRMb25nUG9sbCh0aGlzLmlkLCB0aGlzLnBhc3N3b3JkKTtcclxuICAgICAgICB0aGlzLmFkZERpc2Nvbm5lY3RQaW5nRnJhbWUodGhpcy5pZCwgdGhpcy5wYXNzd29yZCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBGb3JjZXMgbG9uZyBwb2xsaW5nIHRvIGJlIGNvbnNpZGVyZWQgYXMgYSBwb3RlbnRpYWwgdHJhbnNwb3J0XHJcbiAgICAgKi9cclxuICAgIEJyb3dzZXJQb2xsQ29ubmVjdGlvbi5mb3JjZUFsbG93ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIEJyb3dzZXJQb2xsQ29ubmVjdGlvbi5mb3JjZUFsbG93XyA9IHRydWU7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBGb3JjZXMgbG9uZ3BvbGxpbmcgdG8gbm90IGJlIGNvbnNpZGVyZWQgYXMgYSBwb3RlbnRpYWwgdHJhbnNwb3J0XHJcbiAgICAgKi9cclxuICAgIEJyb3dzZXJQb2xsQ29ubmVjdGlvbi5mb3JjZURpc2FsbG93ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIEJyb3dzZXJQb2xsQ29ubmVjdGlvbi5mb3JjZURpc2FsbG93XyA9IHRydWU7XHJcbiAgICB9O1xyXG4gICAgLy8gU3RhdGljIG1ldGhvZCwgdXNlIHN0cmluZyBsaXRlcmFsIHNvIGl0IGNhbiBiZSBhY2Nlc3NlZCBpbiBhIGdlbmVyaWMgd2F5XHJcbiAgICBCcm93c2VyUG9sbENvbm5lY3Rpb24uaXNBdmFpbGFibGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKGlzTm9kZVNkaygpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoQnJvd3NlclBvbGxDb25uZWN0aW9uLmZvcmNlQWxsb3dfKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gTk9URTogSW4gUmVhY3QtTmF0aXZlIHRoZXJlJ3Mgbm9ybWFsbHkgbm8gJ2RvY3VtZW50JywgYnV0IGlmIHlvdSBkZWJ1ZyBhIFJlYWN0LU5hdGl2ZSBhcHAgaW5cclxuICAgICAgICAgICAgLy8gdGhlIENocm9tZSBkZWJ1Z2dlciwgJ2RvY3VtZW50JyBpcyBkZWZpbmVkLCBidXQgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyBudWxsICgyMDE1LzA2LzA4KS5cclxuICAgICAgICAgICAgcmV0dXJuICghQnJvd3NlclBvbGxDb25uZWN0aW9uLmZvcmNlRGlzYWxsb3dfICYmXHJcbiAgICAgICAgICAgICAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmXHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9IG51bGwgJiZcclxuICAgICAgICAgICAgICAgICFpc0Nocm9tZUV4dGVuc2lvbkNvbnRlbnRTY3JpcHQoKSAmJlxyXG4gICAgICAgICAgICAgICAgIWlzV2luZG93c1N0b3JlQXBwKCkpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIE5vLW9wIGZvciBwb2xsaW5nXHJcbiAgICAgKi9cclxuICAgIEJyb3dzZXJQb2xsQ29ubmVjdGlvbi5wcm90b3R5cGUubWFya0Nvbm5lY3Rpb25IZWFsdGh5ID0gZnVuY3Rpb24gKCkgeyB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTdG9wcyBwb2xsaW5nIGFuZCBjbGVhbnMgdXAgdGhlIGlmcmFtZVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgQnJvd3NlclBvbGxDb25uZWN0aW9uLnByb3RvdHlwZS5zaHV0ZG93bl8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5pc0Nsb3NlZF8gPSB0cnVlO1xyXG4gICAgICAgIGlmICh0aGlzLnNjcmlwdFRhZ0hvbGRlcikge1xyXG4gICAgICAgICAgICB0aGlzLnNjcmlwdFRhZ0hvbGRlci5jbG9zZSgpO1xyXG4gICAgICAgICAgICB0aGlzLnNjcmlwdFRhZ0hvbGRlciA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vcmVtb3ZlIHRoZSBkaXNjb25uZWN0IGZyYW1lLCB3aGljaCB3aWxsIHRyaWdnZXIgYW4gWEhSIGNhbGwgdG8gdGhlIHNlcnZlciB0byB0ZWxsIGl0IHdlJ3JlIGxlYXZpbmcuXHJcbiAgICAgICAgaWYgKHRoaXMubXlEaXNjb25uRnJhbWUpIHtcclxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0aGlzLm15RGlzY29ubkZyYW1lKTtcclxuICAgICAgICAgICAgdGhpcy5teURpc2Nvbm5GcmFtZSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3RUaW1lb3V0VGltZXJfKSB7XHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmNvbm5lY3RUaW1lb3V0VGltZXJfKTtcclxuICAgICAgICAgICAgdGhpcy5jb25uZWN0VGltZW91dFRpbWVyXyA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVHJpZ2dlcmVkIHdoZW4gdGhpcyB0cmFuc3BvcnQgaXMgY2xvc2VkXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBCcm93c2VyUG9sbENvbm5lY3Rpb24ucHJvdG90eXBlLm9uQ2xvc2VkXyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNDbG9zZWRfKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nXygnTG9uZ3BvbGwgaXMgY2xvc2luZyBpdHNlbGYnKTtcclxuICAgICAgICAgICAgdGhpcy5zaHV0ZG93bl8oKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMub25EaXNjb25uZWN0Xykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbkRpc2Nvbm5lY3RfKHRoaXMuZXZlckNvbm5lY3RlZF8pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbkRpc2Nvbm5lY3RfID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEV4dGVybmFsLWZhY2luZyBjbG9zZSBoYW5kbGVyLiBSZWFsVGltZSBoYXMgcmVxdWVzdGVkIHdlIHNodXQgZG93bi4gS2lsbCBvdXIgY29ubmVjdGlvbiBhbmQgdGVsbCB0aGUgc2VydmVyXHJcbiAgICAgKiB0aGF0IHdlJ3ZlIGxlZnQuXHJcbiAgICAgKi9cclxuICAgIEJyb3dzZXJQb2xsQ29ubmVjdGlvbi5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzQ2xvc2VkXykge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ18oJ0xvbmdwb2xsIGlzIGJlaW5nIGNsb3NlZC4nKTtcclxuICAgICAgICAgICAgdGhpcy5zaHV0ZG93bl8oKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIHRoZSBKU09OIG9iamVjdCBkb3duIHRvIHRoZSBzZXJ2ZXIuIEl0IHdpbGwgbmVlZCB0byBiZSBzdHJpbmdpZmllZCwgYmFzZTY0IGVuY29kZWQsIGFuZCB0aGVuXHJcbiAgICAgKiBicm9rZW4gaW50byBjaHVua3MgKHNpbmNlIFVSTHMgaGF2ZSBhIHNtYWxsIG1heGltdW0gbGVuZ3RoKS5cclxuICAgICAqIEBwYXJhbSB7IU9iamVjdH0gZGF0YSBUaGUgSlNPTiBkYXRhIHRvIHRyYW5zbWl0LlxyXG4gICAgICovXHJcbiAgICBCcm93c2VyUG9sbENvbm5lY3Rpb24ucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIHZhciBkYXRhU3RyID0gc3RyaW5naWZ5KGRhdGEpO1xyXG4gICAgICAgIHRoaXMuYnl0ZXNTZW50ICs9IGRhdGFTdHIubGVuZ3RoO1xyXG4gICAgICAgIHRoaXMuc3RhdHNfLmluY3JlbWVudENvdW50ZXIoJ2J5dGVzX3NlbnQnLCBkYXRhU3RyLmxlbmd0aCk7XHJcbiAgICAgICAgLy9maXJzdCwgbGV0cyBnZXQgdGhlIGJhc2U2NC1lbmNvZGVkIGRhdGFcclxuICAgICAgICB2YXIgYmFzZTY0ZGF0YSA9IGJhc2U2NEVuY29kZShkYXRhU3RyKTtcclxuICAgICAgICAvL1dlIGNhbiBvbmx5IGZpdCBhIGNlcnRhaW4gYW1vdW50IGluIGVhY2ggVVJMLCBzbyB3ZSBuZWVkIHRvIHNwbGl0IHRoaXMgcmVxdWVzdFxyXG4gICAgICAgIC8vdXAgaW50byBtdWx0aXBsZSBwaWVjZXMgaWYgaXQgZG9lc24ndCBmaXQgaW4gb25lIHJlcXVlc3QuXHJcbiAgICAgICAgdmFyIGRhdGFTZWdzID0gc3BsaXRTdHJpbmdCeVNpemUoYmFzZTY0ZGF0YSwgTUFYX1BBWUxPQURfU0laRSk7XHJcbiAgICAgICAgLy9FbnF1ZXVlIGVhY2ggc2VnbWVudCBmb3IgdHJhbnNtaXNzaW9uLiBXZSBhc3NpZ24gZWFjaCBjaHVuayBhIHNlcXVlbnRpYWwgSUQgYW5kIGEgdG90YWwgbnVtYmVyXHJcbiAgICAgICAgLy9vZiBzZWdtZW50cyBzbyB0aGF0IHdlIGNhbiByZWFzc2VtYmxlIHRoZSBwYWNrZXQgb24gdGhlIHNlcnZlci5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGFTZWdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2NyaXB0VGFnSG9sZGVyLmVucXVldWVTZWdtZW50KHRoaXMuY3VyU2VnbWVudE51bSwgZGF0YVNlZ3MubGVuZ3RoLCBkYXRhU2Vnc1tpXSk7XHJcbiAgICAgICAgICAgIHRoaXMuY3VyU2VnbWVudE51bSsrO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgaXMgaG93IHdlIG5vdGlmeSB0aGUgc2VydmVyIHRoYXQgd2UncmUgbGVhdmluZy5cclxuICAgICAqIFdlIGFyZW4ndCBhYmxlIHRvIHNlbmQgcmVxdWVzdHMgd2l0aCBESFRNTCBvbiBhIHdpbmRvdyBjbG9zZSBldmVudCwgYnV0IHdlIGNhblxyXG4gICAgICogdHJpZ2dlciBYSFIgcmVxdWVzdHMgaW4gc29tZSBicm93c2VycyAoZXZlcnl0aGluZyBidXQgT3BlcmEgYmFzaWNhbGx5KS5cclxuICAgICAqIEBwYXJhbSB7IXN0cmluZ30gaWRcclxuICAgICAqIEBwYXJhbSB7IXN0cmluZ30gcHdcclxuICAgICAqL1xyXG4gICAgQnJvd3NlclBvbGxDb25uZWN0aW9uLnByb3RvdHlwZS5hZGREaXNjb25uZWN0UGluZ0ZyYW1lID0gZnVuY3Rpb24gKGlkLCBwdykge1xyXG4gICAgICAgIGlmIChpc05vZGVTZGsoKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubXlEaXNjb25uRnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcclxuICAgICAgICB2YXIgdXJsUGFyYW1zID0ge307XHJcbiAgICAgICAgdXJsUGFyYW1zW0ZJUkVCQVNFX0xPTkdQT0xMX0RJU0NPTk5fRlJBTUVfUkVRVUVTVF9QQVJBTV0gPSAndCc7XHJcbiAgICAgICAgdXJsUGFyYW1zW0ZJUkVCQVNFX0xPTkdQT0xMX0lEX1BBUkFNXSA9IGlkO1xyXG4gICAgICAgIHVybFBhcmFtc1tGSVJFQkFTRV9MT05HUE9MTF9QV19QQVJBTV0gPSBwdztcclxuICAgICAgICB0aGlzLm15RGlzY29ubkZyYW1lLnNyYyA9IHRoaXMudXJsRm4odXJsUGFyYW1zKTtcclxuICAgICAgICB0aGlzLm15RGlzY29ubkZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLm15RGlzY29ubkZyYW1lKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFVzZWQgdG8gdHJhY2sgdGhlIGJ5dGVzIHJlY2VpdmVkIGJ5IHRoaXMgY2xpZW50XHJcbiAgICAgKiBAcGFyYW0geyp9IGFyZ3NcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIEJyb3dzZXJQb2xsQ29ubmVjdGlvbi5wcm90b3R5cGUuaW5jcmVtZW50SW5jb21pbmdCeXRlc18gPSBmdW5jdGlvbiAoYXJncykge1xyXG4gICAgICAgIC8vIFRPRE86IFRoaXMgaXMgYW4gYW5ub3lpbmcgcGVyZiBoaXQganVzdCB0byB0cmFjayB0aGUgbnVtYmVyIG9mIGluY29taW5nIGJ5dGVzLiAgTWF5YmUgaXQgc2hvdWxkIGJlIG9wdC1pbi5cclxuICAgICAgICB2YXIgYnl0ZXNSZWNlaXZlZCA9IHN0cmluZ2lmeShhcmdzKS5sZW5ndGg7XHJcbiAgICAgICAgdGhpcy5ieXRlc1JlY2VpdmVkICs9IGJ5dGVzUmVjZWl2ZWQ7XHJcbiAgICAgICAgdGhpcy5zdGF0c18uaW5jcmVtZW50Q291bnRlcignYnl0ZXNfcmVjZWl2ZWQnLCBieXRlc1JlY2VpdmVkKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gQnJvd3NlclBvbGxDb25uZWN0aW9uO1xyXG59KCkpO1xyXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqIEEgd3JhcHBlciBhcm91bmQgYW4gaWZyYW1lIHRoYXQgaXMgdXNlZCBhcyBhIGxvbmctcG9sbGluZyBzY3JpcHQgaG9sZGVyLlxyXG4gKiBAY29uc3RydWN0b3JcclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxudmFyIEZpcmViYXNlSUZyYW1lU2NyaXB0SG9sZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gY29tbWFuZENCIC0gVGhlIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCB3aGVuIGNvbnRyb2wgY29tbWFuZHMgYXJlIHJlY2V2aWVkIGZyb20gdGhlIHNlcnZlci5cclxuICAgICAqIEBwYXJhbSBvbk1lc3NhZ2VDQiAtIFRoZSBjYWxsYmFjayB0byBiZSB0cmlnZ2VyZWQgd2hlbiByZXNwb25zZXMgYXJyaXZlIGZyb20gdGhlIHNlcnZlci5cclxuICAgICAqIEBwYXJhbSBvbkRpc2Nvbm5lY3QgLSBUaGUgY2FsbGJhY2sgdG8gYmUgdHJpZ2dlcmVkIHdoZW4gdGhpcyB0YWcgaG9sZGVyIGlzIGNsb3NlZFxyXG4gICAgICogQHBhcmFtIHVybEZuIC0gQSBmdW5jdGlvbiB0aGF0IHByb3ZpZGVzIHRoZSBVUkwgb2YgdGhlIGVuZHBvaW50IHRvIHNlbmQgZGF0YSB0by5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gRmlyZWJhc2VJRnJhbWVTY3JpcHRIb2xkZXIoY29tbWFuZENCLCBvbk1lc3NhZ2VDQiwgb25EaXNjb25uZWN0LCB1cmxGbikge1xyXG4gICAgICAgIHRoaXMub25EaXNjb25uZWN0ID0gb25EaXNjb25uZWN0O1xyXG4gICAgICAgIHRoaXMudXJsRm4gPSB1cmxGbjtcclxuICAgICAgICAvL1dlIG1haW50YWluIGEgY291bnQgb2YgYWxsIG9mIHRoZSBvdXRzdGFuZGluZyByZXF1ZXN0cywgYmVjYXVzZSBpZiB3ZSBoYXZlIHRvbyBtYW55IGFjdGl2ZSBhdCBvbmNlIGl0IGNhbiBjYXVzZVxyXG4gICAgICAgIC8vcHJvYmxlbXMgaW4gc29tZSBicm93c2Vycy5cclxuICAgICAgICB0aGlzLm91dHN0YW5kaW5nUmVxdWVzdHMgPSBuZXcgU2V0KCk7XHJcbiAgICAgICAgLy9BIHF1ZXVlIG9mIHRoZSBwZW5kaW5nIHNlZ21lbnRzIHdhaXRpbmcgZm9yIHRyYW5zbWlzc2lvbiB0byB0aGUgc2VydmVyLlxyXG4gICAgICAgIHRoaXMucGVuZGluZ1NlZ3MgPSBbXTtcclxuICAgICAgICAvL0Egc2VyaWFsIG51bWJlci4gV2UgdXNlIHRoaXMgZm9yIHR3byB0aGluZ3M6XHJcbiAgICAgICAgLy8gMSkgQSB3YXkgdG8gZW5zdXJlIHRoZSBicm93c2VyIGRvZXNuJ3QgY2FjaGUgcmVzcG9uc2VzIHRvIHBvbGxzXHJcbiAgICAgICAgLy8gMikgQSB3YXkgdG8gbWFrZSB0aGUgc2VydmVyIGF3YXJlIHdoZW4gbG9uZy1wb2xscyBhcnJpdmUgaW4gYSBkaWZmZXJlbnQgb3JkZXIgdGhhbiB3ZSBzdGFydGVkIHRoZW0uIFRoZVxyXG4gICAgICAgIC8vICAgIHNlcnZlciBuZWVkcyB0byByZWxlYXNlIGJvdGggcG9sbHMgaW4gdGhpcyBjYXNlIG9yIGl0IHdpbGwgY2F1c2UgcHJvYmxlbXMgaW4gT3BlcmEgc2luY2UgT3BlcmEgY2FuIG9ubHkgZXhlY3V0ZVxyXG4gICAgICAgIC8vICAgIEpTT05QIGNvZGUgaW4gdGhlIG9yZGVyIGl0IHdhcyBhZGRlZCB0byB0aGUgaWZyYW1lLlxyXG4gICAgICAgIHRoaXMuY3VycmVudFNlcmlhbCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDAwMCk7XHJcbiAgICAgICAgLy8gVGhpcyBnZXRzIHNldCB0byBmYWxzZSB3aGVuIHdlJ3JlIFwiY2xvc2luZyBkb3duXCIgdGhlIGNvbm5lY3Rpb24gKGUuZy4gd2UncmUgc3dpdGNoaW5nIHRyYW5zcG9ydHMgYnV0IHRoZXJlJ3Mgc3RpbGxcclxuICAgICAgICAvLyBpbmNvbWluZyBkYXRhIGZyb20gdGhlIHNlcnZlciB0aGF0IHdlJ3JlIHdhaXRpbmcgZm9yKS5cclxuICAgICAgICB0aGlzLnNlbmROZXdQb2xscyA9IHRydWU7XHJcbiAgICAgICAgaWYgKCFpc05vZGVTZGsoKSkge1xyXG4gICAgICAgICAgICAvL0VhY2ggc2NyaXB0IGhvbGRlciByZWdpc3RlcnMgYSBjb3VwbGUgb2YgdW5pcXVlbHkgbmFtZWQgY2FsbGJhY2tzIHdpdGggdGhlIHdpbmRvdy4gVGhlc2UgYXJlIGNhbGxlZCBmcm9tIHRoZVxyXG4gICAgICAgICAgICAvL2lmcmFtZXMgd2hlcmUgd2UgcHV0IHRoZSBsb25nLXBvbGxpbmcgc2NyaXB0IHRhZ3MuIFdlIGhhdmUgdHdvIGNhbGxiYWNrczpcclxuICAgICAgICAgICAgLy8gICAxKSBDb21tYW5kIENhbGxiYWNrIC0gVHJpZ2dlcmVkIGZvciBjb250cm9sIGlzc3VlcywgbGlrZSBzdGFydGluZyBhIGNvbm5lY3Rpb24uXHJcbiAgICAgICAgICAgIC8vICAgMikgTWVzc2FnZSBDYWxsYmFjayAtIFRyaWdnZXJlZCB3aGVuIG5ldyBkYXRhIGFycml2ZXMuXHJcbiAgICAgICAgICAgIHRoaXMudW5pcXVlQ2FsbGJhY2tJZGVudGlmaWVyID0gTFVJREdlbmVyYXRvcigpO1xyXG4gICAgICAgICAgICB3aW5kb3dbRklSRUJBU0VfTE9OR1BPTExfQ09NTUFORF9DQl9OQU1FICsgdGhpcy51bmlxdWVDYWxsYmFja0lkZW50aWZpZXJdID0gY29tbWFuZENCO1xyXG4gICAgICAgICAgICB3aW5kb3dbRklSRUJBU0VfTE9OR1BPTExfREFUQV9DQl9OQU1FICsgdGhpcy51bmlxdWVDYWxsYmFja0lkZW50aWZpZXJdID0gb25NZXNzYWdlQ0I7XHJcbiAgICAgICAgICAgIC8vQ3JlYXRlIGFuIGlmcmFtZSBmb3IgdXMgdG8gYWRkIHNjcmlwdCB0YWdzIHRvLlxyXG4gICAgICAgICAgICB0aGlzLm15SUZyYW1lID0gRmlyZWJhc2VJRnJhbWVTY3JpcHRIb2xkZXIuY3JlYXRlSUZyYW1lXygpO1xyXG4gICAgICAgICAgICAvLyBTZXQgdGhlIGlmcmFtZSdzIGNvbnRlbnRzLlxyXG4gICAgICAgICAgICB2YXIgc2NyaXB0ID0gJyc7XHJcbiAgICAgICAgICAgIC8vIGlmIHdlIHNldCBhIGphdmFzY3JpcHQgdXJsLCBpdCdzIElFIGFuZCB3ZSBuZWVkIHRvIHNldCB0aGUgZG9jdW1lbnQgZG9tYWluLiBUaGUgamF2YXNjcmlwdCB1cmwgaXMgc3VmZmljaWVudFxyXG4gICAgICAgICAgICAvLyBmb3IgaWU5LCBidXQgaWU4IG5lZWRzIHRvIGRvIGl0IGFnYWluIGluIHRoZSBkb2N1bWVudCBpdHNlbGYuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm15SUZyYW1lLnNyYyAmJlxyXG4gICAgICAgICAgICAgICAgdGhpcy5teUlGcmFtZS5zcmMuc3Vic3RyKDAsICdqYXZhc2NyaXB0OicubGVuZ3RoKSA9PT0gJ2phdmFzY3JpcHQ6Jykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnREb21haW4gPSBkb2N1bWVudC5kb21haW47XHJcbiAgICAgICAgICAgICAgICBzY3JpcHQgPSAnPHNjcmlwdD5kb2N1bWVudC5kb21haW49XCInICsgY3VycmVudERvbWFpbiArICdcIjs8L3NjcmlwdD4nO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBpZnJhbWVDb250ZW50cyA9ICc8aHRtbD48Ym9keT4nICsgc2NyaXB0ICsgJzwvYm9keT48L2h0bWw+JztcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHRoaXMubXlJRnJhbWUuZG9jLm9wZW4oKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubXlJRnJhbWUuZG9jLndyaXRlKGlmcmFtZUNvbnRlbnRzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubXlJRnJhbWUuZG9jLmNsb3NlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIGxvZygnZnJhbWUgd3JpdGluZyBleGNlcHRpb24nKTtcclxuICAgICAgICAgICAgICAgIGlmIChlLnN0YWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9nKGUuc3RhY2spO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbG9nKGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmNvbW1hbmRDQiA9IGNvbW1hbmRDQjtcclxuICAgICAgICAgICAgdGhpcy5vbk1lc3NhZ2VDQiA9IG9uTWVzc2FnZUNCO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRWFjaCBicm93c2VyIGhhcyBpdHMgb3duIGZ1bm55IHdheSB0byBoYW5kbGUgaWZyYW1lcy4gSGVyZSB3ZSBtdXNoIHRoZW0gYWxsIHRvZ2V0aGVyIGludG8gb25lIG9iamVjdCB0aGF0IEkgY2FuXHJcbiAgICAgKiBhY3R1YWxseSB1c2UuXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQHJldHVybiB7RWxlbWVudH1cclxuICAgICAqL1xyXG4gICAgRmlyZWJhc2VJRnJhbWVTY3JpcHRIb2xkZXIuY3JlYXRlSUZyYW1lXyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XHJcbiAgICAgICAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgLy8gVGhpcyBpcyBuZWNlc3NhcnkgaW4gb3JkZXIgdG8gaW5pdGlhbGl6ZSB0aGUgZG9jdW1lbnQgaW5zaWRlIHRoZSBpZnJhbWVcclxuICAgICAgICBpZiAoZG9jdW1lbnQuYm9keSkge1xyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGlmcmFtZSk7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJZiBkb2N1bWVudC5kb21haW4gaGFzIGJlZW4gbW9kaWZpZWQgaW4gSUUsIHRoaXMgd2lsbCB0aHJvdyBhbiBlcnJvciwgYW5kIHdlIG5lZWQgdG8gc2V0IHRoZVxyXG4gICAgICAgICAgICAgICAgLy8gZG9tYWluIG9mIHRoZSBpZnJhbWUncyBkb2N1bWVudCBtYW51YWxseS4gV2UgY2FuIGRvIHRoaXMgdmlhIGEgamF2YXNjcmlwdDogdXJsIGFzIHRoZSBzcmMgYXR0cmlidXRlXHJcbiAgICAgICAgICAgICAgICAvLyBBbHNvIG5vdGUgdGhhdCB3ZSBtdXN0IGRvIHRoaXMgKmFmdGVyKiB0aGUgaWZyYW1lIGhhcyBiZWVuIGFwcGVuZGVkIHRvIHRoZSBwYWdlLiBPdGhlcndpc2UgaXQgZG9lc24ndCB3b3JrLlxyXG4gICAgICAgICAgICAgICAgdmFyIGEgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcclxuICAgICAgICAgICAgICAgIGlmICghYSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEFwb2xvZ2llcyBmb3IgdGhlIGxvZy1zcGFtLCBJIG5lZWQgdG8gZG8gc29tZXRoaW5nIHRvIGtlZXAgY2xvc3VyZSBmcm9tIG9wdGltaXppbmcgb3V0IHRoZSBhc3NpZ25tZW50IGFib3ZlLlxyXG4gICAgICAgICAgICAgICAgICAgIGxvZygnTm8gSUUgZG9tYWluIHNldHRpbmcgcmVxdWlyZWQnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGRvbWFpbiA9IGRvY3VtZW50LmRvbWFpbjtcclxuICAgICAgICAgICAgICAgIGlmcmFtZS5zcmMgPVxyXG4gICAgICAgICAgICAgICAgICAgIFwiamF2YXNjcmlwdDp2b2lkKChmdW5jdGlvbigpe2RvY3VtZW50Lm9wZW4oKTtkb2N1bWVudC5kb21haW49J1wiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZG9tYWluICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCInO2RvY3VtZW50LmNsb3NlKCk7fSkoKSlcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gTG9uZ1BvbGxDb25uZWN0aW9uIGF0dGVtcHRzIHRvIGRlbGF5IGluaXRpYWxpemF0aW9uIHVudGlsIHRoZSBkb2N1bWVudCBpcyByZWFkeSwgc28gaG9wZWZ1bGx5IHRoaXNcclxuICAgICAgICAgICAgLy8gbmV2ZXIgZ2V0cyBoaXQuXHJcbiAgICAgICAgICAgIHRocm93ICdEb2N1bWVudCBib2R5IGhhcyBub3QgaW5pdGlhbGl6ZWQuIFdhaXQgdG8gaW5pdGlhbGl6ZSBGaXJlYmFzZSB1bnRpbCBhZnRlciB0aGUgZG9jdW1lbnQgaXMgcmVhZHkuJztcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gR2V0IHRoZSBkb2N1bWVudCBvZiB0aGUgaWZyYW1lIGluIGEgYnJvd3Nlci1zcGVjaWZpYyB3YXkuXHJcbiAgICAgICAgaWYgKGlmcmFtZS5jb250ZW50RG9jdW1lbnQpIHtcclxuICAgICAgICAgICAgaWZyYW1lLmRvYyA9IGlmcmFtZS5jb250ZW50RG9jdW1lbnQ7IC8vIEZpcmVmb3gsIE9wZXJhLCBTYWZhcmlcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaWZyYW1lLmNvbnRlbnRXaW5kb3cpIHtcclxuICAgICAgICAgICAgaWZyYW1lLmRvYyA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50OyAvLyBJbnRlcm5ldCBFeHBsb3JlclxyXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChpZnJhbWUuZG9jdW1lbnQpIHtcclxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgICAgICAgICAgaWZyYW1lLmRvYyA9IGlmcmFtZS5kb2N1bWVudDsgLy9vdGhlcnM/XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpZnJhbWU7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDYW5jZWwgYWxsIG91dHN0YW5kaW5nIHF1ZXJpZXMgYW5kIHJlbW92ZSB0aGUgZnJhbWUuXHJcbiAgICAgKi9cclxuICAgIEZpcmViYXNlSUZyYW1lU2NyaXB0SG9sZGVyLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIC8vTWFyayB0aGlzIGlmcmFtZSBhcyBkZWFkLCBzbyBubyBuZXcgcmVxdWVzdHMgYXJlIHNlbnQuXHJcbiAgICAgICAgdGhpcy5hbGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIGlmICh0aGlzLm15SUZyYW1lKSB7XHJcbiAgICAgICAgICAgIC8vV2UgaGF2ZSB0byBhY3R1YWxseSByZW1vdmUgYWxsIG9mIHRoZSBodG1sIGluc2lkZSB0aGlzIGlmcmFtZSBiZWZvcmUgcmVtb3ZpbmcgaXQgZnJvbSB0aGVcclxuICAgICAgICAgICAgLy93aW5kb3csIG9yIElFIHdpbGwgY29udGludWUgbG9hZGluZyBhbmQgZXhlY3V0aW5nIHRoZSBzY3JpcHQgdGFncyB3ZSd2ZSBhbHJlYWR5IGFkZGVkLCB3aGljaFxyXG4gICAgICAgICAgICAvL2NhbiBsZWFkIHRvIHNvbWUgZXJyb3JzIGJlaW5nIHRocm93bi4gU2V0dGluZyBpbm5lckhUTUwgc2VlbXMgdG8gYmUgdGhlIGVhc2llc3Qgd2F5IHRvIGRvIHRoaXMuXHJcbiAgICAgICAgICAgIHRoaXMubXlJRnJhbWUuZG9jLmJvZHkuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLm15SUZyYW1lICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChfdGhpcy5teUlGcmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMubXlJRnJhbWUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCBNYXRoLmZsb29yKDApKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gUHJvdGVjdCBmcm9tIGJlaW5nIGNhbGxlZCByZWN1cnNpdmVseS5cclxuICAgICAgICB2YXIgb25EaXNjb25uZWN0ID0gdGhpcy5vbkRpc2Nvbm5lY3Q7XHJcbiAgICAgICAgaWYgKG9uRGlzY29ubmVjdCkge1xyXG4gICAgICAgICAgICB0aGlzLm9uRGlzY29ubmVjdCA9IG51bGw7XHJcbiAgICAgICAgICAgIG9uRGlzY29ubmVjdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEFjdHVhbGx5IHN0YXJ0IHRoZSBsb25nLXBvbGxpbmcgc2Vzc2lvbiBieSBhZGRpbmcgdGhlIGZpcnN0IHNjcmlwdCB0YWcocykgdG8gdGhlIGlmcmFtZS5cclxuICAgICAqIEBwYXJhbSB7IXN0cmluZ30gaWQgLSBUaGUgSUQgb2YgdGhpcyBjb25uZWN0aW9uXHJcbiAgICAgKiBAcGFyYW0geyFzdHJpbmd9IHB3IC0gVGhlIHBhc3N3b3JkIGZvciB0aGlzIGNvbm5lY3Rpb25cclxuICAgICAqL1xyXG4gICAgRmlyZWJhc2VJRnJhbWVTY3JpcHRIb2xkZXIucHJvdG90eXBlLnN0YXJ0TG9uZ1BvbGwgPSBmdW5jdGlvbiAoaWQsIHB3KSB7XHJcbiAgICAgICAgdGhpcy5teUlEID0gaWQ7XHJcbiAgICAgICAgdGhpcy5teVBXID0gcHc7XHJcbiAgICAgICAgdGhpcy5hbGl2ZSA9IHRydWU7XHJcbiAgICAgICAgLy9zZW5kIHRoZSBpbml0aWFsIHJlcXVlc3QuIElmIHRoZXJlIGFyZSByZXF1ZXN0cyBxdWV1ZWQsIG1ha2Ugc3VyZSB0aGF0IHdlIHRyYW5zbWl0IGFzIG1hbnkgYXMgd2UgYXJlIGN1cnJlbnRseSBhYmxlIHRvLlxyXG4gICAgICAgIHdoaWxlICh0aGlzLm5ld1JlcXVlc3RfKCkpIHsgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBpcyBjYWxsZWQgYW55IHRpbWUgc29tZW9uZSBtaWdodCB3YW50IGEgc2NyaXB0IHRhZyB0byBiZSBhZGRlZC4gSXQgYWRkcyBhIHNjcmlwdCB0YWcgd2hlbiB0aGVyZSBhcmVuJ3RcclxuICAgICAqIHRvbyBtYW55IG91dHN0YW5kaW5nIHJlcXVlc3RzIGFuZCB3ZSBhcmUgc3RpbGwgYWxpdmUuXHJcbiAgICAgKlxyXG4gICAgICogSWYgdGhlcmUgYXJlIG91dHN0YW5kaW5nIHBhY2tldCBzZWdtZW50cyB0byBzZW5kLCBpdCBzZW5kcyBvbmUuIElmIHRoZXJlIGFyZW4ndCwgaXQgc2VuZHMgYSBsb25nLXBvbGwgYW55d2F5cyBpZlxyXG4gICAgICogbmVlZGVkLlxyXG4gICAgICovXHJcbiAgICBGaXJlYmFzZUlGcmFtZVNjcmlwdEhvbGRlci5wcm90b3R5cGUubmV3UmVxdWVzdF8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gV2Uga2VlcCBvbmUgb3V0c3RhbmRpbmcgcmVxdWVzdCBvcGVuIGFsbCB0aGUgdGltZSB0byByZWNlaXZlIGRhdGEsIGJ1dCBpZiB3ZSBuZWVkIHRvIHNlbmQgZGF0YVxyXG4gICAgICAgIC8vIChwZW5kaW5nU2Vncy5sZW5ndGggPiAwKSB0aGVuIHdlIGNyZWF0ZSBhIG5ldyByZXF1ZXN0IHRvIHNlbmQgdGhlIGRhdGEuICBUaGUgc2VydmVyIHdpbGwgYXV0b21hdGljYWxseVxyXG4gICAgICAgIC8vIGNsb3NlIHRoZSBvbGQgcmVxdWVzdC5cclxuICAgICAgICBpZiAodGhpcy5hbGl2ZSAmJlxyXG4gICAgICAgICAgICB0aGlzLnNlbmROZXdQb2xscyAmJlxyXG4gICAgICAgICAgICB0aGlzLm91dHN0YW5kaW5nUmVxdWVzdHMuc2l6ZSA8ICh0aGlzLnBlbmRpbmdTZWdzLmxlbmd0aCA+IDAgPyAyIDogMSkpIHtcclxuICAgICAgICAgICAgLy9jb25zdHJ1Y3Qgb3VyIHVybFxyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRTZXJpYWwrKztcclxuICAgICAgICAgICAgdmFyIHVybFBhcmFtcyA9IHt9O1xyXG4gICAgICAgICAgICB1cmxQYXJhbXNbRklSRUJBU0VfTE9OR1BPTExfSURfUEFSQU1dID0gdGhpcy5teUlEO1xyXG4gICAgICAgICAgICB1cmxQYXJhbXNbRklSRUJBU0VfTE9OR1BPTExfUFdfUEFSQU1dID0gdGhpcy5teVBXO1xyXG4gICAgICAgICAgICB1cmxQYXJhbXNbRklSRUJBU0VfTE9OR1BPTExfU0VSSUFMX1BBUkFNXSA9IHRoaXMuY3VycmVudFNlcmlhbDtcclxuICAgICAgICAgICAgdmFyIHRoZVVSTCA9IHRoaXMudXJsRm4odXJsUGFyYW1zKTtcclxuICAgICAgICAgICAgLy9Ob3cgYWRkIGFzIG11Y2ggZGF0YSBhcyB3ZSBjYW4uXHJcbiAgICAgICAgICAgIHZhciBjdXJEYXRhU3RyaW5nID0gJyc7XHJcbiAgICAgICAgICAgIHZhciBpID0gMDtcclxuICAgICAgICAgICAgd2hpbGUgKHRoaXMucGVuZGluZ1NlZ3MubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgLy9maXJzdCwgbGV0cyBzZWUgaWYgdGhlIG5leHQgc2VnbWVudCB3aWxsIGZpdC5cclxuICAgICAgICAgICAgICAgIHZhciBuZXh0U2VnID0gdGhpcy5wZW5kaW5nU2Vnc1swXTtcclxuICAgICAgICAgICAgICAgIGlmIChuZXh0U2VnLmQubGVuZ3RoICtcclxuICAgICAgICAgICAgICAgICAgICBTRUdfSEVBREVSX1NJWkUgK1xyXG4gICAgICAgICAgICAgICAgICAgIGN1ckRhdGFTdHJpbmcubGVuZ3RoIDw9XHJcbiAgICAgICAgICAgICAgICAgICAgTUFYX1VSTF9EQVRBX1NJWkUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL2dyZWF0LCB0aGUgc2VnbWVudCB3aWxsIGZpdC4gTGV0cyBhcHBlbmQgaXQuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoZVNlZyA9IHRoaXMucGVuZGluZ1NlZ3Muc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBjdXJEYXRhU3RyaW5nID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyRGF0YVN0cmluZyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRklSRUJBU0VfTE9OR1BPTExfU0VHTUVOVF9OVU1fUEFSQU0gK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPScgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlU2VnLnNlZyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRklSRUJBU0VfTE9OR1BPTExfU0VHTUVOVFNfSU5fUEFDS0VUICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJz0nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZVNlZy50cyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRklSRUJBU0VfTE9OR1BPTExfREFUQV9QQVJBTSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc9JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGVTZWcuZDtcclxuICAgICAgICAgICAgICAgICAgICBpKys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGVVUkwgPSB0aGVVUkwgKyBjdXJEYXRhU3RyaW5nO1xyXG4gICAgICAgICAgICB0aGlzLmFkZExvbmdQb2xsVGFnXyh0aGVVUkwsIHRoaXMuY3VycmVudFNlcmlhbCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFF1ZXVlIGEgcGFja2V0IGZvciB0cmFuc21pc3Npb24gdG8gdGhlIHNlcnZlci5cclxuICAgICAqIEBwYXJhbSBzZWdudW0gLSBBIHNlcXVlbnRpYWwgaWQgZm9yIHRoaXMgcGFja2V0IHNlZ21lbnQgdXNlZCBmb3IgcmVhc3NlbWJseVxyXG4gICAgICogQHBhcmFtIHRvdGFsc2VncyAtIFRoZSB0b3RhbCBudW1iZXIgb2Ygc2VnbWVudHMgaW4gdGhpcyBwYWNrZXRcclxuICAgICAqIEBwYXJhbSBkYXRhIC0gVGhlIGRhdGEgZm9yIHRoaXMgc2VnbWVudC5cclxuICAgICAqL1xyXG4gICAgRmlyZWJhc2VJRnJhbWVTY3JpcHRIb2xkZXIucHJvdG90eXBlLmVucXVldWVTZWdtZW50ID0gZnVuY3Rpb24gKHNlZ251bSwgdG90YWxzZWdzLCBkYXRhKSB7XHJcbiAgICAgICAgLy9hZGQgdGhpcyB0byB0aGUgcXVldWUgb2Ygc2VnbWVudHMgdG8gc2VuZC5cclxuICAgICAgICB0aGlzLnBlbmRpbmdTZWdzLnB1c2goeyBzZWc6IHNlZ251bSwgdHM6IHRvdGFsc2VncywgZDogZGF0YSB9KTtcclxuICAgICAgICAvL3NlbmQgdGhlIGRhdGEgaW1tZWRpYXRlbHkgaWYgdGhlcmUgaXNuJ3QgYWxyZWFkeSBkYXRhIGJlaW5nIHRyYW5zbWl0dGVkLCB1bmxlc3NcclxuICAgICAgICAvL3N0YXJ0TG9uZ1BvbGwgaGFzbid0IGJlZW4gY2FsbGVkIHlldC5cclxuICAgICAgICBpZiAodGhpcy5hbGl2ZSkge1xyXG4gICAgICAgICAgICB0aGlzLm5ld1JlcXVlc3RfKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQWRkIGEgc2NyaXB0IHRhZyBmb3IgYSByZWd1bGFyIGxvbmctcG9sbCByZXF1ZXN0LlxyXG4gICAgICogQHBhcmFtIHshc3RyaW5nfSB1cmwgLSBUaGUgVVJMIG9mIHRoZSBzY3JpcHQgdGFnLlxyXG4gICAgICogQHBhcmFtIHshbnVtYmVyfSBzZXJpYWwgLSBUaGUgc2VyaWFsIG51bWJlciBvZiB0aGUgcmVxdWVzdC5cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIEZpcmViYXNlSUZyYW1lU2NyaXB0SG9sZGVyLnByb3RvdHlwZS5hZGRMb25nUG9sbFRhZ18gPSBmdW5jdGlvbiAodXJsLCBzZXJpYWwpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIC8vcmVtZW1iZXIgdGhhdCB3ZSBzZW50IHRoaXMgcmVxdWVzdC5cclxuICAgICAgICB0aGlzLm91dHN0YW5kaW5nUmVxdWVzdHMuYWRkKHNlcmlhbCk7XHJcbiAgICAgICAgdmFyIGRvTmV3UmVxdWVzdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMub3V0c3RhbmRpbmdSZXF1ZXN0cy5kZWxldGUoc2VyaWFsKTtcclxuICAgICAgICAgICAgX3RoaXMubmV3UmVxdWVzdF8oKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIElmIHRoaXMgcmVxdWVzdCBkb2Vzbid0IHJldHVybiBvbiBpdHMgb3duIGFjY29yZCAoYnkgdGhlIHNlcnZlciBzZW5kaW5nIHVzIHNvbWUgZGF0YSksIHdlJ2xsXHJcbiAgICAgICAgLy8gY3JlYXRlIGEgbmV3IG9uZSBhZnRlciB0aGUgS0VFUEFMSVZFIGludGVydmFsIHRvIG1ha2Ugc3VyZSB3ZSBhbHdheXMga2VlcCBhIGZyZXNoIHJlcXVlc3Qgb3Blbi5cclxuICAgICAgICB2YXIga2VlcGFsaXZlVGltZW91dCA9IHNldFRpbWVvdXQoZG9OZXdSZXF1ZXN0LCBNYXRoLmZsb29yKEtFRVBBTElWRV9SRVFVRVNUX0lOVEVSVkFMKSk7XHJcbiAgICAgICAgdmFyIHJlYWR5U3RhdGVDQiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLy8gUmVxdWVzdCBjb21wbGV0ZWQuICBDYW5jZWwgdGhlIGtlZXBhbGl2ZS5cclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGtlZXBhbGl2ZVRpbWVvdXQpO1xyXG4gICAgICAgICAgICAvLyBUcmlnZ2VyIGEgbmV3IHJlcXVlc3Qgc28gd2UgY2FuIGNvbnRpbnVlIHJlY2VpdmluZyBkYXRhLlxyXG4gICAgICAgICAgICBkb05ld1JlcXVlc3QoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuYWRkVGFnKHVybCwgcmVhZHlTdGF0ZUNCKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEFkZCBhbiBhcmJpdHJhcnkgc2NyaXB0IHRhZyB0byB0aGUgaWZyYW1lLlxyXG4gICAgICogQHBhcmFtIHshc3RyaW5nfSB1cmwgLSBUaGUgVVJMIGZvciB0aGUgc2NyaXB0IHRhZyBzb3VyY2UuXHJcbiAgICAgKiBAcGFyYW0geyFmdW5jdGlvbigpfSBsb2FkQ0IgLSBBIGNhbGxiYWNrIHRvIGJlIHRyaWdnZXJlZCBvbmNlIHRoZSBzY3JpcHQgaGFzIGxvYWRlZC5cclxuICAgICAqL1xyXG4gICAgRmlyZWJhc2VJRnJhbWVTY3JpcHRIb2xkZXIucHJvdG90eXBlLmFkZFRhZyA9IGZ1bmN0aW9uICh1cmwsIGxvYWRDQikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKGlzTm9kZVNkaygpKSB7XHJcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbiAgICAgICAgICAgIHRoaXMuZG9Ob2RlTG9uZ1BvbGwodXJsLCBsb2FkQ0IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHdlJ3JlIGFscmVhZHkgY2xvc2VkLCBkb24ndCBhZGQgdGhpcyBwb2xsXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5zZW5kTmV3UG9sbHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3U2NyaXB0XzEgPSBfdGhpcy5teUlGcmFtZS5kb2MuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3U2NyaXB0XzEudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld1NjcmlwdF8xLmFzeW5jID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBuZXdTY3JpcHRfMS5zcmMgPSB1cmw7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgICAgICAgICAgICAgICAgICBuZXdTY3JpcHRfMS5vbmxvYWQgPSBuZXdTY3JpcHRfMS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByc3RhdGUgPSBuZXdTY3JpcHRfMS5yZWFkeVN0YXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJzdGF0ZSB8fCByc3RhdGUgPT09ICdsb2FkZWQnIHx8IHJzdGF0ZSA9PT0gJ2NvbXBsZXRlJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1NjcmlwdF8xLm9ubG9hZCA9IG5ld1NjcmlwdF8xLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3U2NyaXB0XzEucGFyZW50Tm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1NjcmlwdF8xLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobmV3U2NyaXB0XzEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZENCKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld1NjcmlwdF8xLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZygnTG9uZy1wb2xsIHNjcmlwdCBmYWlsZWQgdG8gbG9hZDogJyArIHVybCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnNlbmROZXdQb2xscyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMubXlJRnJhbWUuZG9jLmJvZHkuYXBwZW5kQ2hpbGQobmV3U2NyaXB0XzEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiB3ZSBzaG91bGQgbWFrZSB0aGlzIGVycm9yIHZpc2libGUgc29tZWhvd1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCBNYXRoLmZsb29yKDEpKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEZpcmViYXNlSUZyYW1lU2NyaXB0SG9sZGVyO1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKiogVGhlIHNlbXZlciAod3d3LnNlbXZlci5vcmcpIHZlcnNpb24gb2YgdGhlIFNESy4gKi9cclxudmFyIFNES19WRVJTSU9OID0gJyc7XHJcbi8vIFNES19WRVJTSU9OIHNob3VsZCBiZSBzZXQgYmVmb3JlIGFueSBkYXRhYmFzZSBpbnN0YW5jZSBpcyBjcmVhdGVkXHJcbmZ1bmN0aW9uIHNldFNES1ZlcnNpb24odmVyc2lvbikge1xyXG4gICAgU0RLX1ZFUlNJT04gPSB2ZXJzaW9uO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBXRUJTT0NLRVRfTUFYX0ZSQU1FX1NJWkUgPSAxNjM4NDtcclxudmFyIFdFQlNPQ0tFVF9LRUVQQUxJVkVfSU5URVJWQUwgPSA0NTAwMDtcclxudmFyIFdlYlNvY2tldEltcGwgPSBudWxsO1xyXG5pZiAodHlwZW9mIE1veldlYlNvY2tldCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIFdlYlNvY2tldEltcGwgPSBNb3pXZWJTb2NrZXQ7XHJcbn1cclxuZWxzZSBpZiAodHlwZW9mIFdlYlNvY2tldCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIFdlYlNvY2tldEltcGwgPSBXZWJTb2NrZXQ7XHJcbn1cclxuLyoqXHJcbiAqIENyZWF0ZSBhIG5ldyB3ZWJzb2NrZXQgY29ubmVjdGlvbiB3aXRoIHRoZSBnaXZlbiBjYWxsYmFja3MuXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAaW1wbGVtZW50cyB7VHJhbnNwb3J0fVxyXG4gKi9cclxudmFyIFdlYlNvY2tldENvbm5lY3Rpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBjb25uSWQgaWRlbnRpZmllciBmb3IgdGhpcyB0cmFuc3BvcnRcclxuICAgICAqIEBwYXJhbSByZXBvSW5mbyBUaGUgaW5mbyBmb3IgdGhlIHdlYnNvY2tldCBlbmRwb2ludC5cclxuICAgICAqIEBwYXJhbSBhcHBsaWNhdGlvbklkIFRoZSBGaXJlYmFzZSBBcHAgSUQgZm9yIHRoaXMgcHJvamVjdC5cclxuICAgICAqIEBwYXJhbSB0cmFuc3BvcnRTZXNzaW9uSWQgT3B0aW9uYWwgdHJhbnNwb3J0U2Vzc2lvbklkIGlmIHRoaXMgaXMgY29ubmVjdGluZyB0byBhbiBleGlzdGluZyB0cmFuc3BvcnRcclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uXHJcbiAgICAgKiBAcGFyYW0gbGFzdFNlc3Npb25JZCBPcHRpb25hbCBsYXN0U2Vzc2lvbklkIGlmIHRoZXJlIHdhcyBhIHByZXZpb3VzIGNvbm5lY3Rpb25cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gV2ViU29ja2V0Q29ubmVjdGlvbihjb25uSWQsIHJlcG9JbmZvLCBhcHBsaWNhdGlvbklkLCB0cmFuc3BvcnRTZXNzaW9uSWQsIGxhc3RTZXNzaW9uSWQpIHtcclxuICAgICAgICB0aGlzLmNvbm5JZCA9IGNvbm5JZDtcclxuICAgICAgICB0aGlzLmFwcGxpY2F0aW9uSWQgPSBhcHBsaWNhdGlvbklkO1xyXG4gICAgICAgIHRoaXMua2VlcGFsaXZlVGltZXIgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuZnJhbWVzID0gbnVsbDtcclxuICAgICAgICB0aGlzLnRvdGFsRnJhbWVzID0gMDtcclxuICAgICAgICB0aGlzLmJ5dGVzU2VudCA9IDA7XHJcbiAgICAgICAgdGhpcy5ieXRlc1JlY2VpdmVkID0gMDtcclxuICAgICAgICB0aGlzLmxvZ18gPSBsb2dXcmFwcGVyKHRoaXMuY29ubklkKTtcclxuICAgICAgICB0aGlzLnN0YXRzXyA9IFN0YXRzTWFuYWdlci5nZXRDb2xsZWN0aW9uKHJlcG9JbmZvKTtcclxuICAgICAgICB0aGlzLmNvbm5VUkwgPSBXZWJTb2NrZXRDb25uZWN0aW9uLmNvbm5lY3Rpb25VUkxfKHJlcG9JbmZvLCB0cmFuc3BvcnRTZXNzaW9uSWQsIGxhc3RTZXNzaW9uSWQpO1xyXG4gICAgICAgIHRoaXMubm9kZUFkbWluID0gcmVwb0luZm8ubm9kZUFkbWluO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge1JlcG9JbmZvfSByZXBvSW5mbyBUaGUgaW5mbyBmb3IgdGhlIHdlYnNvY2tldCBlbmRwb2ludC5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gdHJhbnNwb3J0U2Vzc2lvbklkIE9wdGlvbmFsIHRyYW5zcG9ydFNlc3Npb25JZCBpZiB0aGlzIGlzIGNvbm5lY3RpbmcgdG8gYW4gZXhpc3RpbmcgdHJhbnNwb3J0XHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvblxyXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBsYXN0U2Vzc2lvbklkIE9wdGlvbmFsIGxhc3RTZXNzaW9uSWQgaWYgdGhlcmUgd2FzIGEgcHJldmlvdXMgY29ubmVjdGlvblxyXG4gICAgICogQHJldHVybiB7c3RyaW5nfSBjb25uZWN0aW9uIHVybFxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgV2ViU29ja2V0Q29ubmVjdGlvbi5jb25uZWN0aW9uVVJMXyA9IGZ1bmN0aW9uIChyZXBvSW5mbywgdHJhbnNwb3J0U2Vzc2lvbklkLCBsYXN0U2Vzc2lvbklkKSB7XHJcbiAgICAgICAgdmFyIHVybFBhcmFtcyA9IHt9O1xyXG4gICAgICAgIHVybFBhcmFtc1tWRVJTSU9OX1BBUkFNXSA9IFBST1RPQ09MX1ZFUlNJT047XHJcbiAgICAgICAgaWYgKCFpc05vZGVTZGsoKSAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgbG9jYXRpb24gIT09ICd1bmRlZmluZWQnICYmXHJcbiAgICAgICAgICAgIGxvY2F0aW9uLmhyZWYgJiZcclxuICAgICAgICAgICAgbG9jYXRpb24uaHJlZi5pbmRleE9mKEZPUkdFX0RPTUFJTikgIT09IC0xKSB7XHJcbiAgICAgICAgICAgIHVybFBhcmFtc1tSRUZFUkVSX1BBUkFNXSA9IEZPUkdFX1JFRjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRyYW5zcG9ydFNlc3Npb25JZCkge1xyXG4gICAgICAgICAgICB1cmxQYXJhbXNbVFJBTlNQT1JUX1NFU1NJT05fUEFSQU1dID0gdHJhbnNwb3J0U2Vzc2lvbklkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGFzdFNlc3Npb25JZCkge1xyXG4gICAgICAgICAgICB1cmxQYXJhbXNbTEFTVF9TRVNTSU9OX1BBUkFNXSA9IGxhc3RTZXNzaW9uSWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXBvSW5mby5jb25uZWN0aW9uVVJMKFdFQlNPQ0tFVCwgdXJsUGFyYW1zKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gb25NZXNzYWdlIENhbGxiYWNrIHdoZW4gbWVzc2FnZXMgYXJyaXZlXHJcbiAgICAgKiBAcGFyYW0gb25EaXNjb25uZWN0IENhbGxiYWNrIHdpdGggY29ubmVjdGlvbiBsb3N0LlxyXG4gICAgICovXHJcbiAgICBXZWJTb2NrZXRDb25uZWN0aW9uLnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24gKG9uTWVzc2FnZSwgb25EaXNjb25uZWN0KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLm9uRGlzY29ubmVjdCA9IG9uRGlzY29ubmVjdDtcclxuICAgICAgICB0aGlzLm9uTWVzc2FnZSA9IG9uTWVzc2FnZTtcclxuICAgICAgICB0aGlzLmxvZ18oJ1dlYnNvY2tldCBjb25uZWN0aW5nIHRvICcgKyB0aGlzLmNvbm5VUkwpO1xyXG4gICAgICAgIHRoaXMuZXZlckNvbm5lY3RlZF8gPSBmYWxzZTtcclxuICAgICAgICAvLyBBc3N1bWUgZmFpbHVyZSB1bnRpbCBwcm92ZW4gb3RoZXJ3aXNlLlxyXG4gICAgICAgIFBlcnNpc3RlbnRTdG9yYWdlLnNldCgncHJldmlvdXNfd2Vic29ja2V0X2ZhaWx1cmUnLCB0cnVlKTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAoaXNOb2RlU2RrKCkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBkZXZpY2UgPSB0aGlzLm5vZGVBZG1pbiA/ICdBZG1pbk5vZGUnIDogJ05vZGUnO1xyXG4gICAgICAgICAgICAgICAgLy8gVUEgRm9ybWF0OiBGaXJlYmFzZS88d2lyZV9wcm90b2NvbD4vPHNka192ZXJzaW9uPi88cGxhdGZvcm0+LzxkZXZpY2U+XHJcbiAgICAgICAgICAgICAgICB2YXIgb3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdVc2VyLUFnZW50JzogXCJGaXJlYmFzZS9cIiArIFBST1RPQ09MX1ZFUlNJT04gKyBcIi9cIiArIFNES19WRVJTSU9OICsgXCIvXCIgKyBwcm9jZXNzLnBsYXRmb3JtICsgXCIvXCIgKyBkZXZpY2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdYLUZpcmViYXNlLUdNUElEJzogdGhpcy5hcHBsaWNhdGlvbklkIHx8ICcnXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vIFBsdW1iIGFwcHJvcHJpYXRlIGh0dHBfcHJveHkgZW52aXJvbm1lbnQgdmFyaWFibGUgaW50byBmYXllLXdlYnNvY2tldCBpZiBpdCBleGlzdHMuXHJcbiAgICAgICAgICAgICAgICB2YXIgZW52ID0gcHJvY2Vzc1snZW52J107XHJcbiAgICAgICAgICAgICAgICB2YXIgcHJveHkgPSB0aGlzLmNvbm5VUkwuaW5kZXhPZignd3NzOi8vJykgPT09IDBcclxuICAgICAgICAgICAgICAgICAgICA/IGVudlsnSFRUUFNfUFJPWFknXSB8fCBlbnZbJ2h0dHBzX3Byb3h5J11cclxuICAgICAgICAgICAgICAgICAgICA6IGVudlsnSFRUUF9QUk9YWSddIHx8IGVudlsnaHR0cF9wcm94eSddO1xyXG4gICAgICAgICAgICAgICAgaWYgKHByb3h5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uc1sncHJveHknXSA9IHsgb3JpZ2luOiBwcm94eSB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5teVNvY2sgPSBuZXcgV2ViU29ja2V0SW1wbCh0aGlzLmNvbm5VUkwsIFtdLCBvcHRpb25zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ1gtRmlyZWJhc2UtR01QSUQnOiB0aGlzLmFwcGxpY2F0aW9uSWQgfHwgJydcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5teVNvY2sgPSBuZXcgV2ViU29ja2V0SW1wbCh0aGlzLmNvbm5VUkwsIFtdLCBvcHRpb25zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ18oJ0Vycm9yIGluc3RhbnRpYXRpbmcgV2ViU29ja2V0LicpO1xyXG4gICAgICAgICAgICB2YXIgZXJyb3IgPSBlLm1lc3NhZ2UgfHwgZS5kYXRhO1xyXG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9nXyhlcnJvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5vbkNsb3NlZF8oKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm15U29jay5vbm9wZW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF90aGlzLmxvZ18oJ1dlYnNvY2tldCBjb25uZWN0ZWQuJyk7XHJcbiAgICAgICAgICAgIF90aGlzLmV2ZXJDb25uZWN0ZWRfID0gdHJ1ZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMubXlTb2NrLm9uY2xvc2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF90aGlzLmxvZ18oJ1dlYnNvY2tldCBjb25uZWN0aW9uIHdhcyBkaXNjb25uZWN0ZWQuJyk7XHJcbiAgICAgICAgICAgIF90aGlzLm15U29jayA9IG51bGw7XHJcbiAgICAgICAgICAgIF90aGlzLm9uQ2xvc2VkXygpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5teVNvY2sub25tZXNzYWdlID0gZnVuY3Rpb24gKG0pIHtcclxuICAgICAgICAgICAgX3RoaXMuaGFuZGxlSW5jb21pbmdGcmFtZShtKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMubXlTb2NrLm9uZXJyb3IgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBfdGhpcy5sb2dfKCdXZWJTb2NrZXQgZXJyb3IuICBDbG9zaW5nIGNvbm5lY3Rpb24uJyk7XHJcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbiAgICAgICAgICAgIHZhciBlcnJvciA9IGUubWVzc2FnZSB8fCBlLmRhdGE7XHJcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMubG9nXyhlcnJvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgX3RoaXMub25DbG9zZWRfKCk7XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIE5vLW9wIGZvciB3ZWJzb2NrZXRzLCB3ZSBkb24ndCBuZWVkIHRvIGRvIGFueXRoaW5nIG9uY2UgdGhlIGNvbm5lY3Rpb24gaXMgY29uZmlybWVkIGFzIG9wZW5cclxuICAgICAqL1xyXG4gICAgV2ViU29ja2V0Q29ubmVjdGlvbi5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAoKSB7IH07XHJcbiAgICBXZWJTb2NrZXRDb25uZWN0aW9uLmZvcmNlRGlzYWxsb3cgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgV2ViU29ja2V0Q29ubmVjdGlvbi5mb3JjZURpc2FsbG93XyA9IHRydWU7XHJcbiAgICB9O1xyXG4gICAgV2ViU29ja2V0Q29ubmVjdGlvbi5pc0F2YWlsYWJsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgaXNPbGRBbmRyb2lkID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQpIHtcclxuICAgICAgICAgICAgdmFyIG9sZEFuZHJvaWRSZWdleCA9IC9BbmRyb2lkIChbMC05XXswLH1cXC5bMC05XXswLH0pLztcclxuICAgICAgICAgICAgdmFyIG9sZEFuZHJvaWRNYXRjaCA9IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2gob2xkQW5kcm9pZFJlZ2V4KTtcclxuICAgICAgICAgICAgaWYgKG9sZEFuZHJvaWRNYXRjaCAmJiBvbGRBbmRyb2lkTWF0Y2gubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlRmxvYXQob2xkQW5kcm9pZE1hdGNoWzFdKSA8IDQuNCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlzT2xkQW5kcm9pZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuICghaXNPbGRBbmRyb2lkICYmXHJcbiAgICAgICAgICAgIFdlYlNvY2tldEltcGwgIT09IG51bGwgJiZcclxuICAgICAgICAgICAgIVdlYlNvY2tldENvbm5lY3Rpb24uZm9yY2VEaXNhbGxvd18pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHdlIHByZXZpb3VzbHkgZmFpbGVkIHRvIGNvbm5lY3Qgd2l0aCB0aGlzIHRyYW5zcG9ydC5cclxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIFdlYlNvY2tldENvbm5lY3Rpb24ucHJldmlvdXNseUZhaWxlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBJZiBvdXIgcGVyc2lzdGVudCBzdG9yYWdlIGlzIGFjdHVhbGx5IG9ubHkgaW4tbWVtb3J5IHN0b3JhZ2UsXHJcbiAgICAgICAgLy8gd2UgZGVmYXVsdCB0byBhc3N1bWluZyB0aGF0IGl0IHByZXZpb3VzbHkgZmFpbGVkIHRvIGJlIHNhZmUuXHJcbiAgICAgICAgcmV0dXJuIChQZXJzaXN0ZW50U3RvcmFnZS5pc0luTWVtb3J5U3RvcmFnZSB8fFxyXG4gICAgICAgICAgICBQZXJzaXN0ZW50U3RvcmFnZS5nZXQoJ3ByZXZpb3VzX3dlYnNvY2tldF9mYWlsdXJlJykgPT09IHRydWUpO1xyXG4gICAgfTtcclxuICAgIFdlYlNvY2tldENvbm5lY3Rpb24ucHJvdG90eXBlLm1hcmtDb25uZWN0aW9uSGVhbHRoeSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBQZXJzaXN0ZW50U3RvcmFnZS5yZW1vdmUoJ3ByZXZpb3VzX3dlYnNvY2tldF9mYWlsdXJlJyk7XHJcbiAgICB9O1xyXG4gICAgV2ViU29ja2V0Q29ubmVjdGlvbi5wcm90b3R5cGUuYXBwZW5kRnJhbWVfID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICB0aGlzLmZyYW1lcy5wdXNoKGRhdGEpO1xyXG4gICAgICAgIGlmICh0aGlzLmZyYW1lcy5sZW5ndGggPT09IHRoaXMudG90YWxGcmFtZXMpIHtcclxuICAgICAgICAgICAgdmFyIGZ1bGxNZXNzID0gdGhpcy5mcmFtZXMuam9pbignJyk7XHJcbiAgICAgICAgICAgIHRoaXMuZnJhbWVzID0gbnVsbDtcclxuICAgICAgICAgICAgdmFyIGpzb25NZXNzID0ganNvbkV2YWwoZnVsbE1lc3MpO1xyXG4gICAgICAgICAgICAvL2hhbmRsZSB0aGUgbWVzc2FnZVxyXG4gICAgICAgICAgICB0aGlzLm9uTWVzc2FnZShqc29uTWVzcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGZyYW1lQ291bnQgVGhlIG51bWJlciBvZiBmcmFtZXMgd2UgYXJlIGV4cGVjdGluZyBmcm9tIHRoZSBzZXJ2ZXJcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIFdlYlNvY2tldENvbm5lY3Rpb24ucHJvdG90eXBlLmhhbmRsZU5ld0ZyYW1lQ291bnRfID0gZnVuY3Rpb24gKGZyYW1lQ291bnQpIHtcclxuICAgICAgICB0aGlzLnRvdGFsRnJhbWVzID0gZnJhbWVDb3VudDtcclxuICAgICAgICB0aGlzLmZyYW1lcyA9IFtdO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQXR0ZW1wdHMgdG8gcGFyc2UgYSBmcmFtZSBjb3VudCBvdXQgb2Ygc29tZSB0ZXh0LiBJZiBpdCBjYW4ndCwgYXNzdW1lcyBhIHZhbHVlIG9mIDFcclxuICAgICAqIEBwYXJhbSB7IVN0cmluZ30gZGF0YVxyXG4gICAgICogQHJldHVybiB7P1N0cmluZ30gQW55IHJlbWFpbmluZyBkYXRhIHRvIGJlIHByb2Nlc3MsIG9yIG51bGwgaWYgdGhlcmUgaXMgbm9uZVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgV2ViU29ja2V0Q29ubmVjdGlvbi5wcm90b3R5cGUuZXh0cmFjdEZyYW1lQ291bnRfID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICBhc3NlcnQodGhpcy5mcmFtZXMgPT09IG51bGwsICdXZSBhbHJlYWR5IGhhdmUgYSBmcmFtZSBidWZmZXInKTtcclxuICAgICAgICAvLyBUT0RPOiBUaGUgc2VydmVyIGlzIG9ubHkgc3VwcG9zZWQgdG8gc2VuZCB1cCB0byA5OTk5IGZyYW1lcyAoaS5lLiBsZW5ndGggPD0gNCksIGJ1dCB0aGF0IGlzbid0IGJlaW5nIGVuZm9yY2VkXHJcbiAgICAgICAgLy8gY3VycmVudGx5LiAgU28gYWxsb3dpbmcgbGFyZ2VyIGZyYW1lIGNvdW50cyAobGVuZ3RoIDw9IDYpLiAgU2VlIGh0dHBzOi8vYXBwLmFzYW5hLmNvbS8wL3NlYXJjaC84Njg4NTk4OTk4MzgwLzgyMzc2MDgwNDI1MDhcclxuICAgICAgICBpZiAoZGF0YS5sZW5ndGggPD0gNikge1xyXG4gICAgICAgICAgICB2YXIgZnJhbWVDb3VudCA9IE51bWJlcihkYXRhKTtcclxuICAgICAgICAgICAgaWYgKCFpc05hTihmcmFtZUNvdW50KSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVOZXdGcmFtZUNvdW50XyhmcmFtZUNvdW50KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaGFuZGxlTmV3RnJhbWVDb3VudF8oMSk7XHJcbiAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBQcm9jZXNzIGEgd2Vic29ja2V0IGZyYW1lIHRoYXQgaGFzIGFycml2ZWQgZnJvbSB0aGUgc2VydmVyLlxyXG4gICAgICogQHBhcmFtIG1lc3MgVGhlIGZyYW1lIGRhdGFcclxuICAgICAqL1xyXG4gICAgV2ViU29ja2V0Q29ubmVjdGlvbi5wcm90b3R5cGUuaGFuZGxlSW5jb21pbmdGcmFtZSA9IGZ1bmN0aW9uIChtZXNzKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubXlTb2NrID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjsgLy8gQ2hyb21lIGFwcGFyZW50bHkgZGVsaXZlcnMgaW5jb21pbmcgcGFja2V0cyBldmVuIGFmdGVyIHdlIC5jbG9zZSgpIHRoZSBjb25uZWN0aW9uIHNvbWV0aW1lcy5cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGRhdGEgPSBtZXNzWydkYXRhJ107XHJcbiAgICAgICAgdGhpcy5ieXRlc1JlY2VpdmVkICs9IGRhdGEubGVuZ3RoO1xyXG4gICAgICAgIHRoaXMuc3RhdHNfLmluY3JlbWVudENvdW50ZXIoJ2J5dGVzX3JlY2VpdmVkJywgZGF0YS5sZW5ndGgpO1xyXG4gICAgICAgIHRoaXMucmVzZXRLZWVwQWxpdmUoKTtcclxuICAgICAgICBpZiAodGhpcy5mcmFtZXMgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgLy8gd2UncmUgYnVmZmVyaW5nXHJcbiAgICAgICAgICAgIHRoaXMuYXBwZW5kRnJhbWVfKGRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gdHJ5IHRvIHBhcnNlIG91dCBhIGZyYW1lIGNvdW50LCBvdGhlcndpc2UsIGFzc3VtZSAxIGFuZCBwcm9jZXNzIGl0XHJcbiAgICAgICAgICAgIHZhciByZW1haW5pbmdEYXRhID0gdGhpcy5leHRyYWN0RnJhbWVDb3VudF8oZGF0YSk7XHJcbiAgICAgICAgICAgIGlmIChyZW1haW5pbmdEYXRhICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGVuZEZyYW1lXyhyZW1haW5pbmdEYXRhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFNlbmQgYSBtZXNzYWdlIHRvIHRoZSBzZXJ2ZXJcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIFRoZSBKU09OIG9iamVjdCB0byB0cmFuc21pdFxyXG4gICAgICovXHJcbiAgICBXZWJTb2NrZXRDb25uZWN0aW9uLnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICB0aGlzLnJlc2V0S2VlcEFsaXZlKCk7XHJcbiAgICAgICAgdmFyIGRhdGFTdHIgPSBzdHJpbmdpZnkoZGF0YSk7XHJcbiAgICAgICAgdGhpcy5ieXRlc1NlbnQgKz0gZGF0YVN0ci5sZW5ndGg7XHJcbiAgICAgICAgdGhpcy5zdGF0c18uaW5jcmVtZW50Q291bnRlcignYnl0ZXNfc2VudCcsIGRhdGFTdHIubGVuZ3RoKTtcclxuICAgICAgICAvL1dlIGNhbiBvbmx5IGZpdCBhIGNlcnRhaW4gYW1vdW50IGluIGVhY2ggd2Vic29ja2V0IGZyYW1lLCBzbyB3ZSBuZWVkIHRvIHNwbGl0IHRoaXMgcmVxdWVzdFxyXG4gICAgICAgIC8vdXAgaW50byBtdWx0aXBsZSBwaWVjZXMgaWYgaXQgZG9lc24ndCBmaXQgaW4gb25lIHJlcXVlc3QuXHJcbiAgICAgICAgdmFyIGRhdGFTZWdzID0gc3BsaXRTdHJpbmdCeVNpemUoZGF0YVN0ciwgV0VCU09DS0VUX01BWF9GUkFNRV9TSVpFKTtcclxuICAgICAgICAvL1NlbmQgdGhlIGxlbmd0aCBoZWFkZXJcclxuICAgICAgICBpZiAoZGF0YVNlZ3MubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICB0aGlzLnNlbmRTdHJpbmdfKFN0cmluZyhkYXRhU2Vncy5sZW5ndGgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy9TZW5kIHRoZSBhY3R1YWwgZGF0YSBpbiBzZWdtZW50cy5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGFTZWdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VuZFN0cmluZ18oZGF0YVNlZ3NbaV0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBXZWJTb2NrZXRDb25uZWN0aW9uLnByb3RvdHlwZS5zaHV0ZG93bl8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5pc0Nsb3NlZF8gPSB0cnVlO1xyXG4gICAgICAgIGlmICh0aGlzLmtlZXBhbGl2ZVRpbWVyKSB7XHJcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5rZWVwYWxpdmVUaW1lcik7XHJcbiAgICAgICAgICAgIHRoaXMua2VlcGFsaXZlVGltZXIgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5teVNvY2spIHtcclxuICAgICAgICAgICAgdGhpcy5teVNvY2suY2xvc2UoKTtcclxuICAgICAgICAgICAgdGhpcy5teVNvY2sgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBXZWJTb2NrZXRDb25uZWN0aW9uLnByb3RvdHlwZS5vbkNsb3NlZF8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzQ2xvc2VkXykge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ18oJ1dlYlNvY2tldCBpcyBjbG9zaW5nIGl0c2VsZicpO1xyXG4gICAgICAgICAgICB0aGlzLnNodXRkb3duXygpO1xyXG4gICAgICAgICAgICAvLyBzaW5jZSB0aGlzIGlzIGFuIGludGVybmFsIGNsb3NlLCB0cmlnZ2VyIHRoZSBjbG9zZSBsaXN0ZW5lclxyXG4gICAgICAgICAgICBpZiAodGhpcy5vbkRpc2Nvbm5lY3QpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub25EaXNjb25uZWN0KHRoaXMuZXZlckNvbm5lY3RlZF8pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbkRpc2Nvbm5lY3QgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogRXh0ZXJuYWwtZmFjaW5nIGNsb3NlIGhhbmRsZXIuXHJcbiAgICAgKiBDbG9zZSB0aGUgd2Vic29ja2V0IGFuZCBraWxsIHRoZSBjb25uZWN0aW9uLlxyXG4gICAgICovXHJcbiAgICBXZWJTb2NrZXRDb25uZWN0aW9uLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNDbG9zZWRfKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nXygnV2ViU29ja2V0IGlzIGJlaW5nIGNsb3NlZCcpO1xyXG4gICAgICAgICAgICB0aGlzLnNodXRkb3duXygpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEtpbGwgdGhlIGN1cnJlbnQga2VlcGFsaXZlIHRpbWVyIGFuZCBzdGFydCBhIG5ldyBvbmUsIHRvIGVuc3VyZSB0aGF0IGl0IGFsd2F5cyBmaXJlcyBOIHNlY29uZHMgYWZ0ZXJcclxuICAgICAqIHRoZSBsYXN0IGFjdGl2aXR5LlxyXG4gICAgICovXHJcbiAgICBXZWJTb2NrZXRDb25uZWN0aW9uLnByb3RvdHlwZS5yZXNldEtlZXBBbGl2ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5rZWVwYWxpdmVUaW1lcik7XHJcbiAgICAgICAgdGhpcy5rZWVwYWxpdmVUaW1lciA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLy9JZiB0aGVyZSBoYXMgYmVlbiBubyB3ZWJzb2NrZXQgYWN0aXZpdHkgZm9yIGEgd2hpbGUsIHNlbmQgYSBuby1vcFxyXG4gICAgICAgICAgICBpZiAoX3RoaXMubXlTb2NrKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5zZW5kU3RyaW5nXygnMCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF90aGlzLnJlc2V0S2VlcEFsaXZlKCk7XHJcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbiAgICAgICAgfSwgTWF0aC5mbG9vcihXRUJTT0NLRVRfS0VFUEFMSVZFX0lOVEVSVkFMKSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIGEgc3RyaW5nIG92ZXIgdGhlIHdlYnNvY2tldC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyIFN0cmluZyB0byBzZW5kLlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgV2ViU29ja2V0Q29ubmVjdGlvbi5wcm90b3R5cGUuc2VuZFN0cmluZ18gPSBmdW5jdGlvbiAoc3RyKSB7XHJcbiAgICAgICAgLy8gRmlyZWZveCBzZWVtcyB0byBzb21ldGltZXMgdGhyb3cgZXhjZXB0aW9ucyAoTlNfRVJST1JfVU5FWFBFQ1RFRCkgZnJvbSB3ZWJzb2NrZXQgLnNlbmQoKVxyXG4gICAgICAgIC8vIGNhbGxzIGZvciBzb21lIHVua25vd24gcmVhc29uLiAgV2UgdHJlYXQgdGhlc2UgYXMgYW4gZXJyb3IgYW5kIGRpc2Nvbm5lY3QuXHJcbiAgICAgICAgLy8gU2VlIGh0dHBzOi8vYXBwLmFzYW5hLmNvbS8wLzU4OTI2MTExNDAyMjkyLzY4MDIxMzQwMjUwNDEwXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdGhpcy5teVNvY2suc2VuZChzdHIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ18oJ0V4Y2VwdGlvbiB0aHJvd24gZnJvbSBXZWJTb2NrZXQuc2VuZCgpOicsIGUubWVzc2FnZSB8fCBlLmRhdGEsICdDbG9zaW5nIGNvbm5lY3Rpb24uJyk7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQodGhpcy5vbkNsb3NlZF8uYmluZCh0aGlzKSwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogTnVtYmVyIG9mIHJlc3BvbnNlIGJlZm9yZSB3ZSBjb25zaWRlciB0aGUgY29ubmVjdGlvbiBcImhlYWx0aHkuXCJcclxuICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgKi9cclxuICAgIFdlYlNvY2tldENvbm5lY3Rpb24ucmVzcG9uc2VzUmVxdWlyZWRUb0JlSGVhbHRoeSA9IDI7XHJcbiAgICAvKipcclxuICAgICAqIFRpbWUgdG8gd2FpdCBmb3IgdGhlIGNvbm5lY3Rpb24gdGUgYmVjb21lIGhlYWx0aHkgYmVmb3JlIGdpdmluZyB1cC5cclxuICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgKi9cclxuICAgIFdlYlNvY2tldENvbm5lY3Rpb24uaGVhbHRoeVRpbWVvdXQgPSAzMDAwMDtcclxuICAgIHJldHVybiBXZWJTb2NrZXRDb25uZWN0aW9uO1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQ3VycmVudGx5IHNpbXBsaXN0aWMsIHRoaXMgY2xhc3MgbWFuYWdlcyB3aGF0IHRyYW5zcG9ydCBhIENvbm5lY3Rpb24gc2hvdWxkIHVzZSBhdCB2YXJpb3VzIHN0YWdlcyBvZiBpdHNcclxuICogbGlmZWN5Y2xlLlxyXG4gKlxyXG4gKiBJdCBzdGFydHMgd2l0aCBsb25ncG9sbGluZyBpbiBhIGJyb3dzZXIsIGFuZCBodHRwcG9sbGluZyBvbiBub2RlLiBJdCB0aGVuIHVwZ3JhZGVzIHRvIHdlYnNvY2tldHMgaWZcclxuICogdGhleSBhcmUgYXZhaWxhYmxlLlxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbnZhciBUcmFuc3BvcnRNYW5hZ2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFSZXBvSW5mb30gcmVwb0luZm8gTWV0YWRhdGEgYXJvdW5kIHRoZSBuYW1lc3BhY2Ugd2UncmUgY29ubmVjdGluZyB0b1xyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBUcmFuc3BvcnRNYW5hZ2VyKHJlcG9JbmZvKSB7XHJcbiAgICAgICAgdGhpcy5pbml0VHJhbnNwb3J0c18ocmVwb0luZm8pO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRyYW5zcG9ydE1hbmFnZXIsIFwiQUxMX1RSQU5TUE9SVFNcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBjb25zdFxyXG4gICAgICAgICAqIEB0eXBlIHshQXJyYXkuPGZ1bmN0aW9uKG5ldzpUcmFuc3BvcnQsIHN0cmluZywgUmVwb0luZm8sIHN0cmluZz0pPn1cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtCcm93c2VyUG9sbENvbm5lY3Rpb24sIFdlYlNvY2tldENvbm5lY3Rpb25dO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshUmVwb0luZm99IHJlcG9JbmZvXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBUcmFuc3BvcnRNYW5hZ2VyLnByb3RvdHlwZS5pbml0VHJhbnNwb3J0c18gPSBmdW5jdGlvbiAocmVwb0luZm8pIHtcclxuICAgICAgICB2YXIgZV8xLCBfYTtcclxuICAgICAgICB2YXIgaXNXZWJTb2NrZXRzQXZhaWxhYmxlID0gV2ViU29ja2V0Q29ubmVjdGlvbiAmJiBXZWJTb2NrZXRDb25uZWN0aW9uWydpc0F2YWlsYWJsZSddKCk7XHJcbiAgICAgICAgdmFyIGlzU2tpcFBvbGxDb25uZWN0aW9uID0gaXNXZWJTb2NrZXRzQXZhaWxhYmxlICYmICFXZWJTb2NrZXRDb25uZWN0aW9uLnByZXZpb3VzbHlGYWlsZWQoKTtcclxuICAgICAgICBpZiAocmVwb0luZm8ud2ViU29ja2V0T25seSkge1xyXG4gICAgICAgICAgICBpZiAoIWlzV2ViU29ja2V0c0F2YWlsYWJsZSkge1xyXG4gICAgICAgICAgICAgICAgd2FybihcIndzczovLyBVUkwgdXNlZCwgYnV0IGJyb3dzZXIgaXNuJ3Qga25vd24gdG8gc3VwcG9ydCB3ZWJzb2NrZXRzLiAgVHJ5aW5nIGFueXdheS5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaXNTa2lwUG9sbENvbm5lY3Rpb24gPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNTa2lwUG9sbENvbm5lY3Rpb24pIHtcclxuICAgICAgICAgICAgdGhpcy50cmFuc3BvcnRzXyA9IFtXZWJTb2NrZXRDb25uZWN0aW9uXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciB0cmFuc3BvcnRzID0gKHRoaXMudHJhbnNwb3J0c18gPSBbXSk7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfYiA9IF9fdmFsdWVzKFRyYW5zcG9ydE1hbmFnZXIuQUxMX1RSQU5TUE9SVFMpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRyYW5zcG9ydCA9IF9jLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc3BvcnQgJiYgdHJhbnNwb3J0Wydpc0F2YWlsYWJsZSddKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNwb3J0cy5wdXNoKHRyYW5zcG9ydCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XHJcbiAgICAgICAgICAgIGZpbmFsbHkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHtmdW5jdGlvbihuZXc6VHJhbnNwb3J0LCAhc3RyaW5nLCAhUmVwb0luZm8sIHN0cmluZz0sIHN0cmluZz0pfSBUaGUgY29uc3RydWN0b3IgZm9yIHRoZVxyXG4gICAgICogaW5pdGlhbCB0cmFuc3BvcnQgdG8gdXNlXHJcbiAgICAgKi9cclxuICAgIFRyYW5zcG9ydE1hbmFnZXIucHJvdG90eXBlLmluaXRpYWxUcmFuc3BvcnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudHJhbnNwb3J0c18ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy50cmFuc3BvcnRzX1swXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gdHJhbnNwb3J0cyBhdmFpbGFibGUnKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHs/ZnVuY3Rpb24obmV3OlRyYW5zcG9ydCwgZnVuY3Rpb24oKSxmdW5jdGlvbigpLCBzdHJpbmc9KX0gVGhlIGNvbnN0cnVjdG9yIGZvciB0aGUgbmV4dFxyXG4gICAgICogdHJhbnNwb3J0LCBvciBudWxsXHJcbiAgICAgKi9cclxuICAgIFRyYW5zcG9ydE1hbmFnZXIucHJvdG90eXBlLnVwZ3JhZGVUcmFuc3BvcnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudHJhbnNwb3J0c18ubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy50cmFuc3BvcnRzX1sxXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gVHJhbnNwb3J0TWFuYWdlcjtcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLy8gQWJvcnQgdXBncmFkZSBhdHRlbXB0IGlmIGl0IHRha2VzIGxvbmdlciB0aGFuIDYwcy5cclxudmFyIFVQR1JBREVfVElNRU9VVCA9IDYwMDAwO1xyXG4vLyBGb3Igc29tZSB0cmFuc3BvcnRzIChXZWJTb2NrZXRzKSwgd2UgbmVlZCB0byBcInZhbGlkYXRlXCIgdGhlIHRyYW5zcG9ydCBieSBleGNoYW5naW5nIGEgZmV3IHJlcXVlc3RzIGFuZCByZXNwb25zZXMuXHJcbi8vIElmIHdlIGhhdmVuJ3Qgc2VudCBlbm91Z2ggcmVxdWVzdHMgd2l0aGluIDVzLCB3ZSdsbCBzdGFydCBzZW5kaW5nIG5vb3AgcGluZyByZXF1ZXN0cy5cclxudmFyIERFTEFZX0JFRk9SRV9TRU5ESU5HX0VYVFJBX1JFUVVFU1RTID0gNTAwMDtcclxuLy8gSWYgdGhlIGluaXRpYWwgZGF0YSBzZW50IHRyaWdnZXJzIGEgbG90IG9mIGJhbmR3aWR0aCAoaS5lLiBpdCdzIGEgbGFyZ2UgcHV0IG9yIGEgbGlzdGVuIGZvciBhIGxhcmdlIGFtb3VudCBvZiBkYXRhKVxyXG4vLyB0aGVuIHdlIG1heSBub3QgYmUgYWJsZSB0byBleGNoYW5nZSBvdXIgcGluZy9wb25nIHJlcXVlc3RzIHdpdGhpbiB0aGUgaGVhbHRoeSB0aW1lb3V0LiAgU28gaWYgd2UgcmVhY2ggdGhlIHRpbWVvdXRcclxuLy8gYnV0IHdlJ3ZlIHNlbnQvcmVjZWl2ZWQgZW5vdWdoIGJ5dGVzLCB3ZSBkb24ndCBjYW5jZWwgdGhlIGNvbm5lY3Rpb24uXHJcbnZhciBCWVRFU19TRU5UX0hFQUxUSFlfT1ZFUlJJREUgPSAxMCAqIDEwMjQ7XHJcbnZhciBCWVRFU19SRUNFSVZFRF9IRUFMVEhZX09WRVJSSURFID0gMTAwICogMTAyNDtcclxudmFyIE1FU1NBR0VfVFlQRSA9ICd0JztcclxudmFyIE1FU1NBR0VfREFUQSA9ICdkJztcclxudmFyIENPTlRST0xfU0hVVERPV04gPSAncyc7XHJcbnZhciBDT05UUk9MX1JFU0VUID0gJ3InO1xyXG52YXIgQ09OVFJPTF9FUlJPUiA9ICdlJztcclxudmFyIENPTlRST0xfUE9ORyA9ICdvJztcclxudmFyIFNXSVRDSF9BQ0sgPSAnYSc7XHJcbnZhciBFTkRfVFJBTlNNSVNTSU9OID0gJ24nO1xyXG52YXIgUElORyA9ICdwJztcclxudmFyIFNFUlZFUl9IRUxMTyA9ICdoJztcclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcgcmVhbC10aW1lIGNvbm5lY3Rpb24gdG8gdGhlIHNlcnZlciB1c2luZyB3aGljaGV2ZXIgbWV0aG9kIHdvcmtzXHJcbiAqIGJlc3QgaW4gdGhlIGN1cnJlbnQgYnJvd3Nlci5cclxuICpcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG52YXIgQ29ubmVjdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIGlkIC0gYW4gaWQgZm9yIHRoaXMgY29ubmVjdGlvblxyXG4gICAgICogQHBhcmFtIHJlcG9JbmZvXyAtIHRoZSBpbmZvIGZvciB0aGUgZW5kcG9pbnQgdG8gY29ubmVjdCB0b1xyXG4gICAgICogQHBhcmFtIGFwcGxpY2F0aW9uSWRfIC0gdGhlIEZpcmViYXNlIEFwcCBJRCBmb3IgdGhpcyBwcm9qZWN0XHJcbiAgICAgKiBAcGFyYW0gb25NZXNzYWdlXyAtIHRoZSBjYWxsYmFjayB0byBiZSB0cmlnZ2VyZWQgd2hlbiBhIHNlcnZlci1wdXNoIG1lc3NhZ2UgYXJyaXZlc1xyXG4gICAgICogQHBhcmFtIG9uUmVhZHlfIC0gdGhlIGNhbGxiYWNrIHRvIGJlIHRyaWdnZXJlZCB3aGVuIHRoaXMgY29ubmVjdGlvbiBpcyByZWFkeSB0byBzZW5kIG1lc3NhZ2VzLlxyXG4gICAgICogQHBhcmFtIG9uRGlzY29ubmVjdF8gLSB0aGUgY2FsbGJhY2sgdG8gYmUgdHJpZ2dlcmVkIHdoZW4gYSBjb25uZWN0aW9uIHdhcyBsb3N0XHJcbiAgICAgKiBAcGFyYW0gb25LaWxsXyAtIHRoZSBjYWxsYmFjayB0byBiZSB0cmlnZ2VyZWQgd2hlbiB0aGlzIGNvbm5lY3Rpb24gaGFzIHBlcm1hbmVudGx5IHNodXQgZG93bi5cclxuICAgICAqIEBwYXJhbSBsYXN0U2Vzc2lvbklkIC0gbGFzdCBzZXNzaW9uIGlkIGluIHBlcnNpc3RlbnQgY29ubmVjdGlvbi4gaXMgdXNlZCB0byBjbGVhbiB1cCBvbGQgc2Vzc2lvbiBpbiByZWFsLXRpbWUgc2VydmVyXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIENvbm5lY3Rpb24oaWQsIHJlcG9JbmZvXywgYXBwbGljYXRpb25JZF8sIG9uTWVzc2FnZV8sIG9uUmVhZHlfLCBvbkRpc2Nvbm5lY3RfLCBvbktpbGxfLCBsYXN0U2Vzc2lvbklkKSB7XHJcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgICAgIHRoaXMucmVwb0luZm9fID0gcmVwb0luZm9fO1xyXG4gICAgICAgIHRoaXMuYXBwbGljYXRpb25JZF8gPSBhcHBsaWNhdGlvbklkXztcclxuICAgICAgICB0aGlzLm9uTWVzc2FnZV8gPSBvbk1lc3NhZ2VfO1xyXG4gICAgICAgIHRoaXMub25SZWFkeV8gPSBvblJlYWR5XztcclxuICAgICAgICB0aGlzLm9uRGlzY29ubmVjdF8gPSBvbkRpc2Nvbm5lY3RfO1xyXG4gICAgICAgIHRoaXMub25LaWxsXyA9IG9uS2lsbF87XHJcbiAgICAgICAgdGhpcy5sYXN0U2Vzc2lvbklkID0gbGFzdFNlc3Npb25JZDtcclxuICAgICAgICB0aGlzLmNvbm5lY3Rpb25Db3VudCA9IDA7XHJcbiAgICAgICAgdGhpcy5wZW5kaW5nRGF0YU1lc3NhZ2VzID0gW107XHJcbiAgICAgICAgdGhpcy5zdGF0ZV8gPSAwIC8qIENPTk5FQ1RJTkcgKi87XHJcbiAgICAgICAgdGhpcy5sb2dfID0gbG9nV3JhcHBlcignYzonICsgdGhpcy5pZCArICc6Jyk7XHJcbiAgICAgICAgdGhpcy50cmFuc3BvcnRNYW5hZ2VyXyA9IG5ldyBUcmFuc3BvcnRNYW5hZ2VyKHJlcG9JbmZvXyk7XHJcbiAgICAgICAgdGhpcy5sb2dfKCdDb25uZWN0aW9uIGNyZWF0ZWQnKTtcclxuICAgICAgICB0aGlzLnN0YXJ0XygpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTdGFydHMgYSBjb25uZWN0aW9uIGF0dGVtcHRcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLnN0YXJ0XyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBjb25uID0gdGhpcy50cmFuc3BvcnRNYW5hZ2VyXy5pbml0aWFsVHJhbnNwb3J0KCk7XHJcbiAgICAgICAgdGhpcy5jb25uXyA9IG5ldyBjb25uKHRoaXMubmV4dFRyYW5zcG9ydElkXygpLCB0aGlzLnJlcG9JbmZvXywgdGhpcy5hcHBsaWNhdGlvbklkXywgdW5kZWZpbmVkLCB0aGlzLmxhc3RTZXNzaW9uSWQpO1xyXG4gICAgICAgIC8vIEZvciBjZXJ0YWluIHRyYW5zcG9ydHMgKFdlYlNvY2tldHMpLCB3ZSBuZWVkIHRvIHNlbmQgYW5kIHJlY2VpdmUgc2V2ZXJhbCBtZXNzYWdlcyBiYWNrIGFuZCBmb3J0aCBiZWZvcmUgd2VcclxuICAgICAgICAvLyBjYW4gY29uc2lkZXIgdGhlIHRyYW5zcG9ydCBoZWFsdGh5LlxyXG4gICAgICAgIHRoaXMucHJpbWFyeVJlc3BvbnNlc1JlcXVpcmVkXyA9IGNvbm5bJ3Jlc3BvbnNlc1JlcXVpcmVkVG9CZUhlYWx0aHknXSB8fCAwO1xyXG4gICAgICAgIHZhciBvbk1lc3NhZ2VSZWNlaXZlZCA9IHRoaXMuY29ublJlY2VpdmVyXyh0aGlzLmNvbm5fKTtcclxuICAgICAgICB2YXIgb25Db25uZWN0aW9uTG9zdCA9IHRoaXMuZGlzY29ublJlY2VpdmVyXyh0aGlzLmNvbm5fKTtcclxuICAgICAgICB0aGlzLnR4XyA9IHRoaXMuY29ubl87XHJcbiAgICAgICAgdGhpcy5yeF8gPSB0aGlzLmNvbm5fO1xyXG4gICAgICAgIHRoaXMuc2Vjb25kYXJ5Q29ubl8gPSBudWxsO1xyXG4gICAgICAgIHRoaXMuaXNIZWFsdGh5XyA9IGZhbHNlO1xyXG4gICAgICAgIC8qXHJcbiAgICAgICAgICogRmlyZWZveCBkb2Vzbid0IGxpa2Ugd2hlbiBjb2RlIGZyb20gb25lIGlmcmFtZSB0cmllcyB0byBjcmVhdGUgYW5vdGhlciBpZnJhbWUgYnkgd2F5IG9mIHRoZSBwYXJlbnQgZnJhbWUuXHJcbiAgICAgICAgICogVGhpcyBjYW4gb2NjdXIgaW4gdGhlIGNhc2Ugb2YgYSByZWRpcmVjdCwgaS5lLiB3ZSBndWVzc2VkIHdyb25nIG9uIHdoYXQgc2VydmVyIHRvIGNvbm5lY3QgdG8gYW5kIHJlY2VpdmVkIGEgcmVzZXQuXHJcbiAgICAgICAgICogU29tZWhvdywgc2V0VGltZW91dCBzZWVtcyB0byBtYWtlIHRoaXMgb2suIFRoYXQgZG9lc24ndCBtYWtlIHNlbnNlIGZyb20gYSBzZWN1cml0eSBwZXJzcGVjdGl2ZSwgc2luY2UgeW91IHNob3VsZFxyXG4gICAgICAgICAqIHN0aWxsIGhhdmUgdGhlIGNvbnRleHQgb2YgeW91ciBvcmlnaW5hdGluZyBmcmFtZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLy8gdGhpcy5jb25uXyBnZXRzIHNldCB0byBudWxsIGluIHNvbWUgb2YgdGhlIHRlc3RzLiBDaGVjayB0byBtYWtlIHN1cmUgaXQgc3RpbGwgZXhpc3RzIGJlZm9yZSB1c2luZyBpdFxyXG4gICAgICAgICAgICBfdGhpcy5jb25uXyAmJiBfdGhpcy5jb25uXy5vcGVuKG9uTWVzc2FnZVJlY2VpdmVkLCBvbkNvbm5lY3Rpb25Mb3N0KTtcclxuICAgICAgICB9LCBNYXRoLmZsb29yKDApKTtcclxuICAgICAgICB2YXIgaGVhbHRoeVRpbWVvdXRNUyA9IGNvbm5bJ2hlYWx0aHlUaW1lb3V0J10gfHwgMDtcclxuICAgICAgICBpZiAoaGVhbHRoeVRpbWVvdXRNUyA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5oZWFsdGh5VGltZW91dF8gPSBzZXRUaW1lb3V0Tm9uQmxvY2tpbmcoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuaGVhbHRoeVRpbWVvdXRfID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGlmICghX3RoaXMuaXNIZWFsdGh5Xykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5jb25uXyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5jb25uXy5ieXRlc1JlY2VpdmVkID4gQllURVNfUkVDRUlWRURfSEVBTFRIWV9PVkVSUklERSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5sb2dfKCdDb25uZWN0aW9uIGV4Y2VlZGVkIGhlYWx0aHkgdGltZW91dCBidXQgaGFzIHJlY2VpdmVkICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuY29ubl8uYnl0ZXNSZWNlaXZlZCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIGJ5dGVzLiAgTWFya2luZyBjb25uZWN0aW9uIGhlYWx0aHkuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmlzSGVhbHRoeV8gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5jb25uXy5tYXJrQ29ubmVjdGlvbkhlYWx0aHkoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoX3RoaXMuY29ubl8gJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuY29ubl8uYnl0ZXNTZW50ID4gQllURVNfU0VOVF9IRUFMVEhZX09WRVJSSURFKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmxvZ18oJ0Nvbm5lY3Rpb24gZXhjZWVkZWQgaGVhbHRoeSB0aW1lb3V0IGJ1dCBoYXMgc2VudCAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmNvbm5fLmJ5dGVzU2VudCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIGJ5dGVzLiAgTGVhdmluZyBjb25uZWN0aW9uIGFsaXZlLicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBOT1RFOiBXZSBkb24ndCB3YW50IHRvIG1hcmsgaXQgaGVhbHRoeSwgc2luY2Ugd2UgaGF2ZSBubyBndWFyYW50ZWUgdGhhdCB0aGUgYnl0ZXMgaGF2ZSBtYWRlIGl0IHRvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBzZXJ2ZXIuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5sb2dfKCdDbG9zaW5nIHVuaGVhbHRoeSBjb25uZWN0aW9uIGFmdGVyIHRpbWVvdXQuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgICAgICAgICAgfSwgTWF0aC5mbG9vcihoZWFsdGh5VGltZW91dE1TKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7IXN0cmluZ31cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLm5leHRUcmFuc3BvcnRJZF8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICdjOicgKyB0aGlzLmlkICsgJzonICsgdGhpcy5jb25uZWN0aW9uQ291bnQrKztcclxuICAgIH07XHJcbiAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5kaXNjb25uUmVjZWl2ZXJfID0gZnVuY3Rpb24gKGNvbm4pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZXZlckNvbm5lY3RlZCkge1xyXG4gICAgICAgICAgICBpZiAoY29ubiA9PT0gX3RoaXMuY29ubl8pIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLm9uQ29ubmVjdGlvbkxvc3RfKGV2ZXJDb25uZWN0ZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGNvbm4gPT09IF90aGlzLnNlY29uZGFyeUNvbm5fKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5sb2dfKCdTZWNvbmRhcnkgY29ubmVjdGlvbiBsb3N0LicpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMub25TZWNvbmRhcnlDb25uZWN0aW9uTG9zdF8oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmxvZ18oJ2Nsb3NpbmcgYW4gb2xkIGNvbm5lY3Rpb24nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgQ29ubmVjdGlvbi5wcm90b3R5cGUuY29ublJlY2VpdmVyXyA9IGZ1bmN0aW9uIChjb25uKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgaWYgKF90aGlzLnN0YXRlXyAhPT0gMiAvKiBESVNDT05ORUNURUQgKi8pIHtcclxuICAgICAgICAgICAgICAgIGlmIChjb25uID09PSBfdGhpcy5yeF8pIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5vblByaW1hcnlNZXNzYWdlUmVjZWl2ZWRfKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY29ubiA9PT0gX3RoaXMuc2Vjb25kYXJ5Q29ubl8pIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5vblNlY29uZGFyeU1lc3NhZ2VSZWNlaXZlZF8obWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5sb2dfKCdtZXNzYWdlIG9uIG9sZCBjb25uZWN0aW9uJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhTXNnIEFuIGFyYml0cmFyeSBkYXRhIG1lc3NhZ2UgdG8gYmUgc2VudCB0byB0aGUgc2VydmVyXHJcbiAgICAgKi9cclxuICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLnNlbmRSZXF1ZXN0ID0gZnVuY3Rpb24gKGRhdGFNc2cpIHtcclxuICAgICAgICAvLyB3cmFwIGluIGEgZGF0YSBtZXNzYWdlIGVudmVsb3BlIGFuZCBzZW5kIGl0IG9uXHJcbiAgICAgICAgdmFyIG1zZyA9IHsgdDogJ2QnLCBkOiBkYXRhTXNnIH07XHJcbiAgICAgICAgdGhpcy5zZW5kRGF0YV8obXNnKTtcclxuICAgIH07XHJcbiAgICBDb25uZWN0aW9uLnByb3RvdHlwZS50cnlDbGVhbnVwQ29ubmVjdGlvbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy50eF8gPT09IHRoaXMuc2Vjb25kYXJ5Q29ubl8gJiYgdGhpcy5yeF8gPT09IHRoaXMuc2Vjb25kYXJ5Q29ubl8pIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dfKCdjbGVhbmluZyB1cCBhbmQgcHJvbW90aW5nIGEgY29ubmVjdGlvbjogJyArIHRoaXMuc2Vjb25kYXJ5Q29ubl8uY29ubklkKTtcclxuICAgICAgICAgICAgdGhpcy5jb25uXyA9IHRoaXMuc2Vjb25kYXJ5Q29ubl87XHJcbiAgICAgICAgICAgIHRoaXMuc2Vjb25kYXJ5Q29ubl8gPSBudWxsO1xyXG4gICAgICAgICAgICAvLyB0aGUgc2VydmVyIHdpbGwgc2h1dGRvd24gdGhlIG9sZCBjb25uZWN0aW9uXHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLm9uU2Vjb25kYXJ5Q29udHJvbF8gPSBmdW5jdGlvbiAoY29udHJvbERhdGEpIHtcclxuICAgICAgICBpZiAoTUVTU0FHRV9UWVBFIGluIGNvbnRyb2xEYXRhKSB7XHJcbiAgICAgICAgICAgIHZhciBjbWQgPSBjb250cm9sRGF0YVtNRVNTQUdFX1RZUEVdO1xyXG4gICAgICAgICAgICBpZiAoY21kID09PSBTV0lUQ0hfQUNLKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZ3JhZGVJZlNlY29uZGFyeUhlYWx0aHlfKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY21kID09PSBDT05UUk9MX1JFU0VUKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBNb3N0IGxpa2VseSB0aGUgc2Vzc2lvbiB3YXNuJ3QgdmFsaWQuIEFiYW5kb24gdGhlIHN3aXRjaCBhdHRlbXB0XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ18oJ0dvdCBhIHJlc2V0IG9uIHNlY29uZGFyeSwgY2xvc2luZyBpdCcpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWNvbmRhcnlDb25uXy5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgLy8gSWYgd2Ugd2VyZSBhbHJlYWR5IHVzaW5nIHRoaXMgY29ubmVjdGlvbiBmb3Igc29tZXRoaW5nLCB0aGFuIHdlIG5lZWQgdG8gZnVsbHkgY2xvc2VcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnR4XyA9PT0gdGhpcy5zZWNvbmRhcnlDb25uXyB8fFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucnhfID09PSB0aGlzLnNlY29uZGFyeUNvbm5fKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGNtZCA9PT0gQ09OVFJPTF9QT05HKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ18oJ2dvdCBwb25nIG9uIHNlY29uZGFyeS4nKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2Vjb25kYXJ5UmVzcG9uc2VzUmVxdWlyZWRfLS07XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZ3JhZGVJZlNlY29uZGFyeUhlYWx0aHlfKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQ29ubmVjdGlvbi5wcm90b3R5cGUub25TZWNvbmRhcnlNZXNzYWdlUmVjZWl2ZWRfID0gZnVuY3Rpb24gKHBhcnNlZERhdGEpIHtcclxuICAgICAgICB2YXIgbGF5ZXIgPSByZXF1aXJlS2V5KCd0JywgcGFyc2VkRGF0YSk7XHJcbiAgICAgICAgdmFyIGRhdGEgPSByZXF1aXJlS2V5KCdkJywgcGFyc2VkRGF0YSk7XHJcbiAgICAgICAgaWYgKGxheWVyID09PSAnYycpIHtcclxuICAgICAgICAgICAgdGhpcy5vblNlY29uZGFyeUNvbnRyb2xfKGRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChsYXllciA9PT0gJ2QnKSB7XHJcbiAgICAgICAgICAgIC8vIGdvdCBhIGRhdGEgbWVzc2FnZSwgYnV0IHdlJ3JlIHN0aWxsIHNlY29uZCBjb25uZWN0aW9uLiBOZWVkIHRvIGJ1ZmZlciBpdCB1cFxyXG4gICAgICAgICAgICB0aGlzLnBlbmRpbmdEYXRhTWVzc2FnZXMucHVzaChkYXRhKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBwcm90b2NvbCBsYXllcjogJyArIGxheWVyKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQ29ubmVjdGlvbi5wcm90b3R5cGUudXBncmFkZUlmU2Vjb25kYXJ5SGVhbHRoeV8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2Vjb25kYXJ5UmVzcG9uc2VzUmVxdWlyZWRfIDw9IDApIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dfKCdTZWNvbmRhcnkgY29ubmVjdGlvbiBpcyBoZWFsdGh5LicpO1xyXG4gICAgICAgICAgICB0aGlzLmlzSGVhbHRoeV8gPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLnNlY29uZGFyeUNvbm5fLm1hcmtDb25uZWN0aW9uSGVhbHRoeSgpO1xyXG4gICAgICAgICAgICB0aGlzLnByb2NlZWRXaXRoVXBncmFkZV8oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIFNlbmQgYSBwaW5nIHRvIG1ha2Ugc3VyZSB0aGUgY29ubmVjdGlvbiBpcyBoZWFsdGh5LlxyXG4gICAgICAgICAgICB0aGlzLmxvZ18oJ3NlbmRpbmcgcGluZyBvbiBzZWNvbmRhcnkuJyk7XHJcbiAgICAgICAgICAgIHRoaXMuc2Vjb25kYXJ5Q29ubl8uc2VuZCh7IHQ6ICdjJywgZDogeyB0OiBQSU5HLCBkOiB7fSB9IH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5wcm9jZWVkV2l0aFVwZ3JhZGVfID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIHRlbGwgdGhpcyBjb25uZWN0aW9uIHRvIGNvbnNpZGVyIGl0c2VsZiBvcGVuXHJcbiAgICAgICAgdGhpcy5zZWNvbmRhcnlDb25uXy5zdGFydCgpO1xyXG4gICAgICAgIC8vIHNlbmQgYWNrXHJcbiAgICAgICAgdGhpcy5sb2dfKCdzZW5kaW5nIGNsaWVudCBhY2sgb24gc2Vjb25kYXJ5Jyk7XHJcbiAgICAgICAgdGhpcy5zZWNvbmRhcnlDb25uXy5zZW5kKHsgdDogJ2MnLCBkOiB7IHQ6IFNXSVRDSF9BQ0ssIGQ6IHt9IH0gfSk7XHJcbiAgICAgICAgLy8gc2VuZCBlbmQgcGFja2V0IG9uIHByaW1hcnkgdHJhbnNwb3J0LCBzd2l0Y2ggdG8gc2VuZGluZyBvbiB0aGlzIG9uZVxyXG4gICAgICAgIC8vIGNhbiByZWNlaXZlIG9uIHRoaXMgb25lLCBidWZmZXIgcmVzcG9uc2VzIHVudGlsIGVuZCByZWNlaXZlZCBvbiBwcmltYXJ5IHRyYW5zcG9ydFxyXG4gICAgICAgIHRoaXMubG9nXygnRW5kaW5nIHRyYW5zbWlzc2lvbiBvbiBwcmltYXJ5Jyk7XHJcbiAgICAgICAgdGhpcy5jb25uXy5zZW5kKHsgdDogJ2MnLCBkOiB7IHQ6IEVORF9UUkFOU01JU1NJT04sIGQ6IHt9IH0gfSk7XHJcbiAgICAgICAgdGhpcy50eF8gPSB0aGlzLnNlY29uZGFyeUNvbm5fO1xyXG4gICAgICAgIHRoaXMudHJ5Q2xlYW51cENvbm5lY3Rpb24oKTtcclxuICAgIH07XHJcbiAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5vblByaW1hcnlNZXNzYWdlUmVjZWl2ZWRfID0gZnVuY3Rpb24gKHBhcnNlZERhdGEpIHtcclxuICAgICAgICAvLyBNdXN0IHJlZmVyIHRvIHBhcnNlZERhdGEgcHJvcGVydGllcyBpbiBxdW90ZXMsIHNvIGNsb3N1cmUgZG9lc24ndCB0b3VjaCB0aGVtLlxyXG4gICAgICAgIHZhciBsYXllciA9IHJlcXVpcmVLZXkoJ3QnLCBwYXJzZWREYXRhKTtcclxuICAgICAgICB2YXIgZGF0YSA9IHJlcXVpcmVLZXkoJ2QnLCBwYXJzZWREYXRhKTtcclxuICAgICAgICBpZiAobGF5ZXIgPT09ICdjJykge1xyXG4gICAgICAgICAgICB0aGlzLm9uQ29udHJvbF8oZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGxheWVyID09PSAnZCcpIHtcclxuICAgICAgICAgICAgdGhpcy5vbkRhdGFNZXNzYWdlXyhkYXRhKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQ29ubmVjdGlvbi5wcm90b3R5cGUub25EYXRhTWVzc2FnZV8gPSBmdW5jdGlvbiAobWVzc2FnZSkge1xyXG4gICAgICAgIHRoaXMub25QcmltYXJ5UmVzcG9uc2VfKCk7XHJcbiAgICAgICAgLy8gV2UgZG9uJ3QgZG8gYW55dGhpbmcgd2l0aCBkYXRhIG1lc3NhZ2VzLCBqdXN0IGtpY2sgdGhlbSB1cCBhIGxldmVsXHJcbiAgICAgICAgdGhpcy5vbk1lc3NhZ2VfKG1lc3NhZ2UpO1xyXG4gICAgfTtcclxuICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLm9uUHJpbWFyeVJlc3BvbnNlXyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNIZWFsdGh5Xykge1xyXG4gICAgICAgICAgICB0aGlzLnByaW1hcnlSZXNwb25zZXNSZXF1aXJlZF8tLTtcclxuICAgICAgICAgICAgaWYgKHRoaXMucHJpbWFyeVJlc3BvbnNlc1JlcXVpcmVkXyA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ18oJ1ByaW1hcnkgY29ubmVjdGlvbiBpcyBoZWFsdGh5LicpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc0hlYWx0aHlfID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29ubl8ubWFya0Nvbm5lY3Rpb25IZWFsdGh5KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQ29ubmVjdGlvbi5wcm90b3R5cGUub25Db250cm9sXyA9IGZ1bmN0aW9uIChjb250cm9sRGF0YSkge1xyXG4gICAgICAgIHZhciBjbWQgPSByZXF1aXJlS2V5KE1FU1NBR0VfVFlQRSwgY29udHJvbERhdGEpO1xyXG4gICAgICAgIGlmIChNRVNTQUdFX0RBVEEgaW4gY29udHJvbERhdGEpIHtcclxuICAgICAgICAgICAgdmFyIHBheWxvYWQgPSBjb250cm9sRGF0YVtNRVNTQUdFX0RBVEFdO1xyXG4gICAgICAgICAgICBpZiAoY21kID09PSBTRVJWRVJfSEVMTE8pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub25IYW5kc2hha2VfKHBheWxvYWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGNtZCA9PT0gRU5EX1RSQU5TTUlTU0lPTikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2dfKCdyZWN2ZCBlbmQgdHJhbnNtaXNzaW9uIG9uIHByaW1hcnknKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucnhfID0gdGhpcy5zZWNvbmRhcnlDb25uXztcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5wZW5kaW5nRGF0YU1lc3NhZ2VzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkRhdGFNZXNzYWdlXyh0aGlzLnBlbmRpbmdEYXRhTWVzc2FnZXNbaV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5wZW5kaW5nRGF0YU1lc3NhZ2VzID0gW107XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRyeUNsZWFudXBDb25uZWN0aW9uKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY21kID09PSBDT05UUk9MX1NIVVRET1dOKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIHdhcyBwcmV2aW91c2x5IHRoZSAnb25LaWxsJyBjYWxsYmFjayBwYXNzZWQgdG8gdGhlIGxvd2VyLWxldmVsIGNvbm5lY3Rpb25cclxuICAgICAgICAgICAgICAgIC8vIHBheWxvYWQgaW4gdGhpcyBjYXNlIGlzIHRoZSByZWFzb24gZm9yIHRoZSBzaHV0ZG93bi4gR2VuZXJhbGx5IGEgaHVtYW4tcmVhZGFibGUgZXJyb3JcclxuICAgICAgICAgICAgICAgIHRoaXMub25Db25uZWN0aW9uU2h1dGRvd25fKHBheWxvYWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGNtZCA9PT0gQ09OVFJPTF9SRVNFVCkge1xyXG4gICAgICAgICAgICAgICAgLy8gcGF5bG9hZCBpbiB0aGlzIGNhc2UgaXMgdGhlIGhvc3Qgd2Ugc2hvdWxkIGNvbnRhY3RcclxuICAgICAgICAgICAgICAgIHRoaXMub25SZXNldF8ocGF5bG9hZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY21kID09PSBDT05UUk9MX0VSUk9SKSB7XHJcbiAgICAgICAgICAgICAgICBlcnJvcignU2VydmVyIEVycm9yOiAnICsgcGF5bG9hZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY21kID09PSBDT05UUk9MX1BPTkcpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9nXygnZ290IHBvbmcgb24gcHJpbWFyeS4nKTtcclxuICAgICAgICAgICAgICAgIHRoaXMub25QcmltYXJ5UmVzcG9uc2VfKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRQaW5nT25QcmltYXJ5SWZOZWNlc3NhcnlfKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBlcnJvcignVW5rbm93biBjb250cm9sIHBhY2tldCBjb21tYW5kOiAnICsgY21kKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaGFuZHNoYWtlIFRoZSBoYW5kc2hha2UgZGF0YSByZXR1cm5lZCBmcm9tIHRoZSBzZXJ2ZXJcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLm9uSGFuZHNoYWtlXyA9IGZ1bmN0aW9uIChoYW5kc2hha2UpIHtcclxuICAgICAgICB2YXIgdGltZXN0YW1wID0gaGFuZHNoYWtlLnRzO1xyXG4gICAgICAgIHZhciB2ZXJzaW9uID0gaGFuZHNoYWtlLnY7XHJcbiAgICAgICAgdmFyIGhvc3QgPSBoYW5kc2hha2UuaDtcclxuICAgICAgICB0aGlzLnNlc3Npb25JZCA9IGhhbmRzaGFrZS5zO1xyXG4gICAgICAgIHRoaXMucmVwb0luZm9fLnVwZGF0ZUhvc3QoaG9zdCk7XHJcbiAgICAgICAgLy8gaWYgd2UndmUgYWxyZWFkeSBjbG9zZWQgdGhlIGNvbm5lY3Rpb24sIHRoZW4gZG9uJ3QgYm90aGVyIHRyeWluZyB0byBwcm9ncmVzcyBmdXJ0aGVyXHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGVfID09PSAwIC8qIENPTk5FQ1RJTkcgKi8pIHtcclxuICAgICAgICAgICAgdGhpcy5jb25uXy5zdGFydCgpO1xyXG4gICAgICAgICAgICB0aGlzLm9uQ29ubmVjdGlvbkVzdGFibGlzaGVkXyh0aGlzLmNvbm5fLCB0aW1lc3RhbXApO1xyXG4gICAgICAgICAgICBpZiAoUFJPVE9DT0xfVkVSU0lPTiAhPT0gdmVyc2lvbikge1xyXG4gICAgICAgICAgICAgICAgd2FybignUHJvdG9jb2wgdmVyc2lvbiBtaXNtYXRjaCBkZXRlY3RlZCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIFRPRE86IGRvIHdlIHdhbnQgdG8gdXBncmFkZT8gd2hlbj8gbWF5YmUgYSBkZWxheT9cclxuICAgICAgICAgICAgdGhpcy50cnlTdGFydFVwZ3JhZGVfKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLnRyeVN0YXJ0VXBncmFkZV8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGNvbm4gPSB0aGlzLnRyYW5zcG9ydE1hbmFnZXJfLnVwZ3JhZGVUcmFuc3BvcnQoKTtcclxuICAgICAgICBpZiAoY29ubikge1xyXG4gICAgICAgICAgICB0aGlzLnN0YXJ0VXBncmFkZV8oY29ubik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLnN0YXJ0VXBncmFkZV8gPSBmdW5jdGlvbiAoY29ubikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5zZWNvbmRhcnlDb25uXyA9IG5ldyBjb25uKHRoaXMubmV4dFRyYW5zcG9ydElkXygpLCB0aGlzLnJlcG9JbmZvXywgdGhpcy5hcHBsaWNhdGlvbklkXywgdGhpcy5zZXNzaW9uSWQpO1xyXG4gICAgICAgIC8vIEZvciBjZXJ0YWluIHRyYW5zcG9ydHMgKFdlYlNvY2tldHMpLCB3ZSBuZWVkIHRvIHNlbmQgYW5kIHJlY2VpdmUgc2V2ZXJhbCBtZXNzYWdlcyBiYWNrIGFuZCBmb3J0aCBiZWZvcmUgd2VcclxuICAgICAgICAvLyBjYW4gY29uc2lkZXIgdGhlIHRyYW5zcG9ydCBoZWFsdGh5LlxyXG4gICAgICAgIHRoaXMuc2Vjb25kYXJ5UmVzcG9uc2VzUmVxdWlyZWRfID1cclxuICAgICAgICAgICAgY29ublsncmVzcG9uc2VzUmVxdWlyZWRUb0JlSGVhbHRoeSddIHx8IDA7XHJcbiAgICAgICAgdmFyIG9uTWVzc2FnZSA9IHRoaXMuY29ublJlY2VpdmVyXyh0aGlzLnNlY29uZGFyeUNvbm5fKTtcclxuICAgICAgICB2YXIgb25EaXNjb25uZWN0ID0gdGhpcy5kaXNjb25uUmVjZWl2ZXJfKHRoaXMuc2Vjb25kYXJ5Q29ubl8pO1xyXG4gICAgICAgIHRoaXMuc2Vjb25kYXJ5Q29ubl8ub3Blbihvbk1lc3NhZ2UsIG9uRGlzY29ubmVjdCk7XHJcbiAgICAgICAgLy8gSWYgd2UgaGF2ZW4ndCBzdWNjZXNzZnVsbHkgdXBncmFkZWQgYWZ0ZXIgVVBHUkFERV9USU1FT1VULCBnaXZlIHVwIGFuZCBraWxsIHRoZSBzZWNvbmRhcnkuXHJcbiAgICAgICAgc2V0VGltZW91dE5vbkJsb2NraW5nKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKF90aGlzLnNlY29uZGFyeUNvbm5fKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5sb2dfKCdUaW1lZCBvdXQgdHJ5aW5nIHRvIHVwZ3JhZGUuJyk7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5zZWNvbmRhcnlDb25uXy5jbG9zZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgTWF0aC5mbG9vcihVUEdSQURFX1RJTUVPVVQpKTtcclxuICAgIH07XHJcbiAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5vblJlc2V0XyA9IGZ1bmN0aW9uIChob3N0KSB7XHJcbiAgICAgICAgdGhpcy5sb2dfKCdSZXNldCBwYWNrZXQgcmVjZWl2ZWQuICBOZXcgaG9zdDogJyArIGhvc3QpO1xyXG4gICAgICAgIHRoaXMucmVwb0luZm9fLnVwZGF0ZUhvc3QoaG9zdCk7XHJcbiAgICAgICAgLy8gVE9ETzogaWYgd2UncmUgYWxyZWFkeSBcImNvbm5lY3RlZFwiLCB3ZSBuZWVkIHRvIHRyaWdnZXIgYSBkaXNjb25uZWN0IGF0IHRoZSBuZXh0IGxheWVyIHVwLlxyXG4gICAgICAgIC8vIFdlIGRvbid0IGN1cnJlbnRseSBzdXBwb3J0IHJlc2V0cyBhZnRlciB0aGUgY29ubmVjdGlvbiBoYXMgYWxyZWFkeSBiZWVuIGVzdGFibGlzaGVkXHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGVfID09PSAxIC8qIENPTk5FQ1RFRCAqLykge1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBDbG9zZSB3aGF0ZXZlciBjb25uZWN0aW9ucyB3ZSBoYXZlIG9wZW4gYW5kIHN0YXJ0IGFnYWluLlxyXG4gICAgICAgICAgICB0aGlzLmNsb3NlQ29ubmVjdGlvbnNfKCk7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRfKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLm9uQ29ubmVjdGlvbkVzdGFibGlzaGVkXyA9IGZ1bmN0aW9uIChjb25uLCB0aW1lc3RhbXApIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMubG9nXygnUmVhbHRpbWUgY29ubmVjdGlvbiBlc3RhYmxpc2hlZC4nKTtcclxuICAgICAgICB0aGlzLmNvbm5fID0gY29ubjtcclxuICAgICAgICB0aGlzLnN0YXRlXyA9IDEgLyogQ09OTkVDVEVEICovO1xyXG4gICAgICAgIGlmICh0aGlzLm9uUmVhZHlfKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25SZWFkeV8odGltZXN0YW1wLCB0aGlzLnNlc3Npb25JZCk7XHJcbiAgICAgICAgICAgIHRoaXMub25SZWFkeV8gPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBJZiBhZnRlciA1IHNlY29uZHMgd2UgaGF2ZW4ndCBzZW50IGVub3VnaCByZXF1ZXN0cyB0byB0aGUgc2VydmVyIHRvIGdldCB0aGUgY29ubmVjdGlvbiBoZWFsdGh5LFxyXG4gICAgICAgIC8vIHNlbmQgc29tZSBwaW5ncy5cclxuICAgICAgICBpZiAodGhpcy5wcmltYXJ5UmVzcG9uc2VzUmVxdWlyZWRfID09PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nXygnUHJpbWFyeSBjb25uZWN0aW9uIGlzIGhlYWx0aHkuJyk7XHJcbiAgICAgICAgICAgIHRoaXMuaXNIZWFsdGh5XyA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0Tm9uQmxvY2tpbmcoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuc2VuZFBpbmdPblByaW1hcnlJZk5lY2Vzc2FyeV8oKTtcclxuICAgICAgICAgICAgfSwgTWF0aC5mbG9vcihERUxBWV9CRUZPUkVfU0VORElOR19FWFRSQV9SRVFVRVNUUykpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5zZW5kUGluZ09uUHJpbWFyeUlmTmVjZXNzYXJ5XyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBJZiB0aGUgY29ubmVjdGlvbiBpc24ndCBjb25zaWRlcmVkIGhlYWx0aHkgeWV0LCB3ZSdsbCBzZW5kIGEgbm9vcCBwaW5nIHBhY2tldCByZXF1ZXN0LlxyXG4gICAgICAgIGlmICghdGhpcy5pc0hlYWx0aHlfICYmIHRoaXMuc3RhdGVfID09PSAxIC8qIENPTk5FQ1RFRCAqLykge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ18oJ3NlbmRpbmcgcGluZyBvbiBwcmltYXJ5LicpO1xyXG4gICAgICAgICAgICB0aGlzLnNlbmREYXRhXyh7IHQ6ICdjJywgZDogeyB0OiBQSU5HLCBkOiB7fSB9IH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5vblNlY29uZGFyeUNvbm5lY3Rpb25Mb3N0XyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgY29ubiA9IHRoaXMuc2Vjb25kYXJ5Q29ubl87XHJcbiAgICAgICAgdGhpcy5zZWNvbmRhcnlDb25uXyA9IG51bGw7XHJcbiAgICAgICAgaWYgKHRoaXMudHhfID09PSBjb25uIHx8IHRoaXMucnhfID09PSBjb25uKSB7XHJcbiAgICAgICAgICAgIC8vIHdlIGFyZSByZWx5aW5nIG9uIHRoaXMgY29ubmVjdGlvbiBhbHJlYWR5IGluIHNvbWUgY2FwYWNpdHkuIFRoZXJlZm9yZSwgYSBmYWlsdXJlIGlzIHJlYWxcclxuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGV2ZXJDb25uZWN0ZWQgV2hldGhlciBvciBub3QgdGhlIGNvbm5lY3Rpb24gZXZlciByZWFjaGVkIGEgc2VydmVyLiBVc2VkIHRvIGRldGVybWluZSBpZlxyXG4gICAgICogd2Ugc2hvdWxkIGZsdXNoIHRoZSBob3N0IGNhY2hlXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5vbkNvbm5lY3Rpb25Mb3N0XyA9IGZ1bmN0aW9uIChldmVyQ29ubmVjdGVkKSB7XHJcbiAgICAgICAgdGhpcy5jb25uXyA9IG51bGw7XHJcbiAgICAgICAgLy8gTk9URTogSUYgeW91J3JlIHNlZWluZyBhIEZpcmVmb3ggZXJyb3IgZm9yIHRoaXMgbGluZSwgSSB0aGluayBpdCBtaWdodCBiZSBiZWNhdXNlIGl0J3MgZ2V0dGluZ1xyXG4gICAgICAgIC8vIGNhbGxlZCBvbiB3aW5kb3cgY2xvc2UgYW5kIFJlYWx0aW1lU3RhdGUuQ09OTkVDVElORyBpcyBubyBsb25nZXIgZGVmaW5lZC4gIEp1c3QgYSBndWVzcy5cclxuICAgICAgICBpZiAoIWV2ZXJDb25uZWN0ZWQgJiYgdGhpcy5zdGF0ZV8gPT09IDAgLyogQ09OTkVDVElORyAqLykge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ18oJ1JlYWx0aW1lIGNvbm5lY3Rpb24gZmFpbGVkLicpO1xyXG4gICAgICAgICAgICAvLyBTaW5jZSB3ZSBmYWlsZWQgdG8gY29ubmVjdCBhdCBhbGwsIGNsZWFyIGFueSBjYWNoZWQgZW50cnkgZm9yIHRoaXMgbmFtZXNwYWNlIGluIGNhc2UgdGhlIG1hY2hpbmUgd2VudCBhd2F5XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnJlcG9JbmZvXy5pc0NhY2hlYWJsZUhvc3QoKSkge1xyXG4gICAgICAgICAgICAgICAgUGVyc2lzdGVudFN0b3JhZ2UucmVtb3ZlKCdob3N0OicgKyB0aGlzLnJlcG9JbmZvXy5ob3N0KTtcclxuICAgICAgICAgICAgICAgIC8vIHJlc2V0IHRoZSBpbnRlcm5hbCBob3N0IHRvIHdoYXQgd2Ugd291bGQgc2hvdyB0aGUgdXNlciwgaS5lLiA8bnM+LmZpcmViYXNlaW8uY29tXHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlcG9JbmZvXy5pbnRlcm5hbEhvc3QgPSB0aGlzLnJlcG9JbmZvXy5ob3N0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuc3RhdGVfID09PSAxIC8qIENPTk5FQ1RFRCAqLykge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ18oJ1JlYWx0aW1lIGNvbm5lY3Rpb24gbG9zdC4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb25cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLm9uQ29ubmVjdGlvblNodXRkb3duXyA9IGZ1bmN0aW9uIChyZWFzb24pIHtcclxuICAgICAgICB0aGlzLmxvZ18oJ0Nvbm5lY3Rpb24gc2h1dGRvd24gY29tbWFuZCByZWNlaXZlZC4gU2h1dHRpbmcgZG93bi4uLicpO1xyXG4gICAgICAgIGlmICh0aGlzLm9uS2lsbF8pIHtcclxuICAgICAgICAgICAgdGhpcy5vbktpbGxfKHJlYXNvbik7XHJcbiAgICAgICAgICAgIHRoaXMub25LaWxsXyA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFdlIGludGVudGlvbmFsbHkgZG9uJ3Qgd2FudCB0byBmaXJlIG9uRGlzY29ubmVjdCAoa2lsbCBpcyBhIGRpZmZlcmVudCBjYXNlKSxcclxuICAgICAgICAvLyBzbyBjbGVhciB0aGUgY2FsbGJhY2suXHJcbiAgICAgICAgdGhpcy5vbkRpc2Nvbm5lY3RfID0gbnVsbDtcclxuICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICB9O1xyXG4gICAgQ29ubmVjdGlvbi5wcm90b3R5cGUuc2VuZERhdGFfID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICBpZiAodGhpcy5zdGF0ZV8gIT09IDEgLyogQ09OTkVDVEVEICovKSB7XHJcbiAgICAgICAgICAgIHRocm93ICdDb25uZWN0aW9uIGlzIG5vdCBjb25uZWN0ZWQnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy50eF8uc2VuZChkYXRhKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDbGVhbnMgdXAgdGhpcyBjb25uZWN0aW9uLCBjYWxsaW5nIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3NcclxuICAgICAqL1xyXG4gICAgQ29ubmVjdGlvbi5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGVfICE9PSAyIC8qIERJU0NPTk5FQ1RFRCAqLykge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ18oJ0Nsb3NpbmcgcmVhbHRpbWUgY29ubmVjdGlvbi4nKTtcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZV8gPSAyIC8qIERJU0NPTk5FQ1RFRCAqLztcclxuICAgICAgICAgICAgdGhpcy5jbG9zZUNvbm5lY3Rpb25zXygpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5vbkRpc2Nvbm5lY3RfKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uRGlzY29ubmVjdF8oKTtcclxuICAgICAgICAgICAgICAgIHRoaXMub25EaXNjb25uZWN0XyA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgQ29ubmVjdGlvbi5wcm90b3R5cGUuY2xvc2VDb25uZWN0aW9uc18gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5sb2dfKCdTaHV0dGluZyBkb3duIGFsbCBjb25uZWN0aW9ucycpO1xyXG4gICAgICAgIGlmICh0aGlzLmNvbm5fKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29ubl8uY2xvc2UoKTtcclxuICAgICAgICAgICAgdGhpcy5jb25uXyA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnNlY29uZGFyeUNvbm5fKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2Vjb25kYXJ5Q29ubl8uY2xvc2UoKTtcclxuICAgICAgICAgICAgdGhpcy5zZWNvbmRhcnlDb25uXyA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmhlYWx0aHlUaW1lb3V0Xykge1xyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5oZWFsdGh5VGltZW91dF8pO1xyXG4gICAgICAgICAgICB0aGlzLmhlYWx0aHlUaW1lb3V0XyA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBDb25uZWN0aW9uO1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogSW50ZXJmYWNlIGRlZmluaW5nIHRoZSBzZXQgb2YgYWN0aW9ucyB0aGF0IGNhbiBiZSBwZXJmb3JtZWQgYWdhaW5zdCB0aGUgRmlyZWJhc2Ugc2VydmVyXHJcbiAqIChiYXNpY2FsbHkgY29ycmVzcG9uZHMgdG8gb3VyIHdpcmUgcHJvdG9jb2wpLlxyXG4gKlxyXG4gKiBAaW50ZXJmYWNlXHJcbiAqL1xyXG52YXIgU2VydmVyQWN0aW9ucyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFNlcnZlckFjdGlvbnMoKSB7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoU3RyaW5nXHJcbiAgICAgKiBAcGFyYW0geyp9IGRhdGFcclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oc3RyaW5nLCBzdHJpbmcpPX0gb25Db21wbGV0ZVxyXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBoYXNoXHJcbiAgICAgKi9cclxuICAgIFNlcnZlckFjdGlvbnMucHJvdG90eXBlLnB1dCA9IGZ1bmN0aW9uIChwYXRoU3RyaW5nLCBkYXRhLCBvbkNvbXBsZXRlLCBoYXNoKSB7IH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoU3RyaW5nXHJcbiAgICAgKiBAcGFyYW0geyp9IGRhdGFcclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oc3RyaW5nLCA/c3RyaW5nKX0gb25Db21wbGV0ZVxyXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBoYXNoXHJcbiAgICAgKi9cclxuICAgIFNlcnZlckFjdGlvbnMucHJvdG90eXBlLm1lcmdlID0gZnVuY3Rpb24gKHBhdGhTdHJpbmcsIGRhdGEsIG9uQ29tcGxldGUsIGhhc2gpIHsgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmVmcmVzaGVzIHRoZSBhdXRoIHRva2VuIGZvciB0aGUgY3VycmVudCBjb25uZWN0aW9uLlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRva2VuIFRoZSBhdXRoZW50aWNhdGlvbiB0b2tlblxyXG4gICAgICovXHJcbiAgICBTZXJ2ZXJBY3Rpb25zLnByb3RvdHlwZS5yZWZyZXNoQXV0aFRva2VuID0gZnVuY3Rpb24gKHRva2VuKSB7IH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoU3RyaW5nXHJcbiAgICAgKiBAcGFyYW0geyp9IGRhdGFcclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oc3RyaW5nLCBzdHJpbmcpPX0gb25Db21wbGV0ZVxyXG4gICAgICovXHJcbiAgICBTZXJ2ZXJBY3Rpb25zLnByb3RvdHlwZS5vbkRpc2Nvbm5lY3RQdXQgPSBmdW5jdGlvbiAocGF0aFN0cmluZywgZGF0YSwgb25Db21wbGV0ZSkgeyB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aFN0cmluZ1xyXG4gICAgICogQHBhcmFtIHsqfSBkYXRhXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZywgc3RyaW5nKT19IG9uQ29tcGxldGVcclxuICAgICAqL1xyXG4gICAgU2VydmVyQWN0aW9ucy5wcm90b3R5cGUub25EaXNjb25uZWN0TWVyZ2UgPSBmdW5jdGlvbiAocGF0aFN0cmluZywgZGF0YSwgb25Db21wbGV0ZSkgeyB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aFN0cmluZ1xyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbihzdHJpbmcsIHN0cmluZyk9fSBvbkNvbXBsZXRlXHJcbiAgICAgKi9cclxuICAgIFNlcnZlckFjdGlvbnMucHJvdG90eXBlLm9uRGlzY29ubmVjdENhbmNlbCA9IGZ1bmN0aW9uIChwYXRoU3RyaW5nLCBvbkNvbXBsZXRlKSB7IH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsICo+fSBzdGF0c1xyXG4gICAgICovXHJcbiAgICBTZXJ2ZXJBY3Rpb25zLnByb3RvdHlwZS5yZXBvcnRTdGF0cyA9IGZ1bmN0aW9uIChzdGF0cykgeyB9O1xyXG4gICAgcmV0dXJuIFNlcnZlckFjdGlvbnM7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBSRUNPTk5FQ1RfTUlOX0RFTEFZID0gMTAwMDtcclxudmFyIFJFQ09OTkVDVF9NQVhfREVMQVlfREVGQVVMVCA9IDYwICogNSAqIDEwMDA7IC8vIDUgbWludXRlcyBpbiBtaWxsaXNlY29uZHMgKENhc2U6IDE4NTgpXHJcbnZhciBSRUNPTk5FQ1RfTUFYX0RFTEFZX0ZPUl9BRE1JTlMgPSAzMCAqIDEwMDA7IC8vIDMwIHNlY29uZHMgZm9yIGFkbWluIGNsaWVudHMgKGxpa2VseSB0byBiZSBhIGJhY2tlbmQgc2VydmVyKVxyXG52YXIgUkVDT05ORUNUX0RFTEFZX01VTFRJUExJRVIgPSAxLjM7XHJcbnZhciBSRUNPTk5FQ1RfREVMQVlfUkVTRVRfVElNRU9VVCA9IDMwMDAwOyAvLyBSZXNldCBkZWxheSBiYWNrIHRvIE1JTl9ERUxBWSBhZnRlciBiZWluZyBjb25uZWN0ZWQgZm9yIDMwc2VjLlxyXG52YXIgU0VSVkVSX0tJTExfSU5URVJSVVBUX1JFQVNPTiA9ICdzZXJ2ZXJfa2lsbCc7XHJcbi8vIElmIGF1dGggZmFpbHMgcmVwZWF0ZWRseSwgd2UnbGwgYXNzdW1lIHNvbWV0aGluZyBpcyB3cm9uZyBhbmQgbG9nIGEgd2FybmluZyAvIGJhY2sgb2ZmLlxyXG52YXIgSU5WQUxJRF9BVVRIX1RPS0VOX1RIUkVTSE9MRCA9IDM7XHJcbi8qKlxyXG4gKiBGaXJlYmFzZSBjb25uZWN0aW9uLiAgQWJzdHJhY3RzIHdpcmUgcHJvdG9jb2wgYW5kIGhhbmRsZXMgcmVjb25uZWN0aW5nLlxyXG4gKlxyXG4gKiBOT1RFOiBBbGwgSlNPTiBvYmplY3RzIHNlbnQgdG8gdGhlIHJlYWx0aW1lIGNvbm5lY3Rpb24gbXVzdCBoYXZlIHByb3BlcnR5IG5hbWVzIGVuY2xvc2VkXHJcbiAqIGluIHF1b3RlcyB0byBtYWtlIHN1cmUgdGhlIGNsb3N1cmUgY29tcGlsZXIgZG9lcyBub3QgbWluaWZ5IHRoZW0uXHJcbiAqL1xyXG52YXIgUGVyc2lzdGVudENvbm5lY3Rpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoUGVyc2lzdGVudENvbm5lY3Rpb24sIF9zdXBlcik7XHJcbiAgICAvKipcclxuICAgICAqIEBpbXBsZW1lbnRzIHtTZXJ2ZXJBY3Rpb25zfVxyXG4gICAgICogQHBhcmFtIHJlcG9JbmZvXyBEYXRhIGFib3V0IHRoZSBuYW1lc3BhY2Ugd2UgYXJlIGNvbm5lY3RpbmcgdG9cclxuICAgICAqIEBwYXJhbSBhcHBsaWNhdGlvbklkXyBUaGUgRmlyZWJhc2UgQXBwIElEIGZvciB0aGlzIHByb2plY3RcclxuICAgICAqIEBwYXJhbSBvbkRhdGFVcGRhdGVfIEEgY2FsbGJhY2sgZm9yIG5ldyBkYXRhIGZyb20gdGhlIHNlcnZlclxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBQZXJzaXN0ZW50Q29ubmVjdGlvbihyZXBvSW5mb18sIGFwcGxpY2F0aW9uSWRfLCBvbkRhdGFVcGRhdGVfLCBvbkNvbm5lY3RTdGF0dXNfLCBvblNlcnZlckluZm9VcGRhdGVfLCBhdXRoVG9rZW5Qcm92aWRlcl8sIGF1dGhPdmVycmlkZV8pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLnJlcG9JbmZvXyA9IHJlcG9JbmZvXztcclxuICAgICAgICBfdGhpcy5hcHBsaWNhdGlvbklkXyA9IGFwcGxpY2F0aW9uSWRfO1xyXG4gICAgICAgIF90aGlzLm9uRGF0YVVwZGF0ZV8gPSBvbkRhdGFVcGRhdGVfO1xyXG4gICAgICAgIF90aGlzLm9uQ29ubmVjdFN0YXR1c18gPSBvbkNvbm5lY3RTdGF0dXNfO1xyXG4gICAgICAgIF90aGlzLm9uU2VydmVySW5mb1VwZGF0ZV8gPSBvblNlcnZlckluZm9VcGRhdGVfO1xyXG4gICAgICAgIF90aGlzLmF1dGhUb2tlblByb3ZpZGVyXyA9IGF1dGhUb2tlblByb3ZpZGVyXztcclxuICAgICAgICBfdGhpcy5hdXRoT3ZlcnJpZGVfID0gYXV0aE92ZXJyaWRlXztcclxuICAgICAgICAvLyBVc2VkIGZvciBkaWFnbm9zdGljIGxvZ2dpbmcuXHJcbiAgICAgICAgX3RoaXMuaWQgPSBQZXJzaXN0ZW50Q29ubmVjdGlvbi5uZXh0UGVyc2lzdGVudENvbm5lY3Rpb25JZF8rKztcclxuICAgICAgICBfdGhpcy5sb2dfID0gbG9nV3JhcHBlcigncDonICsgX3RoaXMuaWQgKyAnOicpO1xyXG4gICAgICAgIF90aGlzLmludGVycnVwdFJlYXNvbnNfID0ge307XHJcbiAgICAgICAgLyoqIE1hcDxwYXRoLCBNYXA8cXVlcnlJZCwgTGlzdGVuU3BlYz4+ICovXHJcbiAgICAgICAgX3RoaXMubGlzdGVucyA9IG5ldyBNYXAoKTtcclxuICAgICAgICBfdGhpcy5vdXRzdGFuZGluZ1B1dHNfID0gW107XHJcbiAgICAgICAgX3RoaXMub3V0c3RhbmRpbmdQdXRDb3VudF8gPSAwO1xyXG4gICAgICAgIF90aGlzLm9uRGlzY29ubmVjdFJlcXVlc3RRdWV1ZV8gPSBbXTtcclxuICAgICAgICBfdGhpcy5jb25uZWN0ZWRfID0gZmFsc2U7XHJcbiAgICAgICAgX3RoaXMucmVjb25uZWN0RGVsYXlfID0gUkVDT05ORUNUX01JTl9ERUxBWTtcclxuICAgICAgICBfdGhpcy5tYXhSZWNvbm5lY3REZWxheV8gPSBSRUNPTk5FQ1RfTUFYX0RFTEFZX0RFRkFVTFQ7XHJcbiAgICAgICAgX3RoaXMuc2VjdXJpdHlEZWJ1Z0NhbGxiYWNrXyA9IG51bGw7XHJcbiAgICAgICAgX3RoaXMubGFzdFNlc3Npb25JZCA9IG51bGw7XHJcbiAgICAgICAgX3RoaXMuZXN0YWJsaXNoQ29ubmVjdGlvblRpbWVyXyA9IG51bGw7XHJcbiAgICAgICAgX3RoaXMudmlzaWJsZV8gPSBmYWxzZTtcclxuICAgICAgICAvLyBCZWZvcmUgd2UgZ2V0IGNvbm5lY3RlZCwgd2Uga2VlcCBhIHF1ZXVlIG9mIHBlbmRpbmcgbWVzc2FnZXMgdG8gc2VuZC5cclxuICAgICAgICBfdGhpcy5yZXF1ZXN0Q0JIYXNoXyA9IHt9O1xyXG4gICAgICAgIF90aGlzLnJlcXVlc3ROdW1iZXJfID0gMDtcclxuICAgICAgICBfdGhpcy5yZWFsdGltZV8gPSBudWxsO1xyXG4gICAgICAgIF90aGlzLmF1dGhUb2tlbl8gPSBudWxsO1xyXG4gICAgICAgIF90aGlzLmZvcmNlVG9rZW5SZWZyZXNoXyA9IGZhbHNlO1xyXG4gICAgICAgIF90aGlzLmludmFsaWRBdXRoVG9rZW5Db3VudF8gPSAwO1xyXG4gICAgICAgIF90aGlzLmZpcnN0Q29ubmVjdGlvbl8gPSB0cnVlO1xyXG4gICAgICAgIF90aGlzLmxhc3RDb25uZWN0aW9uQXR0ZW1wdFRpbWVfID0gbnVsbDtcclxuICAgICAgICBfdGhpcy5sYXN0Q29ubmVjdGlvbkVzdGFibGlzaGVkVGltZV8gPSBudWxsO1xyXG4gICAgICAgIGlmIChhdXRoT3ZlcnJpZGVfICYmICFpc05vZGVTZGsoKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0F1dGggb3ZlcnJpZGUgc3BlY2lmaWVkIGluIG9wdGlvbnMsIGJ1dCBub3Qgc3VwcG9ydGVkIG9uIG5vbiBOb2RlLmpzIHBsYXRmb3JtcycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBfdGhpcy5zY2hlZHVsZUNvbm5lY3RfKDApO1xyXG4gICAgICAgIFZpc2liaWxpdHlNb25pdG9yLmdldEluc3RhbmNlKCkub24oJ3Zpc2libGUnLCBfdGhpcy5vblZpc2libGVfLCBfdGhpcyk7XHJcbiAgICAgICAgaWYgKHJlcG9JbmZvXy5ob3N0LmluZGV4T2YoJ2ZibG9jYWwnKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgT25saW5lTW9uaXRvci5nZXRJbnN0YW5jZSgpLm9uKCdvbmxpbmUnLCBfdGhpcy5vbk9ubGluZV8sIF90aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgUGVyc2lzdGVudENvbm5lY3Rpb24ucHJvdG90eXBlLnNlbmRSZXF1ZXN0ID0gZnVuY3Rpb24gKGFjdGlvbiwgYm9keSwgb25SZXNwb25zZSkge1xyXG4gICAgICAgIHZhciBjdXJSZXFOdW0gPSArK3RoaXMucmVxdWVzdE51bWJlcl87XHJcbiAgICAgICAgdmFyIG1zZyA9IHsgcjogY3VyUmVxTnVtLCBhOiBhY3Rpb24sIGI6IGJvZHkgfTtcclxuICAgICAgICB0aGlzLmxvZ18oc3RyaW5naWZ5KG1zZykpO1xyXG4gICAgICAgIGFzc2VydCh0aGlzLmNvbm5lY3RlZF8sIFwic2VuZFJlcXVlc3QgY2FsbCB3aGVuIHdlJ3JlIG5vdCBjb25uZWN0ZWQgbm90IGFsbG93ZWQuXCIpO1xyXG4gICAgICAgIHRoaXMucmVhbHRpbWVfLnNlbmRSZXF1ZXN0KG1zZyk7XHJcbiAgICAgICAgaWYgKG9uUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0Q0JIYXNoX1tjdXJSZXFOdW1dID0gb25SZXNwb25zZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBQZXJzaXN0ZW50Q29ubmVjdGlvbi5wcm90b3R5cGUubGlzdGVuID0gZnVuY3Rpb24gKHF1ZXJ5LCBjdXJyZW50SGFzaEZuLCB0YWcsIG9uQ29tcGxldGUpIHtcclxuICAgICAgICB2YXIgcXVlcnlJZCA9IHF1ZXJ5LnF1ZXJ5SWRlbnRpZmllcigpO1xyXG4gICAgICAgIHZhciBwYXRoU3RyaW5nID0gcXVlcnkucGF0aC50b1N0cmluZygpO1xyXG4gICAgICAgIHRoaXMubG9nXygnTGlzdGVuIGNhbGxlZCBmb3IgJyArIHBhdGhTdHJpbmcgKyAnICcgKyBxdWVyeUlkKTtcclxuICAgICAgICBpZiAoIXRoaXMubGlzdGVucy5oYXMocGF0aFN0cmluZykpIHtcclxuICAgICAgICAgICAgdGhpcy5saXN0ZW5zLnNldChwYXRoU3RyaW5nLCBuZXcgTWFwKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhc3NlcnQocXVlcnkuZ2V0UXVlcnlQYXJhbXMoKS5pc0RlZmF1bHQoKSB8fFxyXG4gICAgICAgICAgICAhcXVlcnkuZ2V0UXVlcnlQYXJhbXMoKS5sb2Fkc0FsbERhdGEoKSwgJ2xpc3RlbigpIGNhbGxlZCBmb3Igbm9uLWRlZmF1bHQgYnV0IGNvbXBsZXRlIHF1ZXJ5Jyk7XHJcbiAgICAgICAgYXNzZXJ0KCF0aGlzLmxpc3RlbnMuZ2V0KHBhdGhTdHJpbmcpLmhhcyhxdWVyeUlkKSwgJ2xpc3RlbigpIGNhbGxlZCB0d2ljZSBmb3Igc2FtZSBwYXRoL3F1ZXJ5SWQuJyk7XHJcbiAgICAgICAgdmFyIGxpc3RlblNwZWMgPSB7XHJcbiAgICAgICAgICAgIG9uQ29tcGxldGU6IG9uQ29tcGxldGUsXHJcbiAgICAgICAgICAgIGhhc2hGbjogY3VycmVudEhhc2hGbixcclxuICAgICAgICAgICAgcXVlcnk6IHF1ZXJ5LFxyXG4gICAgICAgICAgICB0YWc6IHRhZ1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5saXN0ZW5zLmdldChwYXRoU3RyaW5nKS5zZXQocXVlcnlJZCwgbGlzdGVuU3BlYyk7XHJcbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdGVkXykge1xyXG4gICAgICAgICAgICB0aGlzLnNlbmRMaXN0ZW5fKGxpc3RlblNwZWMpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBQZXJzaXN0ZW50Q29ubmVjdGlvbi5wcm90b3R5cGUuc2VuZExpc3Rlbl8gPSBmdW5jdGlvbiAobGlzdGVuU3BlYykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHF1ZXJ5ID0gbGlzdGVuU3BlYy5xdWVyeTtcclxuICAgICAgICB2YXIgcGF0aFN0cmluZyA9IHF1ZXJ5LnBhdGgudG9TdHJpbmcoKTtcclxuICAgICAgICB2YXIgcXVlcnlJZCA9IHF1ZXJ5LnF1ZXJ5SWRlbnRpZmllcigpO1xyXG4gICAgICAgIHRoaXMubG9nXygnTGlzdGVuIG9uICcgKyBwYXRoU3RyaW5nICsgJyBmb3IgJyArIHF1ZXJ5SWQpO1xyXG4gICAgICAgIHZhciByZXEgPSB7IC8qcGF0aCovIHA6IHBhdGhTdHJpbmcgfTtcclxuICAgICAgICB2YXIgYWN0aW9uID0gJ3EnO1xyXG4gICAgICAgIC8vIE9ubHkgYm90aGVyIHRvIHNlbmQgcXVlcnkgaWYgaXQncyBub24tZGVmYXVsdC5cclxuICAgICAgICBpZiAobGlzdGVuU3BlYy50YWcpIHtcclxuICAgICAgICAgICAgcmVxWydxJ10gPSBxdWVyeS5xdWVyeU9iamVjdCgpO1xyXG4gICAgICAgICAgICByZXFbJ3QnXSA9IGxpc3RlblNwZWMudGFnO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXFbIC8qaGFzaCovJ2gnXSA9IGxpc3RlblNwZWMuaGFzaEZuKCk7XHJcbiAgICAgICAgdGhpcy5zZW5kUmVxdWVzdChhY3Rpb24sIHJlcSwgZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgdmFyIHBheWxvYWQgPSBtZXNzYWdlWyAvKmRhdGEqLydkJ107XHJcbiAgICAgICAgICAgIHZhciBzdGF0dXMgPSBtZXNzYWdlWyAvKnN0YXR1cyovJ3MnXTtcclxuICAgICAgICAgICAgLy8gcHJpbnQgd2FybmluZ3MgaW4gYW55IGNhc2UuLi5cclxuICAgICAgICAgICAgUGVyc2lzdGVudENvbm5lY3Rpb24ud2Fybk9uTGlzdGVuV2FybmluZ3NfKHBheWxvYWQsIHF1ZXJ5KTtcclxuICAgICAgICAgICAgdmFyIGN1cnJlbnRMaXN0ZW5TcGVjID0gX3RoaXMubGlzdGVucy5nZXQocGF0aFN0cmluZykgJiZcclxuICAgICAgICAgICAgICAgIF90aGlzLmxpc3RlbnMuZ2V0KHBhdGhTdHJpbmcpLmdldChxdWVyeUlkKTtcclxuICAgICAgICAgICAgLy8gb25seSB0cmlnZ2VyIGFjdGlvbnMgaWYgdGhlIGxpc3RlbiBoYXNuJ3QgYmVlbiByZW1vdmVkIGFuZCByZWFkZGVkXHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50TGlzdGVuU3BlYyA9PT0gbGlzdGVuU3BlYykge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMubG9nXygnbGlzdGVuIHJlc3BvbnNlJywgbWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzICE9PSAnb2snKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVtb3ZlTGlzdGVuXyhwYXRoU3RyaW5nLCBxdWVyeUlkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChsaXN0ZW5TcGVjLm9uQ29tcGxldGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5TcGVjLm9uQ29tcGxldGUoc3RhdHVzLCBwYXlsb2FkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFBlcnNpc3RlbnRDb25uZWN0aW9uLndhcm5Pbkxpc3Rlbldhcm5pbmdzXyA9IGZ1bmN0aW9uIChwYXlsb2FkLCBxdWVyeSkge1xyXG4gICAgICAgIGlmIChwYXlsb2FkICYmIHR5cGVvZiBwYXlsb2FkID09PSAnb2JqZWN0JyAmJiBjb250YWlucyhwYXlsb2FkLCAndycpKSB7XHJcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbiAgICAgICAgICAgIHZhciB3YXJuaW5ncyA9IHNhZmVHZXQocGF5bG9hZCwgJ3cnKTtcclxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkod2FybmluZ3MpICYmIH53YXJuaW5ncy5pbmRleE9mKCdub19pbmRleCcpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXhTcGVjID0gJ1wiLmluZGV4T25cIjogXCInICsgcXVlcnkuZ2V0UXVlcnlQYXJhbXMoKS5nZXRJbmRleCgpLnRvU3RyaW5nKCkgKyAnXCInO1xyXG4gICAgICAgICAgICAgICAgdmFyIGluZGV4UGF0aCA9IHF1ZXJ5LnBhdGgudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgIHdhcm4oXCJVc2luZyBhbiB1bnNwZWNpZmllZCBpbmRleC4gWW91ciBkYXRhIHdpbGwgYmUgZG93bmxvYWRlZCBhbmQgXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgIChcImZpbHRlcmVkIG9uIHRoZSBjbGllbnQuIENvbnNpZGVyIGFkZGluZyBcIiArIGluZGV4U3BlYyArIFwiIGF0IFwiKSArXHJcbiAgICAgICAgICAgICAgICAgICAgKGluZGV4UGF0aCArIFwiIHRvIHlvdXIgc2VjdXJpdHkgcnVsZXMgZm9yIGJldHRlciBwZXJmb3JtYW5jZS5cIikpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgUGVyc2lzdGVudENvbm5lY3Rpb24ucHJvdG90eXBlLnJlZnJlc2hBdXRoVG9rZW4gPSBmdW5jdGlvbiAodG9rZW4pIHtcclxuICAgICAgICB0aGlzLmF1dGhUb2tlbl8gPSB0b2tlbjtcclxuICAgICAgICB0aGlzLmxvZ18oJ0F1dGggdG9rZW4gcmVmcmVzaGVkJyk7XHJcbiAgICAgICAgaWYgKHRoaXMuYXV0aFRva2VuXykge1xyXG4gICAgICAgICAgICB0aGlzLnRyeUF1dGgoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vSWYgd2UncmUgY29ubmVjdGVkIHdlIHdhbnQgdG8gbGV0IHRoZSBzZXJ2ZXIga25vdyB0byB1bmF1dGhlbnRpY2F0ZSB1cy4gSWYgd2UncmUgbm90IGNvbm5lY3RlZCwgc2ltcGx5IGRlbGV0ZVxyXG4gICAgICAgICAgICAvL3RoZSBjcmVkZW50aWFsIHNvIHdlIGRvbnQgYmVjb21lIGF1dGhlbnRpY2F0ZWQgbmV4dCB0aW1lIHdlIGNvbm5lY3QuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbm5lY3RlZF8pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VuZFJlcXVlc3QoJ3VuYXV0aCcsIHt9LCBmdW5jdGlvbiAoKSB7IH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucmVkdWNlUmVjb25uZWN0RGVsYXlJZkFkbWluQ3JlZGVudGlhbF8odG9rZW4pO1xyXG4gICAgfTtcclxuICAgIFBlcnNpc3RlbnRDb25uZWN0aW9uLnByb3RvdHlwZS5yZWR1Y2VSZWNvbm5lY3REZWxheUlmQWRtaW5DcmVkZW50aWFsXyA9IGZ1bmN0aW9uIChjcmVkZW50aWFsKSB7XHJcbiAgICAgICAgLy8gTk9URTogVGhpcyBpc24ndCBpbnRlbmRlZCB0byBiZSBidWxsZXRwcm9vZiAoYSBtYWxpY2lvdXMgZGV2ZWxvcGVyIGNhbiBhbHdheXMganVzdCBtb2RpZnkgdGhlIGNsaWVudCkuXHJcbiAgICAgICAgLy8gQWRkaXRpb25hbGx5LCB3ZSBkb24ndCBib3RoZXIgcmVzZXR0aW5nIHRoZSBtYXggZGVsYXkgYmFjayB0byB0aGUgZGVmYXVsdCBpZiBhdXRoIGZhaWxzIC8gZXhwaXJlcy5cclxuICAgICAgICB2YXIgaXNGaXJlYmFzZVNlY3JldCA9IGNyZWRlbnRpYWwgJiYgY3JlZGVudGlhbC5sZW5ndGggPT09IDQwO1xyXG4gICAgICAgIGlmIChpc0ZpcmViYXNlU2VjcmV0IHx8IGlzQWRtaW4oY3JlZGVudGlhbCkpIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dfKCdBZG1pbiBhdXRoIGNyZWRlbnRpYWwgZGV0ZWN0ZWQuICBSZWR1Y2luZyBtYXggcmVjb25uZWN0IHRpbWUuJyk7XHJcbiAgICAgICAgICAgIHRoaXMubWF4UmVjb25uZWN0RGVsYXlfID0gUkVDT05ORUNUX01BWF9ERUxBWV9GT1JfQURNSU5TO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEF0dGVtcHRzIHRvIGF1dGhlbnRpY2F0ZSB3aXRoIHRoZSBnaXZlbiBjcmVkZW50aWFscy4gSWYgdGhlIGF1dGhlbnRpY2F0aW9uIGF0dGVtcHQgZmFpbHMsIGl0J3MgdHJpZ2dlcmVkIGxpa2VcclxuICAgICAqIGEgYXV0aCByZXZva2VkICh0aGUgY29ubmVjdGlvbiBpcyBjbG9zZWQpLlxyXG4gICAgICovXHJcbiAgICBQZXJzaXN0ZW50Q29ubmVjdGlvbi5wcm90b3R5cGUudHJ5QXV0aCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3RlZF8gJiYgdGhpcy5hdXRoVG9rZW5fKSB7XHJcbiAgICAgICAgICAgIHZhciB0b2tlbl8xID0gdGhpcy5hdXRoVG9rZW5fO1xyXG4gICAgICAgICAgICB2YXIgYXV0aE1ldGhvZCA9IGlzVmFsaWRGb3JtYXQodG9rZW5fMSkgPyAnYXV0aCcgOiAnZ2F1dGgnO1xyXG4gICAgICAgICAgICB2YXIgcmVxdWVzdERhdGEgPSB7IGNyZWQ6IHRva2VuXzEgfTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuYXV0aE92ZXJyaWRlXyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmVxdWVzdERhdGFbJ25vYXV0aCddID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgdGhpcy5hdXRoT3ZlcnJpZGVfID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAgICAgcmVxdWVzdERhdGFbJ2F1dGh2YXInXSA9IHRoaXMuYXV0aE92ZXJyaWRlXztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnNlbmRSZXF1ZXN0KGF1dGhNZXRob2QsIHJlcXVlc3REYXRhLCBmdW5jdGlvbiAocmVzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RhdHVzID0gcmVzWyAvKnN0YXR1cyovJ3MnXTtcclxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gcmVzWyAvKmRhdGEqLydkJ10gfHwgJ2Vycm9yJztcclxuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5hdXRoVG9rZW5fID09PSB0b2tlbl8xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXR1cyA9PT0gJ29rJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5pbnZhbGlkQXV0aFRva2VuQ291bnRfID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRyaWdnZXJzIHJlY29ubmVjdCBhbmQgZm9yY2UgcmVmcmVzaCBmb3IgYXV0aCB0b2tlblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5vbkF1dGhSZXZva2VkXyhzdGF0dXMsIGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgUGVyc2lzdGVudENvbm5lY3Rpb24ucHJvdG90eXBlLnVubGlzdGVuID0gZnVuY3Rpb24gKHF1ZXJ5LCB0YWcpIHtcclxuICAgICAgICB2YXIgcGF0aFN0cmluZyA9IHF1ZXJ5LnBhdGgudG9TdHJpbmcoKTtcclxuICAgICAgICB2YXIgcXVlcnlJZCA9IHF1ZXJ5LnF1ZXJ5SWRlbnRpZmllcigpO1xyXG4gICAgICAgIHRoaXMubG9nXygnVW5saXN0ZW4gY2FsbGVkIGZvciAnICsgcGF0aFN0cmluZyArICcgJyArIHF1ZXJ5SWQpO1xyXG4gICAgICAgIGFzc2VydChxdWVyeS5nZXRRdWVyeVBhcmFtcygpLmlzRGVmYXVsdCgpIHx8XHJcbiAgICAgICAgICAgICFxdWVyeS5nZXRRdWVyeVBhcmFtcygpLmxvYWRzQWxsRGF0YSgpLCAndW5saXN0ZW4oKSBjYWxsZWQgZm9yIG5vbi1kZWZhdWx0IGJ1dCBjb21wbGV0ZSBxdWVyeScpO1xyXG4gICAgICAgIHZhciBsaXN0ZW4gPSB0aGlzLnJlbW92ZUxpc3Rlbl8ocGF0aFN0cmluZywgcXVlcnlJZCk7XHJcbiAgICAgICAgaWYgKGxpc3RlbiAmJiB0aGlzLmNvbm5lY3RlZF8pIHtcclxuICAgICAgICAgICAgdGhpcy5zZW5kVW5saXN0ZW5fKHBhdGhTdHJpbmcsIHF1ZXJ5SWQsIHF1ZXJ5LnF1ZXJ5T2JqZWN0KCksIHRhZyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFBlcnNpc3RlbnRDb25uZWN0aW9uLnByb3RvdHlwZS5zZW5kVW5saXN0ZW5fID0gZnVuY3Rpb24gKHBhdGhTdHJpbmcsIHF1ZXJ5SWQsIHF1ZXJ5T2JqLCB0YWcpIHtcclxuICAgICAgICB0aGlzLmxvZ18oJ1VubGlzdGVuIG9uICcgKyBwYXRoU3RyaW5nICsgJyBmb3IgJyArIHF1ZXJ5SWQpO1xyXG4gICAgICAgIHZhciByZXEgPSB7IC8qcGF0aCovIHA6IHBhdGhTdHJpbmcgfTtcclxuICAgICAgICB2YXIgYWN0aW9uID0gJ24nO1xyXG4gICAgICAgIC8vIE9ubHkgYm90aGVyIHNlbmRpbmcgcXVlcnlJZCBpZiBpdCdzIG5vbi1kZWZhdWx0LlxyXG4gICAgICAgIGlmICh0YWcpIHtcclxuICAgICAgICAgICAgcmVxWydxJ10gPSBxdWVyeU9iajtcclxuICAgICAgICAgICAgcmVxWyd0J10gPSB0YWc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2VuZFJlcXVlc3QoYWN0aW9uLCByZXEpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgUGVyc2lzdGVudENvbm5lY3Rpb24ucHJvdG90eXBlLm9uRGlzY29ubmVjdFB1dCA9IGZ1bmN0aW9uIChwYXRoU3RyaW5nLCBkYXRhLCBvbkNvbXBsZXRlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdGVkXykge1xyXG4gICAgICAgICAgICB0aGlzLnNlbmRPbkRpc2Nvbm5lY3RfKCdvJywgcGF0aFN0cmluZywgZGF0YSwgb25Db21wbGV0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLm9uRGlzY29ubmVjdFJlcXVlc3RRdWV1ZV8ucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBwYXRoU3RyaW5nOiBwYXRoU3RyaW5nLFxyXG4gICAgICAgICAgICAgICAgYWN0aW9uOiAnbycsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBkYXRhLFxyXG4gICAgICAgICAgICAgICAgb25Db21wbGV0ZTogb25Db21wbGV0ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBQZXJzaXN0ZW50Q29ubmVjdGlvbi5wcm90b3R5cGUub25EaXNjb25uZWN0TWVyZ2UgPSBmdW5jdGlvbiAocGF0aFN0cmluZywgZGF0YSwgb25Db21wbGV0ZSkge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3RlZF8pIHtcclxuICAgICAgICAgICAgdGhpcy5zZW5kT25EaXNjb25uZWN0Xygnb20nLCBwYXRoU3RyaW5nLCBkYXRhLCBvbkNvbXBsZXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMub25EaXNjb25uZWN0UmVxdWVzdFF1ZXVlXy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIHBhdGhTdHJpbmc6IHBhdGhTdHJpbmcsXHJcbiAgICAgICAgICAgICAgICBhY3Rpb246ICdvbScsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBkYXRhLFxyXG4gICAgICAgICAgICAgICAgb25Db21wbGV0ZTogb25Db21wbGV0ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBQZXJzaXN0ZW50Q29ubmVjdGlvbi5wcm90b3R5cGUub25EaXNjb25uZWN0Q2FuY2VsID0gZnVuY3Rpb24gKHBhdGhTdHJpbmcsIG9uQ29tcGxldGUpIHtcclxuICAgICAgICBpZiAodGhpcy5jb25uZWN0ZWRfKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VuZE9uRGlzY29ubmVjdF8oJ29jJywgcGF0aFN0cmluZywgbnVsbCwgb25Db21wbGV0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLm9uRGlzY29ubmVjdFJlcXVlc3RRdWV1ZV8ucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBwYXRoU3RyaW5nOiBwYXRoU3RyaW5nLFxyXG4gICAgICAgICAgICAgICAgYWN0aW9uOiAnb2MnLFxyXG4gICAgICAgICAgICAgICAgZGF0YTogbnVsbCxcclxuICAgICAgICAgICAgICAgIG9uQ29tcGxldGU6IG9uQ29tcGxldGVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFBlcnNpc3RlbnRDb25uZWN0aW9uLnByb3RvdHlwZS5zZW5kT25EaXNjb25uZWN0XyA9IGZ1bmN0aW9uIChhY3Rpb24sIHBhdGhTdHJpbmcsIGRhdGEsIG9uQ29tcGxldGUpIHtcclxuICAgICAgICB2YXIgcmVxdWVzdCA9IHsgLypwYXRoKi8gcDogcGF0aFN0cmluZywgLypkYXRhKi8gZDogZGF0YSB9O1xyXG4gICAgICAgIHRoaXMubG9nXygnb25EaXNjb25uZWN0ICcgKyBhY3Rpb24sIHJlcXVlc3QpO1xyXG4gICAgICAgIHRoaXMuc2VuZFJlcXVlc3QoYWN0aW9uLCByZXF1ZXN0LCBmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgaWYgKG9uQ29tcGxldGUpIHtcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9uQ29tcGxldGUocmVzcG9uc2VbIC8qc3RhdHVzKi8ncyddLCByZXNwb25zZVsgLyogZGF0YSAqLydkJ10pO1xyXG4gICAgICAgICAgICAgICAgfSwgTWF0aC5mbG9vcigwKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIFBlcnNpc3RlbnRDb25uZWN0aW9uLnByb3RvdHlwZS5wdXQgPSBmdW5jdGlvbiAocGF0aFN0cmluZywgZGF0YSwgb25Db21wbGV0ZSwgaGFzaCkge1xyXG4gICAgICAgIHRoaXMucHV0SW50ZXJuYWwoJ3AnLCBwYXRoU3RyaW5nLCBkYXRhLCBvbkNvbXBsZXRlLCBoYXNoKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIFBlcnNpc3RlbnRDb25uZWN0aW9uLnByb3RvdHlwZS5tZXJnZSA9IGZ1bmN0aW9uIChwYXRoU3RyaW5nLCBkYXRhLCBvbkNvbXBsZXRlLCBoYXNoKSB7XHJcbiAgICAgICAgdGhpcy5wdXRJbnRlcm5hbCgnbScsIHBhdGhTdHJpbmcsIGRhdGEsIG9uQ29tcGxldGUsIGhhc2gpO1xyXG4gICAgfTtcclxuICAgIFBlcnNpc3RlbnRDb25uZWN0aW9uLnByb3RvdHlwZS5wdXRJbnRlcm5hbCA9IGZ1bmN0aW9uIChhY3Rpb24sIHBhdGhTdHJpbmcsIGRhdGEsIG9uQ29tcGxldGUsIGhhc2gpIHtcclxuICAgICAgICB2YXIgcmVxdWVzdCA9IHtcclxuICAgICAgICAgICAgLypwYXRoKi8gcDogcGF0aFN0cmluZyxcclxuICAgICAgICAgICAgLypkYXRhKi8gZDogZGF0YVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKGhhc2ggIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXF1ZXN0WyAvKmhhc2gqLydoJ10gPSBoYXNoO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBUT0RPOiBPbmx5IGtlZXAgdHJhY2sgb2YgdGhlIG1vc3QgcmVjZW50IHB1dCBmb3IgYSBnaXZlbiBwYXRoP1xyXG4gICAgICAgIHRoaXMub3V0c3RhbmRpbmdQdXRzXy5wdXNoKHtcclxuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXHJcbiAgICAgICAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXHJcbiAgICAgICAgICAgIG9uQ29tcGxldGU6IG9uQ29tcGxldGVcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLm91dHN0YW5kaW5nUHV0Q291bnRfKys7XHJcbiAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5vdXRzdGFuZGluZ1B1dHNfLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdGVkXykge1xyXG4gICAgICAgICAgICB0aGlzLnNlbmRQdXRfKGluZGV4KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nXygnQnVmZmVyaW5nIHB1dDogJyArIHBhdGhTdHJpbmcpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBQZXJzaXN0ZW50Q29ubmVjdGlvbi5wcm90b3R5cGUuc2VuZFB1dF8gPSBmdW5jdGlvbiAoaW5kZXgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBhY3Rpb24gPSB0aGlzLm91dHN0YW5kaW5nUHV0c19baW5kZXhdLmFjdGlvbjtcclxuICAgICAgICB2YXIgcmVxdWVzdCA9IHRoaXMub3V0c3RhbmRpbmdQdXRzX1tpbmRleF0ucmVxdWVzdDtcclxuICAgICAgICB2YXIgb25Db21wbGV0ZSA9IHRoaXMub3V0c3RhbmRpbmdQdXRzX1tpbmRleF0ub25Db21wbGV0ZTtcclxuICAgICAgICB0aGlzLm91dHN0YW5kaW5nUHV0c19baW5kZXhdLnF1ZXVlZCA9IHRoaXMuY29ubmVjdGVkXztcclxuICAgICAgICB0aGlzLnNlbmRSZXF1ZXN0KGFjdGlvbiwgcmVxdWVzdCwgZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgX3RoaXMubG9nXyhhY3Rpb24gKyAnIHJlc3BvbnNlJywgbWVzc2FnZSk7XHJcbiAgICAgICAgICAgIGRlbGV0ZSBfdGhpcy5vdXRzdGFuZGluZ1B1dHNfW2luZGV4XTtcclxuICAgICAgICAgICAgX3RoaXMub3V0c3RhbmRpbmdQdXRDb3VudF8tLTtcclxuICAgICAgICAgICAgLy8gQ2xlYW4gdXAgYXJyYXkgb2NjYXNpb25hbGx5LlxyXG4gICAgICAgICAgICBpZiAoX3RoaXMub3V0c3RhbmRpbmdQdXRDb3VudF8gPT09IDApIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLm91dHN0YW5kaW5nUHV0c18gPSBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAob25Db21wbGV0ZSkge1xyXG4gICAgICAgICAgICAgICAgb25Db21wbGV0ZShtZXNzYWdlWyAvKnN0YXR1cyovJ3MnXSwgbWVzc2FnZVsgLyogZGF0YSAqLydkJ10pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBQZXJzaXN0ZW50Q29ubmVjdGlvbi5wcm90b3R5cGUucmVwb3J0U3RhdHMgPSBmdW5jdGlvbiAoc3RhdHMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIC8vIElmIHdlJ3JlIG5vdCBjb25uZWN0ZWQsIHdlIGp1c3QgZHJvcCB0aGUgc3RhdHMuXHJcbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdGVkXykge1xyXG4gICAgICAgICAgICB2YXIgcmVxdWVzdCA9IHsgLypjb3VudGVycyovIGM6IHN0YXRzIH07XHJcbiAgICAgICAgICAgIHRoaXMubG9nXygncmVwb3J0U3RhdHMnLCByZXF1ZXN0KTtcclxuICAgICAgICAgICAgdGhpcy5zZW5kUmVxdWVzdCgvKnN0YXRzKi8gJ3MnLCByZXF1ZXN0LCBmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RhdHVzID0gcmVzdWx0WyAvKnN0YXR1cyovJ3MnXTtcclxuICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgIT09ICdvaycpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3JSZWFzb24gPSByZXN1bHRbIC8qIGRhdGEgKi8nZCddO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmxvZ18oJ3JlcG9ydFN0YXRzJywgJ0Vycm9yIHNlbmRpbmcgc3RhdHM6ICcgKyBlcnJvclJlYXNvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBQZXJzaXN0ZW50Q29ubmVjdGlvbi5wcm90b3R5cGUub25EYXRhTWVzc2FnZV8gPSBmdW5jdGlvbiAobWVzc2FnZSkge1xyXG4gICAgICAgIGlmICgncicgaW4gbWVzc2FnZSkge1xyXG4gICAgICAgICAgICAvLyB0aGlzIGlzIGEgcmVzcG9uc2VcclxuICAgICAgICAgICAgdGhpcy5sb2dfKCdmcm9tIHNlcnZlcjogJyArIHN0cmluZ2lmeShtZXNzYWdlKSk7XHJcbiAgICAgICAgICAgIHZhciByZXFOdW0gPSBtZXNzYWdlWydyJ107XHJcbiAgICAgICAgICAgIHZhciBvblJlc3BvbnNlID0gdGhpcy5yZXF1ZXN0Q0JIYXNoX1tyZXFOdW1dO1xyXG4gICAgICAgICAgICBpZiAob25SZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMucmVxdWVzdENCSGFzaF9bcmVxTnVtXTtcclxuICAgICAgICAgICAgICAgIG9uUmVzcG9uc2UobWVzc2FnZVsgLypib2R5Ki8nYiddKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICgnZXJyb3InIGluIG1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgdGhyb3cgJ0Egc2VydmVyLXNpZGUgZXJyb3IgaGFzIG9jY3VycmVkOiAnICsgbWVzc2FnZVsnZXJyb3InXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoJ2EnIGluIG1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgLy8gYSBhbmQgYiBhcmUgYWN0aW9uIGFuZCBib2R5LCByZXNwZWN0aXZlbHlcclxuICAgICAgICAgICAgdGhpcy5vbkRhdGFQdXNoXyhtZXNzYWdlWydhJ10sIG1lc3NhZ2VbJ2InXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFBlcnNpc3RlbnRDb25uZWN0aW9uLnByb3RvdHlwZS5vbkRhdGFQdXNoXyA9IGZ1bmN0aW9uIChhY3Rpb24sIGJvZHkpIHtcclxuICAgICAgICB0aGlzLmxvZ18oJ2hhbmRsZVNlcnZlck1lc3NhZ2UnLCBhY3Rpb24sIGJvZHkpO1xyXG4gICAgICAgIGlmIChhY3Rpb24gPT09ICdkJykge1xyXG4gICAgICAgICAgICB0aGlzLm9uRGF0YVVwZGF0ZV8oYm9keVsgLypwYXRoKi8ncCddLCBib2R5WyAvKmRhdGEqLydkJ10sIFxyXG4gICAgICAgICAgICAvKmlzTWVyZ2UqLyBmYWxzZSwgYm9keVsndCddKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYWN0aW9uID09PSAnbScpIHtcclxuICAgICAgICAgICAgdGhpcy5vbkRhdGFVcGRhdGVfKGJvZHlbIC8qcGF0aCovJ3AnXSwgYm9keVsgLypkYXRhKi8nZCddLCBcclxuICAgICAgICAgICAgLyppc01lcmdlPSovIHRydWUsIGJvZHlbJ3QnXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGFjdGlvbiA9PT0gJ2MnKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25MaXN0ZW5SZXZva2VkXyhib2R5WyAvKnBhdGgqLydwJ10sIGJvZHlbIC8qcXVlcnkqLydxJ10pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChhY3Rpb24gPT09ICdhYycpIHtcclxuICAgICAgICAgICAgdGhpcy5vbkF1dGhSZXZva2VkXyhib2R5WyAvKnN0YXR1cyBjb2RlKi8ncyddLCBib2R5WyAvKiBleHBsYW5hdGlvbiAqLydkJ10pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChhY3Rpb24gPT09ICdzZCcpIHtcclxuICAgICAgICAgICAgdGhpcy5vblNlY3VyaXR5RGVidWdQYWNrZXRfKGJvZHkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZXJyb3IoJ1VucmVjb2duaXplZCBhY3Rpb24gcmVjZWl2ZWQgZnJvbSBzZXJ2ZXI6ICcgK1xyXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KGFjdGlvbikgK1xyXG4gICAgICAgICAgICAgICAgJ1xcbkFyZSB5b3UgdXNpbmcgdGhlIGxhdGVzdCBjbGllbnQ/Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFBlcnNpc3RlbnRDb25uZWN0aW9uLnByb3RvdHlwZS5vblJlYWR5XyA9IGZ1bmN0aW9uICh0aW1lc3RhbXAsIHNlc3Npb25JZCkge1xyXG4gICAgICAgIHRoaXMubG9nXygnY29ubmVjdGlvbiByZWFkeScpO1xyXG4gICAgICAgIHRoaXMuY29ubmVjdGVkXyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5sYXN0Q29ubmVjdGlvbkVzdGFibGlzaGVkVGltZV8gPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgICAgICB0aGlzLmhhbmRsZVRpbWVzdGFtcF8odGltZXN0YW1wKTtcclxuICAgICAgICB0aGlzLmxhc3RTZXNzaW9uSWQgPSBzZXNzaW9uSWQ7XHJcbiAgICAgICAgaWYgKHRoaXMuZmlyc3RDb25uZWN0aW9uXykge1xyXG4gICAgICAgICAgICB0aGlzLnNlbmRDb25uZWN0U3RhdHNfKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucmVzdG9yZVN0YXRlXygpO1xyXG4gICAgICAgIHRoaXMuZmlyc3RDb25uZWN0aW9uXyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMub25Db25uZWN0U3RhdHVzXyh0cnVlKTtcclxuICAgIH07XHJcbiAgICBQZXJzaXN0ZW50Q29ubmVjdGlvbi5wcm90b3R5cGUuc2NoZWR1bGVDb25uZWN0XyA9IGZ1bmN0aW9uICh0aW1lb3V0KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBhc3NlcnQoIXRoaXMucmVhbHRpbWVfLCBcIlNjaGVkdWxpbmcgYSBjb25uZWN0IHdoZW4gd2UncmUgYWxyZWFkeSBjb25uZWN0ZWQvaW5nP1wiKTtcclxuICAgICAgICBpZiAodGhpcy5lc3RhYmxpc2hDb25uZWN0aW9uVGltZXJfKSB7XHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmVzdGFibGlzaENvbm5lY3Rpb25UaW1lcl8pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBOT1RFOiBFdmVuIHdoZW4gdGltZW91dCBpcyAwLCBpdCdzIGltcG9ydGFudCB0byBkbyBhIHNldFRpbWVvdXQgdG8gd29yayBhcm91bmQgYW4gaW5mdXJpYXRpbmcgXCJTZWN1cml0eSBFcnJvclwiIGluXHJcbiAgICAgICAgLy8gRmlyZWZveCB3aGVuIHRyeWluZyB0byB3cml0ZSB0byBvdXIgbG9uZy1wb2xsaW5nIGlmcmFtZSBpbiBzb21lIHNjZW5hcmlvcyAoZS5nLiBGb3JnZSBvciBvdXIgdW5pdCB0ZXN0cykuXHJcbiAgICAgICAgdGhpcy5lc3RhYmxpc2hDb25uZWN0aW9uVGltZXJfID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF90aGlzLmVzdGFibGlzaENvbm5lY3Rpb25UaW1lcl8gPSBudWxsO1xyXG4gICAgICAgICAgICBfdGhpcy5lc3RhYmxpc2hDb25uZWN0aW9uXygpO1xyXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG4gICAgICAgIH0sIE1hdGguZmxvb3IodGltZW91dCkpO1xyXG4gICAgfTtcclxuICAgIFBlcnNpc3RlbnRDb25uZWN0aW9uLnByb3RvdHlwZS5vblZpc2libGVfID0gZnVuY3Rpb24gKHZpc2libGUpIHtcclxuICAgICAgICAvLyBOT1RFOiBUYWJiaW5nIGF3YXkgYW5kIGJhY2sgdG8gYSB3aW5kb3cgd2lsbCBkZWZlYXQgb3VyIHJlY29ubmVjdCBiYWNrb2ZmLCBidXQgSSB0aGluayB0aGF0J3MgZmluZS5cclxuICAgICAgICBpZiAodmlzaWJsZSAmJlxyXG4gICAgICAgICAgICAhdGhpcy52aXNpYmxlXyAmJlxyXG4gICAgICAgICAgICB0aGlzLnJlY29ubmVjdERlbGF5XyA9PT0gdGhpcy5tYXhSZWNvbm5lY3REZWxheV8pIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dfKCdXaW5kb3cgYmVjYW1lIHZpc2libGUuICBSZWR1Y2luZyBkZWxheS4nKTtcclxuICAgICAgICAgICAgdGhpcy5yZWNvbm5lY3REZWxheV8gPSBSRUNPTk5FQ1RfTUlOX0RFTEFZO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMucmVhbHRpbWVfKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNjaGVkdWxlQ29ubmVjdF8oMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy52aXNpYmxlXyA9IHZpc2libGU7XHJcbiAgICB9O1xyXG4gICAgUGVyc2lzdGVudENvbm5lY3Rpb24ucHJvdG90eXBlLm9uT25saW5lXyA9IGZ1bmN0aW9uIChvbmxpbmUpIHtcclxuICAgICAgICBpZiAob25saW5lKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nXygnQnJvd3NlciB3ZW50IG9ubGluZS4nKTtcclxuICAgICAgICAgICAgdGhpcy5yZWNvbm5lY3REZWxheV8gPSBSRUNPTk5FQ1RfTUlOX0RFTEFZO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMucmVhbHRpbWVfKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNjaGVkdWxlQ29ubmVjdF8oMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nXygnQnJvd3NlciB3ZW50IG9mZmxpbmUuICBLaWxsaW5nIGNvbm5lY3Rpb24uJyk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnJlYWx0aW1lXykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZWFsdGltZV8uY2xvc2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBQZXJzaXN0ZW50Q29ubmVjdGlvbi5wcm90b3R5cGUub25SZWFsdGltZURpc2Nvbm5lY3RfID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMubG9nXygnZGF0YSBjbGllbnQgZGlzY29ubmVjdGVkJyk7XHJcbiAgICAgICAgdGhpcy5jb25uZWN0ZWRfID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5yZWFsdGltZV8gPSBudWxsO1xyXG4gICAgICAgIC8vIFNpbmNlIHdlIGRvbid0IGtub3cgaWYgb3VyIHNlbnQgdHJhbnNhY3Rpb25zIHN1Y2NlZWRlZCBvciBub3QsIHdlIG5lZWQgdG8gY2FuY2VsIHRoZW0uXHJcbiAgICAgICAgdGhpcy5jYW5jZWxTZW50VHJhbnNhY3Rpb25zXygpO1xyXG4gICAgICAgIC8vIENsZWFyIG91dCB0aGUgcGVuZGluZyByZXF1ZXN0cy5cclxuICAgICAgICB0aGlzLnJlcXVlc3RDQkhhc2hfID0ge307XHJcbiAgICAgICAgaWYgKHRoaXMuc2hvdWxkUmVjb25uZWN0XygpKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy52aXNpYmxlXykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2dfKFwiV2luZG93IGlzbid0IHZpc2libGUuICBEZWxheWluZyByZWNvbm5lY3QuXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZWNvbm5lY3REZWxheV8gPSB0aGlzLm1heFJlY29ubmVjdERlbGF5XztcclxuICAgICAgICAgICAgICAgIHRoaXMubGFzdENvbm5lY3Rpb25BdHRlbXB0VGltZV8gPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmxhc3RDb25uZWN0aW9uRXN0YWJsaXNoZWRUaW1lXykge1xyXG4gICAgICAgICAgICAgICAgLy8gSWYgd2UndmUgYmVlbiBjb25uZWN0ZWQgbG9uZyBlbm91Z2gsIHJlc2V0IHJlY29ubmVjdCBkZWxheSB0byBtaW5pbXVtLlxyXG4gICAgICAgICAgICAgICAgdmFyIHRpbWVTaW5jZUxhc3RDb25uZWN0U3VjY2VlZGVkID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSB0aGlzLmxhc3RDb25uZWN0aW9uRXN0YWJsaXNoZWRUaW1lXztcclxuICAgICAgICAgICAgICAgIGlmICh0aW1lU2luY2VMYXN0Q29ubmVjdFN1Y2NlZWRlZCA+IFJFQ09OTkVDVF9ERUxBWV9SRVNFVF9USU1FT1VUKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWNvbm5lY3REZWxheV8gPSBSRUNPTk5FQ1RfTUlOX0RFTEFZO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5sYXN0Q29ubmVjdGlvbkVzdGFibGlzaGVkVGltZV8gPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciB0aW1lU2luY2VMYXN0Q29ubmVjdEF0dGVtcHQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHRoaXMubGFzdENvbm5lY3Rpb25BdHRlbXB0VGltZV87XHJcbiAgICAgICAgICAgIHZhciByZWNvbm5lY3REZWxheSA9IE1hdGgubWF4KDAsIHRoaXMucmVjb25uZWN0RGVsYXlfIC0gdGltZVNpbmNlTGFzdENvbm5lY3RBdHRlbXB0KTtcclxuICAgICAgICAgICAgcmVjb25uZWN0RGVsYXkgPSBNYXRoLnJhbmRvbSgpICogcmVjb25uZWN0RGVsYXk7XHJcbiAgICAgICAgICAgIHRoaXMubG9nXygnVHJ5aW5nIHRvIHJlY29ubmVjdCBpbiAnICsgcmVjb25uZWN0RGVsYXkgKyAnbXMnKTtcclxuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZUNvbm5lY3RfKHJlY29ubmVjdERlbGF5KTtcclxuICAgICAgICAgICAgLy8gQWRqdXN0IHJlY29ubmVjdCBkZWxheSBmb3IgbmV4dCB0aW1lLlxyXG4gICAgICAgICAgICB0aGlzLnJlY29ubmVjdERlbGF5XyA9IE1hdGgubWluKHRoaXMubWF4UmVjb25uZWN0RGVsYXlfLCB0aGlzLnJlY29ubmVjdERlbGF5XyAqIFJFQ09OTkVDVF9ERUxBWV9NVUxUSVBMSUVSKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5vbkNvbm5lY3RTdGF0dXNfKGZhbHNlKTtcclxuICAgIH07XHJcbiAgICBQZXJzaXN0ZW50Q29ubmVjdGlvbi5wcm90b3R5cGUuZXN0YWJsaXNoQ29ubmVjdGlvbl8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAodGhpcy5zaG91bGRSZWNvbm5lY3RfKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dfKCdNYWtpbmcgYSBjb25uZWN0aW9uIGF0dGVtcHQnKTtcclxuICAgICAgICAgICAgdGhpcy5sYXN0Q29ubmVjdGlvbkF0dGVtcHRUaW1lXyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmxhc3RDb25uZWN0aW9uRXN0YWJsaXNoZWRUaW1lXyA9IG51bGw7XHJcbiAgICAgICAgICAgIHZhciBvbkRhdGFNZXNzYWdlXzEgPSB0aGlzLm9uRGF0YU1lc3NhZ2VfLmJpbmQodGhpcyk7XHJcbiAgICAgICAgICAgIHZhciBvblJlYWR5XzEgPSB0aGlzLm9uUmVhZHlfLmJpbmQodGhpcyk7XHJcbiAgICAgICAgICAgIHZhciBvbkRpc2Nvbm5lY3RfMSA9IHRoaXMub25SZWFsdGltZURpc2Nvbm5lY3RfLmJpbmQodGhpcyk7XHJcbiAgICAgICAgICAgIHZhciBjb25uSWRfMSA9IHRoaXMuaWQgKyAnOicgKyBQZXJzaXN0ZW50Q29ubmVjdGlvbi5uZXh0Q29ubmVjdGlvbklkXysrO1xyXG4gICAgICAgICAgICB2YXIgc2VsZl8xID0gdGhpcztcclxuICAgICAgICAgICAgdmFyIGxhc3RTZXNzaW9uSWRfMSA9IHRoaXMubGFzdFNlc3Npb25JZDtcclxuICAgICAgICAgICAgdmFyIGNhbmNlbGVkXzEgPSBmYWxzZTtcclxuICAgICAgICAgICAgdmFyIGNvbm5lY3Rpb25fMSA9IG51bGw7XHJcbiAgICAgICAgICAgIHZhciBjbG9zZUZuXzEgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29ubmVjdGlvbl8xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbl8xLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjYW5jZWxlZF8xID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBvbkRpc2Nvbm5lY3RfMSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB2YXIgc2VuZFJlcXVlc3RGbiA9IGZ1bmN0aW9uIChtc2cpIHtcclxuICAgICAgICAgICAgICAgIGFzc2VydChjb25uZWN0aW9uXzEsIFwic2VuZFJlcXVlc3QgY2FsbCB3aGVuIHdlJ3JlIG5vdCBjb25uZWN0ZWQgbm90IGFsbG93ZWQuXCIpO1xyXG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbl8xLnNlbmRSZXF1ZXN0KG1zZyk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRoaXMucmVhbHRpbWVfID0ge1xyXG4gICAgICAgICAgICAgICAgY2xvc2U6IGNsb3NlRm5fMSxcclxuICAgICAgICAgICAgICAgIHNlbmRSZXF1ZXN0OiBzZW5kUmVxdWVzdEZuXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHZhciBmb3JjZVJlZnJlc2ggPSB0aGlzLmZvcmNlVG9rZW5SZWZyZXNoXztcclxuICAgICAgICAgICAgdGhpcy5mb3JjZVRva2VuUmVmcmVzaF8gPSBmYWxzZTtcclxuICAgICAgICAgICAgLy8gRmlyc3QgZmV0Y2ggYXV0aCB0b2tlbiwgYW5kIGVzdGFibGlzaCBjb25uZWN0aW9uIGFmdGVyIGZldGNoaW5nIHRoZSB0b2tlbiB3YXMgc3VjY2Vzc2Z1bFxyXG4gICAgICAgICAgICB0aGlzLmF1dGhUb2tlblByb3ZpZGVyX1xyXG4gICAgICAgICAgICAgICAgLmdldFRva2VuKGZvcmNlUmVmcmVzaClcclxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICghY2FuY2VsZWRfMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvZygnZ2V0VG9rZW4oKSBjb21wbGV0ZWQuIENyZWF0aW5nIGNvbm5lY3Rpb24uJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZl8xLmF1dGhUb2tlbl8gPSByZXN1bHQgJiYgcmVzdWx0LmFjY2Vzc1Rva2VuO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb25fMSA9IG5ldyBDb25uZWN0aW9uKGNvbm5JZF8xLCBzZWxmXzEucmVwb0luZm9fLCBzZWxmXzEuYXBwbGljYXRpb25JZF8sIG9uRGF0YU1lc3NhZ2VfMSwgb25SZWFkeV8xLCBvbkRpc2Nvbm5lY3RfMSwgXHJcbiAgICAgICAgICAgICAgICAgICAgLyogb25LaWxsPSAqLyBmdW5jdGlvbiAocmVhc29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4ocmVhc29uICsgJyAoJyArIHNlbGZfMS5yZXBvSW5mb18udG9TdHJpbmcoKSArICcpJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGZfMS5pbnRlcnJ1cHQoU0VSVkVSX0tJTExfSU5URVJSVVBUX1JFQVNPTik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgbGFzdFNlc3Npb25JZF8xKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvZygnZ2V0VG9rZW4oKSBjb21wbGV0ZWQgYnV0IHdhcyBjYW5jZWxlZCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnRoZW4obnVsbCwgZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmXzEubG9nXygnRmFpbGVkIHRvIGdldCB0b2tlbjogJyArIGVycm9yKTtcclxuICAgICAgICAgICAgICAgIGlmICghY2FuY2VsZWRfMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5yZXBvSW5mb18ubm9kZUFkbWluKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgbWF5IGJlIGEgY3JpdGljYWwgZXJyb3IgZm9yIHRoZSBBZG1pbiBOb2RlLmpzIFNESywgc28gbG9nIGEgd2FybmluZy5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQnV0IGdldFRva2VuKCkgbWF5IGFsc28ganVzdCBoYXZlIHRlbXBvcmFyaWx5IGZhaWxlZCwgc28gd2Ugc3RpbGwgd2FudCB0b1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb250aW51ZSByZXRyeWluZy5cclxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNsb3NlRm5fMSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgUGVyc2lzdGVudENvbm5lY3Rpb24ucHJvdG90eXBlLmludGVycnVwdCA9IGZ1bmN0aW9uIChyZWFzb24pIHtcclxuICAgICAgICBsb2coJ0ludGVycnVwdGluZyBjb25uZWN0aW9uIGZvciByZWFzb246ICcgKyByZWFzb24pO1xyXG4gICAgICAgIHRoaXMuaW50ZXJydXB0UmVhc29uc19bcmVhc29uXSA9IHRydWU7XHJcbiAgICAgICAgaWYgKHRoaXMucmVhbHRpbWVfKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVhbHRpbWVfLmNsb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5lc3RhYmxpc2hDb25uZWN0aW9uVGltZXJfKSB7XHJcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5lc3RhYmxpc2hDb25uZWN0aW9uVGltZXJfKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXN0YWJsaXNoQ29ubmVjdGlvblRpbWVyXyA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuY29ubmVjdGVkXykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vblJlYWx0aW1lRGlzY29ubmVjdF8oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBQZXJzaXN0ZW50Q29ubmVjdGlvbi5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24gKHJlYXNvbikge1xyXG4gICAgICAgIGxvZygnUmVzdW1pbmcgY29ubmVjdGlvbiBmb3IgcmVhc29uOiAnICsgcmVhc29uKTtcclxuICAgICAgICBkZWxldGUgdGhpcy5pbnRlcnJ1cHRSZWFzb25zX1tyZWFzb25dO1xyXG4gICAgICAgIGlmIChpc0VtcHR5KHRoaXMuaW50ZXJydXB0UmVhc29uc18pKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVjb25uZWN0RGVsYXlfID0gUkVDT05ORUNUX01JTl9ERUxBWTtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnJlYWx0aW1lXykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zY2hlZHVsZUNvbm5lY3RfKDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFBlcnNpc3RlbnRDb25uZWN0aW9uLnByb3RvdHlwZS5oYW5kbGVUaW1lc3RhbXBfID0gZnVuY3Rpb24gKHRpbWVzdGFtcCkge1xyXG4gICAgICAgIHZhciBkZWx0YSA9IHRpbWVzdGFtcCAtIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgIHRoaXMub25TZXJ2ZXJJbmZvVXBkYXRlXyh7IHNlcnZlclRpbWVPZmZzZXQ6IGRlbHRhIH0pO1xyXG4gICAgfTtcclxuICAgIFBlcnNpc3RlbnRDb25uZWN0aW9uLnByb3RvdHlwZS5jYW5jZWxTZW50VHJhbnNhY3Rpb25zXyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMub3V0c3RhbmRpbmdQdXRzXy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgcHV0ID0gdGhpcy5vdXRzdGFuZGluZ1B1dHNfW2ldO1xyXG4gICAgICAgICAgICBpZiAocHV0ICYmIC8qaGFzaCovICdoJyBpbiBwdXQucmVxdWVzdCAmJiBwdXQucXVldWVkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocHV0Lm9uQ29tcGxldGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBwdXQub25Db21wbGV0ZSgnZGlzY29ubmVjdCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMub3V0c3RhbmRpbmdQdXRzX1tpXTtcclxuICAgICAgICAgICAgICAgIHRoaXMub3V0c3RhbmRpbmdQdXRDb3VudF8tLTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBDbGVhbiB1cCBhcnJheSBvY2Nhc2lvbmFsbHkuXHJcbiAgICAgICAgaWYgKHRoaXMub3V0c3RhbmRpbmdQdXRDb3VudF8gPT09IDApIHtcclxuICAgICAgICAgICAgdGhpcy5vdXRzdGFuZGluZ1B1dHNfID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFBlcnNpc3RlbnRDb25uZWN0aW9uLnByb3RvdHlwZS5vbkxpc3RlblJldm9rZWRfID0gZnVuY3Rpb24gKHBhdGhTdHJpbmcsIHF1ZXJ5KSB7XHJcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBsaXN0ZW4gYW5kIG1hbnVmYWN0dXJlIGEgXCJwZXJtaXNzaW9uX2RlbmllZFwiIGVycm9yIGZvciB0aGUgZmFpbGVkIGxpc3Rlbi5cclxuICAgICAgICB2YXIgcXVlcnlJZDtcclxuICAgICAgICBpZiAoIXF1ZXJ5KSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5SWQgPSAnZGVmYXVsdCc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBxdWVyeUlkID0gcXVlcnkubWFwKGZ1bmN0aW9uIChxKSB7IHJldHVybiBPYmplY3RUb1VuaXF1ZUtleShxKTsgfSkuam9pbignJCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbGlzdGVuID0gdGhpcy5yZW1vdmVMaXN0ZW5fKHBhdGhTdHJpbmcsIHF1ZXJ5SWQpO1xyXG4gICAgICAgIGlmIChsaXN0ZW4gJiYgbGlzdGVuLm9uQ29tcGxldGUpIHtcclxuICAgICAgICAgICAgbGlzdGVuLm9uQ29tcGxldGUoJ3Blcm1pc3Npb25fZGVuaWVkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFBlcnNpc3RlbnRDb25uZWN0aW9uLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5fID0gZnVuY3Rpb24gKHBhdGhTdHJpbmcsIHF1ZXJ5SWQpIHtcclxuICAgICAgICB2YXIgbm9ybWFsaXplZFBhdGhTdHJpbmcgPSBuZXcgUGF0aChwYXRoU3RyaW5nKS50b1N0cmluZygpOyAvLyBub3JtYWxpemUgcGF0aC5cclxuICAgICAgICB2YXIgbGlzdGVuO1xyXG4gICAgICAgIGlmICh0aGlzLmxpc3RlbnMuaGFzKG5vcm1hbGl6ZWRQYXRoU3RyaW5nKSkge1xyXG4gICAgICAgICAgICB2YXIgbWFwID0gdGhpcy5saXN0ZW5zLmdldChub3JtYWxpemVkUGF0aFN0cmluZyk7XHJcbiAgICAgICAgICAgIGxpc3RlbiA9IG1hcC5nZXQocXVlcnlJZCk7XHJcbiAgICAgICAgICAgIG1hcC5kZWxldGUocXVlcnlJZCk7XHJcbiAgICAgICAgICAgIGlmIChtYXAuc2l6ZSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5zLmRlbGV0ZShub3JtYWxpemVkUGF0aFN0cmluZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGFsbCBsaXN0ZW5zIGZvciB0aGlzIHBhdGggaGFzIGFscmVhZHkgYmVlbiByZW1vdmVkXHJcbiAgICAgICAgICAgIGxpc3RlbiA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGxpc3RlbjtcclxuICAgIH07XHJcbiAgICBQZXJzaXN0ZW50Q29ubmVjdGlvbi5wcm90b3R5cGUub25BdXRoUmV2b2tlZF8gPSBmdW5jdGlvbiAoc3RhdHVzQ29kZSwgZXhwbGFuYXRpb24pIHtcclxuICAgICAgICBsb2coJ0F1dGggdG9rZW4gcmV2b2tlZDogJyArIHN0YXR1c0NvZGUgKyAnLycgKyBleHBsYW5hdGlvbik7XHJcbiAgICAgICAgdGhpcy5hdXRoVG9rZW5fID0gbnVsbDtcclxuICAgICAgICB0aGlzLmZvcmNlVG9rZW5SZWZyZXNoXyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5yZWFsdGltZV8uY2xvc2UoKTtcclxuICAgICAgICBpZiAoc3RhdHVzQ29kZSA9PT0gJ2ludmFsaWRfdG9rZW4nIHx8IHN0YXR1c0NvZGUgPT09ICdwZXJtaXNzaW9uX2RlbmllZCcpIHtcclxuICAgICAgICAgICAgLy8gV2UnbGwgd2FpdCBhIGNvdXBsZSB0aW1lcyBiZWZvcmUgbG9nZ2luZyB0aGUgd2FybmluZyAvIGluY3JlYXNpbmcgdGhlXHJcbiAgICAgICAgICAgIC8vIHJldHJ5IHBlcmlvZCBzaW5jZSBvYXV0aCB0b2tlbnMgd2lsbCByZXBvcnQgYXMgXCJpbnZhbGlkXCIgaWYgdGhleSdyZVxyXG4gICAgICAgICAgICAvLyBqdXN0IGV4cGlyZWQuIFBsdXMgdGhlcmUgbWF5IGJlIHRyYW5zaWVudCBpc3N1ZXMgdGhhdCByZXNvbHZlIHRoZW1zZWx2ZXMuXHJcbiAgICAgICAgICAgIHRoaXMuaW52YWxpZEF1dGhUb2tlbkNvdW50XysrO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pbnZhbGlkQXV0aFRva2VuQ291bnRfID49IElOVkFMSURfQVVUSF9UT0tFTl9USFJFU0hPTEQpIHtcclxuICAgICAgICAgICAgICAgIC8vIFNldCBhIGxvbmcgcmVjb25uZWN0IGRlbGF5IGJlY2F1c2UgcmVjb3ZlcnkgaXMgdW5saWtlbHlcclxuICAgICAgICAgICAgICAgIHRoaXMucmVjb25uZWN0RGVsYXlfID0gUkVDT05ORUNUX01BWF9ERUxBWV9GT1JfQURNSU5TO1xyXG4gICAgICAgICAgICAgICAgLy8gTm90aWZ5IHRoZSBhdXRoIHRva2VuIHByb3ZpZGVyIHRoYXQgdGhlIHRva2VuIGlzIGludmFsaWQsIHdoaWNoIHdpbGwgbG9nXHJcbiAgICAgICAgICAgICAgICAvLyBhIHdhcm5pbmdcclxuICAgICAgICAgICAgICAgIHRoaXMuYXV0aFRva2VuUHJvdmlkZXJfLm5vdGlmeUZvckludmFsaWRUb2tlbigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFBlcnNpc3RlbnRDb25uZWN0aW9uLnByb3RvdHlwZS5vblNlY3VyaXR5RGVidWdQYWNrZXRfID0gZnVuY3Rpb24gKGJvZHkpIHtcclxuICAgICAgICBpZiAodGhpcy5zZWN1cml0eURlYnVnQ2FsbGJhY2tfKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VjdXJpdHlEZWJ1Z0NhbGxiYWNrXyhib2R5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICgnbXNnJyBpbiBib2R5KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRklSRUJBU0U6ICcgKyBib2R5Wydtc2cnXS5yZXBsYWNlKCdcXG4nLCAnXFxuRklSRUJBU0U6ICcpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBQZXJzaXN0ZW50Q29ubmVjdGlvbi5wcm90b3R5cGUucmVzdG9yZVN0YXRlXyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZV8xLCBfYSwgZV8yLCBfYjtcclxuICAgICAgICAvL1JlLWF1dGhlbnRpY2F0ZSBvdXJzZWx2ZXMgaWYgd2UgaGF2ZSBhIGNyZWRlbnRpYWwgc3RvcmVkLlxyXG4gICAgICAgIHRoaXMudHJ5QXV0aCgpO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIC8vIFB1dHMgZGVwZW5kIG9uIGhhdmluZyByZWNlaXZlZCB0aGUgY29ycmVzcG9uZGluZyBkYXRhIHVwZGF0ZSBmcm9tIHRoZSBzZXJ2ZXIgYmVmb3JlIHRoZXkgY29tcGxldGUsIHNvIHdlIG11c3RcclxuICAgICAgICAgICAgLy8gbWFrZSBzdXJlIHRvIHNlbmQgbGlzdGVucyBiZWZvcmUgcHV0cy5cclxuICAgICAgICAgICAgZm9yICh2YXIgX2MgPSBfX3ZhbHVlcyh0aGlzLmxpc3RlbnMudmFsdWVzKCkpLCBfZCA9IF9jLm5leHQoKTsgIV9kLmRvbmU7IF9kID0gX2MubmV4dCgpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcXVlcmllcyA9IF9kLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfZSA9IChlXzIgPSB2b2lkIDAsIF9fdmFsdWVzKHF1ZXJpZXMudmFsdWVzKCkpKSwgX2YgPSBfZS5uZXh0KCk7ICFfZi5kb25lOyBfZiA9IF9lLm5leHQoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGlzdGVuU3BlYyA9IF9mLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbmRMaXN0ZW5fKGxpc3RlblNwZWMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlXzJfMSkgeyBlXzIgPSB7IGVycm9yOiBlXzJfMSB9OyB9XHJcbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2YgJiYgIV9mLmRvbmUgJiYgKF9iID0gX2UucmV0dXJuKSkgX2IuY2FsbChfZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8yKSB0aHJvdyBlXzIuZXJyb3I7IH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxyXG4gICAgICAgIGZpbmFsbHkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgaWYgKF9kICYmICFfZC5kb25lICYmIChfYSA9IF9jLnJldHVybikpIF9hLmNhbGwoX2MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm91dHN0YW5kaW5nUHV0c18ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMub3V0c3RhbmRpbmdQdXRzX1tpXSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kUHV0XyhpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB3aGlsZSAodGhpcy5vbkRpc2Nvbm5lY3RSZXF1ZXN0UXVldWVfLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB2YXIgcmVxdWVzdCA9IHRoaXMub25EaXNjb25uZWN0UmVxdWVzdFF1ZXVlXy5zaGlmdCgpO1xyXG4gICAgICAgICAgICB0aGlzLnNlbmRPbkRpc2Nvbm5lY3RfKHJlcXVlc3QuYWN0aW9uLCByZXF1ZXN0LnBhdGhTdHJpbmcsIHJlcXVlc3QuZGF0YSwgcmVxdWVzdC5vbkNvbXBsZXRlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kcyBjbGllbnQgc3RhdHMgZm9yIGZpcnN0IGNvbm5lY3Rpb25cclxuICAgICAqL1xyXG4gICAgUGVyc2lzdGVudENvbm5lY3Rpb24ucHJvdG90eXBlLnNlbmRDb25uZWN0U3RhdHNfID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBzdGF0cyA9IHt9O1xyXG4gICAgICAgIHZhciBjbGllbnROYW1lID0gJ2pzJztcclxuICAgICAgICBpZiAoaXNOb2RlU2RrKCkpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucmVwb0luZm9fLm5vZGVBZG1pbikge1xyXG4gICAgICAgICAgICAgICAgY2xpZW50TmFtZSA9ICdhZG1pbl9ub2RlJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNsaWVudE5hbWUgPSAnbm9kZSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgc3RhdHNbJ3Nkay4nICsgY2xpZW50TmFtZSArICcuJyArIFNES19WRVJTSU9OLnJlcGxhY2UoL1xcLi9nLCAnLScpXSA9IDE7XHJcbiAgICAgICAgaWYgKGlzTW9iaWxlQ29yZG92YSgpKSB7XHJcbiAgICAgICAgICAgIHN0YXRzWydmcmFtZXdvcmsuY29yZG92YSddID0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaXNSZWFjdE5hdGl2ZSgpKSB7XHJcbiAgICAgICAgICAgIHN0YXRzWydmcmFtZXdvcmsucmVhY3RuYXRpdmUnXSA9IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucmVwb3J0U3RhdHMoc3RhdHMpO1xyXG4gICAgfTtcclxuICAgIFBlcnNpc3RlbnRDb25uZWN0aW9uLnByb3RvdHlwZS5zaG91bGRSZWNvbm5lY3RfID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBvbmxpbmUgPSBPbmxpbmVNb25pdG9yLmdldEluc3RhbmNlKCkuY3VycmVudGx5T25saW5lKCk7XHJcbiAgICAgICAgcmV0dXJuIGlzRW1wdHkodGhpcy5pbnRlcnJ1cHRSZWFzb25zXykgJiYgb25saW5lO1xyXG4gICAgfTtcclxuICAgIFBlcnNpc3RlbnRDb25uZWN0aW9uLm5leHRQZXJzaXN0ZW50Q29ubmVjdGlvbklkXyA9IDA7XHJcbiAgICAvKipcclxuICAgICAqIENvdW50ZXIgZm9yIG51bWJlciBvZiBjb25uZWN0aW9ucyBjcmVhdGVkLiBNYWlubHkgdXNlZCBmb3IgdGFnZ2luZyBpbiB0aGUgbG9nc1xyXG4gICAgICovXHJcbiAgICBQZXJzaXN0ZW50Q29ubmVjdGlvbi5uZXh0Q29ubmVjdGlvbklkXyA9IDA7XHJcbiAgICByZXR1cm4gUGVyc2lzdGVudENvbm5lY3Rpb247XHJcbn0oU2VydmVyQWN0aW9ucykpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQW4gaW1wbGVtZW50YXRpb24gb2YgU2VydmVyQWN0aW9ucyB0aGF0IGNvbW11bmljYXRlcyB3aXRoIHRoZSBzZXJ2ZXIgdmlhIFJFU1QgcmVxdWVzdHMuXHJcbiAqIFRoaXMgaXMgbW9zdGx5IHVzZWZ1bCBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIGNyYXdsZXJzLCB3aGVyZSB3ZSBkb24ndCB3YW50IHRvIHNwaW4gdXAgYSBmdWxsXHJcbiAqIHBlcnNpc3RlbnQgY29ubmVjdGlvbiAodXNpbmcgV2ViU29ja2V0cyBvciBsb25nLXBvbGxpbmcpXHJcbiAqL1xyXG52YXIgUmVhZG9ubHlSZXN0Q2xpZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKFJlYWRvbmx5UmVzdENsaWVudCwgX3N1cGVyKTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshUmVwb0luZm99IHJlcG9JbmZvXyBEYXRhIGFib3V0IHRoZSBuYW1lc3BhY2Ugd2UgYXJlIGNvbm5lY3RpbmcgdG9cclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oc3RyaW5nLCAqLCBib29sZWFuLCA/bnVtYmVyKX0gb25EYXRhVXBkYXRlXyBBIGNhbGxiYWNrIGZvciBuZXcgZGF0YSBmcm9tIHRoZSBzZXJ2ZXJcclxuICAgICAqIEBwYXJhbSB7QXV0aFRva2VuUHJvdmlkZXJ9IGF1dGhUb2tlblByb3ZpZGVyX1xyXG4gICAgICogQGltcGxlbWVudHMge1NlcnZlckFjdGlvbnN9XHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIFJlYWRvbmx5UmVzdENsaWVudChyZXBvSW5mb18sIG9uRGF0YVVwZGF0ZV8sIGF1dGhUb2tlblByb3ZpZGVyXykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMucmVwb0luZm9fID0gcmVwb0luZm9fO1xyXG4gICAgICAgIF90aGlzLm9uRGF0YVVwZGF0ZV8gPSBvbkRhdGFVcGRhdGVfO1xyXG4gICAgICAgIF90aGlzLmF1dGhUb2tlblByb3ZpZGVyXyA9IGF1dGhUb2tlblByb3ZpZGVyXztcclxuICAgICAgICAvKiogQHByaXZhdGUge2Z1bmN0aW9uKC4uLlsqXSl9ICovXHJcbiAgICAgICAgX3RoaXMubG9nXyA9IGxvZ1dyYXBwZXIoJ3A6cmVzdDonKTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBXZSBkb24ndCBhY3R1YWxseSBuZWVkIHRvIHRyYWNrIGxpc3RlbnMsIGV4Y2VwdCB0byBwcmV2ZW50IHVzIGNhbGxpbmcgYW4gb25Db21wbGV0ZSBmb3IgYSBsaXN0ZW5cclxuICAgICAgICAgKiB0aGF0J3MgYmVlbiByZW1vdmVkLiA6LS9cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwcml2YXRlIHshT2JqZWN0LjxzdHJpbmcsICFPYmplY3Q+fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF90aGlzLmxpc3RlbnNfID0ge307XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgUmVhZG9ubHlSZXN0Q2xpZW50LnByb3RvdHlwZS5yZXBvcnRTdGF0cyA9IGZ1bmN0aW9uIChzdGF0cykge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IVF1ZXJ5fSBxdWVyeVxyXG4gICAgICogQHBhcmFtIHs/bnVtYmVyPX0gdGFnXHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBSZWFkb25seVJlc3RDbGllbnQuZ2V0TGlzdGVuSWRfID0gZnVuY3Rpb24gKHF1ZXJ5LCB0YWcpIHtcclxuICAgICAgICBpZiAodGFnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICd0YWckJyArIHRhZztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGFzc2VydChxdWVyeS5nZXRRdWVyeVBhcmFtcygpLmlzRGVmYXVsdCgpLCBcInNob3VsZCBoYXZlIGEgdGFnIGlmIGl0J3Mgbm90IGEgZGVmYXVsdCBxdWVyeS5cIik7XHJcbiAgICAgICAgICAgIHJldHVybiBxdWVyeS5wYXRoLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKiBAaW5oZXJpdERvYyAqL1xyXG4gICAgUmVhZG9ubHlSZXN0Q2xpZW50LnByb3RvdHlwZS5saXN0ZW4gPSBmdW5jdGlvbiAocXVlcnksIGN1cnJlbnRIYXNoRm4sIHRhZywgb25Db21wbGV0ZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHBhdGhTdHJpbmcgPSBxdWVyeS5wYXRoLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgdGhpcy5sb2dfKCdMaXN0ZW4gY2FsbGVkIGZvciAnICsgcGF0aFN0cmluZyArICcgJyArIHF1ZXJ5LnF1ZXJ5SWRlbnRpZmllcigpKTtcclxuICAgICAgICAvLyBNYXJrIHRoaXMgbGlzdGVuZXIgc28gd2UgY2FuIHRlbGwgaWYgaXQncyByZW1vdmVkLlxyXG4gICAgICAgIHZhciBsaXN0ZW5JZCA9IFJlYWRvbmx5UmVzdENsaWVudC5nZXRMaXN0ZW5JZF8ocXVlcnksIHRhZyk7XHJcbiAgICAgICAgdmFyIHRoaXNMaXN0ZW4gPSB7fTtcclxuICAgICAgICB0aGlzLmxpc3RlbnNfW2xpc3RlbklkXSA9IHRoaXNMaXN0ZW47XHJcbiAgICAgICAgdmFyIHF1ZXJ5U3RyaW5nUGFyYW1ldGVycyA9IHF1ZXJ5XHJcbiAgICAgICAgICAgIC5nZXRRdWVyeVBhcmFtcygpXHJcbiAgICAgICAgICAgIC50b1Jlc3RRdWVyeVN0cmluZ1BhcmFtZXRlcnMoKTtcclxuICAgICAgICB0aGlzLnJlc3RSZXF1ZXN0XyhwYXRoU3RyaW5nICsgJy5qc29uJywgcXVlcnlTdHJpbmdQYXJhbWV0ZXJzLCBmdW5jdGlvbiAoZXJyb3IsIHJlc3VsdCkge1xyXG4gICAgICAgICAgICB2YXIgZGF0YSA9IHJlc3VsdDtcclxuICAgICAgICAgICAgaWYgKGVycm9yID09PSA0MDQpIHtcclxuICAgICAgICAgICAgICAgIGRhdGEgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgZXJyb3IgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChlcnJvciA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMub25EYXRhVXBkYXRlXyhwYXRoU3RyaW5nLCBkYXRhLCAvKmlzTWVyZ2U9Ki8gZmFsc2UsIHRhZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHNhZmVHZXQoX3RoaXMubGlzdGVuc18sIGxpc3RlbklkKSA9PT0gdGhpc0xpc3Rlbikge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0YXR1c18xO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1c18xID0gJ29rJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGVycm9yID09PSA0MDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0dXNfMSA9ICdwZXJtaXNzaW9uX2RlbmllZCc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0dXNfMSA9ICdyZXN0X2Vycm9yOicgKyBlcnJvcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG9uQ29tcGxldGUoc3RhdHVzXzEsIG51bGwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqIEBpbmhlcml0RG9jICovXHJcbiAgICBSZWFkb25seVJlc3RDbGllbnQucHJvdG90eXBlLnVubGlzdGVuID0gZnVuY3Rpb24gKHF1ZXJ5LCB0YWcpIHtcclxuICAgICAgICB2YXIgbGlzdGVuSWQgPSBSZWFkb25seVJlc3RDbGllbnQuZ2V0TGlzdGVuSWRfKHF1ZXJ5LCB0YWcpO1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLmxpc3RlbnNfW2xpc3RlbklkXTtcclxuICAgIH07XHJcbiAgICAvKiogQGluaGVyaXREb2MgKi9cclxuICAgIFJlYWRvbmx5UmVzdENsaWVudC5wcm90b3R5cGUucmVmcmVzaEF1dGhUb2tlbiA9IGZ1bmN0aW9uICh0b2tlbikge1xyXG4gICAgICAgIC8vIG5vLW9wIHNpbmNlIHdlIGp1c3QgYWx3YXlzIGNhbGwgZ2V0VG9rZW4uXHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBQZXJmb3JtcyBhIFJFU1QgcmVxdWVzdCB0byB0aGUgZ2l2ZW4gcGF0aCwgd2l0aCB0aGUgcHJvdmlkZWQgcXVlcnkgc3RyaW5nIHBhcmFtZXRlcnMsXHJcbiAgICAgKiBhbmQgYW55IGF1dGggY3JlZGVudGlhbHMgd2UgaGF2ZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFzdHJpbmd9IHBhdGhTdHJpbmdcclxuICAgICAqIEBwYXJhbSB7IU9iamVjdC48c3RyaW5nLCAqPn0gcXVlcnlTdHJpbmdQYXJhbWV0ZXJzXHJcbiAgICAgKiBAcGFyYW0gez9mdW5jdGlvbig/bnVtYmVyLCAqPSl9IGNhbGxiYWNrXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBSZWFkb25seVJlc3RDbGllbnQucHJvdG90eXBlLnJlc3RSZXF1ZXN0XyA9IGZ1bmN0aW9uIChwYXRoU3RyaW5nLCBxdWVyeVN0cmluZ1BhcmFtZXRlcnMsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAocXVlcnlTdHJpbmdQYXJhbWV0ZXJzID09PSB2b2lkIDApIHsgcXVlcnlTdHJpbmdQYXJhbWV0ZXJzID0ge307IH1cclxuICAgICAgICBxdWVyeVN0cmluZ1BhcmFtZXRlcnNbJ2Zvcm1hdCddID0gJ2V4cG9ydCc7XHJcbiAgICAgICAgdGhpcy5hdXRoVG9rZW5Qcm92aWRlcl9cclxuICAgICAgICAgICAgLmdldFRva2VuKC8qZm9yY2VSZWZyZXNoPSovIGZhbHNlKVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoYXV0aFRva2VuRGF0YSkge1xyXG4gICAgICAgICAgICB2YXIgYXV0aFRva2VuID0gYXV0aFRva2VuRGF0YSAmJiBhdXRoVG9rZW5EYXRhLmFjY2Vzc1Rva2VuO1xyXG4gICAgICAgICAgICBpZiAoYXV0aFRva2VuKSB7XHJcbiAgICAgICAgICAgICAgICBxdWVyeVN0cmluZ1BhcmFtZXRlcnNbJ2F1dGgnXSA9IGF1dGhUb2tlbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgdXJsID0gKF90aGlzLnJlcG9JbmZvXy5zZWN1cmUgPyAnaHR0cHM6Ly8nIDogJ2h0dHA6Ly8nKSArXHJcbiAgICAgICAgICAgICAgICBfdGhpcy5yZXBvSW5mb18uaG9zdCArXHJcbiAgICAgICAgICAgICAgICBwYXRoU3RyaW5nICtcclxuICAgICAgICAgICAgICAgICc/JyArXHJcbiAgICAgICAgICAgICAgICAnbnM9JyArXHJcbiAgICAgICAgICAgICAgICBfdGhpcy5yZXBvSW5mb18ubmFtZXNwYWNlICtcclxuICAgICAgICAgICAgICAgIHF1ZXJ5c3RyaW5nKHF1ZXJ5U3RyaW5nUGFyYW1ldGVycyk7XHJcbiAgICAgICAgICAgIF90aGlzLmxvZ18oJ1NlbmRpbmcgUkVTVCByZXF1ZXN0IGZvciAnICsgdXJsKTtcclxuICAgICAgICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG4gICAgICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrICYmIHhoci5yZWFkeVN0YXRlID09PSA0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMubG9nXygnUkVTVCBSZXNwb25zZSBmb3IgJyArIHVybCArICcgcmVjZWl2ZWQuIHN0YXR1czonLCB4aHIuc3RhdHVzLCAncmVzcG9uc2U6JywgeGhyLnJlc3BvbnNlVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlcyA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgPj0gMjAwICYmIHhoci5zdGF0dXMgPCAzMDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9IGpzb25FdmFsKHhoci5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuKCdGYWlsZWQgdG8gcGFyc2UgSlNPTiByZXNwb25zZSBmb3IgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnOiAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4aHIucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gNDAxIGFuZCA0MDQgYXJlIGV4cGVjdGVkLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyAhPT0gNDAxICYmIHhoci5zdGF0dXMgIT09IDQwNCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybignR290IHVuc3VjY2Vzc2Z1bCBSRVNUIHJlc3BvbnNlIGZvciAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmwgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgU3RhdHVzOiAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4aHIuc3RhdHVzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh4aHIuc3RhdHVzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB4aHIub3BlbignR0VUJywgdXJsLCAvKmFzeW5jaHJvbm91cz0qLyB0cnVlKTtcclxuICAgICAgICAgICAgeGhyLnNlbmQoKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gUmVhZG9ubHlSZXN0Q2xpZW50O1xyXG59KFNlcnZlckFjdGlvbnMpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIElOVEVSUlVQVF9SRUFTT04gPSAncmVwb19pbnRlcnJ1cHQnO1xyXG4vKipcclxuICogQSBjb25uZWN0aW9uIHRvIGEgc2luZ2xlIGRhdGEgcmVwb3NpdG9yeS5cclxuICovXHJcbnZhciBSZXBvID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUmVwbyhyZXBvSW5mb18sIGZvcmNlUmVzdENsaWVudF8sIGFwcCwgYXV0aFRva2VuUHJvdmlkZXJfKSB7XHJcbiAgICAgICAgdGhpcy5yZXBvSW5mb18gPSByZXBvSW5mb187XHJcbiAgICAgICAgdGhpcy5mb3JjZVJlc3RDbGllbnRfID0gZm9yY2VSZXN0Q2xpZW50XztcclxuICAgICAgICB0aGlzLmFwcCA9IGFwcDtcclxuICAgICAgICB0aGlzLmF1dGhUb2tlblByb3ZpZGVyXyA9IGF1dGhUb2tlblByb3ZpZGVyXztcclxuICAgICAgICB0aGlzLmRhdGFVcGRhdGVDb3VudCA9IDA7XHJcbiAgICAgICAgdGhpcy5zdGF0c0xpc3RlbmVyXyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5ldmVudFF1ZXVlXyA9IG5ldyBFdmVudFF1ZXVlKCk7XHJcbiAgICAgICAgdGhpcy5uZXh0V3JpdGVJZF8gPSAxO1xyXG4gICAgICAgIHRoaXMuaW50ZXJjZXB0U2VydmVyRGF0YUNhbGxiYWNrXyA9IG51bGw7XHJcbiAgICAgICAgLyoqIEEgbGlzdCBvZiBkYXRhIHBpZWNlcyBhbmQgcGF0aHMgdG8gYmUgc2V0IHdoZW4gdGhpcyBjbGllbnQgZGlzY29ubmVjdHMuICovXHJcbiAgICAgICAgdGhpcy5vbkRpc2Nvbm5lY3RfID0gbmV3IFNwYXJzZVNuYXBzaG90VHJlZSgpO1xyXG4gICAgICAgIC8vIFRPRE86IFRoaXMgc2hvdWxkIGJlIEBwcml2YXRlIGJ1dCBpdCdzIHVzZWQgYnkgdGVzdF9hY2Nlc3MuanMgYW5kIGludGVybmFsLmpzXHJcbiAgICAgICAgdGhpcy5wZXJzaXN0ZW50Q29ubmVjdGlvbl8gPSBudWxsO1xyXG4gICAgICAgIC8vIFRoaXMga2V5IGlzIGludGVudGlvbmFsbHkgbm90IHVwZGF0ZWQgaWYgUmVwb0luZm8gaXMgbGF0ZXIgY2hhbmdlZCBvciByZXBsYWNlZFxyXG4gICAgICAgIHRoaXMua2V5ID0gdGhpcy5yZXBvSW5mb18udG9VUkxTdHJpbmcoKTtcclxuICAgIH1cclxuICAgIFJlcG8ucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5zdGF0c18gPSBTdGF0c01hbmFnZXIuZ2V0Q29sbGVjdGlvbih0aGlzLnJlcG9JbmZvXyk7XHJcbiAgICAgICAgaWYgKHRoaXMuZm9yY2VSZXN0Q2xpZW50XyB8fCBiZWluZ0NyYXdsZWQoKSkge1xyXG4gICAgICAgICAgICB0aGlzLnNlcnZlcl8gPSBuZXcgUmVhZG9ubHlSZXN0Q2xpZW50KHRoaXMucmVwb0luZm9fLCB0aGlzLm9uRGF0YVVwZGF0ZV8uYmluZCh0aGlzKSwgdGhpcy5hdXRoVG9rZW5Qcm92aWRlcl8pO1xyXG4gICAgICAgICAgICAvLyBNaW5vciBoYWNrOiBGaXJlIG9uQ29ubmVjdCBpbW1lZGlhdGVseSwgc2luY2UgdGhlcmUncyBubyBhY3R1YWwgY29ubmVjdGlvbi5cclxuICAgICAgICAgICAgc2V0VGltZW91dCh0aGlzLm9uQ29ubmVjdFN0YXR1c18uYmluZCh0aGlzLCB0cnVlKSwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgYXV0aE92ZXJyaWRlID0gdGhpcy5hcHAub3B0aW9uc1snZGF0YWJhc2VBdXRoVmFyaWFibGVPdmVycmlkZSddO1xyXG4gICAgICAgICAgICAvLyBWYWxpZGF0ZSBhdXRoT3ZlcnJpZGVcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBhdXRoT3ZlcnJpZGUgIT09ICd1bmRlZmluZWQnICYmIGF1dGhPdmVycmlkZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhdXRoT3ZlcnJpZGUgIT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdPbmx5IG9iamVjdHMgYXJlIHN1cHBvcnRlZCBmb3Igb3B0aW9uIGRhdGFiYXNlQXV0aFZhcmlhYmxlT3ZlcnJpZGUnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5naWZ5KGF1dGhPdmVycmlkZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBhdXRoT3ZlcnJpZGUgcHJvdmlkZWQ6ICcgKyBlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnBlcnNpc3RlbnRDb25uZWN0aW9uXyA9IG5ldyBQZXJzaXN0ZW50Q29ubmVjdGlvbih0aGlzLnJlcG9JbmZvXywgdGhpcy5hcHAub3B0aW9ucy5hcHBJZCwgdGhpcy5vbkRhdGFVcGRhdGVfLmJpbmQodGhpcyksIHRoaXMub25Db25uZWN0U3RhdHVzXy5iaW5kKHRoaXMpLCB0aGlzLm9uU2VydmVySW5mb1VwZGF0ZV8uYmluZCh0aGlzKSwgdGhpcy5hdXRoVG9rZW5Qcm92aWRlcl8sIGF1dGhPdmVycmlkZSk7XHJcbiAgICAgICAgICAgIHRoaXMuc2VydmVyXyA9IHRoaXMucGVyc2lzdGVudENvbm5lY3Rpb25fO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmF1dGhUb2tlblByb3ZpZGVyXy5hZGRUb2tlbkNoYW5nZUxpc3RlbmVyKGZ1bmN0aW9uICh0b2tlbikge1xyXG4gICAgICAgICAgICBfdGhpcy5zZXJ2ZXJfLnJlZnJlc2hBdXRoVG9rZW4odG9rZW4pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIEluIHRoZSBjYXNlIG9mIG11bHRpcGxlIFJlcG9zIGZvciB0aGUgc2FtZSByZXBvSW5mbyAoaS5lLiB0aGVyZSBhcmUgbXVsdGlwbGUgRmlyZWJhc2UuQ29udGV4dHMgYmVpbmcgdXNlZCksXHJcbiAgICAgICAgLy8gd2Ugb25seSB3YW50IHRvIGNyZWF0ZSBvbmUgU3RhdHNSZXBvcnRlci4gIEFzIHN1Y2gsIHdlJ2xsIHJlcG9ydCBzdGF0cyBvdmVyIHRoZSBmaXJzdCBSZXBvIGNyZWF0ZWQuXHJcbiAgICAgICAgdGhpcy5zdGF0c1JlcG9ydGVyXyA9IFN0YXRzTWFuYWdlci5nZXRPckNyZWF0ZVJlcG9ydGVyKHRoaXMucmVwb0luZm9fLCBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgU3RhdHNSZXBvcnRlcihfdGhpcy5zdGF0c18sIF90aGlzLnNlcnZlcl8pOyB9KTtcclxuICAgICAgICB0aGlzLnRyYW5zYWN0aW9uc0luaXRfKCk7XHJcbiAgICAgICAgLy8gVXNlZCBmb3IgLmluZm8uXHJcbiAgICAgICAgdGhpcy5pbmZvRGF0YV8gPSBuZXcgU25hcHNob3RIb2xkZXIoKTtcclxuICAgICAgICB0aGlzLmluZm9TeW5jVHJlZV8gPSBuZXcgU3luY1RyZWUoe1xyXG4gICAgICAgICAgICBzdGFydExpc3RlbmluZzogZnVuY3Rpb24gKHF1ZXJ5LCB0YWcsIGN1cnJlbnRIYXNoRm4sIG9uQ29tcGxldGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpbmZvRXZlbnRzID0gW107XHJcbiAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IF90aGlzLmluZm9EYXRhXy5nZXROb2RlKHF1ZXJ5LnBhdGgpO1xyXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBwb3NzaWJseSBhIGhhY2ssIGJ1dCB3ZSBoYXZlIGRpZmZlcmVudCBzZW1hbnRpY3MgZm9yIC5pbmZvIGVuZHBvaW50cy4gV2UgZG9uJ3QgcmFpc2UgbnVsbCBldmVudHNcclxuICAgICAgICAgICAgICAgIC8vIG9uIGluaXRpYWwgZGF0YS4uLlxyXG4gICAgICAgICAgICAgICAgaWYgKCFub2RlLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGluZm9FdmVudHMgPSBfdGhpcy5pbmZvU3luY1RyZWVfLmFwcGx5U2VydmVyT3ZlcndyaXRlKHF1ZXJ5LnBhdGgsIG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNvbXBsZXRlKCdvaycpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIDApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGluZm9FdmVudHM7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN0b3BMaXN0ZW5pbmc6IGZ1bmN0aW9uICgpIHsgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMudXBkYXRlSW5mb18oJ2Nvbm5lY3RlZCcsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLnNlcnZlclN5bmNUcmVlXyA9IG5ldyBTeW5jVHJlZSh7XHJcbiAgICAgICAgICAgIHN0YXJ0TGlzdGVuaW5nOiBmdW5jdGlvbiAocXVlcnksIHRhZywgY3VycmVudEhhc2hGbiwgb25Db21wbGV0ZSkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuc2VydmVyXy5saXN0ZW4ocXVlcnksIGN1cnJlbnRIYXNoRm4sIHRhZywgZnVuY3Rpb24gKHN0YXR1cywgZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBldmVudHMgPSBvbkNvbXBsZXRlKHN0YXR1cywgZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZXZlbnRRdWV1ZV8ucmFpc2VFdmVudHNGb3JDaGFuZ2VkUGF0aChxdWVyeS5wYXRoLCBldmVudHMpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAvLyBObyBzeW5jaHJvbm91cyBldmVudHMgZm9yIG5ldHdvcmstYmFja2VkIHN5bmMgdHJlZXNcclxuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3RvcExpc3RlbmluZzogZnVuY3Rpb24gKHF1ZXJ5LCB0YWcpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLnNlcnZlcl8udW5saXN0ZW4ocXVlcnksIHRhZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4gVGhlIFVSTCBjb3JyZXNwb25kaW5nIHRvIHRoZSByb290IG9mIHRoaXMgRmlyZWJhc2UuXHJcbiAgICAgKi9cclxuICAgIFJlcG8ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAoKHRoaXMucmVwb0luZm9fLnNlY3VyZSA/ICdodHRwczovLycgOiAnaHR0cDovLycpICsgdGhpcy5yZXBvSW5mb18uaG9zdCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIFRoZSBuYW1lc3BhY2UgcmVwcmVzZW50ZWQgYnkgdGhlIHJlcG8uXHJcbiAgICAgKi9cclxuICAgIFJlcG8ucHJvdG90eXBlLm5hbWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVwb0luZm9fLm5hbWVzcGFjZTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4gVGhlIHRpbWUgaW4gbWlsbGlzZWNvbmRzLCB0YWtpbmcgdGhlIHNlcnZlciBvZmZzZXQgaW50byBhY2NvdW50IGlmIHdlIGhhdmUgb25lLlxyXG4gICAgICovXHJcbiAgICBSZXBvLnByb3RvdHlwZS5zZXJ2ZXJUaW1lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBvZmZzZXROb2RlID0gdGhpcy5pbmZvRGF0YV8uZ2V0Tm9kZShuZXcgUGF0aCgnLmluZm8vc2VydmVyVGltZU9mZnNldCcpKTtcclxuICAgICAgICB2YXIgb2Zmc2V0ID0gb2Zmc2V0Tm9kZS52YWwoKSB8fCAwO1xyXG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKSArIG9mZnNldDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEdlbmVyYXRlIFNlcnZlclZhbHVlcyB1c2luZyBzb21lIHZhcmlhYmxlcyBmcm9tIHRoZSByZXBvIG9iamVjdC5cclxuICAgICAqL1xyXG4gICAgUmVwby5wcm90b3R5cGUuZ2VuZXJhdGVTZXJ2ZXJWYWx1ZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIGdlbmVyYXRlV2l0aFZhbHVlcyh7XHJcbiAgICAgICAgICAgIHRpbWVzdGFtcDogdGhpcy5zZXJ2ZXJUaW1lKClcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIENhbGxlZCBieSByZWFsdGltZSB3aGVuIHdlIGdldCBuZXcgbWVzc2FnZXMgZnJvbSB0aGUgc2VydmVyLlxyXG4gICAgICovXHJcbiAgICBSZXBvLnByb3RvdHlwZS5vbkRhdGFVcGRhdGVfID0gZnVuY3Rpb24gKHBhdGhTdHJpbmcsIGRhdGEsIGlzTWVyZ2UsIHRhZykge1xyXG4gICAgICAgIC8vIEZvciB0ZXN0aW5nLlxyXG4gICAgICAgIHRoaXMuZGF0YVVwZGF0ZUNvdW50Kys7XHJcbiAgICAgICAgdmFyIHBhdGggPSBuZXcgUGF0aChwYXRoU3RyaW5nKTtcclxuICAgICAgICBkYXRhID0gdGhpcy5pbnRlcmNlcHRTZXJ2ZXJEYXRhQ2FsbGJhY2tfXHJcbiAgICAgICAgICAgID8gdGhpcy5pbnRlcmNlcHRTZXJ2ZXJEYXRhQ2FsbGJhY2tfKHBhdGhTdHJpbmcsIGRhdGEpXHJcbiAgICAgICAgICAgIDogZGF0YTtcclxuICAgICAgICB2YXIgZXZlbnRzID0gW107XHJcbiAgICAgICAgaWYgKHRhZykge1xyXG4gICAgICAgICAgICBpZiAoaXNNZXJnZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRhZ2dlZENoaWxkcmVuID0gbWFwKGRhdGEsIGZ1bmN0aW9uIChyYXcpIHsgcmV0dXJuIG5vZGVGcm9tSlNPTiQxKHJhdyk7IH0pO1xyXG4gICAgICAgICAgICAgICAgZXZlbnRzID0gdGhpcy5zZXJ2ZXJTeW5jVHJlZV8uYXBwbHlUYWdnZWRRdWVyeU1lcmdlKHBhdGgsIHRhZ2dlZENoaWxkcmVuLCB0YWcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRhZ2dlZFNuYXAgPSBub2RlRnJvbUpTT04kMShkYXRhKTtcclxuICAgICAgICAgICAgICAgIGV2ZW50cyA9IHRoaXMuc2VydmVyU3luY1RyZWVfLmFwcGx5VGFnZ2VkUXVlcnlPdmVyd3JpdGUocGF0aCwgdGFnZ2VkU25hcCwgdGFnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChpc01lcmdlKSB7XHJcbiAgICAgICAgICAgIHZhciBjaGFuZ2VkQ2hpbGRyZW4gPSBtYXAoZGF0YSwgZnVuY3Rpb24gKHJhdykgeyByZXR1cm4gbm9kZUZyb21KU09OJDEocmF3KTsgfSk7XHJcbiAgICAgICAgICAgIGV2ZW50cyA9IHRoaXMuc2VydmVyU3luY1RyZWVfLmFwcGx5U2VydmVyTWVyZ2UocGF0aCwgY2hhbmdlZENoaWxkcmVuKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBzbmFwID0gbm9kZUZyb21KU09OJDEoZGF0YSk7XHJcbiAgICAgICAgICAgIGV2ZW50cyA9IHRoaXMuc2VydmVyU3luY1RyZWVfLmFwcGx5U2VydmVyT3ZlcndyaXRlKHBhdGgsIHNuYXApO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgYWZmZWN0ZWRQYXRoID0gcGF0aDtcclxuICAgICAgICBpZiAoZXZlbnRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgLy8gU2luY2Ugd2UgaGF2ZSBhIGxpc3RlbmVyIG91dHN0YW5kaW5nIGZvciBlYWNoIHRyYW5zYWN0aW9uLCByZWNlaXZpbmcgYW55IGV2ZW50c1xyXG4gICAgICAgICAgICAvLyBpcyBhIHByb3h5IGZvciBzb21lIGNoYW5nZSBoYXZpbmcgb2NjdXJyZWQuXHJcbiAgICAgICAgICAgIGFmZmVjdGVkUGF0aCA9IHRoaXMucmVydW5UcmFuc2FjdGlvbnNfKHBhdGgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmV2ZW50UXVldWVfLnJhaXNlRXZlbnRzRm9yQ2hhbmdlZFBhdGgoYWZmZWN0ZWRQYXRoLCBldmVudHMpO1xyXG4gICAgfTtcclxuICAgIC8vIFRPRE86IFRoaXMgc2hvdWxkIGJlIEBwcml2YXRlIGJ1dCBpdCdzIHVzZWQgYnkgdGVzdF9hY2Nlc3MuanMgYW5kIGludGVybmFsLmpzXHJcbiAgICBSZXBvLnByb3RvdHlwZS5pbnRlcmNlcHRTZXJ2ZXJEYXRhXyA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMuaW50ZXJjZXB0U2VydmVyRGF0YUNhbGxiYWNrXyA9IGNhbGxiYWNrO1xyXG4gICAgfTtcclxuICAgIFJlcG8ucHJvdG90eXBlLm9uQ29ubmVjdFN0YXR1c18gPSBmdW5jdGlvbiAoY29ubmVjdFN0YXR1cykge1xyXG4gICAgICAgIHRoaXMudXBkYXRlSW5mb18oJ2Nvbm5lY3RlZCcsIGNvbm5lY3RTdGF0dXMpO1xyXG4gICAgICAgIGlmIChjb25uZWN0U3RhdHVzID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICB0aGlzLnJ1bk9uRGlzY29ubmVjdEV2ZW50c18oKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgUmVwby5wcm90b3R5cGUub25TZXJ2ZXJJbmZvVXBkYXRlXyA9IGZ1bmN0aW9uICh1cGRhdGVzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBlYWNoKHVwZGF0ZXMsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIF90aGlzLnVwZGF0ZUluZm9fKGtleSwgdmFsdWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFJlcG8ucHJvdG90eXBlLnVwZGF0ZUluZm9fID0gZnVuY3Rpb24gKHBhdGhTdHJpbmcsIHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIHBhdGggPSBuZXcgUGF0aCgnLy5pbmZvLycgKyBwYXRoU3RyaW5nKTtcclxuICAgICAgICB2YXIgbmV3Tm9kZSA9IG5vZGVGcm9tSlNPTiQxKHZhbHVlKTtcclxuICAgICAgICB0aGlzLmluZm9EYXRhXy51cGRhdGVTbmFwc2hvdChwYXRoLCBuZXdOb2RlKTtcclxuICAgICAgICB2YXIgZXZlbnRzID0gdGhpcy5pbmZvU3luY1RyZWVfLmFwcGx5U2VydmVyT3ZlcndyaXRlKHBhdGgsIG5ld05vZGUpO1xyXG4gICAgICAgIHRoaXMuZXZlbnRRdWV1ZV8ucmFpc2VFdmVudHNGb3JDaGFuZ2VkUGF0aChwYXRoLCBldmVudHMpO1xyXG4gICAgfTtcclxuICAgIFJlcG8ucHJvdG90eXBlLmdldE5leHRXcml0ZUlkXyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5uZXh0V3JpdGVJZF8rKztcclxuICAgIH07XHJcbiAgICBSZXBvLnByb3RvdHlwZS5zZXRXaXRoUHJpb3JpdHkgPSBmdW5jdGlvbiAocGF0aCwgbmV3VmFsLCBuZXdQcmlvcml0eSwgb25Db21wbGV0ZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5sb2dfKCdzZXQnLCB7XHJcbiAgICAgICAgICAgIHBhdGg6IHBhdGgudG9TdHJpbmcoKSxcclxuICAgICAgICAgICAgdmFsdWU6IG5ld1ZhbCxcclxuICAgICAgICAgICAgcHJpb3JpdHk6IG5ld1ByaW9yaXR5XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gVE9ETzogT3B0aW1pemUgdGhpcyBiZWhhdmlvciB0byBlaXRoZXIgKGEpIHN0b3JlIGZsYWcgdG8gc2tpcCByZXNvbHZpbmcgd2hlcmUgcG9zc2libGUgYW5kIC8gb3JcclxuICAgICAgICAvLyAoYikgc3RvcmUgdW5yZXNvbHZlZCBwYXRocyBvbiBKU09OIHBhcnNlXHJcbiAgICAgICAgdmFyIHNlcnZlclZhbHVlcyA9IHRoaXMuZ2VuZXJhdGVTZXJ2ZXJWYWx1ZXMoKTtcclxuICAgICAgICB2YXIgbmV3Tm9kZVVucmVzb2x2ZWQgPSBub2RlRnJvbUpTT04kMShuZXdWYWwsIG5ld1ByaW9yaXR5KTtcclxuICAgICAgICB2YXIgZXhpc3RpbmcgPSB0aGlzLnNlcnZlclN5bmNUcmVlXy5jYWxjQ29tcGxldGVFdmVudENhY2hlKHBhdGgpO1xyXG4gICAgICAgIHZhciBuZXdOb2RlID0gcmVzb2x2ZURlZmVycmVkVmFsdWVTbmFwc2hvdChuZXdOb2RlVW5yZXNvbHZlZCwgZXhpc3RpbmcsIHNlcnZlclZhbHVlcyk7XHJcbiAgICAgICAgdmFyIHdyaXRlSWQgPSB0aGlzLmdldE5leHRXcml0ZUlkXygpO1xyXG4gICAgICAgIHZhciBldmVudHMgPSB0aGlzLnNlcnZlclN5bmNUcmVlXy5hcHBseVVzZXJPdmVyd3JpdGUocGF0aCwgbmV3Tm9kZSwgd3JpdGVJZCwgdHJ1ZSk7XHJcbiAgICAgICAgdGhpcy5ldmVudFF1ZXVlXy5xdWV1ZUV2ZW50cyhldmVudHMpO1xyXG4gICAgICAgIHRoaXMuc2VydmVyXy5wdXQocGF0aC50b1N0cmluZygpLCBuZXdOb2RlVW5yZXNvbHZlZC52YWwoLypleHBvcnQ9Ki8gdHJ1ZSksIGZ1bmN0aW9uIChzdGF0dXMsIGVycm9yUmVhc29uKSB7XHJcbiAgICAgICAgICAgIHZhciBzdWNjZXNzID0gc3RhdHVzID09PSAnb2snO1xyXG4gICAgICAgICAgICBpZiAoIXN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oJ3NldCBhdCAnICsgcGF0aCArICcgZmFpbGVkOiAnICsgc3RhdHVzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgY2xlYXJFdmVudHMgPSBfdGhpcy5zZXJ2ZXJTeW5jVHJlZV8uYWNrVXNlcldyaXRlKHdyaXRlSWQsICFzdWNjZXNzKTtcclxuICAgICAgICAgICAgX3RoaXMuZXZlbnRRdWV1ZV8ucmFpc2VFdmVudHNGb3JDaGFuZ2VkUGF0aChwYXRoLCBjbGVhckV2ZW50cyk7XHJcbiAgICAgICAgICAgIF90aGlzLmNhbGxPbkNvbXBsZXRlQ2FsbGJhY2sob25Db21wbGV0ZSwgc3RhdHVzLCBlcnJvclJlYXNvbik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdmFyIGFmZmVjdGVkUGF0aCA9IHRoaXMuYWJvcnRUcmFuc2FjdGlvbnNfKHBhdGgpO1xyXG4gICAgICAgIHRoaXMucmVydW5UcmFuc2FjdGlvbnNfKGFmZmVjdGVkUGF0aCk7XHJcbiAgICAgICAgLy8gV2UgcXVldWVkIHRoZSBldmVudHMgYWJvdmUsIHNvIGp1c3QgZmx1c2ggdGhlIHF1ZXVlIGhlcmVcclxuICAgICAgICB0aGlzLmV2ZW50UXVldWVfLnJhaXNlRXZlbnRzRm9yQ2hhbmdlZFBhdGgoYWZmZWN0ZWRQYXRoLCBbXSk7XHJcbiAgICB9O1xyXG4gICAgUmVwby5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKHBhdGgsIGNoaWxkcmVuVG9NZXJnZSwgb25Db21wbGV0ZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5sb2dfKCd1cGRhdGUnLCB7IHBhdGg6IHBhdGgudG9TdHJpbmcoKSwgdmFsdWU6IGNoaWxkcmVuVG9NZXJnZSB9KTtcclxuICAgICAgICAvLyBTdGFydCB3aXRoIG91ciBleGlzdGluZyBkYXRhIGFuZCBtZXJnZSBlYWNoIGNoaWxkIGludG8gaXQuXHJcbiAgICAgICAgdmFyIGVtcHR5ID0gdHJ1ZTtcclxuICAgICAgICB2YXIgc2VydmVyVmFsdWVzID0gdGhpcy5nZW5lcmF0ZVNlcnZlclZhbHVlcygpO1xyXG4gICAgICAgIHZhciBjaGFuZ2VkQ2hpbGRyZW4gPSB7fTtcclxuICAgICAgICBlYWNoKGNoaWxkcmVuVG9NZXJnZSwgZnVuY3Rpb24gKGNoYW5nZWRLZXksIGNoYW5nZWRWYWx1ZSkge1xyXG4gICAgICAgICAgICBlbXB0eSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBjaGFuZ2VkQ2hpbGRyZW5bY2hhbmdlZEtleV0gPSByZXNvbHZlRGVmZXJyZWRWYWx1ZVRyZWUocGF0aC5jaGlsZChjaGFuZ2VkS2V5KSwgbm9kZUZyb21KU09OJDEoY2hhbmdlZFZhbHVlKSwgX3RoaXMuc2VydmVyU3luY1RyZWVfLCBzZXJ2ZXJWYWx1ZXMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmICghZW1wdHkpIHtcclxuICAgICAgICAgICAgdmFyIHdyaXRlSWRfMSA9IHRoaXMuZ2V0TmV4dFdyaXRlSWRfKCk7XHJcbiAgICAgICAgICAgIHZhciBldmVudHMgPSB0aGlzLnNlcnZlclN5bmNUcmVlXy5hcHBseVVzZXJNZXJnZShwYXRoLCBjaGFuZ2VkQ2hpbGRyZW4sIHdyaXRlSWRfMSk7XHJcbiAgICAgICAgICAgIHRoaXMuZXZlbnRRdWV1ZV8ucXVldWVFdmVudHMoZXZlbnRzKTtcclxuICAgICAgICAgICAgdGhpcy5zZXJ2ZXJfLm1lcmdlKHBhdGgudG9TdHJpbmcoKSwgY2hpbGRyZW5Ub01lcmdlLCBmdW5jdGlvbiAoc3RhdHVzLCBlcnJvclJlYXNvbikge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN1Y2Nlc3MgPSBzdGF0dXMgPT09ICdvayc7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKCd1cGRhdGUgYXQgJyArIHBhdGggKyAnIGZhaWxlZDogJyArIHN0YXR1cyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgY2xlYXJFdmVudHMgPSBfdGhpcy5zZXJ2ZXJTeW5jVHJlZV8uYWNrVXNlcldyaXRlKHdyaXRlSWRfMSwgIXN1Y2Nlc3MpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGFmZmVjdGVkUGF0aCA9IGNsZWFyRXZlbnRzLmxlbmd0aCA+IDAgPyBfdGhpcy5yZXJ1blRyYW5zYWN0aW9uc18ocGF0aCkgOiBwYXRoO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuZXZlbnRRdWV1ZV8ucmFpc2VFdmVudHNGb3JDaGFuZ2VkUGF0aChhZmZlY3RlZFBhdGgsIGNsZWFyRXZlbnRzKTtcclxuICAgICAgICAgICAgICAgIF90aGlzLmNhbGxPbkNvbXBsZXRlQ2FsbGJhY2sob25Db21wbGV0ZSwgc3RhdHVzLCBlcnJvclJlYXNvbik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBlYWNoKGNoaWxkcmVuVG9NZXJnZSwgZnVuY3Rpb24gKGNoYW5nZWRQYXRoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYWZmZWN0ZWRQYXRoID0gX3RoaXMuYWJvcnRUcmFuc2FjdGlvbnNfKHBhdGguY2hpbGQoY2hhbmdlZFBhdGgpKTtcclxuICAgICAgICAgICAgICAgIF90aGlzLnJlcnVuVHJhbnNhY3Rpb25zXyhhZmZlY3RlZFBhdGgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgLy8gV2UgcXVldWVkIHRoZSBldmVudHMgYWJvdmUsIHNvIGp1c3QgZmx1c2ggdGhlIHF1ZXVlIGhlcmVcclxuICAgICAgICAgICAgdGhpcy5ldmVudFF1ZXVlXy5yYWlzZUV2ZW50c0ZvckNoYW5nZWRQYXRoKHBhdGgsIFtdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGxvZyhcInVwZGF0ZSgpIGNhbGxlZCB3aXRoIGVtcHR5IGRhdGEuICBEb24ndCBkbyBhbnl0aGluZy5cIik7XHJcbiAgICAgICAgICAgIHRoaXMuY2FsbE9uQ29tcGxldGVDYWxsYmFjayhvbkNvbXBsZXRlLCAnb2snKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBcHBsaWVzIGFsbCBvZiB0aGUgY2hhbmdlcyBzdG9yZWQgdXAgaW4gdGhlIG9uRGlzY29ubmVjdF8gdHJlZS5cclxuICAgICAqL1xyXG4gICAgUmVwby5wcm90b3R5cGUucnVuT25EaXNjb25uZWN0RXZlbnRzXyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMubG9nXygnb25EaXNjb25uZWN0RXZlbnRzJyk7XHJcbiAgICAgICAgdmFyIHNlcnZlclZhbHVlcyA9IHRoaXMuZ2VuZXJhdGVTZXJ2ZXJWYWx1ZXMoKTtcclxuICAgICAgICB2YXIgcmVzb2x2ZWRPbkRpc2Nvbm5lY3RUcmVlID0gbmV3IFNwYXJzZVNuYXBzaG90VHJlZSgpO1xyXG4gICAgICAgIHRoaXMub25EaXNjb25uZWN0Xy5mb3JFYWNoVHJlZShQYXRoLkVtcHR5LCBmdW5jdGlvbiAocGF0aCwgbm9kZSkge1xyXG4gICAgICAgICAgICB2YXIgcmVzb2x2ZWQgPSByZXNvbHZlRGVmZXJyZWRWYWx1ZVRyZWUocGF0aCwgbm9kZSwgX3RoaXMuc2VydmVyU3luY1RyZWVfLCBzZXJ2ZXJWYWx1ZXMpO1xyXG4gICAgICAgICAgICByZXNvbHZlZE9uRGlzY29ubmVjdFRyZWUucmVtZW1iZXIocGF0aCwgcmVzb2x2ZWQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciBldmVudHMgPSBbXTtcclxuICAgICAgICByZXNvbHZlZE9uRGlzY29ubmVjdFRyZWUuZm9yRWFjaFRyZWUoUGF0aC5FbXB0eSwgZnVuY3Rpb24gKHBhdGgsIHNuYXApIHtcclxuICAgICAgICAgICAgZXZlbnRzID0gZXZlbnRzLmNvbmNhdChfdGhpcy5zZXJ2ZXJTeW5jVHJlZV8uYXBwbHlTZXJ2ZXJPdmVyd3JpdGUocGF0aCwgc25hcCkpO1xyXG4gICAgICAgICAgICB2YXIgYWZmZWN0ZWRQYXRoID0gX3RoaXMuYWJvcnRUcmFuc2FjdGlvbnNfKHBhdGgpO1xyXG4gICAgICAgICAgICBfdGhpcy5yZXJ1blRyYW5zYWN0aW9uc18oYWZmZWN0ZWRQYXRoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLm9uRGlzY29ubmVjdF8gPSBuZXcgU3BhcnNlU25hcHNob3RUcmVlKCk7XHJcbiAgICAgICAgdGhpcy5ldmVudFF1ZXVlXy5yYWlzZUV2ZW50c0ZvckNoYW5nZWRQYXRoKFBhdGguRW1wdHksIGV2ZW50cyk7XHJcbiAgICB9O1xyXG4gICAgUmVwby5wcm90b3R5cGUub25EaXNjb25uZWN0Q2FuY2VsID0gZnVuY3Rpb24gKHBhdGgsIG9uQ29tcGxldGUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuc2VydmVyXy5vbkRpc2Nvbm5lY3RDYW5jZWwocGF0aC50b1N0cmluZygpLCBmdW5jdGlvbiAoc3RhdHVzLCBlcnJvclJlYXNvbikge1xyXG4gICAgICAgICAgICBpZiAoc3RhdHVzID09PSAnb2snKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5vbkRpc2Nvbm5lY3RfLmZvcmdldChwYXRoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfdGhpcy5jYWxsT25Db21wbGV0ZUNhbGxiYWNrKG9uQ29tcGxldGUsIHN0YXR1cywgZXJyb3JSZWFzb24pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFJlcG8ucHJvdG90eXBlLm9uRGlzY29ubmVjdFNldCA9IGZ1bmN0aW9uIChwYXRoLCB2YWx1ZSwgb25Db21wbGV0ZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIG5ld05vZGUgPSBub2RlRnJvbUpTT04kMSh2YWx1ZSk7XHJcbiAgICAgICAgdGhpcy5zZXJ2ZXJfLm9uRGlzY29ubmVjdFB1dChwYXRoLnRvU3RyaW5nKCksIG5ld05vZGUudmFsKC8qZXhwb3J0PSovIHRydWUpLCBmdW5jdGlvbiAoc3RhdHVzLCBlcnJvclJlYXNvbikge1xyXG4gICAgICAgICAgICBpZiAoc3RhdHVzID09PSAnb2snKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5vbkRpc2Nvbm5lY3RfLnJlbWVtYmVyKHBhdGgsIG5ld05vZGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF90aGlzLmNhbGxPbkNvbXBsZXRlQ2FsbGJhY2sob25Db21wbGV0ZSwgc3RhdHVzLCBlcnJvclJlYXNvbik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgUmVwby5wcm90b3R5cGUub25EaXNjb25uZWN0U2V0V2l0aFByaW9yaXR5ID0gZnVuY3Rpb24gKHBhdGgsIHZhbHVlLCBwcmlvcml0eSwgb25Db21wbGV0ZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIG5ld05vZGUgPSBub2RlRnJvbUpTT04kMSh2YWx1ZSwgcHJpb3JpdHkpO1xyXG4gICAgICAgIHRoaXMuc2VydmVyXy5vbkRpc2Nvbm5lY3RQdXQocGF0aC50b1N0cmluZygpLCBuZXdOb2RlLnZhbCgvKmV4cG9ydD0qLyB0cnVlKSwgZnVuY3Rpb24gKHN0YXR1cywgZXJyb3JSZWFzb24pIHtcclxuICAgICAgICAgICAgaWYgKHN0YXR1cyA9PT0gJ29rJykge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMub25EaXNjb25uZWN0Xy5yZW1lbWJlcihwYXRoLCBuZXdOb2RlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfdGhpcy5jYWxsT25Db21wbGV0ZUNhbGxiYWNrKG9uQ29tcGxldGUsIHN0YXR1cywgZXJyb3JSZWFzb24pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFJlcG8ucHJvdG90eXBlLm9uRGlzY29ubmVjdFVwZGF0ZSA9IGZ1bmN0aW9uIChwYXRoLCBjaGlsZHJlblRvTWVyZ2UsIG9uQ29tcGxldGUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmIChpc0VtcHR5KGNoaWxkcmVuVG9NZXJnZSkpIHtcclxuICAgICAgICAgICAgbG9nKFwib25EaXNjb25uZWN0KCkudXBkYXRlKCkgY2FsbGVkIHdpdGggZW1wdHkgZGF0YS4gIERvbid0IGRvIGFueXRoaW5nLlwiKTtcclxuICAgICAgICAgICAgdGhpcy5jYWxsT25Db21wbGV0ZUNhbGxiYWNrKG9uQ29tcGxldGUsICdvaycpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2VydmVyXy5vbkRpc2Nvbm5lY3RNZXJnZShwYXRoLnRvU3RyaW5nKCksIGNoaWxkcmVuVG9NZXJnZSwgZnVuY3Rpb24gKHN0YXR1cywgZXJyb3JSZWFzb24pIHtcclxuICAgICAgICAgICAgaWYgKHN0YXR1cyA9PT0gJ29rJykge1xyXG4gICAgICAgICAgICAgICAgZWFjaChjaGlsZHJlblRvTWVyZ2UsIGZ1bmN0aW9uIChjaGlsZE5hbWUsIGNoaWxkTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdDaGlsZE5vZGUgPSBub2RlRnJvbUpTT04kMShjaGlsZE5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm9uRGlzY29ubmVjdF8ucmVtZW1iZXIocGF0aC5jaGlsZChjaGlsZE5hbWUpLCBuZXdDaGlsZE5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgX3RoaXMuY2FsbE9uQ29tcGxldGVDYWxsYmFjayhvbkNvbXBsZXRlLCBzdGF0dXMsIGVycm9yUmVhc29uKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBSZXBvLnByb3RvdHlwZS5hZGRFdmVudENhbGxiYWNrRm9yUXVlcnkgPSBmdW5jdGlvbiAocXVlcnksIGV2ZW50UmVnaXN0cmF0aW9uKSB7XHJcbiAgICAgICAgdmFyIGV2ZW50cztcclxuICAgICAgICBpZiAocXVlcnkucGF0aC5nZXRGcm9udCgpID09PSAnLmluZm8nKSB7XHJcbiAgICAgICAgICAgIGV2ZW50cyA9IHRoaXMuaW5mb1N5bmNUcmVlXy5hZGRFdmVudFJlZ2lzdHJhdGlvbihxdWVyeSwgZXZlbnRSZWdpc3RyYXRpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZXZlbnRzID0gdGhpcy5zZXJ2ZXJTeW5jVHJlZV8uYWRkRXZlbnRSZWdpc3RyYXRpb24ocXVlcnksIGV2ZW50UmVnaXN0cmF0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ldmVudFF1ZXVlXy5yYWlzZUV2ZW50c0F0UGF0aChxdWVyeS5wYXRoLCBldmVudHMpO1xyXG4gICAgfTtcclxuICAgIFJlcG8ucHJvdG90eXBlLnJlbW92ZUV2ZW50Q2FsbGJhY2tGb3JRdWVyeSA9IGZ1bmN0aW9uIChxdWVyeSwgZXZlbnRSZWdpc3RyYXRpb24pIHtcclxuICAgICAgICAvLyBUaGVzZSBhcmUgZ3VhcmFudGVlZCBub3QgdG8gcmFpc2UgZXZlbnRzLCBzaW5jZSB3ZSdyZSBub3QgcGFzc2luZyBpbiBhIGNhbmNlbEVycm9yLiBIb3dldmVyLCB3ZSBjYW4gZnV0dXJlLXByb29mXHJcbiAgICAgICAgLy8gYSBsaXR0bGUgYml0IGJ5IGhhbmRsaW5nIHRoZSByZXR1cm4gdmFsdWVzIGFueXdheXMuXHJcbiAgICAgICAgdmFyIGV2ZW50cztcclxuICAgICAgICBpZiAocXVlcnkucGF0aC5nZXRGcm9udCgpID09PSAnLmluZm8nKSB7XHJcbiAgICAgICAgICAgIGV2ZW50cyA9IHRoaXMuaW5mb1N5bmNUcmVlXy5yZW1vdmVFdmVudFJlZ2lzdHJhdGlvbihxdWVyeSwgZXZlbnRSZWdpc3RyYXRpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZXZlbnRzID0gdGhpcy5zZXJ2ZXJTeW5jVHJlZV8ucmVtb3ZlRXZlbnRSZWdpc3RyYXRpb24ocXVlcnksIGV2ZW50UmVnaXN0cmF0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ldmVudFF1ZXVlXy5yYWlzZUV2ZW50c0F0UGF0aChxdWVyeS5wYXRoLCBldmVudHMpO1xyXG4gICAgfTtcclxuICAgIFJlcG8ucHJvdG90eXBlLmludGVycnVwdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5wZXJzaXN0ZW50Q29ubmVjdGlvbl8pIHtcclxuICAgICAgICAgICAgdGhpcy5wZXJzaXN0ZW50Q29ubmVjdGlvbl8uaW50ZXJydXB0KElOVEVSUlVQVF9SRUFTT04pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBSZXBvLnByb3RvdHlwZS5yZXN1bWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucGVyc2lzdGVudENvbm5lY3Rpb25fKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGVyc2lzdGVudENvbm5lY3Rpb25fLnJlc3VtZShJTlRFUlJVUFRfUkVBU09OKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgUmVwby5wcm90b3R5cGUuc3RhdHMgPSBmdW5jdGlvbiAoc2hvd0RlbHRhKSB7XHJcbiAgICAgICAgaWYgKHNob3dEZWx0YSA9PT0gdm9pZCAwKSB7IHNob3dEZWx0YSA9IGZhbHNlOyB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBzdGF0cztcclxuICAgICAgICBpZiAoc2hvd0RlbHRhKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5zdGF0c0xpc3RlbmVyXykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0c0xpc3RlbmVyXyA9IG5ldyBTdGF0c0xpc3RlbmVyKHRoaXMuc3RhdHNfKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzdGF0cyA9IHRoaXMuc3RhdHNMaXN0ZW5lcl8uZ2V0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBzdGF0cyA9IHRoaXMuc3RhdHNfLmdldCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbG9uZ2VzdE5hbWUgPSBPYmplY3Qua2V5cyhzdGF0cykucmVkdWNlKGZ1bmN0aW9uIChwcmV2aW91c1ZhbHVlLCBjdXJyZW50VmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE1hdGgubWF4KGN1cnJlbnRWYWx1ZS5sZW5ndGgsIHByZXZpb3VzVmFsdWUpO1xyXG4gICAgICAgIH0sIDApO1xyXG4gICAgICAgIGVhY2goc3RhdHMsIGZ1bmN0aW9uIChzdGF0LCB2YWx1ZSkge1xyXG4gICAgICAgICAgICB2YXIgcGFkZGVkU3RhdCA9IHN0YXQ7XHJcbiAgICAgICAgICAgIC8vIHBhZCBzdGF0IG5hbWVzIHRvIGJlIHRoZSBzYW1lIGxlbmd0aCAocGx1cyAyIGV4dHJhIHNwYWNlcykuXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBzdGF0Lmxlbmd0aDsgaSA8IGxvbmdlc3ROYW1lICsgMjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBwYWRkZWRTdGF0ICs9ICcgJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhwYWRkZWRTdGF0ICsgdmFsdWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFJlcG8ucHJvdG90eXBlLnN0YXRzSW5jcmVtZW50Q291bnRlciA9IGZ1bmN0aW9uIChtZXRyaWMpIHtcclxuICAgICAgICB0aGlzLnN0YXRzXy5pbmNyZW1lbnRDb3VudGVyKG1ldHJpYyk7XHJcbiAgICAgICAgdGhpcy5zdGF0c1JlcG9ydGVyXy5pbmNsdWRlU3RhdChtZXRyaWMpO1xyXG4gICAgfTtcclxuICAgIFJlcG8ucHJvdG90eXBlLmxvZ18gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHZhckFyZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXJBcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBwcmVmaXggPSAnJztcclxuICAgICAgICBpZiAodGhpcy5wZXJzaXN0ZW50Q29ubmVjdGlvbl8pIHtcclxuICAgICAgICAgICAgcHJlZml4ID0gdGhpcy5wZXJzaXN0ZW50Q29ubmVjdGlvbl8uaWQgKyAnOic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxvZy5hcHBseSh2b2lkIDAsIF9fc3ByZWFkKFtwcmVmaXhdLCB2YXJBcmdzKSk7XHJcbiAgICB9O1xyXG4gICAgUmVwby5wcm90b3R5cGUuY2FsbE9uQ29tcGxldGVDYWxsYmFjayA9IGZ1bmN0aW9uIChjYWxsYmFjaywgc3RhdHVzLCBlcnJvclJlYXNvbikge1xyXG4gICAgICAgIGlmIChjYWxsYmFjaykge1xyXG4gICAgICAgICAgICBleGNlcHRpb25HdWFyZChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09PSAnb2snKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY29kZSA9IChzdGF0dXMgfHwgJ2Vycm9yJykudG9VcHBlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IGNvZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yUmVhc29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgKz0gJzogJyArIGVycm9yUmVhc29uO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgICAgICAgICAgICAgICAgICBlcnJvci5jb2RlID0gY29kZTtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnJvcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVwby5wcm90b3R5cGUsIFwiZGF0YWJhc2VcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX2RhdGFiYXNlIHx8ICh0aGlzLl9fZGF0YWJhc2UgPSBuZXcgRGF0YWJhc2UodGhpcykpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBSZXBvO1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogRmlsdGVycyBub2RlcyBieSByYW5nZSBhbmQgdXNlcyBhbiBJbmRleEZpbHRlciB0byB0cmFjayBhbnkgY2hhbmdlcyBhZnRlciBmaWx0ZXJpbmcgdGhlIG5vZGVcclxuICpcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBpbXBsZW1lbnRzIHtOb2RlRmlsdGVyfVxyXG4gKi9cclxudmFyIFJhbmdlZEZpbHRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshUXVlcnlQYXJhbXN9IHBhcmFtc1xyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBSYW5nZWRGaWx0ZXIocGFyYW1zKSB7XHJcbiAgICAgICAgdGhpcy5pbmRleGVkRmlsdGVyXyA9IG5ldyBJbmRleGVkRmlsdGVyKHBhcmFtcy5nZXRJbmRleCgpKTtcclxuICAgICAgICB0aGlzLmluZGV4XyA9IHBhcmFtcy5nZXRJbmRleCgpO1xyXG4gICAgICAgIHRoaXMuc3RhcnRQb3N0XyA9IFJhbmdlZEZpbHRlci5nZXRTdGFydFBvc3RfKHBhcmFtcyk7XHJcbiAgICAgICAgdGhpcy5lbmRQb3N0XyA9IFJhbmdlZEZpbHRlci5nZXRFbmRQb3N0XyhwYXJhbXMpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHshTmFtZWROb2RlfVxyXG4gICAgICovXHJcbiAgICBSYW5nZWRGaWx0ZXIucHJvdG90eXBlLmdldFN0YXJ0UG9zdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdGFydFBvc3RfO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7IU5hbWVkTm9kZX1cclxuICAgICAqL1xyXG4gICAgUmFuZ2VkRmlsdGVyLnByb3RvdHlwZS5nZXRFbmRQb3N0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVuZFBvc3RfO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshTmFtZWROb2RlfSBub2RlXHJcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBSYW5nZWRGaWx0ZXIucHJvdG90eXBlLm1hdGNoZXMgPSBmdW5jdGlvbiAobm9kZSkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5pbmRleF8uY29tcGFyZSh0aGlzLmdldFN0YXJ0UG9zdCgpLCBub2RlKSA8PSAwICYmXHJcbiAgICAgICAgICAgIHRoaXMuaW5kZXhfLmNvbXBhcmUobm9kZSwgdGhpcy5nZXRFbmRQb3N0KCkpIDw9IDApO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgUmFuZ2VkRmlsdGVyLnByb3RvdHlwZS51cGRhdGVDaGlsZCA9IGZ1bmN0aW9uIChzbmFwLCBrZXksIG5ld0NoaWxkLCBhZmZlY3RlZFBhdGgsIHNvdXJjZSwgb3B0Q2hhbmdlQWNjdW11bGF0b3IpIHtcclxuICAgICAgICBpZiAoIXRoaXMubWF0Y2hlcyhuZXcgTmFtZWROb2RlKGtleSwgbmV3Q2hpbGQpKSkge1xyXG4gICAgICAgICAgICBuZXdDaGlsZCA9IENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5pbmRleGVkRmlsdGVyXy51cGRhdGVDaGlsZChzbmFwLCBrZXksIG5ld0NoaWxkLCBhZmZlY3RlZFBhdGgsIHNvdXJjZSwgb3B0Q2hhbmdlQWNjdW11bGF0b3IpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgUmFuZ2VkRmlsdGVyLnByb3RvdHlwZS51cGRhdGVGdWxsTm9kZSA9IGZ1bmN0aW9uIChvbGRTbmFwLCBuZXdTbmFwLCBvcHRDaGFuZ2VBY2N1bXVsYXRvcikge1xyXG4gICAgICAgIGlmIChuZXdTbmFwLmlzTGVhZk5vZGUoKSkge1xyXG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgd2UgaGF2ZSBhIGNoaWxkcmVuIG5vZGUgd2l0aCB0aGUgY29ycmVjdCBpbmRleCwgbm90IGEgbGVhZiBub2RlO1xyXG4gICAgICAgICAgICBuZXdTbmFwID0gQ2hpbGRyZW5Ob2RlLkVNUFRZX05PREU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBmaWx0ZXJlZCA9IG5ld1NuYXAud2l0aEluZGV4KHRoaXMuaW5kZXhfKTtcclxuICAgICAgICAvLyBEb24ndCBzdXBwb3J0IHByaW9yaXRpZXMgb24gcXVlcmllc1xyXG4gICAgICAgIGZpbHRlcmVkID0gZmlsdGVyZWQudXBkYXRlUHJpb3JpdHkoQ2hpbGRyZW5Ob2RlLkVNUFRZX05PREUpO1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBuZXdTbmFwLmZvckVhY2hDaGlsZChQUklPUklUWV9JTkRFWCwgZnVuY3Rpb24gKGtleSwgY2hpbGROb2RlKSB7XHJcbiAgICAgICAgICAgIGlmICghc2VsZi5tYXRjaGVzKG5ldyBOYW1lZE5vZGUoa2V5LCBjaGlsZE5vZGUpKSkge1xyXG4gICAgICAgICAgICAgICAgZmlsdGVyZWQgPSBmaWx0ZXJlZC51cGRhdGVJbW1lZGlhdGVDaGlsZChrZXksIENoaWxkcmVuTm9kZS5FTVBUWV9OT0RFKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmluZGV4ZWRGaWx0ZXJfLnVwZGF0ZUZ1bGxOb2RlKG9sZFNuYXAsIGZpbHRlcmVkLCBvcHRDaGFuZ2VBY2N1bXVsYXRvcik7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBSYW5nZWRGaWx0ZXIucHJvdG90eXBlLnVwZGF0ZVByaW9yaXR5ID0gZnVuY3Rpb24gKG9sZFNuYXAsIG5ld1ByaW9yaXR5KSB7XHJcbiAgICAgICAgLy8gRG9uJ3Qgc3VwcG9ydCBwcmlvcml0aWVzIG9uIHF1ZXJpZXNcclxuICAgICAgICByZXR1cm4gb2xkU25hcDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIFJhbmdlZEZpbHRlci5wcm90b3R5cGUuZmlsdGVyc05vZGVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgUmFuZ2VkRmlsdGVyLnByb3RvdHlwZS5nZXRJbmRleGVkRmlsdGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmluZGV4ZWRGaWx0ZXJfO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgUmFuZ2VkRmlsdGVyLnByb3RvdHlwZS5nZXRJbmRleCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pbmRleF87XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFRdWVyeVBhcmFtc30gcGFyYW1zXHJcbiAgICAgKiBAcmV0dXJuIHshTmFtZWROb2RlfVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgUmFuZ2VkRmlsdGVyLmdldFN0YXJ0UG9zdF8gPSBmdW5jdGlvbiAocGFyYW1zKSB7XHJcbiAgICAgICAgaWYgKHBhcmFtcy5oYXNTdGFydCgpKSB7XHJcbiAgICAgICAgICAgIHZhciBzdGFydE5hbWUgPSBwYXJhbXMuZ2V0SW5kZXhTdGFydE5hbWUoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHBhcmFtcy5nZXRJbmRleCgpLm1ha2VQb3N0KHBhcmFtcy5nZXRJbmRleFN0YXJ0VmFsdWUoKSwgc3RhcnROYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwYXJhbXMuZ2V0SW5kZXgoKS5taW5Qb3N0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshUXVlcnlQYXJhbXN9IHBhcmFtc1xyXG4gICAgICogQHJldHVybiB7IU5hbWVkTm9kZX1cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIFJhbmdlZEZpbHRlci5nZXRFbmRQb3N0XyA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcclxuICAgICAgICBpZiAocGFyYW1zLmhhc0VuZCgpKSB7XHJcbiAgICAgICAgICAgIHZhciBlbmROYW1lID0gcGFyYW1zLmdldEluZGV4RW5kTmFtZSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gcGFyYW1zLmdldEluZGV4KCkubWFrZVBvc3QocGFyYW1zLmdldEluZGV4RW5kVmFsdWUoKSwgZW5kTmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gcGFyYW1zLmdldEluZGV4KCkubWF4UG9zdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gUmFuZ2VkRmlsdGVyO1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQXBwbGllcyBhIGxpbWl0IGFuZCBhIHJhbmdlIHRvIGEgbm9kZSBhbmQgdXNlcyBSYW5nZWRGaWx0ZXIgdG8gZG8gdGhlIGhlYXZ5IGxpZnRpbmcgd2hlcmUgcG9zc2libGVcclxuICpcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBpbXBsZW1lbnRzIHtOb2RlRmlsdGVyfVxyXG4gKi9cclxudmFyIExpbWl0ZWRGaWx0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7IVF1ZXJ5UGFyYW1zfSBwYXJhbXNcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gTGltaXRlZEZpbHRlcihwYXJhbXMpIHtcclxuICAgICAgICB0aGlzLnJhbmdlZEZpbHRlcl8gPSBuZXcgUmFuZ2VkRmlsdGVyKHBhcmFtcyk7XHJcbiAgICAgICAgdGhpcy5pbmRleF8gPSBwYXJhbXMuZ2V0SW5kZXgoKTtcclxuICAgICAgICB0aGlzLmxpbWl0XyA9IHBhcmFtcy5nZXRMaW1pdCgpO1xyXG4gICAgICAgIHRoaXMucmV2ZXJzZV8gPSAhcGFyYW1zLmlzVmlld0Zyb21MZWZ0KCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIExpbWl0ZWRGaWx0ZXIucHJvdG90eXBlLnVwZGF0ZUNoaWxkID0gZnVuY3Rpb24gKHNuYXAsIGtleSwgbmV3Q2hpbGQsIGFmZmVjdGVkUGF0aCwgc291cmNlLCBvcHRDaGFuZ2VBY2N1bXVsYXRvcikge1xyXG4gICAgICAgIGlmICghdGhpcy5yYW5nZWRGaWx0ZXJfLm1hdGNoZXMobmV3IE5hbWVkTm9kZShrZXksIG5ld0NoaWxkKSkpIHtcclxuICAgICAgICAgICAgbmV3Q2hpbGQgPSBDaGlsZHJlbk5vZGUuRU1QVFlfTk9ERTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHNuYXAuZ2V0SW1tZWRpYXRlQ2hpbGQoa2V5KS5lcXVhbHMobmV3Q2hpbGQpKSB7XHJcbiAgICAgICAgICAgIC8vIE5vIGNoYW5nZVxyXG4gICAgICAgICAgICByZXR1cm4gc25hcDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoc25hcC5udW1DaGlsZHJlbigpIDwgdGhpcy5saW1pdF8pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmFuZ2VkRmlsdGVyX1xyXG4gICAgICAgICAgICAgICAgLmdldEluZGV4ZWRGaWx0ZXIoKVxyXG4gICAgICAgICAgICAgICAgLnVwZGF0ZUNoaWxkKHNuYXAsIGtleSwgbmV3Q2hpbGQsIGFmZmVjdGVkUGF0aCwgc291cmNlLCBvcHRDaGFuZ2VBY2N1bXVsYXRvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mdWxsTGltaXRVcGRhdGVDaGlsZF8oc25hcCwga2V5LCBuZXdDaGlsZCwgc291cmNlLCBvcHRDaGFuZ2VBY2N1bXVsYXRvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGluaGVyaXREb2NcclxuICAgICAqL1xyXG4gICAgTGltaXRlZEZpbHRlci5wcm90b3R5cGUudXBkYXRlRnVsbE5vZGUgPSBmdW5jdGlvbiAob2xkU25hcCwgbmV3U25hcCwgb3B0Q2hhbmdlQWNjdW11bGF0b3IpIHtcclxuICAgICAgICB2YXIgZmlsdGVyZWQ7XHJcbiAgICAgICAgaWYgKG5ld1NuYXAuaXNMZWFmTm9kZSgpIHx8IG5ld1NuYXAuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB3ZSBoYXZlIGEgY2hpbGRyZW4gbm9kZSB3aXRoIHRoZSBjb3JyZWN0IGluZGV4LCBub3QgYSBsZWFmIG5vZGU7XHJcbiAgICAgICAgICAgIGZpbHRlcmVkID0gQ2hpbGRyZW5Ob2RlLkVNUFRZX05PREUud2l0aEluZGV4KHRoaXMuaW5kZXhfKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxpbWl0XyAqIDIgPCBuZXdTbmFwLm51bUNoaWxkcmVuKCkgJiZcclxuICAgICAgICAgICAgICAgIG5ld1NuYXAuaXNJbmRleGVkKHRoaXMuaW5kZXhfKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gRWFzaWVyIHRvIGJ1aWxkIHVwIGEgc25hcHNob3QsIHNpbmNlIHdoYXQgd2UncmUgZ2l2ZW4gaGFzIG1vcmUgdGhhbiB0d2ljZSB0aGUgZWxlbWVudHMgd2Ugd2FudFxyXG4gICAgICAgICAgICAgICAgZmlsdGVyZWQgPSBDaGlsZHJlbk5vZGUuRU1QVFlfTk9ERS53aXRoSW5kZXgodGhpcy5pbmRleF8pO1xyXG4gICAgICAgICAgICAgICAgLy8gYW5jaG9yIHRvIHRoZSBzdGFydFBvc3QsIGVuZFBvc3QsIG9yIGxhc3QgZWxlbWVudCBhcyBhcHByb3ByaWF0ZVxyXG4gICAgICAgICAgICAgICAgdmFyIGl0ZXJhdG9yID0gdm9pZCAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucmV2ZXJzZV8pIHtcclxuICAgICAgICAgICAgICAgICAgICBpdGVyYXRvciA9IG5ld1NuYXAuZ2V0UmV2ZXJzZUl0ZXJhdG9yRnJvbSh0aGlzLnJhbmdlZEZpbHRlcl8uZ2V0RW5kUG9zdCgpLCB0aGlzLmluZGV4Xyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpdGVyYXRvciA9IG5ld1NuYXAuZ2V0SXRlcmF0b3JGcm9tKHRoaXMucmFuZ2VkRmlsdGVyXy5nZXRTdGFydFBvc3QoKSwgdGhpcy5pbmRleF8pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIGNvdW50ID0gMDtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChpdGVyYXRvci5oYXNOZXh0KCkgJiYgY291bnQgPCB0aGlzLmxpbWl0Xykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXh0ID0gaXRlcmF0b3IuZ2V0TmV4dCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpblJhbmdlID0gdm9pZCAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnJldmVyc2VfKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluUmFuZ2UgPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmRleF8uY29tcGFyZSh0aGlzLnJhbmdlZEZpbHRlcl8uZ2V0U3RhcnRQb3N0KCksIG5leHQpIDw9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpblJhbmdlID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5kZXhfLmNvbXBhcmUobmV4dCwgdGhpcy5yYW5nZWRGaWx0ZXJfLmdldEVuZFBvc3QoKSkgPD0gMDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluUmFuZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyZWQgPSBmaWx0ZXJlZC51cGRhdGVJbW1lZGlhdGVDaGlsZChuZXh0Lm5hbWUsIG5leHQubm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiB3ZSBoYXZlIHJlYWNoZWQgdGhlIGVuZCBwb3N0LCB3ZSBjYW5ub3Qga2VlcCBhZGRpbmcgZWxlbW1lbnRzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIFRoZSBzbmFwIGNvbnRhaW5zIGxlc3MgdGhhbiB0d2ljZSB0aGUgbGltaXQuIEZhc3RlciB0byBkZWxldGUgZnJvbSB0aGUgc25hcCB0aGFuIGJ1aWxkIHVwIGEgbmV3IG9uZVxyXG4gICAgICAgICAgICAgICAgZmlsdGVyZWQgPSBuZXdTbmFwLndpdGhJbmRleCh0aGlzLmluZGV4Xyk7XHJcbiAgICAgICAgICAgICAgICAvLyBEb24ndCBzdXBwb3J0IHByaW9yaXRpZXMgb24gcXVlcmllc1xyXG4gICAgICAgICAgICAgICAgZmlsdGVyZWQgPSBmaWx0ZXJlZC51cGRhdGVQcmlvcml0eShDaGlsZHJlbk5vZGUuRU1QVFlfTk9ERSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnRQb3N0ID0gdm9pZCAwO1xyXG4gICAgICAgICAgICAgICAgdmFyIGVuZFBvc3QgPSB2b2lkIDA7XHJcbiAgICAgICAgICAgICAgICB2YXIgY21wID0gdm9pZCAwO1xyXG4gICAgICAgICAgICAgICAgdmFyIGl0ZXJhdG9yID0gdm9pZCAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucmV2ZXJzZV8pIHtcclxuICAgICAgICAgICAgICAgICAgICBpdGVyYXRvciA9IGZpbHRlcmVkLmdldFJldmVyc2VJdGVyYXRvcih0aGlzLmluZGV4Xyk7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRQb3N0ID0gdGhpcy5yYW5nZWRGaWx0ZXJfLmdldEVuZFBvc3QoKTtcclxuICAgICAgICAgICAgICAgICAgICBlbmRQb3N0ID0gdGhpcy5yYW5nZWRGaWx0ZXJfLmdldFN0YXJ0UG9zdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRleENvbXBhcmVfMSA9IHRoaXMuaW5kZXhfLmdldENvbXBhcmUoKTtcclxuICAgICAgICAgICAgICAgICAgICBjbXAgPSBmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gaW5kZXhDb21wYXJlXzEoYiwgYSk7IH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpdGVyYXRvciA9IGZpbHRlcmVkLmdldEl0ZXJhdG9yKHRoaXMuaW5kZXhfKTtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydFBvc3QgPSB0aGlzLnJhbmdlZEZpbHRlcl8uZ2V0U3RhcnRQb3N0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kUG9zdCA9IHRoaXMucmFuZ2VkRmlsdGVyXy5nZXRFbmRQb3N0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY21wID0gdGhpcy5pbmRleF8uZ2V0Q29tcGFyZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIGNvdW50ID0gMDtcclxuICAgICAgICAgICAgICAgIHZhciBmb3VuZFN0YXJ0UG9zdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKGl0ZXJhdG9yLmhhc05leHQoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXh0ID0gaXRlcmF0b3IuZ2V0TmV4dCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZm91bmRTdGFydFBvc3QgJiYgY21wKHN0YXJ0UG9zdCwgbmV4dCkgPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzdGFydCBhZGRpbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm91bmRTdGFydFBvc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5SYW5nZSA9IGZvdW5kU3RhcnRQb3N0ICYmIGNvdW50IDwgdGhpcy5saW1pdF8gJiYgY21wKG5leHQsIGVuZFBvc3QpIDw9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluUmFuZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY291bnQrKztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcmVkID0gZmlsdGVyZWQudXBkYXRlSW1tZWRpYXRlQ2hpbGQobmV4dC5uYW1lLCBDaGlsZHJlbk5vZGUuRU1QVFlfTk9ERSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLnJhbmdlZEZpbHRlcl9cclxuICAgICAgICAgICAgLmdldEluZGV4ZWRGaWx0ZXIoKVxyXG4gICAgICAgICAgICAudXBkYXRlRnVsbE5vZGUob2xkU25hcCwgZmlsdGVyZWQsIG9wdENoYW5nZUFjY3VtdWxhdG9yKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIExpbWl0ZWRGaWx0ZXIucHJvdG90eXBlLnVwZGF0ZVByaW9yaXR5ID0gZnVuY3Rpb24gKG9sZFNuYXAsIG5ld1ByaW9yaXR5KSB7XHJcbiAgICAgICAgLy8gRG9uJ3Qgc3VwcG9ydCBwcmlvcml0aWVzIG9uIHF1ZXJpZXNcclxuICAgICAgICByZXR1cm4gb2xkU25hcDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIExpbWl0ZWRGaWx0ZXIucHJvdG90eXBlLmZpbHRlcnNOb2RlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgKi9cclxuICAgIExpbWl0ZWRGaWx0ZXIucHJvdG90eXBlLmdldEluZGV4ZWRGaWx0ZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmFuZ2VkRmlsdGVyXy5nZXRJbmRleGVkRmlsdGVyKCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICovXHJcbiAgICBMaW1pdGVkRmlsdGVyLnByb3RvdHlwZS5nZXRJbmRleCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pbmRleF87XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFOb2RlfSBzbmFwXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2hpbGRLZXlcclxuICAgICAqIEBwYXJhbSB7IU5vZGV9IGNoaWxkU25hcFxyXG4gICAgICogQHBhcmFtIHshQ29tcGxldGVDaGlsZFNvdXJjZX0gc291cmNlXHJcbiAgICAgKiBAcGFyYW0gez9DaGlsZENoYW5nZUFjY3VtdWxhdG9yfSBjaGFuZ2VBY2N1bXVsYXRvclxyXG4gICAgICogQHJldHVybiB7IU5vZGV9XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBMaW1pdGVkRmlsdGVyLnByb3RvdHlwZS5mdWxsTGltaXRVcGRhdGVDaGlsZF8gPSBmdW5jdGlvbiAoc25hcCwgY2hpbGRLZXksIGNoaWxkU25hcCwgc291cmNlLCBjaGFuZ2VBY2N1bXVsYXRvcikge1xyXG4gICAgICAgIC8vIFRPRE86IHJlbmFtZSBhbGwgY2FjaGUgc3R1ZmYgZXRjIHRvIGdlbmVyYWwgc25hcCB0ZXJtaW5vbG9neVxyXG4gICAgICAgIHZhciBjbXA7XHJcbiAgICAgICAgaWYgKHRoaXMucmV2ZXJzZV8pIHtcclxuICAgICAgICAgICAgdmFyIGluZGV4Q21wXzEgPSB0aGlzLmluZGV4Xy5nZXRDb21wYXJlKCk7XHJcbiAgICAgICAgICAgIGNtcCA9IGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBpbmRleENtcF8xKGIsIGEpOyB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY21wID0gdGhpcy5pbmRleF8uZ2V0Q29tcGFyZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgb2xkRXZlbnRDYWNoZSA9IHNuYXA7XHJcbiAgICAgICAgYXNzZXJ0KG9sZEV2ZW50Q2FjaGUubnVtQ2hpbGRyZW4oKSA9PT0gdGhpcy5saW1pdF8sICcnKTtcclxuICAgICAgICB2YXIgbmV3Q2hpbGROYW1lZE5vZGUgPSBuZXcgTmFtZWROb2RlKGNoaWxkS2V5LCBjaGlsZFNuYXApO1xyXG4gICAgICAgIHZhciB3aW5kb3dCb3VuZGFyeSA9IHRoaXMucmV2ZXJzZV9cclxuICAgICAgICAgICAgPyBvbGRFdmVudENhY2hlLmdldEZpcnN0Q2hpbGQodGhpcy5pbmRleF8pXHJcbiAgICAgICAgICAgIDogb2xkRXZlbnRDYWNoZS5nZXRMYXN0Q2hpbGQodGhpcy5pbmRleF8pO1xyXG4gICAgICAgIHZhciBpblJhbmdlID0gdGhpcy5yYW5nZWRGaWx0ZXJfLm1hdGNoZXMobmV3Q2hpbGROYW1lZE5vZGUpO1xyXG4gICAgICAgIGlmIChvbGRFdmVudENhY2hlLmhhc0NoaWxkKGNoaWxkS2V5KSkge1xyXG4gICAgICAgICAgICB2YXIgb2xkQ2hpbGRTbmFwID0gb2xkRXZlbnRDYWNoZS5nZXRJbW1lZGlhdGVDaGlsZChjaGlsZEtleSk7XHJcbiAgICAgICAgICAgIHZhciBuZXh0Q2hpbGQgPSBzb3VyY2UuZ2V0Q2hpbGRBZnRlckNoaWxkKHRoaXMuaW5kZXhfLCB3aW5kb3dCb3VuZGFyeSwgdGhpcy5yZXZlcnNlXyk7XHJcbiAgICAgICAgICAgIHdoaWxlIChuZXh0Q2hpbGQgIT0gbnVsbCAmJlxyXG4gICAgICAgICAgICAgICAgKG5leHRDaGlsZC5uYW1lID09PSBjaGlsZEtleSB8fCBvbGRFdmVudENhY2hlLmhhc0NoaWxkKG5leHRDaGlsZC5uYW1lKSkpIHtcclxuICAgICAgICAgICAgICAgIC8vIFRoZXJlIGlzIGEgd2VpcmQgZWRnZSBjYXNlIHdoZXJlIGEgbm9kZSBpcyB1cGRhdGVkIGFzIHBhcnQgb2YgYSBtZXJnZSBpbiB0aGUgd3JpdGUgdHJlZSwgYnV0IGhhc24ndFxyXG4gICAgICAgICAgICAgICAgLy8gYmVlbiBhcHBsaWVkIHRvIHRoZSBsaW1pdGVkIGZpbHRlciB5ZXQuIElnbm9yZSB0aGlzIG5leHQgY2hpbGQgd2hpY2ggd2lsbCBiZSB1cGRhdGVkIGxhdGVyIGluXHJcbiAgICAgICAgICAgICAgICAvLyB0aGUgbGltaXRlZCBmaWx0ZXIuLi5cclxuICAgICAgICAgICAgICAgIG5leHRDaGlsZCA9IHNvdXJjZS5nZXRDaGlsZEFmdGVyQ2hpbGQodGhpcy5pbmRleF8sIG5leHRDaGlsZCwgdGhpcy5yZXZlcnNlXyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGNvbXBhcmVOZXh0ID0gbmV4dENoaWxkID09IG51bGwgPyAxIDogY21wKG5leHRDaGlsZCwgbmV3Q2hpbGROYW1lZE5vZGUpO1xyXG4gICAgICAgICAgICB2YXIgcmVtYWluc0luV2luZG93ID0gaW5SYW5nZSAmJiAhY2hpbGRTbmFwLmlzRW1wdHkoKSAmJiBjb21wYXJlTmV4dCA+PSAwO1xyXG4gICAgICAgICAgICBpZiAocmVtYWluc0luV2luZG93KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hhbmdlQWNjdW11bGF0b3IgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZUFjY3VtdWxhdG9yLnRyYWNrQ2hpbGRDaGFuZ2UoQ2hhbmdlLmNoaWxkQ2hhbmdlZENoYW5nZShjaGlsZEtleSwgY2hpbGRTbmFwLCBvbGRDaGlsZFNuYXApKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBvbGRFdmVudENhY2hlLnVwZGF0ZUltbWVkaWF0ZUNoaWxkKGNoaWxkS2V5LCBjaGlsZFNuYXApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoYW5nZUFjY3VtdWxhdG9yICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VBY2N1bXVsYXRvci50cmFja0NoaWxkQ2hhbmdlKENoYW5nZS5jaGlsZFJlbW92ZWRDaGFuZ2UoY2hpbGRLZXksIG9sZENoaWxkU25hcCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIG5ld0V2ZW50Q2FjaGUgPSBvbGRFdmVudENhY2hlLnVwZGF0ZUltbWVkaWF0ZUNoaWxkKGNoaWxkS2V5LCBDaGlsZHJlbk5vZGUuRU1QVFlfTk9ERSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbmV4dENoaWxkSW5SYW5nZSA9IG5leHRDaGlsZCAhPSBudWxsICYmIHRoaXMucmFuZ2VkRmlsdGVyXy5tYXRjaGVzKG5leHRDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAobmV4dENoaWxkSW5SYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGFuZ2VBY2N1bXVsYXRvciAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZUFjY3VtdWxhdG9yLnRyYWNrQ2hpbGRDaGFuZ2UoQ2hhbmdlLmNoaWxkQWRkZWRDaGFuZ2UobmV4dENoaWxkLm5hbWUsIG5leHRDaGlsZC5ub2RlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXdFdmVudENhY2hlLnVwZGF0ZUltbWVkaWF0ZUNoaWxkKG5leHRDaGlsZC5uYW1lLCBuZXh0Q2hpbGQubm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3RXZlbnRDYWNoZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjaGlsZFNuYXAuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgIC8vIHdlJ3JlIGRlbGV0aW5nIGEgbm9kZSwgYnV0IGl0IHdhcyBub3QgaW4gdGhlIHdpbmRvdywgc28gaWdub3JlIGl0XHJcbiAgICAgICAgICAgIHJldHVybiBzbmFwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChpblJhbmdlKSB7XHJcbiAgICAgICAgICAgIGlmIChjbXAod2luZG93Qm91bmRhcnksIG5ld0NoaWxkTmFtZWROb2RlKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hhbmdlQWNjdW11bGF0b3IgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZUFjY3VtdWxhdG9yLnRyYWNrQ2hpbGRDaGFuZ2UoQ2hhbmdlLmNoaWxkUmVtb3ZlZENoYW5nZSh3aW5kb3dCb3VuZGFyeS5uYW1lLCB3aW5kb3dCb3VuZGFyeS5ub2RlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlQWNjdW11bGF0b3IudHJhY2tDaGlsZENoYW5nZShDaGFuZ2UuY2hpbGRBZGRlZENoYW5nZShjaGlsZEtleSwgY2hpbGRTbmFwKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb2xkRXZlbnRDYWNoZVxyXG4gICAgICAgICAgICAgICAgICAgIC51cGRhdGVJbW1lZGlhdGVDaGlsZChjaGlsZEtleSwgY2hpbGRTbmFwKVxyXG4gICAgICAgICAgICAgICAgICAgIC51cGRhdGVJbW1lZGlhdGVDaGlsZCh3aW5kb3dCb3VuZGFyeS5uYW1lLCBDaGlsZHJlbk5vZGUuRU1QVFlfTk9ERSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc25hcDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNuYXA7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBMaW1pdGVkRmlsdGVyO1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogVGhpcyBjbGFzcyBpcyBhbiBpbW11dGFibGUtZnJvbS10aGUtcHVibGljLWFwaSBzdHJ1Y3QgY29udGFpbmluZyBhIHNldCBvZiBxdWVyeSBwYXJhbWV0ZXJzIGRlZmluaW5nIGFcclxuICogcmFuZ2UgdG8gYmUgcmV0dXJuZWQgZm9yIGEgcGFydGljdWxhciBsb2NhdGlvbi4gSXQgaXMgYXNzdW1lZCB0aGF0IHZhbGlkYXRpb24gb2YgcGFyYW1ldGVycyBpcyBkb25lIGF0IHRoZVxyXG4gKiB1c2VyLWZhY2luZyBBUEkgbGV2ZWwsIHNvIGl0IGlzIG5vdCBkb25lIGhlcmUuXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxudmFyIFF1ZXJ5UGFyYW1zID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUXVlcnlQYXJhbXMoKSB7XHJcbiAgICAgICAgdGhpcy5saW1pdFNldF8gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnN0YXJ0U2V0XyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuc3RhcnROYW1lU2V0XyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZW5kU2V0XyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZW5kTmFtZVNldF8gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmxpbWl0XyA9IDA7XHJcbiAgICAgICAgdGhpcy52aWV3RnJvbV8gPSAnJztcclxuICAgICAgICB0aGlzLmluZGV4U3RhcnRWYWx1ZV8gPSBudWxsO1xyXG4gICAgICAgIHRoaXMuaW5kZXhTdGFydE5hbWVfID0gJyc7XHJcbiAgICAgICAgdGhpcy5pbmRleEVuZFZhbHVlXyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5pbmRleEVuZE5hbWVfID0gJyc7XHJcbiAgICAgICAgdGhpcy5pbmRleF8gPSBQUklPUklUWV9JTkRFWDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgUXVlcnlQYXJhbXMucHJvdG90eXBlLmhhc1N0YXJ0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN0YXJ0U2V0XztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgaXQgd291bGQgcmV0dXJuIGZyb20gbGVmdC5cclxuICAgICAqL1xyXG4gICAgUXVlcnlQYXJhbXMucHJvdG90eXBlLmlzVmlld0Zyb21MZWZ0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnZpZXdGcm9tXyA9PT0gJycpIHtcclxuICAgICAgICAgICAgLy8gbGltaXQoKSwgcmF0aGVyIHRoYW4gbGltaXRUb0ZpcnN0IG9yIGxpbWl0VG9MYXN0IHdhcyBjYWxsZWQuXHJcbiAgICAgICAgICAgIC8vIFRoaXMgbWVhbnMgdGhhdCBvbmx5IG9uZSBvZiBzdGFydFNldF8gYW5kIGVuZFNldF8gaXMgdHJ1ZS4gVXNlIHRoZW1cclxuICAgICAgICAgICAgLy8gdG8gY2FsY3VsYXRlIHdoaWNoIHNpZGUgb2YgdGhlIHZpZXcgdG8gYW5jaG9yIHRvLiBJZiBuZWl0aGVyIGlzIHNldCxcclxuICAgICAgICAgICAgLy8gYW5jaG9yIHRvIHRoZSBlbmQuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXJ0U2V0XztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAodGhpcy52aWV3RnJvbV8gPT09IFF1ZXJ5UGFyYW1zLldJUkVfUFJPVE9DT0xfQ09OU1RBTlRTXy5WSUVXX0ZST01fTEVGVCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogT25seSB2YWxpZCB0byBjYWxsIGlmIGhhc1N0YXJ0KCkgcmV0dXJucyB0cnVlXHJcbiAgICAgKiBAcmV0dXJuIHsqfVxyXG4gICAgICovXHJcbiAgICBRdWVyeVBhcmFtcy5wcm90b3R5cGUuZ2V0SW5kZXhTdGFydFZhbHVlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGFzc2VydCh0aGlzLnN0YXJ0U2V0XywgJ09ubHkgdmFsaWQgaWYgc3RhcnQgaGFzIGJlZW4gc2V0Jyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5kZXhTdGFydFZhbHVlXztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIE9ubHkgdmFsaWQgdG8gY2FsbCBpZiBoYXNTdGFydCgpIHJldHVybnMgdHJ1ZS5cclxuICAgICAqIFJldHVybnMgdGhlIHN0YXJ0aW5nIGtleSBuYW1lIGZvciB0aGUgcmFuZ2UgZGVmaW5lZCBieSB0aGVzZSBxdWVyeSBwYXJhbWV0ZXJzXHJcbiAgICAgKiBAcmV0dXJuIHshc3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBRdWVyeVBhcmFtcy5wcm90b3R5cGUuZ2V0SW5kZXhTdGFydE5hbWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgYXNzZXJ0KHRoaXMuc3RhcnRTZXRfLCAnT25seSB2YWxpZCBpZiBzdGFydCBoYXMgYmVlbiBzZXQnKTtcclxuICAgICAgICBpZiAodGhpcy5zdGFydE5hbWVTZXRfKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmluZGV4U3RhcnROYW1lXztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBNSU5fTkFNRTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBRdWVyeVBhcmFtcy5wcm90b3R5cGUuaGFzRW5kID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVuZFNldF87XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBPbmx5IHZhbGlkIHRvIGNhbGwgaWYgaGFzRW5kKCkgcmV0dXJucyB0cnVlLlxyXG4gICAgICogQHJldHVybiB7Kn1cclxuICAgICAqL1xyXG4gICAgUXVlcnlQYXJhbXMucHJvdG90eXBlLmdldEluZGV4RW5kVmFsdWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgYXNzZXJ0KHRoaXMuZW5kU2V0XywgJ09ubHkgdmFsaWQgaWYgZW5kIGhhcyBiZWVuIHNldCcpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmluZGV4RW5kVmFsdWVfO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogT25seSB2YWxpZCB0byBjYWxsIGlmIGhhc0VuZCgpIHJldHVybnMgdHJ1ZS5cclxuICAgICAqIFJldHVybnMgdGhlIGVuZCBrZXkgbmFtZSBmb3IgdGhlIHJhbmdlIGRlZmluZWQgYnkgdGhlc2UgcXVlcnkgcGFyYW1ldGVyc1xyXG4gICAgICogQHJldHVybiB7IXN0cmluZ31cclxuICAgICAqL1xyXG4gICAgUXVlcnlQYXJhbXMucHJvdG90eXBlLmdldEluZGV4RW5kTmFtZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBhc3NlcnQodGhpcy5lbmRTZXRfLCAnT25seSB2YWxpZCBpZiBlbmQgaGFzIGJlZW4gc2V0Jyk7XHJcbiAgICAgICAgaWYgKHRoaXMuZW5kTmFtZVNldF8pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5kZXhFbmROYW1lXztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBNQVhfTkFNRTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBRdWVyeVBhcmFtcy5wcm90b3R5cGUuaGFzTGltaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubGltaXRTZXRfO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBhIGxpbWl0IGhhcyBiZWVuIHNldCBhbmQgaXQgaGFzIGJlZW4gZXhwbGljaXRseSBhbmNob3JlZFxyXG4gICAgICovXHJcbiAgICBRdWVyeVBhcmFtcy5wcm90b3R5cGUuaGFzQW5jaG9yZWRMaW1pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5saW1pdFNldF8gJiYgdGhpcy52aWV3RnJvbV8gIT09ICcnO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogT25seSB2YWxpZCB0byBjYWxsIGlmIGhhc0xpbWl0KCkgcmV0dXJucyB0cnVlXHJcbiAgICAgKiBAcmV0dXJuIHshbnVtYmVyfVxyXG4gICAgICovXHJcbiAgICBRdWVyeVBhcmFtcy5wcm90b3R5cGUuZ2V0TGltaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgYXNzZXJ0KHRoaXMubGltaXRTZXRfLCAnT25seSB2YWxpZCBpZiBsaW1pdCBoYXMgYmVlbiBzZXQnKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5saW1pdF87XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHshSW5kZXh9XHJcbiAgICAgKi9cclxuICAgIFF1ZXJ5UGFyYW1zLnByb3RvdHlwZS5nZXRJbmRleCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pbmRleF87XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHshUXVlcnlQYXJhbXN9XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBRdWVyeVBhcmFtcy5wcm90b3R5cGUuY29weV8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGNvcHkgPSBuZXcgUXVlcnlQYXJhbXMoKTtcclxuICAgICAgICBjb3B5LmxpbWl0U2V0XyA9IHRoaXMubGltaXRTZXRfO1xyXG4gICAgICAgIGNvcHkubGltaXRfID0gdGhpcy5saW1pdF87XHJcbiAgICAgICAgY29weS5zdGFydFNldF8gPSB0aGlzLnN0YXJ0U2V0XztcclxuICAgICAgICBjb3B5LmluZGV4U3RhcnRWYWx1ZV8gPSB0aGlzLmluZGV4U3RhcnRWYWx1ZV87XHJcbiAgICAgICAgY29weS5zdGFydE5hbWVTZXRfID0gdGhpcy5zdGFydE5hbWVTZXRfO1xyXG4gICAgICAgIGNvcHkuaW5kZXhTdGFydE5hbWVfID0gdGhpcy5pbmRleFN0YXJ0TmFtZV87XHJcbiAgICAgICAgY29weS5lbmRTZXRfID0gdGhpcy5lbmRTZXRfO1xyXG4gICAgICAgIGNvcHkuaW5kZXhFbmRWYWx1ZV8gPSB0aGlzLmluZGV4RW5kVmFsdWVfO1xyXG4gICAgICAgIGNvcHkuZW5kTmFtZVNldF8gPSB0aGlzLmVuZE5hbWVTZXRfO1xyXG4gICAgICAgIGNvcHkuaW5kZXhFbmROYW1lXyA9IHRoaXMuaW5kZXhFbmROYW1lXztcclxuICAgICAgICBjb3B5LmluZGV4XyA9IHRoaXMuaW5kZXhfO1xyXG4gICAgICAgIGNvcHkudmlld0Zyb21fID0gdGhpcy52aWV3RnJvbV87XHJcbiAgICAgICAgcmV0dXJuIGNvcHk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyFudW1iZXJ9IG5ld0xpbWl0XHJcbiAgICAgKiBAcmV0dXJuIHshUXVlcnlQYXJhbXN9XHJcbiAgICAgKi9cclxuICAgIFF1ZXJ5UGFyYW1zLnByb3RvdHlwZS5saW1pdCA9IGZ1bmN0aW9uIChuZXdMaW1pdCkge1xyXG4gICAgICAgIHZhciBuZXdQYXJhbXMgPSB0aGlzLmNvcHlfKCk7XHJcbiAgICAgICAgbmV3UGFyYW1zLmxpbWl0U2V0XyA9IHRydWU7XHJcbiAgICAgICAgbmV3UGFyYW1zLmxpbWl0XyA9IG5ld0xpbWl0O1xyXG4gICAgICAgIG5ld1BhcmFtcy52aWV3RnJvbV8gPSAnJztcclxuICAgICAgICByZXR1cm4gbmV3UGFyYW1zO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshbnVtYmVyfSBuZXdMaW1pdFxyXG4gICAgICogQHJldHVybiB7IVF1ZXJ5UGFyYW1zfVxyXG4gICAgICovXHJcbiAgICBRdWVyeVBhcmFtcy5wcm90b3R5cGUubGltaXRUb0ZpcnN0ID0gZnVuY3Rpb24gKG5ld0xpbWl0KSB7XHJcbiAgICAgICAgdmFyIG5ld1BhcmFtcyA9IHRoaXMuY29weV8oKTtcclxuICAgICAgICBuZXdQYXJhbXMubGltaXRTZXRfID0gdHJ1ZTtcclxuICAgICAgICBuZXdQYXJhbXMubGltaXRfID0gbmV3TGltaXQ7XHJcbiAgICAgICAgbmV3UGFyYW1zLnZpZXdGcm9tXyA9IFF1ZXJ5UGFyYW1zLldJUkVfUFJPVE9DT0xfQ09OU1RBTlRTXy5WSUVXX0ZST01fTEVGVDtcclxuICAgICAgICByZXR1cm4gbmV3UGFyYW1zO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshbnVtYmVyfSBuZXdMaW1pdFxyXG4gICAgICogQHJldHVybiB7IVF1ZXJ5UGFyYW1zfVxyXG4gICAgICovXHJcbiAgICBRdWVyeVBhcmFtcy5wcm90b3R5cGUubGltaXRUb0xhc3QgPSBmdW5jdGlvbiAobmV3TGltaXQpIHtcclxuICAgICAgICB2YXIgbmV3UGFyYW1zID0gdGhpcy5jb3B5XygpO1xyXG4gICAgICAgIG5ld1BhcmFtcy5saW1pdFNldF8gPSB0cnVlO1xyXG4gICAgICAgIG5ld1BhcmFtcy5saW1pdF8gPSBuZXdMaW1pdDtcclxuICAgICAgICBuZXdQYXJhbXMudmlld0Zyb21fID0gUXVlcnlQYXJhbXMuV0lSRV9QUk9UT0NPTF9DT05TVEFOVFNfLlZJRVdfRlJPTV9SSUdIVDtcclxuICAgICAgICByZXR1cm4gbmV3UGFyYW1zO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHsqfSBpbmRleFZhbHVlXHJcbiAgICAgKiBAcGFyYW0gez9zdHJpbmc9fSBrZXlcclxuICAgICAqIEByZXR1cm4geyFRdWVyeVBhcmFtc31cclxuICAgICAqL1xyXG4gICAgUXVlcnlQYXJhbXMucHJvdG90eXBlLnN0YXJ0QXQgPSBmdW5jdGlvbiAoaW5kZXhWYWx1ZSwga2V5KSB7XHJcbiAgICAgICAgdmFyIG5ld1BhcmFtcyA9IHRoaXMuY29weV8oKTtcclxuICAgICAgICBuZXdQYXJhbXMuc3RhcnRTZXRfID0gdHJ1ZTtcclxuICAgICAgICBpZiAoaW5kZXhWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGluZGV4VmFsdWUgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBuZXdQYXJhbXMuaW5kZXhTdGFydFZhbHVlXyA9IGluZGV4VmFsdWU7XHJcbiAgICAgICAgaWYgKGtleSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIG5ld1BhcmFtcy5zdGFydE5hbWVTZXRfID0gdHJ1ZTtcclxuICAgICAgICAgICAgbmV3UGFyYW1zLmluZGV4U3RhcnROYW1lXyA9IGtleTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG5ld1BhcmFtcy5zdGFydE5hbWVTZXRfID0gZmFsc2U7XHJcbiAgICAgICAgICAgIG5ld1BhcmFtcy5pbmRleFN0YXJ0TmFtZV8gPSAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ld1BhcmFtcztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7Kn0gaW5kZXhWYWx1ZVxyXG4gICAgICogQHBhcmFtIHs/c3RyaW5nPX0ga2V5XHJcbiAgICAgKiBAcmV0dXJuIHshUXVlcnlQYXJhbXN9XHJcbiAgICAgKi9cclxuICAgIFF1ZXJ5UGFyYW1zLnByb3RvdHlwZS5lbmRBdCA9IGZ1bmN0aW9uIChpbmRleFZhbHVlLCBrZXkpIHtcclxuICAgICAgICB2YXIgbmV3UGFyYW1zID0gdGhpcy5jb3B5XygpO1xyXG4gICAgICAgIG5ld1BhcmFtcy5lbmRTZXRfID0gdHJ1ZTtcclxuICAgICAgICBpZiAoaW5kZXhWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGluZGV4VmFsdWUgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBuZXdQYXJhbXMuaW5kZXhFbmRWYWx1ZV8gPSBpbmRleFZhbHVlO1xyXG4gICAgICAgIGlmIChrZXkgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBuZXdQYXJhbXMuZW5kTmFtZVNldF8gPSB0cnVlO1xyXG4gICAgICAgICAgICBuZXdQYXJhbXMuaW5kZXhFbmROYW1lXyA9IGtleTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG5ld1BhcmFtcy5lbmROYW1lU2V0XyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBuZXdQYXJhbXMuaW5kZXhFbmROYW1lXyA9ICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3UGFyYW1zO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshSW5kZXh9IGluZGV4XHJcbiAgICAgKiBAcmV0dXJuIHshUXVlcnlQYXJhbXN9XHJcbiAgICAgKi9cclxuICAgIFF1ZXJ5UGFyYW1zLnByb3RvdHlwZS5vcmRlckJ5ID0gZnVuY3Rpb24gKGluZGV4KSB7XHJcbiAgICAgICAgdmFyIG5ld1BhcmFtcyA9IHRoaXMuY29weV8oKTtcclxuICAgICAgICBuZXdQYXJhbXMuaW5kZXhfID0gaW5kZXg7XHJcbiAgICAgICAgcmV0dXJuIG5ld1BhcmFtcztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4geyFPYmplY3R9XHJcbiAgICAgKi9cclxuICAgIFF1ZXJ5UGFyYW1zLnByb3RvdHlwZS5nZXRRdWVyeU9iamVjdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgV0lSRV9QUk9UT0NPTF9DT05TVEFOVFMgPSBRdWVyeVBhcmFtcy5XSVJFX1BST1RPQ09MX0NPTlNUQU5UU187XHJcbiAgICAgICAgdmFyIG9iaiA9IHt9O1xyXG4gICAgICAgIGlmICh0aGlzLnN0YXJ0U2V0Xykge1xyXG4gICAgICAgICAgICBvYmpbV0lSRV9QUk9UT0NPTF9DT05TVEFOVFMuSU5ERVhfU1RBUlRfVkFMVUVdID0gdGhpcy5pbmRleFN0YXJ0VmFsdWVfO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zdGFydE5hbWVTZXRfKSB7XHJcbiAgICAgICAgICAgICAgICBvYmpbV0lSRV9QUk9UT0NPTF9DT05TVEFOVFMuSU5ERVhfU1RBUlRfTkFNRV0gPSB0aGlzLmluZGV4U3RhcnROYW1lXztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5lbmRTZXRfKSB7XHJcbiAgICAgICAgICAgIG9ialtXSVJFX1BST1RPQ09MX0NPTlNUQU5UUy5JTkRFWF9FTkRfVkFMVUVdID0gdGhpcy5pbmRleEVuZFZhbHVlXztcclxuICAgICAgICAgICAgaWYgKHRoaXMuZW5kTmFtZVNldF8pIHtcclxuICAgICAgICAgICAgICAgIG9ialtXSVJFX1BST1RPQ09MX0NPTlNUQU5UUy5JTkRFWF9FTkRfTkFNRV0gPSB0aGlzLmluZGV4RW5kTmFtZV87XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMubGltaXRTZXRfKSB7XHJcbiAgICAgICAgICAgIG9ialtXSVJFX1BST1RPQ09MX0NPTlNUQU5UUy5MSU1JVF0gPSB0aGlzLmxpbWl0XztcclxuICAgICAgICAgICAgdmFyIHZpZXdGcm9tID0gdGhpcy52aWV3RnJvbV87XHJcbiAgICAgICAgICAgIGlmICh2aWV3RnJvbSA9PT0gJycpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzVmlld0Zyb21MZWZ0KCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2aWV3RnJvbSA9IFdJUkVfUFJPVE9DT0xfQ09OU1RBTlRTLlZJRVdfRlJPTV9MRUZUO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmlld0Zyb20gPSBXSVJFX1BST1RPQ09MX0NPTlNUQU5UUy5WSUVXX0ZST01fUklHSFQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb2JqW1dJUkVfUFJPVE9DT0xfQ09OU1RBTlRTLlZJRVdfRlJPTV0gPSB2aWV3RnJvbTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gRm9yIG5vdywgcHJpb3JpdHkgaW5kZXggaXMgdGhlIGRlZmF1bHQsIHNvIHdlIG9ubHkgc3BlY2lmeSBpZiBpdCdzIHNvbWUgb3RoZXIgaW5kZXhcclxuICAgICAgICBpZiAodGhpcy5pbmRleF8gIT09IFBSSU9SSVRZX0lOREVYKSB7XHJcbiAgICAgICAgICAgIG9ialtXSVJFX1BST1RPQ09MX0NPTlNUQU5UUy5JTkRFWF0gPSB0aGlzLmluZGV4Xy50b1N0cmluZygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgUXVlcnlQYXJhbXMucHJvdG90eXBlLmxvYWRzQWxsRGF0YSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gISh0aGlzLnN0YXJ0U2V0XyB8fCB0aGlzLmVuZFNldF8gfHwgdGhpcy5saW1pdFNldF8pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgUXVlcnlQYXJhbXMucHJvdG90eXBlLmlzRGVmYXVsdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5sb2Fkc0FsbERhdGEoKSAmJiB0aGlzLmluZGV4XyA9PT0gUFJJT1JJVFlfSU5ERVg7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHshTm9kZUZpbHRlcn1cclxuICAgICAqL1xyXG4gICAgUXVlcnlQYXJhbXMucHJvdG90eXBlLmdldE5vZGVGaWx0ZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubG9hZHNBbGxEYXRhKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBJbmRleGVkRmlsdGVyKHRoaXMuZ2V0SW5kZXgoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuaGFzTGltaXQoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IExpbWl0ZWRGaWx0ZXIodGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFJhbmdlZEZpbHRlcih0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgc2V0IG9mIFJFU1QgcXVlcnkgc3RyaW5nIHBhcmFtZXRlcnMgcmVwcmVzZW50aW5nIHRoaXMgcXVlcnkuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiB7IU9iamVjdC48c3RyaW5nLCo+fSBxdWVyeSBzdHJpbmcgcGFyYW1ldGVyc1xyXG4gICAgICovXHJcbiAgICBRdWVyeVBhcmFtcy5wcm90b3R5cGUudG9SZXN0UXVlcnlTdHJpbmdQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBSRVNUX0NPTlNUQU5UUyA9IFF1ZXJ5UGFyYW1zLlJFU1RfUVVFUllfQ09OU1RBTlRTXztcclxuICAgICAgICB2YXIgcXMgPSB7fTtcclxuICAgICAgICBpZiAodGhpcy5pc0RlZmF1bHQoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBvcmRlckJ5O1xyXG4gICAgICAgIGlmICh0aGlzLmluZGV4XyA9PT0gUFJJT1JJVFlfSU5ERVgpIHtcclxuICAgICAgICAgICAgb3JkZXJCeSA9IFJFU1RfQ09OU1RBTlRTLlBSSU9SSVRZX0lOREVYO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLmluZGV4XyA9PT0gVkFMVUVfSU5ERVgpIHtcclxuICAgICAgICAgICAgb3JkZXJCeSA9IFJFU1RfQ09OU1RBTlRTLlZBTFVFX0lOREVYO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLmluZGV4XyA9PT0gS0VZX0lOREVYKSB7XHJcbiAgICAgICAgICAgIG9yZGVyQnkgPSBSRVNUX0NPTlNUQU5UUy5LRVlfSU5ERVg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBhc3NlcnQodGhpcy5pbmRleF8gaW5zdGFuY2VvZiBQYXRoSW5kZXgsICdVbnJlY29nbml6ZWQgaW5kZXggdHlwZSEnKTtcclxuICAgICAgICAgICAgb3JkZXJCeSA9IHRoaXMuaW5kZXhfLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHFzW1JFU1RfQ09OU1RBTlRTLk9SREVSX0JZXSA9IHN0cmluZ2lmeShvcmRlckJ5KTtcclxuICAgICAgICBpZiAodGhpcy5zdGFydFNldF8pIHtcclxuICAgICAgICAgICAgcXNbUkVTVF9DT05TVEFOVFMuU1RBUlRfQVRdID0gc3RyaW5naWZ5KHRoaXMuaW5kZXhTdGFydFZhbHVlXyk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXJ0TmFtZVNldF8pIHtcclxuICAgICAgICAgICAgICAgIHFzW1JFU1RfQ09OU1RBTlRTLlNUQVJUX0FUXSArPSAnLCcgKyBzdHJpbmdpZnkodGhpcy5pbmRleFN0YXJ0TmFtZV8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmVuZFNldF8pIHtcclxuICAgICAgICAgICAgcXNbUkVTVF9DT05TVEFOVFMuRU5EX0FUXSA9IHN0cmluZ2lmeSh0aGlzLmluZGV4RW5kVmFsdWVfKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZW5kTmFtZVNldF8pIHtcclxuICAgICAgICAgICAgICAgIHFzW1JFU1RfQ09OU1RBTlRTLkVORF9BVF0gKz0gJywnICsgc3RyaW5naWZ5KHRoaXMuaW5kZXhFbmROYW1lXyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMubGltaXRTZXRfKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzVmlld0Zyb21MZWZ0KCkpIHtcclxuICAgICAgICAgICAgICAgIHFzW1JFU1RfQ09OU1RBTlRTLkxJTUlUX1RPX0ZJUlNUXSA9IHRoaXMubGltaXRfO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcXNbUkVTVF9DT05TVEFOVFMuTElNSVRfVE9fTEFTVF0gPSB0aGlzLmxpbWl0XztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcXM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBXaXJlIFByb3RvY29sIENvbnN0YW50c1xyXG4gICAgICogQGNvbnN0XHJcbiAgICAgKiBAZW51bSB7c3RyaW5nfVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgUXVlcnlQYXJhbXMuV0lSRV9QUk9UT0NPTF9DT05TVEFOVFNfID0ge1xyXG4gICAgICAgIElOREVYX1NUQVJUX1ZBTFVFOiAnc3AnLFxyXG4gICAgICAgIElOREVYX1NUQVJUX05BTUU6ICdzbicsXHJcbiAgICAgICAgSU5ERVhfRU5EX1ZBTFVFOiAnZXAnLFxyXG4gICAgICAgIElOREVYX0VORF9OQU1FOiAnZW4nLFxyXG4gICAgICAgIExJTUlUOiAnbCcsXHJcbiAgICAgICAgVklFV19GUk9NOiAndmYnLFxyXG4gICAgICAgIFZJRVdfRlJPTV9MRUZUOiAnbCcsXHJcbiAgICAgICAgVklFV19GUk9NX1JJR0hUOiAncicsXHJcbiAgICAgICAgSU5ERVg6ICdpJ1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUkVTVCBRdWVyeSBDb25zdGFudHNcclxuICAgICAqIEBjb25zdFxyXG4gICAgICogQGVudW0ge3N0cmluZ31cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIFF1ZXJ5UGFyYW1zLlJFU1RfUVVFUllfQ09OU1RBTlRTXyA9IHtcclxuICAgICAgICBPUkRFUl9CWTogJ29yZGVyQnknLFxyXG4gICAgICAgIFBSSU9SSVRZX0lOREVYOiAnJHByaW9yaXR5JyxcclxuICAgICAgICBWQUxVRV9JTkRFWDogJyR2YWx1ZScsXHJcbiAgICAgICAgS0VZX0lOREVYOiAnJGtleScsXHJcbiAgICAgICAgU1RBUlRfQVQ6ICdzdGFydEF0JyxcclxuICAgICAgICBFTkRfQVQ6ICdlbmRBdCcsXHJcbiAgICAgICAgTElNSVRfVE9fRklSU1Q6ICdsaW1pdFRvRmlyc3QnLFxyXG4gICAgICAgIExJTUlUX1RPX0xBU1Q6ICdsaW1pdFRvTGFzdCdcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIERlZmF1bHQsIGVtcHR5IHF1ZXJ5IHBhcmFtZXRlcnNcclxuICAgICAqIEB0eXBlIHshUXVlcnlQYXJhbXN9XHJcbiAgICAgKiBAY29uc3RcclxuICAgICAqL1xyXG4gICAgUXVlcnlQYXJhbXMuREVGQVVMVCA9IG5ldyBRdWVyeVBhcmFtcygpO1xyXG4gICAgcmV0dXJuIFF1ZXJ5UGFyYW1zO1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgUmVmZXJlbmNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKFJlZmVyZW5jZSwgX3N1cGVyKTtcclxuICAgIC8qKlxyXG4gICAgICogQ2FsbCBvcHRpb25zOlxyXG4gICAgICogICBuZXcgUmVmZXJlbmNlKFJlcG8sIFBhdGgpIG9yXHJcbiAgICAgKiAgIG5ldyBSZWZlcmVuY2UodXJsOiBzdHJpbmcsIHN0cmluZ3xSZXBvTWFuYWdlcilcclxuICAgICAqXHJcbiAgICAgKiBFeHRlcm5hbGx5IC0gdGhpcyBpcyB0aGUgZmlyZWJhc2UuZGF0YWJhc2UuUmVmZXJlbmNlIHR5cGUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHshUmVwb30gcmVwb1xyXG4gICAgICogQHBhcmFtIHsoIVBhdGgpfSBwYXRoXHJcbiAgICAgKiBAZXh0ZW5kcyB7UXVlcnl9XHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIFJlZmVyZW5jZShyZXBvLCBwYXRoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAoIShyZXBvIGluc3RhbmNlb2YgUmVwbykpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCduZXcgUmVmZXJlbmNlKCkgbm8gbG9uZ2VyIHN1cHBvcnRlZCAtIHVzZSBhcHAuZGF0YWJhc2UoKS4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY2FsbCBRdWVyeSdzIGNvbnN0cnVjdG9yLCBwYXNzaW5nIGluIHRoZSByZXBvIGFuZCBwYXRoLlxyXG4gICAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcmVwbywgcGF0aCwgUXVlcnlQYXJhbXMuREVGQVVMVCwgZmFsc2UpIHx8IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgLyoqIEByZXR1cm4gez9zdHJpbmd9ICovXHJcbiAgICBSZWZlcmVuY2UucHJvdG90eXBlLmdldEtleSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YWxpZGF0ZUFyZ0NvdW50KCdSZWZlcmVuY2Uua2V5JywgMCwgMCwgYXJndW1lbnRzLmxlbmd0aCk7XHJcbiAgICAgICAgaWYgKHRoaXMucGF0aC5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXRoLmdldEJhY2soKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyEoc3RyaW5nfFBhdGgpfSBwYXRoU3RyaW5nXHJcbiAgICAgKiBAcmV0dXJuIHshUmVmZXJlbmNlfVxyXG4gICAgICovXHJcbiAgICBSZWZlcmVuY2UucHJvdG90eXBlLmNoaWxkID0gZnVuY3Rpb24gKHBhdGhTdHJpbmcpIHtcclxuICAgICAgICB2YWxpZGF0ZUFyZ0NvdW50KCdSZWZlcmVuY2UuY2hpbGQnLCAxLCAxLCBhcmd1bWVudHMubGVuZ3RoKTtcclxuICAgICAgICBpZiAodHlwZW9mIHBhdGhTdHJpbmcgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgIHBhdGhTdHJpbmcgPSBTdHJpbmcocGF0aFN0cmluZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKCEocGF0aFN0cmluZyBpbnN0YW5jZW9mIFBhdGgpKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnBhdGguZ2V0RnJvbnQoKSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdmFsaWRhdGVSb290UGF0aFN0cmluZygnUmVmZXJlbmNlLmNoaWxkJywgMSwgcGF0aFN0cmluZywgZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFsaWRhdGVQYXRoU3RyaW5nKCdSZWZlcmVuY2UuY2hpbGQnLCAxLCBwYXRoU3RyaW5nLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBSZWZlcmVuY2UodGhpcy5yZXBvLCB0aGlzLnBhdGguY2hpbGQocGF0aFN0cmluZykpO1xyXG4gICAgfTtcclxuICAgIC8qKiBAcmV0dXJuIHs/UmVmZXJlbmNlfSAqL1xyXG4gICAgUmVmZXJlbmNlLnByb3RvdHlwZS5nZXRQYXJlbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFsaWRhdGVBcmdDb3VudCgnUmVmZXJlbmNlLnBhcmVudCcsIDAsIDAsIGFyZ3VtZW50cy5sZW5ndGgpO1xyXG4gICAgICAgIHZhciBwYXJlbnRQYXRoID0gdGhpcy5wYXRoLnBhcmVudCgpO1xyXG4gICAgICAgIHJldHVybiBwYXJlbnRQYXRoID09PSBudWxsID8gbnVsbCA6IG5ldyBSZWZlcmVuY2UodGhpcy5yZXBvLCBwYXJlbnRQYXRoKTtcclxuICAgIH07XHJcbiAgICAvKiogQHJldHVybiB7IVJlZmVyZW5jZX0gKi9cclxuICAgIFJlZmVyZW5jZS5wcm90b3R5cGUuZ2V0Um9vdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YWxpZGF0ZUFyZ0NvdW50KCdSZWZlcmVuY2Uucm9vdCcsIDAsIDAsIGFyZ3VtZW50cy5sZW5ndGgpO1xyXG4gICAgICAgIHZhciByZWYgPSB0aGlzO1xyXG4gICAgICAgIHdoaWxlIChyZWYuZ2V0UGFyZW50KCkgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmVmID0gcmVmLmdldFBhcmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVmO1xyXG4gICAgfTtcclxuICAgIC8qKiBAcmV0dXJuIHshRGF0YWJhc2V9ICovXHJcbiAgICBSZWZlcmVuY2UucHJvdG90eXBlLmRhdGFiYXNlUHJvcCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZXBvLmRhdGFiYXNlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHsqfSBuZXdWYWxcclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oP0Vycm9yKT19IG9uQ29tcGxldGVcclxuICAgICAqIEByZXR1cm4geyFQcm9taXNlfVxyXG4gICAgICovXHJcbiAgICBSZWZlcmVuY2UucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChuZXdWYWwsIG9uQ29tcGxldGUpIHtcclxuICAgICAgICB2YWxpZGF0ZUFyZ0NvdW50KCdSZWZlcmVuY2Uuc2V0JywgMSwgMiwgYXJndW1lbnRzLmxlbmd0aCk7XHJcbiAgICAgICAgdmFsaWRhdGVXcml0YWJsZVBhdGgoJ1JlZmVyZW5jZS5zZXQnLCB0aGlzLnBhdGgpO1xyXG4gICAgICAgIHZhbGlkYXRlRmlyZWJhc2VEYXRhQXJnKCdSZWZlcmVuY2Uuc2V0JywgMSwgbmV3VmFsLCB0aGlzLnBhdGgsIGZhbHNlKTtcclxuICAgICAgICB2YWxpZGF0ZUNhbGxiYWNrKCdSZWZlcmVuY2Uuc2V0JywgMiwgb25Db21wbGV0ZSwgdHJ1ZSk7XHJcbiAgICAgICAgdmFyIGRlZmVycmVkID0gbmV3IERlZmVycmVkKCk7XHJcbiAgICAgICAgdGhpcy5yZXBvLnNldFdpdGhQcmlvcml0eSh0aGlzLnBhdGgsIG5ld1ZhbCwgXHJcbiAgICAgICAgLypwcmlvcml0eT0qLyBudWxsLCBkZWZlcnJlZC53cmFwQ2FsbGJhY2sob25Db21wbGV0ZSkpO1xyXG4gICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHshT2JqZWN0fSBvYmplY3RUb01lcmdlXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKD9FcnJvcik9fSBvbkNvbXBsZXRlXHJcbiAgICAgKiBAcmV0dXJuIHshUHJvbWlzZX1cclxuICAgICAqL1xyXG4gICAgUmVmZXJlbmNlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAob2JqZWN0VG9NZXJnZSwgb25Db21wbGV0ZSkge1xyXG4gICAgICAgIHZhbGlkYXRlQXJnQ291bnQoJ1JlZmVyZW5jZS51cGRhdGUnLCAxLCAyLCBhcmd1bWVudHMubGVuZ3RoKTtcclxuICAgICAgICB2YWxpZGF0ZVdyaXRhYmxlUGF0aCgnUmVmZXJlbmNlLnVwZGF0ZScsIHRoaXMucGF0aCk7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2JqZWN0VG9NZXJnZSkpIHtcclxuICAgICAgICAgICAgdmFyIG5ld09iamVjdFRvTWVyZ2UgPSB7fTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmplY3RUb01lcmdlLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdPYmplY3RUb01lcmdlWycnICsgaV0gPSBvYmplY3RUb01lcmdlW2ldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9iamVjdFRvTWVyZ2UgPSBuZXdPYmplY3RUb01lcmdlO1xyXG4gICAgICAgICAgICB3YXJuKCdQYXNzaW5nIGFuIEFycmF5IHRvIEZpcmViYXNlLnVwZGF0ZSgpIGlzIGRlcHJlY2F0ZWQuICcgK1xyXG4gICAgICAgICAgICAgICAgJ1VzZSBzZXQoKSBpZiB5b3Ugd2FudCB0byBvdmVyd3JpdGUgdGhlIGV4aXN0aW5nIGRhdGEsIG9yICcgK1xyXG4gICAgICAgICAgICAgICAgJ2FuIE9iamVjdCB3aXRoIGludGVnZXIga2V5cyBpZiB5b3UgcmVhbGx5IGRvIHdhbnQgdG8gJyArXHJcbiAgICAgICAgICAgICAgICAnb25seSB1cGRhdGUgc29tZSBvZiB0aGUgY2hpbGRyZW4uJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhbGlkYXRlRmlyZWJhc2VNZXJnZURhdGFBcmcoJ1JlZmVyZW5jZS51cGRhdGUnLCAxLCBvYmplY3RUb01lcmdlLCB0aGlzLnBhdGgsIGZhbHNlKTtcclxuICAgICAgICB2YWxpZGF0ZUNhbGxiYWNrKCdSZWZlcmVuY2UudXBkYXRlJywgMiwgb25Db21wbGV0ZSwgdHJ1ZSk7XHJcbiAgICAgICAgdmFyIGRlZmVycmVkID0gbmV3IERlZmVycmVkKCk7XHJcbiAgICAgICAgdGhpcy5yZXBvLnVwZGF0ZSh0aGlzLnBhdGgsIG9iamVjdFRvTWVyZ2UsIGRlZmVycmVkLndyYXBDYWxsYmFjayhvbkNvbXBsZXRlKSk7XHJcbiAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyp9IG5ld1ZhbFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfG51bGx9IG5ld1ByaW9yaXR5XHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKD9FcnJvcik9fSBvbkNvbXBsZXRlXHJcbiAgICAgKiBAcmV0dXJuIHshUHJvbWlzZX1cclxuICAgICAqL1xyXG4gICAgUmVmZXJlbmNlLnByb3RvdHlwZS5zZXRXaXRoUHJpb3JpdHkgPSBmdW5jdGlvbiAobmV3VmFsLCBuZXdQcmlvcml0eSwgb25Db21wbGV0ZSkge1xyXG4gICAgICAgIHZhbGlkYXRlQXJnQ291bnQoJ1JlZmVyZW5jZS5zZXRXaXRoUHJpb3JpdHknLCAyLCAzLCBhcmd1bWVudHMubGVuZ3RoKTtcclxuICAgICAgICB2YWxpZGF0ZVdyaXRhYmxlUGF0aCgnUmVmZXJlbmNlLnNldFdpdGhQcmlvcml0eScsIHRoaXMucGF0aCk7XHJcbiAgICAgICAgdmFsaWRhdGVGaXJlYmFzZURhdGFBcmcoJ1JlZmVyZW5jZS5zZXRXaXRoUHJpb3JpdHknLCAxLCBuZXdWYWwsIHRoaXMucGF0aCwgZmFsc2UpO1xyXG4gICAgICAgIHZhbGlkYXRlUHJpb3JpdHkoJ1JlZmVyZW5jZS5zZXRXaXRoUHJpb3JpdHknLCAyLCBuZXdQcmlvcml0eSwgZmFsc2UpO1xyXG4gICAgICAgIHZhbGlkYXRlQ2FsbGJhY2soJ1JlZmVyZW5jZS5zZXRXaXRoUHJpb3JpdHknLCAzLCBvbkNvbXBsZXRlLCB0cnVlKTtcclxuICAgICAgICBpZiAodGhpcy5nZXRLZXkoKSA9PT0gJy5sZW5ndGgnIHx8IHRoaXMuZ2V0S2V5KCkgPT09ICcua2V5cycpIHtcclxuICAgICAgICAgICAgdGhyb3cgKCdSZWZlcmVuY2Uuc2V0V2l0aFByaW9yaXR5IGZhaWxlZDogJyArXHJcbiAgICAgICAgICAgICAgICB0aGlzLmdldEtleSgpICtcclxuICAgICAgICAgICAgICAgICcgaXMgYSByZWFkLW9ubHkgb2JqZWN0LicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgZGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQoKTtcclxuICAgICAgICB0aGlzLnJlcG8uc2V0V2l0aFByaW9yaXR5KHRoaXMucGF0aCwgbmV3VmFsLCBuZXdQcmlvcml0eSwgZGVmZXJyZWQud3JhcENhbGxiYWNrKG9uQ29tcGxldGUpKTtcclxuICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oP0Vycm9yKT19IG9uQ29tcGxldGVcclxuICAgICAqIEByZXR1cm4geyFQcm9taXNlfVxyXG4gICAgICovXHJcbiAgICBSZWZlcmVuY2UucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChvbkNvbXBsZXRlKSB7XHJcbiAgICAgICAgdmFsaWRhdGVBcmdDb3VudCgnUmVmZXJlbmNlLnJlbW92ZScsIDAsIDEsIGFyZ3VtZW50cy5sZW5ndGgpO1xyXG4gICAgICAgIHZhbGlkYXRlV3JpdGFibGVQYXRoKCdSZWZlcmVuY2UucmVtb3ZlJywgdGhpcy5wYXRoKTtcclxuICAgICAgICB2YWxpZGF0ZUNhbGxiYWNrKCdSZWZlcmVuY2UucmVtb3ZlJywgMSwgb25Db21wbGV0ZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0KG51bGwsIG9uQ29tcGxldGUpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbigqKToqfSB0cmFuc2FjdGlvblVwZGF0ZVxyXG4gICAgICogQHBhcmFtIHsoZnVuY3Rpb24oP0Vycm9yLCBib29sZWFuLCA/RGF0YVNuYXBzaG90KSk9fSBvbkNvbXBsZXRlXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBhcHBseUxvY2FsbHlcclxuICAgICAqIEByZXR1cm4geyFQcm9taXNlfVxyXG4gICAgICovXHJcbiAgICBSZWZlcmVuY2UucHJvdG90eXBlLnRyYW5zYWN0aW9uID0gZnVuY3Rpb24gKHRyYW5zYWN0aW9uVXBkYXRlLCBvbkNvbXBsZXRlLCBhcHBseUxvY2FsbHkpIHtcclxuICAgICAgICB2YWxpZGF0ZUFyZ0NvdW50KCdSZWZlcmVuY2UudHJhbnNhY3Rpb24nLCAxLCAzLCBhcmd1bWVudHMubGVuZ3RoKTtcclxuICAgICAgICB2YWxpZGF0ZVdyaXRhYmxlUGF0aCgnUmVmZXJlbmNlLnRyYW5zYWN0aW9uJywgdGhpcy5wYXRoKTtcclxuICAgICAgICB2YWxpZGF0ZUNhbGxiYWNrKCdSZWZlcmVuY2UudHJhbnNhY3Rpb24nLCAxLCB0cmFuc2FjdGlvblVwZGF0ZSwgZmFsc2UpO1xyXG4gICAgICAgIHZhbGlkYXRlQ2FsbGJhY2soJ1JlZmVyZW5jZS50cmFuc2FjdGlvbicsIDIsIG9uQ29tcGxldGUsIHRydWUpO1xyXG4gICAgICAgIC8vIE5PVEU6IGFwcGx5TG9jYWxseSBpcyBhbiBpbnRlcm5hbC1vbmx5IG9wdGlvbiBmb3Igbm93LiAgV2UgbmVlZCB0byBkZWNpZGUgaWYgd2Ugd2FudCB0byBrZWVwIGl0IGFuZCBob3dcclxuICAgICAgICAvLyB0byBleHBvc2UgaXQuXHJcbiAgICAgICAgdmFsaWRhdGVCb29sZWFuKCdSZWZlcmVuY2UudHJhbnNhY3Rpb24nLCAzLCBhcHBseUxvY2FsbHksIHRydWUpO1xyXG4gICAgICAgIGlmICh0aGlzLmdldEtleSgpID09PSAnLmxlbmd0aCcgfHwgdGhpcy5nZXRLZXkoKSA9PT0gJy5rZXlzJykge1xyXG4gICAgICAgICAgICB0aHJvdyAoJ1JlZmVyZW5jZS50cmFuc2FjdGlvbiBmYWlsZWQ6ICcgK1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRLZXkoKSArXHJcbiAgICAgICAgICAgICAgICAnIGlzIGEgcmVhZC1vbmx5IG9iamVjdC4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFwcGx5TG9jYWxseSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGFwcGx5TG9jYWxseSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xyXG4gICAgICAgIGlmICh0eXBlb2Ygb25Db21wbGV0ZSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICBkZWZlcnJlZC5wcm9taXNlLmNhdGNoKGZ1bmN0aW9uICgpIHsgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBwcm9taXNlQ29tcGxldGUgPSBmdW5jdGlvbiAoZXJyb3IsIGNvbW1pdHRlZCwgc25hcHNob3QpIHtcclxuICAgICAgICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShuZXcgVHJhbnNhY3Rpb25SZXN1bHQoY29tbWl0dGVkLCBzbmFwc2hvdCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb25Db21wbGV0ZSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgb25Db21wbGV0ZShlcnJvciwgY29tbWl0dGVkLCBzbmFwc2hvdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMucmVwby5zdGFydFRyYW5zYWN0aW9uKHRoaXMucGF0aCwgdHJhbnNhY3Rpb25VcGRhdGUsIHByb21pc2VDb21wbGV0ZSwgYXBwbHlMb2NhbGx5KTtcclxuICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcnxudWxsfSBwcmlvcml0eVxyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbig/RXJyb3IpPX0gb25Db21wbGV0ZVxyXG4gICAgICogQHJldHVybiB7IVByb21pc2V9XHJcbiAgICAgKi9cclxuICAgIFJlZmVyZW5jZS5wcm90b3R5cGUuc2V0UHJpb3JpdHkgPSBmdW5jdGlvbiAocHJpb3JpdHksIG9uQ29tcGxldGUpIHtcclxuICAgICAgICB2YWxpZGF0ZUFyZ0NvdW50KCdSZWZlcmVuY2Uuc2V0UHJpb3JpdHknLCAxLCAyLCBhcmd1bWVudHMubGVuZ3RoKTtcclxuICAgICAgICB2YWxpZGF0ZVdyaXRhYmxlUGF0aCgnUmVmZXJlbmNlLnNldFByaW9yaXR5JywgdGhpcy5wYXRoKTtcclxuICAgICAgICB2YWxpZGF0ZVByaW9yaXR5KCdSZWZlcmVuY2Uuc2V0UHJpb3JpdHknLCAxLCBwcmlvcml0eSwgZmFsc2UpO1xyXG4gICAgICAgIHZhbGlkYXRlQ2FsbGJhY2soJ1JlZmVyZW5jZS5zZXRQcmlvcml0eScsIDIsIG9uQ29tcGxldGUsIHRydWUpO1xyXG4gICAgICAgIHZhciBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xyXG4gICAgICAgIHRoaXMucmVwby5zZXRXaXRoUHJpb3JpdHkodGhpcy5wYXRoLmNoaWxkKCcucHJpb3JpdHknKSwgcHJpb3JpdHksIG51bGwsIGRlZmVycmVkLndyYXBDYWxsYmFjayhvbkNvbXBsZXRlKSk7XHJcbiAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyo9fSB2YWx1ZVxyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbig/RXJyb3IpPX0gb25Db21wbGV0ZVxyXG4gICAgICogQHJldHVybiB7IVJlZmVyZW5jZX1cclxuICAgICAqL1xyXG4gICAgUmVmZXJlbmNlLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKHZhbHVlLCBvbkNvbXBsZXRlKSB7XHJcbiAgICAgICAgdmFsaWRhdGVBcmdDb3VudCgnUmVmZXJlbmNlLnB1c2gnLCAwLCAyLCBhcmd1bWVudHMubGVuZ3RoKTtcclxuICAgICAgICB2YWxpZGF0ZVdyaXRhYmxlUGF0aCgnUmVmZXJlbmNlLnB1c2gnLCB0aGlzLnBhdGgpO1xyXG4gICAgICAgIHZhbGlkYXRlRmlyZWJhc2VEYXRhQXJnKCdSZWZlcmVuY2UucHVzaCcsIDEsIHZhbHVlLCB0aGlzLnBhdGgsIHRydWUpO1xyXG4gICAgICAgIHZhbGlkYXRlQ2FsbGJhY2soJ1JlZmVyZW5jZS5wdXNoJywgMiwgb25Db21wbGV0ZSwgdHJ1ZSk7XHJcbiAgICAgICAgdmFyIG5vdyA9IHRoaXMucmVwby5zZXJ2ZXJUaW1lKCk7XHJcbiAgICAgICAgdmFyIG5hbWUgPSBuZXh0UHVzaElkKG5vdyk7XHJcbiAgICAgICAgLy8gcHVzaCgpIHJldHVybnMgYSBUaGVubmFibGVSZWZlcmVuY2Ugd2hvc2UgcHJvbWlzZSBpcyBmdWxmaWxsZWQgd2l0aCBhIHJlZ3VsYXIgUmVmZXJlbmNlLlxyXG4gICAgICAgIC8vIFdlIHVzZSBjaGlsZCgpIHRvIGNyZWF0ZSBoYW5kbGVzIHRvIHR3byBkaWZmZXJlbnQgcmVmZXJlbmNlcy4gVGhlIGZpcnN0IGlzIHR1cm5lZCBpbnRvIGFcclxuICAgICAgICAvLyBUaGVubmFibGVSZWZlcmVuY2UgYmVsb3cgYnkgYWRkaW5nIHRoZW4oKSBhbmQgY2F0Y2goKSBtZXRob2RzIGFuZCBpcyB1c2VkIGFzIHRoZVxyXG4gICAgICAgIC8vIHJldHVybiB2YWx1ZSBvZiBwdXNoKCkuIFRoZSBzZWNvbmQgcmVtYWlucyBhIHJlZ3VsYXIgUmVmZXJlbmNlIGFuZCBpcyB1c2VkIGFzIHRoZSBmdWxmaWxsZWRcclxuICAgICAgICAvLyB2YWx1ZSBvZiB0aGUgZmlyc3QgVGhlbm5hYmxlUmVmZXJlbmNlLlxyXG4gICAgICAgIHZhciB0aGVubmFibGVQdXNoUmVmID0gdGhpcy5jaGlsZChuYW1lKTtcclxuICAgICAgICB2YXIgcHVzaFJlZiA9IHRoaXMuY2hpbGQobmFtZSk7XHJcbiAgICAgICAgdmFyIHByb21pc2U7XHJcbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcHJvbWlzZSA9IHRoZW5uYWJsZVB1c2hSZWYuc2V0KHZhbHVlLCBvbkNvbXBsZXRlKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHB1c2hSZWY7IH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShwdXNoUmVmKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhlbm5hYmxlUHVzaFJlZi50aGVuID0gcHJvbWlzZS50aGVuLmJpbmQocHJvbWlzZSk7XHJcbiAgICAgICAgdGhlbm5hYmxlUHVzaFJlZi5jYXRjaCA9IHByb21pc2UudGhlbi5iaW5kKHByb21pc2UsIHVuZGVmaW5lZCk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvbkNvbXBsZXRlID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIHByb21pc2UuY2F0Y2goZnVuY3Rpb24gKCkgeyB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoZW5uYWJsZVB1c2hSZWY7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHshT25EaXNjb25uZWN0fVxyXG4gICAgICovXHJcbiAgICBSZWZlcmVuY2UucHJvdG90eXBlLm9uRGlzY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YWxpZGF0ZVdyaXRhYmxlUGF0aCgnUmVmZXJlbmNlLm9uRGlzY29ubmVjdCcsIHRoaXMucGF0aCk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBPbkRpc2Nvbm5lY3QodGhpcy5yZXBvLCB0aGlzLnBhdGgpO1xyXG4gICAgfTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWZlcmVuY2UucHJvdG90eXBlLCBcImRhdGFiYXNlXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YWJhc2VQcm9wKCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlZmVyZW5jZS5wcm90b3R5cGUsIFwia2V5XCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0S2V5KCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlZmVyZW5jZS5wcm90b3R5cGUsIFwicGFyZW50XCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyZW50KCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlZmVyZW5jZS5wcm90b3R5cGUsIFwicm9vdFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFJvb3QoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gUmVmZXJlbmNlO1xyXG59KFF1ZXJ5KSk7XHJcbi8qKlxyXG4gKiBEZWZpbmUgcmVmZXJlbmNlIGNvbnN0cnVjdG9yIGluIHZhcmlvdXMgbW9kdWxlc1xyXG4gKlxyXG4gKiBXZSBhcmUgZG9pbmcgdGhpcyBoZXJlIHRvIGF2b2lkIHNldmVyYWwgY2lyY3VsYXJcclxuICogZGVwZW5kZW5jeSBpc3N1ZXNcclxuICovXHJcblF1ZXJ5Ll9fcmVmZXJlbmNlQ29uc3RydWN0b3IgPSBSZWZlcmVuY2U7XHJcblN5bmNQb2ludC5fX3JlZmVyZW5jZUNvbnN0cnVjdG9yID0gUmVmZXJlbmNlO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogTm9kZSBpbiBhIFRyZWUuXHJcbiAqL1xyXG52YXIgVHJlZU5vZGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBUcmVlTm9kZSgpIHtcclxuICAgICAgICAvLyBUT0RPOiBDb25zaWRlciBtYWtpbmcgYWNjZXNzb3JzIHRoYXQgY3JlYXRlIGNoaWxkcmVuIGFuZCB2YWx1ZSBsYXppbHkgb3JcclxuICAgICAgICAvLyBzZXBhcmF0ZSBJbnRlcm5hbCAvIExlYWYgJ3R5cGVzJy5cclxuICAgICAgICB0aGlzLmNoaWxkcmVuID0ge307XHJcbiAgICAgICAgdGhpcy5jaGlsZENvdW50ID0gMDtcclxuICAgICAgICB0aGlzLnZhbHVlID0gbnVsbDtcclxuICAgIH1cclxuICAgIHJldHVybiBUcmVlTm9kZTtcclxufSgpKTtcclxuLyoqXHJcbiAqIEEgbGlnaHQtd2VpZ2h0IHRyZWUsIHRyYXZlcnNhYmxlIGJ5IHBhdGguICBOb2RlcyBjYW4gaGF2ZSBib3RoIHZhbHVlcyBhbmQgY2hpbGRyZW4uXHJcbiAqIE5vZGVzIGFyZSBub3QgZW51bWVyYXRlZCAoYnkgZm9yRWFjaENoaWxkKSB1bmxlc3MgdGhleSBoYXZlIGEgdmFsdWUgb3Igbm9uLWVtcHR5XHJcbiAqIGNoaWxkcmVuLlxyXG4gKi9cclxudmFyIFRyZWUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIEB0ZW1wbGF0ZSBUXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWVfIE9wdGlvbmFsIG5hbWUgb2YgdGhlIG5vZGUuXHJcbiAgICAgKiBAcGFyYW0ge1RyZWU9fSBwYXJlbnRfIE9wdGlvbmFsIHBhcmVudCBub2RlLlxyXG4gICAgICogQHBhcmFtIHtUcmVlTm9kZT19IG5vZGVfIE9wdGlvbmFsIG5vZGUgdG8gd3JhcC5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gVHJlZShuYW1lXywgcGFyZW50Xywgbm9kZV8pIHtcclxuICAgICAgICBpZiAobmFtZV8gPT09IHZvaWQgMCkgeyBuYW1lXyA9ICcnOyB9XHJcbiAgICAgICAgaWYgKHBhcmVudF8gPT09IHZvaWQgMCkgeyBwYXJlbnRfID0gbnVsbDsgfVxyXG4gICAgICAgIGlmIChub2RlXyA9PT0gdm9pZCAwKSB7IG5vZGVfID0gbmV3IFRyZWVOb2RlKCk7IH1cclxuICAgICAgICB0aGlzLm5hbWVfID0gbmFtZV87XHJcbiAgICAgICAgdGhpcy5wYXJlbnRfID0gcGFyZW50XztcclxuICAgICAgICB0aGlzLm5vZGVfID0gbm9kZV87XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSBzdWItVHJlZSBmb3IgdGhlIGdpdmVuIHBhdGguXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHshKHN0cmluZ3xQYXRoKX0gcGF0aE9iaiBQYXRoIHRvIGxvb2sgdXAuXHJcbiAgICAgKiBAcmV0dXJuIHshVHJlZS48VD59IFRyZWUgZm9yIHBhdGguXHJcbiAgICAgKi9cclxuICAgIFRyZWUucHJvdG90eXBlLnN1YlRyZWUgPSBmdW5jdGlvbiAocGF0aE9iaikge1xyXG4gICAgICAgIC8vIFRPRE86IFJlcXVpcmUgcGF0aE9iaiB0byBiZSBQYXRoP1xyXG4gICAgICAgIHZhciBwYXRoID0gcGF0aE9iaiBpbnN0YW5jZW9mIFBhdGggPyBwYXRoT2JqIDogbmV3IFBhdGgocGF0aE9iaik7XHJcbiAgICAgICAgdmFyIGNoaWxkID0gdGhpcywgbmV4dCA9IHBhdGguZ2V0RnJvbnQoKTtcclxuICAgICAgICB3aGlsZSAobmV4dCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB2YXIgY2hpbGROb2RlID0gc2FmZUdldChjaGlsZC5ub2RlXy5jaGlsZHJlbiwgbmV4dCkgfHwgbmV3IFRyZWVOb2RlKCk7XHJcbiAgICAgICAgICAgIGNoaWxkID0gbmV3IFRyZWUobmV4dCwgY2hpbGQsIGNoaWxkTm9kZSk7XHJcbiAgICAgICAgICAgIHBhdGggPSBwYXRoLnBvcEZyb250KCk7XHJcbiAgICAgICAgICAgIG5leHQgPSBwYXRoLmdldEZyb250KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjaGlsZDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIGRhdGEgYXNzb2NpYXRlZCB3aXRoIHRoaXMgdHJlZSBub2RlLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4gez9UfSBUaGUgZGF0YSBvciBudWxsIGlmIG5vIGRhdGEgZXhpc3RzLlxyXG4gICAgICovXHJcbiAgICBUcmVlLnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5ub2RlXy52YWx1ZTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFNldHMgZGF0YSB0byB0aGlzIHRyZWUgbm9kZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFUfSB2YWx1ZSBWYWx1ZSB0byBzZXQuXHJcbiAgICAgKi9cclxuICAgIFRyZWUucHJvdG90eXBlLnNldFZhbHVlID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgYXNzZXJ0KHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcsICdDYW5ub3Qgc2V0IHZhbHVlIHRvIHVuZGVmaW5lZCcpO1xyXG4gICAgICAgIHRoaXMubm9kZV8udmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLnVwZGF0ZVBhcmVudHNfKCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDbGVhcnMgdGhlIGNvbnRlbnRzIG9mIHRoZSB0cmVlIG5vZGUgKGl0cyB2YWx1ZSBhbmQgYWxsIGNoaWxkcmVuKS5cclxuICAgICAqL1xyXG4gICAgVHJlZS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5ub2RlXy52YWx1ZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5ub2RlXy5jaGlsZHJlbiA9IHt9O1xyXG4gICAgICAgIHRoaXMubm9kZV8uY2hpbGRDb3VudCA9IDA7XHJcbiAgICAgICAgdGhpcy51cGRhdGVQYXJlbnRzXygpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgdHJlZSBoYXMgYW55IGNoaWxkcmVuLlxyXG4gICAgICovXHJcbiAgICBUcmVlLnByb3RvdHlwZS5oYXNDaGlsZHJlbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5ub2RlXy5jaGlsZENvdW50ID4gMDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHRyZWUgaXMgZW1wdHkgKG5vIHZhbHVlIG9yIGNoaWxkcmVuKS5cclxuICAgICAqL1xyXG4gICAgVHJlZS5wcm90b3R5cGUuaXNFbXB0eSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZSgpID09PSBudWxsICYmICF0aGlzLmhhc0NoaWxkcmVuKCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxscyBhY3Rpb24gZm9yIGVhY2ggY2hpbGQgb2YgdGhpcyB0cmVlIG5vZGUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbighVHJlZS48VD4pfSBhY3Rpb24gQWN0aW9uIHRvIGJlIGNhbGxlZCBmb3IgZWFjaCBjaGlsZC5cclxuICAgICAqL1xyXG4gICAgVHJlZS5wcm90b3R5cGUuZm9yRWFjaENoaWxkID0gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgZWFjaCh0aGlzLm5vZGVfLmNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQsIGNoaWxkVHJlZSkge1xyXG4gICAgICAgICAgICBhY3Rpb24obmV3IFRyZWUoY2hpbGQsIF90aGlzLCBjaGlsZFRyZWUpKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIERvZXMgYSBkZXB0aC1maXJzdCB0cmF2ZXJzYWwgb2YgdGhpcyBub2RlJ3MgZGVzY2VuZGFudHMsIGNhbGxpbmcgYWN0aW9uIGZvciBlYWNoIG9uZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCFUcmVlLjxUPil9IGFjdGlvbiBBY3Rpb24gdG8gYmUgY2FsbGVkIGZvciBlYWNoIGNoaWxkLlxyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gaW5jbHVkZVNlbGYgV2hldGhlciB0byBjYWxsIGFjdGlvbiBvbiB0aGlzIG5vZGUgYXMgd2VsbC4gRGVmYXVsdHMgdG9cclxuICAgICAqICAgZmFsc2UuXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBjaGlsZHJlbkZpcnN0IFdoZXRoZXIgdG8gY2FsbCBhY3Rpb24gb24gY2hpbGRyZW4gYmVmb3JlIGNhbGxpbmcgaXQgb25cclxuICAgICAqICAgcGFyZW50LlxyXG4gICAgICovXHJcbiAgICBUcmVlLnByb3RvdHlwZS5mb3JFYWNoRGVzY2VuZGFudCA9IGZ1bmN0aW9uIChhY3Rpb24sIGluY2x1ZGVTZWxmLCBjaGlsZHJlbkZpcnN0KSB7XHJcbiAgICAgICAgaWYgKGluY2x1ZGVTZWxmICYmICFjaGlsZHJlbkZpcnN0KSB7XHJcbiAgICAgICAgICAgIGFjdGlvbih0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5mb3JFYWNoQ2hpbGQoZnVuY3Rpb24gKGNoaWxkKSB7XHJcbiAgICAgICAgICAgIGNoaWxkLmZvckVhY2hEZXNjZW5kYW50KGFjdGlvbiwgLyppbmNsdWRlU2VsZj0qLyB0cnVlLCBjaGlsZHJlbkZpcnN0KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoaW5jbHVkZVNlbGYgJiYgY2hpbGRyZW5GaXJzdCkge1xyXG4gICAgICAgICAgICBhY3Rpb24odGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ2FsbHMgYWN0aW9uIG9uIGVhY2ggYW5jZXN0b3Igbm9kZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCFUcmVlLjxUPil9IGFjdGlvbiBBY3Rpb24gdG8gYmUgY2FsbGVkIG9uIGVhY2ggcGFyZW50OyByZXR1cm5cclxuICAgICAqICAgdHJ1ZSB0byBhYm9ydC5cclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IGluY2x1ZGVTZWxmIFdoZXRoZXIgdG8gY2FsbCBhY3Rpb24gb24gdGhpcyBub2RlIGFzIHdlbGwuXHJcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIGlmIHRoZSBhY3Rpb24gY2FsbGJhY2sgcmV0dXJuZWQgdHJ1ZS5cclxuICAgICAqL1xyXG4gICAgVHJlZS5wcm90b3R5cGUuZm9yRWFjaEFuY2VzdG9yID0gZnVuY3Rpb24gKGFjdGlvbiwgaW5jbHVkZVNlbGYpIHtcclxuICAgICAgICB2YXIgbm9kZSA9IGluY2x1ZGVTZWxmID8gdGhpcyA6IHRoaXMucGFyZW50KCk7XHJcbiAgICAgICAgd2hpbGUgKG5vZGUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgaWYgKGFjdGlvbihub2RlKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIERvZXMgYSBkZXB0aC1maXJzdCB0cmF2ZXJzYWwgb2YgdGhpcyBub2RlJ3MgZGVzY2VuZGFudHMuICBXaGVuIGEgZGVzY2VuZGFudCB3aXRoIGEgdmFsdWVcclxuICAgICAqIGlzIGZvdW5kLCBhY3Rpb24gaXMgY2FsbGVkIG9uIGl0IGFuZCB0cmF2ZXJzYWwgZG9lcyBub3QgY29udGludWUgaW5zaWRlIHRoZSBub2RlLlxyXG4gICAgICogQWN0aW9uIGlzICpub3QqIGNhbGxlZCBvbiB0aGlzIG5vZGUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbighVHJlZS48VD4pfSBhY3Rpb24gQWN0aW9uIHRvIGJlIGNhbGxlZCBmb3IgZWFjaCBjaGlsZC5cclxuICAgICAqL1xyXG4gICAgVHJlZS5wcm90b3R5cGUuZm9yRWFjaEltbWVkaWF0ZURlc2NlbmRhbnRXaXRoVmFsdWUgPSBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5mb3JFYWNoQ2hpbGQoZnVuY3Rpb24gKGNoaWxkKSB7XHJcbiAgICAgICAgICAgIGlmIChjaGlsZC5nZXRWYWx1ZSgpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBhY3Rpb24oY2hpbGQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY2hpbGQuZm9yRWFjaEltbWVkaWF0ZURlc2NlbmRhbnRXaXRoVmFsdWUoYWN0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybiB7IVBhdGh9IFRoZSBwYXRoIG9mIHRoaXMgdHJlZSBub2RlLCBhcyBhIFBhdGguXHJcbiAgICAgKi9cclxuICAgIFRyZWUucHJvdG90eXBlLnBhdGggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQYXRoKHRoaXMucGFyZW50XyA9PT0gbnVsbFxyXG4gICAgICAgICAgICA/IHRoaXMubmFtZV9cclxuICAgICAgICAgICAgOiB0aGlzLnBhcmVudF8ucGF0aCgpICsgJy8nICsgdGhpcy5uYW1lXyk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBuYW1lIG9mIHRoZSB0cmVlIG5vZGUuXHJcbiAgICAgKi9cclxuICAgIFRyZWUucHJvdG90eXBlLm5hbWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZV87XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHs/VHJlZX0gVGhlIHBhcmVudCB0cmVlIG5vZGUsIG9yIG51bGwgaWYgdGhpcyBpcyB0aGUgcm9vdCBvZiB0aGUgdHJlZS5cclxuICAgICAqL1xyXG4gICAgVHJlZS5wcm90b3R5cGUucGFyZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudF87XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIG9yIHJlbW92ZXMgdGhpcyBjaGlsZCBmcm9tIGl0cyBwYXJlbnQgYmFzZWQgb24gd2hldGhlciBpdCdzIGVtcHR5IG9yIG5vdC5cclxuICAgICAqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBUcmVlLnByb3RvdHlwZS51cGRhdGVQYXJlbnRzXyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5wYXJlbnRfICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFyZW50Xy51cGRhdGVDaGlsZF8odGhpcy5uYW1lXywgdGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBvciByZW1vdmVzIHRoZSBwYXNzZWQgY2hpbGQgdG8gdGhpcyB0cmVlIG5vZGUsIGRlcGVuZGluZyBvbiB3aGV0aGVyIGl0J3MgZW1wdHkuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNoaWxkTmFtZSBUaGUgbmFtZSBvZiB0aGUgY2hpbGQgdG8gdXBkYXRlLlxyXG4gICAgICogQHBhcmFtIHshVHJlZS48VD59IGNoaWxkIFRoZSBjaGlsZCB0byB1cGRhdGUuXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBUcmVlLnByb3RvdHlwZS51cGRhdGVDaGlsZF8gPSBmdW5jdGlvbiAoY2hpbGROYW1lLCBjaGlsZCkge1xyXG4gICAgICAgIHZhciBjaGlsZEVtcHR5ID0gY2hpbGQuaXNFbXB0eSgpO1xyXG4gICAgICAgIHZhciBjaGlsZEV4aXN0cyA9IGNvbnRhaW5zKHRoaXMubm9kZV8uY2hpbGRyZW4sIGNoaWxkTmFtZSk7XHJcbiAgICAgICAgaWYgKGNoaWxkRW1wdHkgJiYgY2hpbGRFeGlzdHMpIHtcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMubm9kZV8uY2hpbGRyZW5bY2hpbGROYW1lXTtcclxuICAgICAgICAgICAgdGhpcy5ub2RlXy5jaGlsZENvdW50LS07XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlUGFyZW50c18oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoIWNoaWxkRW1wdHkgJiYgIWNoaWxkRXhpc3RzKSB7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZV8uY2hpbGRyZW5bY2hpbGROYW1lXSA9IGNoaWxkLm5vZGVfO1xyXG4gICAgICAgICAgICB0aGlzLm5vZGVfLmNoaWxkQ291bnQrKztcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVQYXJlbnRzXygpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gVHJlZTtcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLy8gVE9ETzogVGhpcyBpcyBwcmV0dHkgbWVzc3kuICBJZGVhbGx5LCBhIGxvdCBvZiB0aGlzIHdvdWxkIG1vdmUgaW50byBGaXJlYmFzZURhdGEsIG9yIGEgdHJhbnNhY3Rpb24tc3BlY2lmaWNcclxuLy8gY29tcG9uZW50IHVzZWQgYnkgRmlyZWJhc2VEYXRhLCBidXQgaXQgaGFzIHRpZXMgdG8gdXNlciBjYWxsYmFja3MgKHRyYW5zYWN0aW9uIHVwZGF0ZSBhbmQgb25Db21wbGV0ZSkgYXMgd2VsbFxyXG4vLyBhcyB0aGUgcmVhbHRpbWUgY29ubmVjdGlvbiAodG8gc2VuZCB0cmFuc2FjdGlvbnMgdG8gdGhlIHNlcnZlcikuICBTbyB0aGF0IGFsbCBuZWVkcyB0byBiZSBkZWNvdXBsZWQgZmlyc3QuXHJcbi8vIEZvciBub3cgaXQncyBwYXJ0IG9mIFJlcG8sIGJ1dCBpbiBpdHMgb3duIGZpbGUuXHJcbi8qKlxyXG4gKiBAZW51bSB7bnVtYmVyfVxyXG4gKi9cclxudmFyIFRyYW5zYWN0aW9uU3RhdHVzO1xyXG4oZnVuY3Rpb24gKFRyYW5zYWN0aW9uU3RhdHVzKSB7XHJcbiAgICAvLyBXZSd2ZSBydW4gdGhlIHRyYW5zYWN0aW9uIGFuZCB1cGRhdGVkIHRyYW5zYWN0aW9uUmVzdWx0RGF0YV8gd2l0aCB0aGUgcmVzdWx0LCBidXQgaXQgaXNuJ3QgY3VycmVudGx5IHNlbnQgdG8gdGhlXHJcbiAgICAvLyBzZXJ2ZXIuIEEgdHJhbnNhY3Rpb24gd2lsbCBnbyBmcm9tIFJVTiAtPiBTRU5UIC0+IFJVTiBpZiBpdCBjb21lcyBiYWNrIGZyb20gdGhlIHNlcnZlciBhcyByZWplY3RlZCBkdWUgdG9cclxuICAgIC8vIG1pc21hdGNoZWQgaGFzaC5cclxuICAgIFRyYW5zYWN0aW9uU3RhdHVzW1RyYW5zYWN0aW9uU3RhdHVzW1wiUlVOXCJdID0gMF0gPSBcIlJVTlwiO1xyXG4gICAgLy8gV2UndmUgcnVuIHRoZSB0cmFuc2FjdGlvbiBhbmQgc2VudCBpdCB0byB0aGUgc2VydmVyIGFuZCBpdCdzIGN1cnJlbnRseSBvdXRzdGFuZGluZyAoaGFzbid0IGNvbWUgYmFjayBhcyBhY2NlcHRlZFxyXG4gICAgLy8gb3IgcmVqZWN0ZWQgeWV0KS5cclxuICAgIFRyYW5zYWN0aW9uU3RhdHVzW1RyYW5zYWN0aW9uU3RhdHVzW1wiU0VOVFwiXSA9IDFdID0gXCJTRU5UXCI7XHJcbiAgICAvLyBUZW1wb3Jhcnkgc3RhdGUgdXNlZCB0byBtYXJrIGNvbXBsZXRlZCB0cmFuc2FjdGlvbnMgKHdoZXRoZXIgc3VjY2Vzc2Z1bCBvciBhYm9ydGVkKS4gIFRoZSB0cmFuc2FjdGlvbiB3aWxsIGJlXHJcbiAgICAvLyByZW1vdmVkIHdoZW4gd2UgZ2V0IGEgY2hhbmNlIHRvIHBydW5lIGNvbXBsZXRlZCBvbmVzLlxyXG4gICAgVHJhbnNhY3Rpb25TdGF0dXNbVHJhbnNhY3Rpb25TdGF0dXNbXCJDT01QTEVURURcIl0gPSAyXSA9IFwiQ09NUExFVEVEXCI7XHJcbiAgICAvLyBVc2VkIHdoZW4gYW4gYWxyZWFkeS1zZW50IHRyYW5zYWN0aW9uIG5lZWRzIHRvIGJlIGFib3J0ZWQgKGUuZy4gZHVlIHRvIGEgY29uZmxpY3Rpbmcgc2V0KCkgY2FsbCB0aGF0IHdhcyBtYWRlKS5cclxuICAgIC8vIElmIGl0IGNvbWVzIGJhY2sgYXMgdW5zdWNjZXNzZnVsLCB3ZSdsbCBhYm9ydCBpdC5cclxuICAgIFRyYW5zYWN0aW9uU3RhdHVzW1RyYW5zYWN0aW9uU3RhdHVzW1wiU0VOVF9ORUVEU19BQk9SVFwiXSA9IDNdID0gXCJTRU5UX05FRURTX0FCT1JUXCI7XHJcbiAgICAvLyBUZW1wb3Jhcnkgc3RhdGUgdXNlZCB0byBtYXJrIHRyYW5zYWN0aW9ucyB0aGF0IG5lZWQgdG8gYmUgYWJvcnRlZC5cclxuICAgIFRyYW5zYWN0aW9uU3RhdHVzW1RyYW5zYWN0aW9uU3RhdHVzW1wiTkVFRFNfQUJPUlRcIl0gPSA0XSA9IFwiTkVFRFNfQUJPUlRcIjtcclxufSkoVHJhbnNhY3Rpb25TdGF0dXMgfHwgKFRyYW5zYWN0aW9uU3RhdHVzID0ge30pKTtcclxuLyoqXHJcbiAqIElmIGEgdHJhbnNhY3Rpb24gZG9lcyBub3Qgc3VjY2VlZCBhZnRlciAyNSByZXRyaWVzLCB3ZSBhYm9ydCBpdC4gIEFtb25nIG90aGVyIHRoaW5ncyB0aGlzIGVuc3VyZSB0aGF0IGlmIHRoZXJlJ3NcclxuICogZXZlciBhIGJ1ZyBjYXVzaW5nIGEgbWlzbWF0Y2ggYmV0d2VlbiBjbGllbnQgLyBzZXJ2ZXIgaGFzaGVzIGZvciBzb21lIGRhdGEsIHdlIHdvbid0IHJldHJ5IGluZGVmaW5pdGVseS5cclxuICogQHR5cGUge251bWJlcn1cclxuICogQGNvbnN0XHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG5SZXBvLk1BWF9UUkFOU0FDVElPTl9SRVRSSUVTXyA9IDI1O1xyXG4vKipcclxuICogU2V0dXAgdGhlIHRyYW5zYWN0aW9uIGRhdGEgc3RydWN0dXJlc1xyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuUmVwby5wcm90b3R5cGUudHJhbnNhY3Rpb25zSW5pdF8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIFN0b3JlcyBxdWV1ZXMgb2Ygb3V0c3RhbmRpbmcgdHJhbnNhY3Rpb25zIGZvciBGaXJlYmFzZSBsb2NhdGlvbnMuXHJcbiAgICAgKlxyXG4gICAgICogQHR5cGUgeyFUcmVlLjxBcnJheS48IVRyYW5zYWN0aW9uPj59XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICB0aGlzLnRyYW5zYWN0aW9uUXVldWVUcmVlXyA9IG5ldyBUcmVlKCk7XHJcbn07XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgbmV3IHRyYW5zYWN0aW9uLCBhZGRzIGl0IHRvIHRoZSB0cmFuc2FjdGlvbnMgd2UncmUgdHJhY2tpbmcsIGFuZCBzZW5kcyBpdCB0byB0aGUgc2VydmVyIGlmIHBvc3NpYmxlLlxyXG4gKlxyXG4gKiBAcGFyYW0geyFQYXRofSBwYXRoIFBhdGggYXQgd2hpY2ggdG8gZG8gdHJhbnNhY3Rpb24uXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKik6Kn0gdHJhbnNhY3Rpb25VcGRhdGUgVXBkYXRlIGNhbGxiYWNrLlxyXG4gKiBAcGFyYW0gez9mdW5jdGlvbig/RXJyb3IsIGJvb2xlYW4sID9EYXRhU25hcHNob3QpfSBvbkNvbXBsZXRlIENvbXBsZXRpb24gY2FsbGJhY2suXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYXBwbHlMb2NhbGx5IFdoZXRoZXIgb3Igbm90IHRvIG1ha2UgaW50ZXJtZWRpYXRlIHJlc3VsdHMgdmlzaWJsZVxyXG4gKi9cclxuUmVwby5wcm90b3R5cGUuc3RhcnRUcmFuc2FjdGlvbiA9IGZ1bmN0aW9uIChwYXRoLCB0cmFuc2FjdGlvblVwZGF0ZSwgb25Db21wbGV0ZSwgYXBwbHlMb2NhbGx5KSB7XHJcbiAgICB0aGlzLmxvZ18oJ3RyYW5zYWN0aW9uIG9uICcgKyBwYXRoKTtcclxuICAgIC8vIEFkZCBhIHdhdGNoIHRvIG1ha2Ugc3VyZSB3ZSBnZXQgc2VydmVyIHVwZGF0ZXMuXHJcbiAgICB2YXIgdmFsdWVDYWxsYmFjayA9IGZ1bmN0aW9uICgpIHsgfTtcclxuICAgIHZhciB3YXRjaFJlZiA9IG5ldyBSZWZlcmVuY2UodGhpcywgcGF0aCk7XHJcbiAgICB3YXRjaFJlZi5vbigndmFsdWUnLCB2YWx1ZUNhbGxiYWNrKTtcclxuICAgIHZhciB1bndhdGNoZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgd2F0Y2hSZWYub2ZmKCd2YWx1ZScsIHZhbHVlQ2FsbGJhY2spO1xyXG4gICAgfTtcclxuICAgIC8vIEluaXRpYWxpemUgdHJhbnNhY3Rpb24uXHJcbiAgICB2YXIgdHJhbnNhY3Rpb24gPSB7XHJcbiAgICAgICAgcGF0aDogcGF0aCxcclxuICAgICAgICB1cGRhdGU6IHRyYW5zYWN0aW9uVXBkYXRlLFxyXG4gICAgICAgIG9uQ29tcGxldGU6IG9uQ29tcGxldGUsXHJcbiAgICAgICAgLy8gT25lIG9mIFRyYW5zYWN0aW9uU3RhdHVzIGVudW1zLlxyXG4gICAgICAgIHN0YXR1czogbnVsbCxcclxuICAgICAgICAvLyBVc2VkIHdoZW4gY29tYmluaW5nIHRyYW5zYWN0aW9ucyBhdCBkaWZmZXJlbnQgbG9jYXRpb25zIHRvIGZpZ3VyZSBvdXQgd2hpY2ggb25lIGdvZXMgZmlyc3QuXHJcbiAgICAgICAgb3JkZXI6IExVSURHZW5lcmF0b3IoKSxcclxuICAgICAgICAvLyBXaGV0aGVyIHRvIHJhaXNlIGxvY2FsIGV2ZW50cyBmb3IgdGhpcyB0cmFuc2FjdGlvbi5cclxuICAgICAgICBhcHBseUxvY2FsbHk6IGFwcGx5TG9jYWxseSxcclxuICAgICAgICAvLyBDb3VudCBvZiBob3cgbWFueSB0aW1lcyB3ZSd2ZSByZXRyaWVkIHRoZSB0cmFuc2FjdGlvbi5cclxuICAgICAgICByZXRyeUNvdW50OiAwLFxyXG4gICAgICAgIC8vIEZ1bmN0aW9uIHRvIGNhbGwgdG8gY2xlYW4gdXAgb3VyIC5vbigpIGxpc3RlbmVyLlxyXG4gICAgICAgIHVud2F0Y2hlcjogdW53YXRjaGVyLFxyXG4gICAgICAgIC8vIFN0b3JlcyB3aHkgYSB0cmFuc2FjdGlvbiB3YXMgYWJvcnRlZC5cclxuICAgICAgICBhYm9ydFJlYXNvbjogbnVsbCxcclxuICAgICAgICBjdXJyZW50V3JpdGVJZDogbnVsbCxcclxuICAgICAgICBjdXJyZW50SW5wdXRTbmFwc2hvdDogbnVsbCxcclxuICAgICAgICBjdXJyZW50T3V0cHV0U25hcHNob3RSYXc6IG51bGwsXHJcbiAgICAgICAgY3VycmVudE91dHB1dFNuYXBzaG90UmVzb2x2ZWQ6IG51bGxcclxuICAgIH07XHJcbiAgICAvLyBSdW4gdHJhbnNhY3Rpb24gaW5pdGlhbGx5LlxyXG4gICAgdmFyIGN1cnJlbnRTdGF0ZSA9IHRoaXMuZ2V0TGF0ZXN0U3RhdGVfKHBhdGgpO1xyXG4gICAgdHJhbnNhY3Rpb24uY3VycmVudElucHV0U25hcHNob3QgPSBjdXJyZW50U3RhdGU7XHJcbiAgICB2YXIgbmV3VmFsID0gdHJhbnNhY3Rpb24udXBkYXRlKGN1cnJlbnRTdGF0ZS52YWwoKSk7XHJcbiAgICBpZiAobmV3VmFsID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAvLyBBYm9ydCB0cmFuc2FjdGlvbi5cclxuICAgICAgICB0cmFuc2FjdGlvbi51bndhdGNoZXIoKTtcclxuICAgICAgICB0cmFuc2FjdGlvbi5jdXJyZW50T3V0cHV0U25hcHNob3RSYXcgPSBudWxsO1xyXG4gICAgICAgIHRyYW5zYWN0aW9uLmN1cnJlbnRPdXRwdXRTbmFwc2hvdFJlc29sdmVkID0gbnVsbDtcclxuICAgICAgICBpZiAodHJhbnNhY3Rpb24ub25Db21wbGV0ZSkge1xyXG4gICAgICAgICAgICAvLyBXZSBqdXN0IHNldCB0aGUgaW5wdXQgc25hcHNob3QsIHNvIHRoaXMgY2FzdCBzaG91bGQgYmUgc2FmZVxyXG4gICAgICAgICAgICB2YXIgc25hcHNob3QgPSBuZXcgRGF0YVNuYXBzaG90KHRyYW5zYWN0aW9uLmN1cnJlbnRJbnB1dFNuYXBzaG90LCBuZXcgUmVmZXJlbmNlKHRoaXMsIHRyYW5zYWN0aW9uLnBhdGgpLCBQUklPUklUWV9JTkRFWCk7XHJcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uLm9uQ29tcGxldGUobnVsbCwgZmFsc2UsIHNuYXBzaG90KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB2YWxpZGF0ZUZpcmViYXNlRGF0YSgndHJhbnNhY3Rpb24gZmFpbGVkOiBEYXRhIHJldHVybmVkICcsIG5ld1ZhbCwgdHJhbnNhY3Rpb24ucGF0aCk7XHJcbiAgICAgICAgLy8gTWFyayBhcyBydW4gYW5kIGFkZCB0byBvdXIgcXVldWUuXHJcbiAgICAgICAgdHJhbnNhY3Rpb24uc3RhdHVzID0gVHJhbnNhY3Rpb25TdGF0dXMuUlVOO1xyXG4gICAgICAgIHZhciBxdWV1ZU5vZGUgPSB0aGlzLnRyYW5zYWN0aW9uUXVldWVUcmVlXy5zdWJUcmVlKHBhdGgpO1xyXG4gICAgICAgIHZhciBub2RlUXVldWUgPSBxdWV1ZU5vZGUuZ2V0VmFsdWUoKSB8fCBbXTtcclxuICAgICAgICBub2RlUXVldWUucHVzaCh0cmFuc2FjdGlvbik7XHJcbiAgICAgICAgcXVldWVOb2RlLnNldFZhbHVlKG5vZGVRdWV1ZSk7XHJcbiAgICAgICAgLy8gVXBkYXRlIHZpc2libGVEYXRhIGFuZCByYWlzZSBldmVudHNcclxuICAgICAgICAvLyBOb3RlOiBXZSBpbnRlbnRpb25hbGx5IHJhaXNlIGV2ZW50cyBhZnRlciB1cGRhdGluZyBhbGwgb2Ygb3VyIHRyYW5zYWN0aW9uIHN0YXRlLCBzaW5jZSB0aGUgdXNlciBjb3VsZFxyXG4gICAgICAgIC8vIHN0YXJ0IG5ldyB0cmFuc2FjdGlvbnMgZnJvbSB0aGUgZXZlbnQgY2FsbGJhY2tzLlxyXG4gICAgICAgIHZhciBwcmlvcml0eUZvck5vZGUgPSB2b2lkIDA7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBuZXdWYWwgPT09ICdvYmplY3QnICYmXHJcbiAgICAgICAgICAgIG5ld1ZhbCAhPT0gbnVsbCAmJlxyXG4gICAgICAgICAgICBjb250YWlucyhuZXdWYWwsICcucHJpb3JpdHknKSkge1xyXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG4gICAgICAgICAgICBwcmlvcml0eUZvck5vZGUgPSBzYWZlR2V0KG5ld1ZhbCwgJy5wcmlvcml0eScpO1xyXG4gICAgICAgICAgICBhc3NlcnQoaXNWYWxpZFByaW9yaXR5KHByaW9yaXR5Rm9yTm9kZSksICdJbnZhbGlkIHByaW9yaXR5IHJldHVybmVkIGJ5IHRyYW5zYWN0aW9uLiAnICtcclxuICAgICAgICAgICAgICAgICdQcmlvcml0eSBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nLCBmaW5pdGUgbnVtYmVyLCBzZXJ2ZXIgdmFsdWUsIG9yIG51bGwuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgY3VycmVudE5vZGUgPSB0aGlzLnNlcnZlclN5bmNUcmVlXy5jYWxjQ29tcGxldGVFdmVudENhY2hlKHBhdGgpIHx8XHJcbiAgICAgICAgICAgICAgICBDaGlsZHJlbk5vZGUuRU1QVFlfTk9ERTtcclxuICAgICAgICAgICAgcHJpb3JpdHlGb3JOb2RlID0gY3VycmVudE5vZGUuZ2V0UHJpb3JpdHkoKS52YWwoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHJpb3JpdHlGb3JOb2RlIC8qKiBAdHlwZSB7bnVsbHxudW1iZXJ8c3RyaW5nfSAqLyA9IHByaW9yaXR5Rm9yTm9kZTtcclxuICAgICAgICB2YXIgc2VydmVyVmFsdWVzID0gdGhpcy5nZW5lcmF0ZVNlcnZlclZhbHVlcygpO1xyXG4gICAgICAgIHZhciBuZXdOb2RlVW5yZXNvbHZlZCA9IG5vZGVGcm9tSlNPTiQxKG5ld1ZhbCwgcHJpb3JpdHlGb3JOb2RlKTtcclxuICAgICAgICB2YXIgbmV3Tm9kZSA9IHJlc29sdmVEZWZlcnJlZFZhbHVlU25hcHNob3QobmV3Tm9kZVVucmVzb2x2ZWQsIGN1cnJlbnRTdGF0ZSwgc2VydmVyVmFsdWVzKTtcclxuICAgICAgICB0cmFuc2FjdGlvbi5jdXJyZW50T3V0cHV0U25hcHNob3RSYXcgPSBuZXdOb2RlVW5yZXNvbHZlZDtcclxuICAgICAgICB0cmFuc2FjdGlvbi5jdXJyZW50T3V0cHV0U25hcHNob3RSZXNvbHZlZCA9IG5ld05vZGU7XHJcbiAgICAgICAgdHJhbnNhY3Rpb24uY3VycmVudFdyaXRlSWQgPSB0aGlzLmdldE5leHRXcml0ZUlkXygpO1xyXG4gICAgICAgIHZhciBldmVudHMgPSB0aGlzLnNlcnZlclN5bmNUcmVlXy5hcHBseVVzZXJPdmVyd3JpdGUocGF0aCwgbmV3Tm9kZSwgdHJhbnNhY3Rpb24uY3VycmVudFdyaXRlSWQsIHRyYW5zYWN0aW9uLmFwcGx5TG9jYWxseSk7XHJcbiAgICAgICAgdGhpcy5ldmVudFF1ZXVlXy5yYWlzZUV2ZW50c0ZvckNoYW5nZWRQYXRoKHBhdGgsIGV2ZW50cyk7XHJcbiAgICAgICAgdGhpcy5zZW5kUmVhZHlUcmFuc2FjdGlvbnNfKCk7XHJcbiAgICB9XHJcbn07XHJcbi8qKlxyXG4gKiBAcGFyYW0geyFQYXRofSBwYXRoXHJcbiAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj49fSBleGNsdWRlU2V0cyBBIHNwZWNpZmljIHNldCB0byBleGNsdWRlXHJcbiAqIEByZXR1cm4ge05vZGV9XHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG5SZXBvLnByb3RvdHlwZS5nZXRMYXRlc3RTdGF0ZV8gPSBmdW5jdGlvbiAocGF0aCwgZXhjbHVkZVNldHMpIHtcclxuICAgIHJldHVybiAodGhpcy5zZXJ2ZXJTeW5jVHJlZV8uY2FsY0NvbXBsZXRlRXZlbnRDYWNoZShwYXRoLCBleGNsdWRlU2V0cykgfHxcclxuICAgICAgICBDaGlsZHJlbk5vZGUuRU1QVFlfTk9ERSk7XHJcbn07XHJcbi8qKlxyXG4gKiBTZW5kcyBhbnkgYWxyZWFkeS1ydW4gdHJhbnNhY3Rpb25zIHRoYXQgYXJlbid0IHdhaXRpbmcgZm9yIG91dHN0YW5kaW5nIHRyYW5zYWN0aW9ucyB0b1xyXG4gKiBjb21wbGV0ZS5cclxuICpcclxuICogRXh0ZXJuYWxseSBpdCdzIGNhbGxlZCB3aXRoIG5vIGFyZ3VtZW50cywgYnV0IGl0IGNhbGxzIGl0c2VsZiByZWN1cnNpdmVseSB3aXRoIGEgcGFydGljdWxhclxyXG4gKiB0cmFuc2FjdGlvblF1ZXVlVHJlZSBub2RlIHRvIHJlY3Vyc2UgdGhyb3VnaCB0aGUgdHJlZS5cclxuICpcclxuICogQHBhcmFtIHtUcmVlLjxBcnJheS48VHJhbnNhY3Rpb24+Pj19IG5vZGUgIHRyYW5zYWN0aW9uUXVldWVUcmVlIG5vZGUgdG8gc3RhcnQgYXQuXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG5SZXBvLnByb3RvdHlwZS5zZW5kUmVhZHlUcmFuc2FjdGlvbnNfID0gZnVuY3Rpb24gKG5vZGUpIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICBpZiAobm9kZSA9PT0gdm9pZCAwKSB7IG5vZGUgPSB0aGlzLnRyYW5zYWN0aW9uUXVldWVUcmVlXzsgfVxyXG4gICAgLy8gQmVmb3JlIHJlY3Vyc2luZywgbWFrZSBzdXJlIGFueSBjb21wbGV0ZWQgdHJhbnNhY3Rpb25zIGFyZSByZW1vdmVkLlxyXG4gICAgaWYgKCFub2RlKSB7XHJcbiAgICAgICAgdGhpcy5wcnVuZUNvbXBsZXRlZFRyYW5zYWN0aW9uc0JlbG93Tm9kZV8obm9kZSk7XHJcbiAgICB9XHJcbiAgICBpZiAobm9kZS5nZXRWYWx1ZSgpICE9PSBudWxsKSB7XHJcbiAgICAgICAgdmFyIHF1ZXVlID0gdGhpcy5idWlsZFRyYW5zYWN0aW9uUXVldWVfKG5vZGUpO1xyXG4gICAgICAgIGFzc2VydChxdWV1ZS5sZW5ndGggPiAwLCAnU2VuZGluZyB6ZXJvIGxlbmd0aCB0cmFuc2FjdGlvbiBxdWV1ZScpO1xyXG4gICAgICAgIHZhciBhbGxSdW4gPSBxdWV1ZS5ldmVyeShmdW5jdGlvbiAodHJhbnNhY3Rpb24pIHsgcmV0dXJuIHRyYW5zYWN0aW9uLnN0YXR1cyA9PT0gVHJhbnNhY3Rpb25TdGF0dXMuUlVOOyB9KTtcclxuICAgICAgICAvLyBJZiB0aGV5J3JlIGFsbCBydW4gKGFuZCBub3Qgc2VudCksIHdlIGNhbiBzZW5kIHRoZW0uICBFbHNlLCB3ZSBtdXN0IHdhaXQuXHJcbiAgICAgICAgaWYgKGFsbFJ1bikge1xyXG4gICAgICAgICAgICB0aGlzLnNlbmRUcmFuc2FjdGlvblF1ZXVlXyhub2RlLnBhdGgoKSwgcXVldWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKG5vZGUuaGFzQ2hpbGRyZW4oKSkge1xyXG4gICAgICAgIG5vZGUuZm9yRWFjaENoaWxkKGZ1bmN0aW9uIChjaGlsZE5vZGUpIHtcclxuICAgICAgICAgICAgX3RoaXMuc2VuZFJlYWR5VHJhbnNhY3Rpb25zXyhjaGlsZE5vZGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59O1xyXG4vKipcclxuICogR2l2ZW4gYSBsaXN0IG9mIHJ1biB0cmFuc2FjdGlvbnMsIHNlbmQgdGhlbSB0byB0aGUgc2VydmVyIGFuZCB0aGVuIGhhbmRsZSB0aGUgcmVzdWx0IChzdWNjZXNzIG9yIGZhaWx1cmUpLlxyXG4gKlxyXG4gKiBAcGFyYW0geyFQYXRofSBwYXRoIFRoZSBsb2NhdGlvbiBvZiB0aGUgcXVldWUuXHJcbiAqIEBwYXJhbSB7IUFycmF5LjxUcmFuc2FjdGlvbj59IHF1ZXVlIFF1ZXVlIG9mIHRyYW5zYWN0aW9ucyB1bmRlciB0aGUgc3BlY2lmaWVkIGxvY2F0aW9uLlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuUmVwby5wcm90b3R5cGUuc2VuZFRyYW5zYWN0aW9uUXVldWVfID0gZnVuY3Rpb24gKHBhdGgsIHF1ZXVlKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgLy8gTWFyayB0cmFuc2FjdGlvbnMgYXMgc2VudCBhbmQgaW5jcmVtZW50IHJldHJ5IGNvdW50IVxyXG4gICAgdmFyIHNldHNUb0lnbm9yZSA9IHF1ZXVlLm1hcChmdW5jdGlvbiAodHhuKSB7XHJcbiAgICAgICAgcmV0dXJuIHR4bi5jdXJyZW50V3JpdGVJZDtcclxuICAgIH0pO1xyXG4gICAgdmFyIGxhdGVzdFN0YXRlID0gdGhpcy5nZXRMYXRlc3RTdGF0ZV8ocGF0aCwgc2V0c1RvSWdub3JlKTtcclxuICAgIHZhciBzbmFwVG9TZW5kID0gbGF0ZXN0U3RhdGU7XHJcbiAgICB2YXIgbGF0ZXN0SGFzaCA9IGxhdGVzdFN0YXRlLmhhc2goKTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2YXIgdHhuID0gcXVldWVbaV07XHJcbiAgICAgICAgYXNzZXJ0KHR4bi5zdGF0dXMgPT09IFRyYW5zYWN0aW9uU3RhdHVzLlJVTiwgJ3RyeVRvU2VuZFRyYW5zYWN0aW9uUXVldWVfOiBpdGVtcyBpbiBxdWV1ZSBzaG91bGQgYWxsIGJlIHJ1bi4nKTtcclxuICAgICAgICB0eG4uc3RhdHVzID0gVHJhbnNhY3Rpb25TdGF0dXMuU0VOVDtcclxuICAgICAgICB0eG4ucmV0cnlDb3VudCsrO1xyXG4gICAgICAgIHZhciByZWxhdGl2ZVBhdGggPSBQYXRoLnJlbGF0aXZlUGF0aChwYXRoLCB0eG4ucGF0aCk7XHJcbiAgICAgICAgLy8gSWYgd2UndmUgZ290dGVuIHRvIHRoaXMgcG9pbnQsIHRoZSBvdXRwdXQgc25hcHNob3QgbXVzdCBiZSBkZWZpbmVkLlxyXG4gICAgICAgIHNuYXBUb1NlbmQgPSBzbmFwVG9TZW5kLnVwZGF0ZUNoaWxkKHJlbGF0aXZlUGF0aCAvKiogQHR5cGUgeyFOb2RlfSAqLywgdHhuLmN1cnJlbnRPdXRwdXRTbmFwc2hvdFJhdyk7XHJcbiAgICB9XHJcbiAgICB2YXIgZGF0YVRvU2VuZCA9IHNuYXBUb1NlbmQudmFsKHRydWUpO1xyXG4gICAgdmFyIHBhdGhUb1NlbmQgPSBwYXRoO1xyXG4gICAgLy8gU2VuZCB0aGUgcHV0LlxyXG4gICAgdGhpcy5zZXJ2ZXJfLnB1dChwYXRoVG9TZW5kLnRvU3RyaW5nKCksIGRhdGFUb1NlbmQsIGZ1bmN0aW9uIChzdGF0dXMpIHtcclxuICAgICAgICBfdGhpcy5sb2dfKCd0cmFuc2FjdGlvbiBwdXQgcmVzcG9uc2UnLCB7XHJcbiAgICAgICAgICAgIHBhdGg6IHBhdGhUb1NlbmQudG9TdHJpbmcoKSxcclxuICAgICAgICAgICAgc3RhdHVzOiBzdGF0dXNcclxuICAgICAgICB9KTtcclxuICAgICAgICB2YXIgZXZlbnRzID0gW107XHJcbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gJ29rJykge1xyXG4gICAgICAgICAgICAvLyBRdWV1ZSB1cCB0aGUgY2FsbGJhY2tzIGFuZCBmaXJlIHRoZW0gYWZ0ZXIgY2xlYW5pbmcgdXAgYWxsIG9mIG91ciB0cmFuc2FjdGlvbiBzdGF0ZSwgc2luY2VcclxuICAgICAgICAgICAgLy8gdGhlIGNhbGxiYWNrIGNvdWxkIHRyaWdnZXIgbW9yZSB0cmFuc2FjdGlvbnMgb3Igc2V0cy5cclxuICAgICAgICAgICAgdmFyIGNhbGxiYWNrcyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBxdWV1ZVtpXS5zdGF0dXMgPSBUcmFuc2FjdGlvblN0YXR1cy5DT01QTEVURUQ7XHJcbiAgICAgICAgICAgICAgICBldmVudHMgPSBldmVudHMuY29uY2F0KF90aGlzLnNlcnZlclN5bmNUcmVlXy5hY2tVc2VyV3JpdGUocXVldWVbaV0uY3VycmVudFdyaXRlSWQpKTtcclxuICAgICAgICAgICAgICAgIGlmIChxdWV1ZVtpXS5vbkNvbXBsZXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgbmV2ZXIgdW5zZXQgdGhlIG91dHB1dCBzbmFwc2hvdCwgYW5kIGdpdmVuIHRoYXQgdGhpcyB0cmFuc2FjdGlvbiBpcyBjb21wbGV0ZSwgaXQgc2hvdWxkIGJlIHNldFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBub2RlID0gcXVldWVbaV0uY3VycmVudE91dHB1dFNuYXBzaG90UmVzb2x2ZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlZiA9IG5ldyBSZWZlcmVuY2UoX3RoaXMsIHF1ZXVlW2ldLnBhdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzbmFwc2hvdCA9IG5ldyBEYXRhU25hcHNob3Qobm9kZSwgcmVmLCBQUklPUklUWV9JTkRFWCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzLnB1c2gocXVldWVbaV0ub25Db21wbGV0ZS5iaW5kKG51bGwsIG51bGwsIHRydWUsIHNuYXBzaG90KSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBxdWV1ZVtpXS51bndhdGNoZXIoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBOb3cgcmVtb3ZlIHRoZSBjb21wbGV0ZWQgdHJhbnNhY3Rpb25zLlxyXG4gICAgICAgICAgICBfdGhpcy5wcnVuZUNvbXBsZXRlZFRyYW5zYWN0aW9uc0JlbG93Tm9kZV8oX3RoaXMudHJhbnNhY3Rpb25RdWV1ZVRyZWVfLnN1YlRyZWUocGF0aCkpO1xyXG4gICAgICAgICAgICAvLyBUaGVyZSBtYXkgYmUgcGVuZGluZyB0cmFuc2FjdGlvbnMgdGhhdCB3ZSBjYW4gbm93IHNlbmQuXHJcbiAgICAgICAgICAgIF90aGlzLnNlbmRSZWFkeVRyYW5zYWN0aW9uc18oKTtcclxuICAgICAgICAgICAgX3RoaXMuZXZlbnRRdWV1ZV8ucmFpc2VFdmVudHNGb3JDaGFuZ2VkUGF0aChwYXRoLCBldmVudHMpO1xyXG4gICAgICAgICAgICAvLyBGaW5hbGx5LCB0cmlnZ2VyIG9uQ29tcGxldGUgY2FsbGJhY2tzLlxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgZXhjZXB0aW9uR3VhcmQoY2FsbGJhY2tzW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gdHJhbnNhY3Rpb25zIGFyZSBubyBsb25nZXIgc2VudC4gIFVwZGF0ZSB0aGVpciBzdGF0dXMgYXBwcm9wcmlhdGVseS5cclxuICAgICAgICAgICAgaWYgKHN0YXR1cyA9PT0gJ2RhdGFzdGFsZScpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocXVldWVbaV0uc3RhdHVzID09PSBUcmFuc2FjdGlvblN0YXR1cy5TRU5UX05FRURTX0FCT1JUKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXVlW2ldLnN0YXR1cyA9IFRyYW5zYWN0aW9uU3RhdHVzLk5FRURTX0FCT1JUO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcXVldWVbaV0uc3RhdHVzID0gVHJhbnNhY3Rpb25TdGF0dXMuUlVOO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oJ3RyYW5zYWN0aW9uIGF0ICcgKyBwYXRoVG9TZW5kLnRvU3RyaW5nKCkgKyAnIGZhaWxlZDogJyArIHN0YXR1cyk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcXVldWVbaV0uc3RhdHVzID0gVHJhbnNhY3Rpb25TdGF0dXMuTkVFRFNfQUJPUlQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcXVldWVbaV0uYWJvcnRSZWFzb24gPSBzdGF0dXM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgX3RoaXMucmVydW5UcmFuc2FjdGlvbnNfKHBhdGgpO1xyXG4gICAgICAgIH1cclxuICAgIH0sIGxhdGVzdEhhc2gpO1xyXG59O1xyXG4vKipcclxuICogRmluZHMgYWxsIHRyYW5zYWN0aW9ucyBkZXBlbmRlbnQgb24gdGhlIGRhdGEgYXQgY2hhbmdlZFBhdGggYW5kIHJlcnVucyB0aGVtLlxyXG4gKlxyXG4gKiBTaG91bGQgYmUgY2FsbGVkIGFueSB0aW1lIGNhY2hlZCBkYXRhIGNoYW5nZXMuXHJcbiAqXHJcbiAqIFJldHVybiB0aGUgaGlnaGVzdCBwYXRoIHRoYXQgd2FzIGFmZmVjdGVkIGJ5IHJlcnVubmluZyB0cmFuc2FjdGlvbnMuICBUaGlzIGlzIHRoZSBwYXRoIGF0IHdoaWNoIGV2ZW50cyBuZWVkIHRvXHJcbiAqIGJlIHJhaXNlZCBmb3IuXHJcbiAqXHJcbiAqIEBwYXJhbSB7IVBhdGh9IGNoYW5nZWRQYXRoIFRoZSBwYXRoIGluIG1lcmdlZERhdGEgdGhhdCBjaGFuZ2VkLlxyXG4gKiBAcmV0dXJuIHshUGF0aH0gVGhlIHJvb3Rtb3N0IHBhdGggdGhhdCB3YXMgYWZmZWN0ZWQgYnkgcmVydW5uaW5nIHRyYW5zYWN0aW9ucy5cclxuICogQHByaXZhdGVcclxuICovXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcblJlcG8ucHJvdG90eXBlLnJlcnVuVHJhbnNhY3Rpb25zXyA9IGZ1bmN0aW9uIChjaGFuZ2VkUGF0aCkge1xyXG4gICAgdmFyIHJvb3RNb3N0VHJhbnNhY3Rpb25Ob2RlID0gdGhpcy5nZXRBbmNlc3RvclRyYW5zYWN0aW9uTm9kZV8oY2hhbmdlZFBhdGgpO1xyXG4gICAgdmFyIHBhdGggPSByb290TW9zdFRyYW5zYWN0aW9uTm9kZS5wYXRoKCk7XHJcbiAgICB2YXIgcXVldWUgPSB0aGlzLmJ1aWxkVHJhbnNhY3Rpb25RdWV1ZV8ocm9vdE1vc3RUcmFuc2FjdGlvbk5vZGUpO1xyXG4gICAgdGhpcy5yZXJ1blRyYW5zYWN0aW9uUXVldWVfKHF1ZXVlLCBwYXRoKTtcclxuICAgIHJldHVybiBwYXRoO1xyXG59O1xyXG4vKipcclxuICogRG9lcyBhbGwgdGhlIHdvcmsgb2YgcmVydW5uaW5nIHRyYW5zYWN0aW9ucyAoYXMgd2VsbCBhcyBjbGVhbnMgdXAgYWJvcnRlZCB0cmFuc2FjdGlvbnMgYW5kIHdoYXRub3QpLlxyXG4gKlxyXG4gKiBAcGFyYW0ge0FycmF5LjxUcmFuc2FjdGlvbj59IHF1ZXVlIFRoZSBxdWV1ZSBvZiB0cmFuc2FjdGlvbnMgdG8gcnVuLlxyXG4gKiBAcGFyYW0geyFQYXRofSBwYXRoIFRoZSBwYXRoIHRoZSBxdWV1ZSBpcyBmb3IuXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG5SZXBvLnByb3RvdHlwZS5yZXJ1blRyYW5zYWN0aW9uUXVldWVfID0gZnVuY3Rpb24gKHF1ZXVlLCBwYXRoKSB7XHJcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuOyAvLyBOb3RoaW5nIHRvIGRvIVxyXG4gICAgfVxyXG4gICAgLy8gUXVldWUgdXAgdGhlIGNhbGxiYWNrcyBhbmQgZmlyZSB0aGVtIGFmdGVyIGNsZWFuaW5nIHVwIGFsbCBvZiBvdXIgdHJhbnNhY3Rpb24gc3RhdGUsIHNpbmNlXHJcbiAgICAvLyB0aGUgY2FsbGJhY2sgY291bGQgdHJpZ2dlciBtb3JlIHRyYW5zYWN0aW9ucyBvciBzZXRzLlxyXG4gICAgdmFyIGNhbGxiYWNrcyA9IFtdO1xyXG4gICAgdmFyIGV2ZW50cyA9IFtdO1xyXG4gICAgLy8gSWdub3JlIGFsbCBvZiB0aGUgc2V0cyB3ZSdyZSBnb2luZyB0byByZS1ydW4uXHJcbiAgICB2YXIgdHhuc1RvUmVydW4gPSBxdWV1ZS5maWx0ZXIoZnVuY3Rpb24gKHEpIHtcclxuICAgICAgICByZXR1cm4gcS5zdGF0dXMgPT09IFRyYW5zYWN0aW9uU3RhdHVzLlJVTjtcclxuICAgIH0pO1xyXG4gICAgdmFyIHNldHNUb0lnbm9yZSA9IHR4bnNUb1JlcnVuLm1hcChmdW5jdGlvbiAocSkge1xyXG4gICAgICAgIHJldHVybiBxLmN1cnJlbnRXcml0ZUlkO1xyXG4gICAgfSk7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmFyIHRyYW5zYWN0aW9uID0gcXVldWVbaV07XHJcbiAgICAgICAgdmFyIHJlbGF0aXZlUGF0aCA9IFBhdGgucmVsYXRpdmVQYXRoKHBhdGgsIHRyYW5zYWN0aW9uLnBhdGgpO1xyXG4gICAgICAgIHZhciBhYm9ydFRyYW5zYWN0aW9uID0gZmFsc2UsIGFib3J0UmVhc29uID0gdm9pZCAwO1xyXG4gICAgICAgIGFzc2VydChyZWxhdGl2ZVBhdGggIT09IG51bGwsICdyZXJ1blRyYW5zYWN0aW9uc1VuZGVyTm9kZV86IHJlbGF0aXZlUGF0aCBzaG91bGQgbm90IGJlIG51bGwuJyk7XHJcbiAgICAgICAgaWYgKHRyYW5zYWN0aW9uLnN0YXR1cyA9PT0gVHJhbnNhY3Rpb25TdGF0dXMuTkVFRFNfQUJPUlQpIHtcclxuICAgICAgICAgICAgYWJvcnRUcmFuc2FjdGlvbiA9IHRydWU7XHJcbiAgICAgICAgICAgIGFib3J0UmVhc29uID0gdHJhbnNhY3Rpb24uYWJvcnRSZWFzb247XHJcbiAgICAgICAgICAgIGV2ZW50cyA9IGV2ZW50cy5jb25jYXQodGhpcy5zZXJ2ZXJTeW5jVHJlZV8uYWNrVXNlcldyaXRlKHRyYW5zYWN0aW9uLmN1cnJlbnRXcml0ZUlkLCB0cnVlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRyYW5zYWN0aW9uLnN0YXR1cyA9PT0gVHJhbnNhY3Rpb25TdGF0dXMuUlVOKSB7XHJcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbiAgICAgICAgICAgIGlmICh0cmFuc2FjdGlvbi5yZXRyeUNvdW50ID49IFJlcG8uTUFYX1RSQU5TQUNUSU9OX1JFVFJJRVNfKSB7XHJcbiAgICAgICAgICAgICAgICBhYm9ydFRyYW5zYWN0aW9uID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGFib3J0UmVhc29uID0gJ21heHJldHJ5JztcclxuICAgICAgICAgICAgICAgIGV2ZW50cyA9IGV2ZW50cy5jb25jYXQodGhpcy5zZXJ2ZXJTeW5jVHJlZV8uYWNrVXNlcldyaXRlKHRyYW5zYWN0aW9uLmN1cnJlbnRXcml0ZUlkLCB0cnVlKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGNvZGUgcmVydW5zIGEgdHJhbnNhY3Rpb25cclxuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50Tm9kZSA9IHRoaXMuZ2V0TGF0ZXN0U3RhdGVfKHRyYW5zYWN0aW9uLnBhdGgsIHNldHNUb0lnbm9yZSk7XHJcbiAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbi5jdXJyZW50SW5wdXRTbmFwc2hvdCA9IGN1cnJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgdmFyIG5ld0RhdGEgPSBxdWV1ZVtpXS51cGRhdGUoY3VycmVudE5vZGUudmFsKCkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5ld0RhdGEgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlRmlyZWJhc2VEYXRhKCd0cmFuc2FjdGlvbiBmYWlsZWQ6IERhdGEgcmV0dXJuZWQgJywgbmV3RGF0YSwgdHJhbnNhY3Rpb24ucGF0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0RhdGFOb2RlID0gbm9kZUZyb21KU09OJDEobmV3RGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhc0V4cGxpY2l0UHJpb3JpdHkgPSB0eXBlb2YgbmV3RGF0YSA9PT0gJ29iamVjdCcgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3RGF0YSAhPSBudWxsICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5zKG5ld0RhdGEsICcucHJpb3JpdHknKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc0V4cGxpY2l0UHJpb3JpdHkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gS2VlcCB0aGUgb2xkIHByaW9yaXR5IGlmIHRoZXJlIHdhc24ndCBhIHByaW9yaXR5IGV4cGxpY2l0bHkgc3BlY2lmaWVkLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdEYXRhTm9kZSA9IG5ld0RhdGFOb2RlLnVwZGF0ZVByaW9yaXR5KGN1cnJlbnROb2RlLmdldFByaW9yaXR5KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YXIgb2xkV3JpdGVJZCA9IHRyYW5zYWN0aW9uLmN1cnJlbnRXcml0ZUlkO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzZXJ2ZXJWYWx1ZXMgPSB0aGlzLmdlbmVyYXRlU2VydmVyVmFsdWVzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld05vZGVSZXNvbHZlZCA9IHJlc29sdmVEZWZlcnJlZFZhbHVlU25hcHNob3QobmV3RGF0YU5vZGUsIGN1cnJlbnROb2RlLCBzZXJ2ZXJWYWx1ZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uLmN1cnJlbnRPdXRwdXRTbmFwc2hvdFJhdyA9IG5ld0RhdGFOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uLmN1cnJlbnRPdXRwdXRTbmFwc2hvdFJlc29sdmVkID0gbmV3Tm9kZVJlc29sdmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uLmN1cnJlbnRXcml0ZUlkID0gdGhpcy5nZXROZXh0V3JpdGVJZF8oKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBNdXRhdGVzIHNldHNUb0lnbm9yZSBpbiBwbGFjZVxyXG4gICAgICAgICAgICAgICAgICAgIHNldHNUb0lnbm9yZS5zcGxpY2Uoc2V0c1RvSWdub3JlLmluZGV4T2Yob2xkV3JpdGVJZCksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50cyA9IGV2ZW50cy5jb25jYXQodGhpcy5zZXJ2ZXJTeW5jVHJlZV8uYXBwbHlVc2VyT3ZlcndyaXRlKHRyYW5zYWN0aW9uLnBhdGgsIG5ld05vZGVSZXNvbHZlZCwgdHJhbnNhY3Rpb24uY3VycmVudFdyaXRlSWQsIHRyYW5zYWN0aW9uLmFwcGx5TG9jYWxseSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50cyA9IGV2ZW50cy5jb25jYXQodGhpcy5zZXJ2ZXJTeW5jVHJlZV8uYWNrVXNlcldyaXRlKG9sZFdyaXRlSWQsIHRydWUpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGFib3J0VHJhbnNhY3Rpb24gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGFib3J0UmVhc29uID0gJ25vZGF0YSc7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRzID0gZXZlbnRzLmNvbmNhdCh0aGlzLnNlcnZlclN5bmNUcmVlXy5hY2tVc2VyV3JpdGUodHJhbnNhY3Rpb24uY3VycmVudFdyaXRlSWQsIHRydWUpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmV2ZW50UXVldWVfLnJhaXNlRXZlbnRzRm9yQ2hhbmdlZFBhdGgocGF0aCwgZXZlbnRzKTtcclxuICAgICAgICBldmVudHMgPSBbXTtcclxuICAgICAgICBpZiAoYWJvcnRUcmFuc2FjdGlvbikge1xyXG4gICAgICAgICAgICAvLyBBYm9ydC5cclxuICAgICAgICAgICAgcXVldWVbaV0uc3RhdHVzID0gVHJhbnNhY3Rpb25TdGF0dXMuQ09NUExFVEVEO1xyXG4gICAgICAgICAgICAvLyBSZW1vdmluZyBhIGxpc3RlbmVyIGNhbiB0cmlnZ2VyIHBydW5pbmcgd2hpY2ggY2FuIG11Y2sgd2l0aCBtZXJnZWREYXRhL3Zpc2libGVEYXRhIChhcyBpdCBwcnVuZXMgZGF0YSkuXHJcbiAgICAgICAgICAgIC8vIFNvIGRlZmVyIHRoZSB1bndhdGNoZXIgdW50aWwgd2UncmUgZG9uZS5cclxuICAgICAgICAgICAgKGZ1bmN0aW9uICh1bndhdGNoZXIpIHtcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQodW53YXRjaGVyLCBNYXRoLmZsb29yKDApKTtcclxuICAgICAgICAgICAgfSkocXVldWVbaV0udW53YXRjaGVyKTtcclxuICAgICAgICAgICAgaWYgKHF1ZXVlW2ldLm9uQ29tcGxldGUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhYm9ydFJlYXNvbiA9PT0gJ25vZGF0YScpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVmID0gbmV3IFJlZmVyZW5jZSh0aGlzLCBxdWV1ZVtpXS5wYXRoKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBXZSBzZXQgdGhpcyBmaWVsZCBpbW1lZGlhdGVseSwgc28gaXQncyBzYWZlIHRvIGNhc3QgdG8gYW4gYWN0dWFsIHNuYXBzaG90XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxhc3RJbnB1dCAvKiogQHR5cGUgeyFOb2RlfSAqLyA9IHF1ZXVlW2ldLmN1cnJlbnRJbnB1dFNuYXBzaG90O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzbmFwc2hvdCA9IG5ldyBEYXRhU25hcHNob3QobGFzdElucHV0LCByZWYsIFBSSU9SSVRZX0lOREVYKTtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFja3MucHVzaChxdWV1ZVtpXS5vbkNvbXBsZXRlLmJpbmQobnVsbCwgbnVsbCwgZmFsc2UsIHNuYXBzaG90KSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFja3MucHVzaChxdWV1ZVtpXS5vbkNvbXBsZXRlLmJpbmQobnVsbCwgbmV3IEVycm9yKGFib3J0UmVhc29uKSwgZmFsc2UsIG51bGwpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIENsZWFuIHVwIGNvbXBsZXRlZCB0cmFuc2FjdGlvbnMuXHJcbiAgICB0aGlzLnBydW5lQ29tcGxldGVkVHJhbnNhY3Rpb25zQmVsb3dOb2RlXyh0aGlzLnRyYW5zYWN0aW9uUXVldWVUcmVlXyk7XHJcbiAgICAvLyBOb3cgZmlyZSBjYWxsYmFja3MsIG5vdyB0aGF0IHdlJ3JlIGluIGEgZ29vZCwga25vd24gc3RhdGUuXHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGV4Y2VwdGlvbkd1YXJkKGNhbGxiYWNrc1tpXSk7XHJcbiAgICB9XHJcbiAgICAvLyBUcnkgdG8gc2VuZCB0aGUgdHJhbnNhY3Rpb24gcmVzdWx0IHRvIHRoZSBzZXJ2ZXIuXHJcbiAgICB0aGlzLnNlbmRSZWFkeVRyYW5zYWN0aW9uc18oKTtcclxufTtcclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIHJvb3Rtb3N0IGFuY2VzdG9yIG5vZGUgb2YgdGhlIHNwZWNpZmllZCBwYXRoIHRoYXQgaGFzIGEgcGVuZGluZyB0cmFuc2FjdGlvbiBvbiBpdCwgb3IganVzdCByZXR1cm5zXHJcbiAqIHRoZSBub2RlIGZvciB0aGUgZ2l2ZW4gcGF0aCBpZiB0aGVyZSBhcmUgbm8gcGVuZGluZyB0cmFuc2FjdGlvbnMgb24gYW55IGFuY2VzdG9yLlxyXG4gKlxyXG4gKiBAcGFyYW0geyFQYXRofSBwYXRoIFRoZSBsb2NhdGlvbiB0byBzdGFydCBhdC5cclxuICogQHJldHVybiB7IVRyZWUuPEFycmF5LjwhVHJhbnNhY3Rpb24+Pn0gVGhlIHJvb3Rtb3N0IG5vZGUgd2l0aCBhIHRyYW5zYWN0aW9uLlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuUmVwby5wcm90b3R5cGUuZ2V0QW5jZXN0b3JUcmFuc2FjdGlvbk5vZGVfID0gZnVuY3Rpb24gKHBhdGgpIHtcclxuICAgIHZhciBmcm9udDtcclxuICAgIC8vIFN0YXJ0IGF0IHRoZSByb290IGFuZCB3YWxrIGRlZXBlciBpbnRvIHRoZSB0cmVlIHRvd2FyZHMgcGF0aCB1bnRpbCB3ZSBmaW5kIGEgbm9kZSB3aXRoIHBlbmRpbmcgdHJhbnNhY3Rpb25zLlxyXG4gICAgdmFyIHRyYW5zYWN0aW9uTm9kZSA9IHRoaXMudHJhbnNhY3Rpb25RdWV1ZVRyZWVfO1xyXG4gICAgZnJvbnQgPSBwYXRoLmdldEZyb250KCk7XHJcbiAgICB3aGlsZSAoZnJvbnQgIT09IG51bGwgJiYgdHJhbnNhY3Rpb25Ob2RlLmdldFZhbHVlKCkgPT09IG51bGwpIHtcclxuICAgICAgICB0cmFuc2FjdGlvbk5vZGUgPSB0cmFuc2FjdGlvbk5vZGUuc3ViVHJlZShmcm9udCk7XHJcbiAgICAgICAgcGF0aCA9IHBhdGgucG9wRnJvbnQoKTtcclxuICAgICAgICBmcm9udCA9IHBhdGguZ2V0RnJvbnQoKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cmFuc2FjdGlvbk5vZGU7XHJcbn07XHJcbi8qKlxyXG4gKiBCdWlsZHMgdGhlIHF1ZXVlIG9mIGFsbCB0cmFuc2FjdGlvbnMgYXQgb3IgYmVsb3cgdGhlIHNwZWNpZmllZCB0cmFuc2FjdGlvbk5vZGUuXHJcbiAqXHJcbiAqIEBwYXJhbSB7IVRyZWUuPEFycmF5LjxUcmFuc2FjdGlvbj4+fSB0cmFuc2FjdGlvbk5vZGVcclxuICogQHJldHVybiB7QXJyYXkuPFRyYW5zYWN0aW9uPn0gVGhlIGdlbmVyYXRlZCBxdWV1ZS5cclxuICogQHByaXZhdGVcclxuICovXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcblJlcG8ucHJvdG90eXBlLmJ1aWxkVHJhbnNhY3Rpb25RdWV1ZV8gPSBmdW5jdGlvbiAodHJhbnNhY3Rpb25Ob2RlKSB7XHJcbiAgICAvLyBXYWxrIGFueSBjaGlsZCB0cmFuc2FjdGlvbiBxdWV1ZXMgYW5kIGFnZ3JlZ2F0ZSB0aGVtIGludG8gYSBzaW5nbGUgcXVldWUuXHJcbiAgICB2YXIgdHJhbnNhY3Rpb25RdWV1ZSA9IFtdO1xyXG4gICAgdGhpcy5hZ2dyZWdhdGVUcmFuc2FjdGlvblF1ZXVlc0Zvck5vZGVfKHRyYW5zYWN0aW9uTm9kZSwgdHJhbnNhY3Rpb25RdWV1ZSk7XHJcbiAgICAvLyBTb3J0IHRoZW0gYnkgdGhlIG9yZGVyIHRoZSB0cmFuc2FjdGlvbnMgd2VyZSBjcmVhdGVkLlxyXG4gICAgdHJhbnNhY3Rpb25RdWV1ZS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgcmV0dXJuIGEub3JkZXIgLSBiLm9yZGVyO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gdHJhbnNhY3Rpb25RdWV1ZTtcclxufTtcclxuLyoqXHJcbiAqIEBwYXJhbSB7IVRyZWUuPEFycmF5LjxUcmFuc2FjdGlvbj4+fSBub2RlXHJcbiAqIEBwYXJhbSB7QXJyYXkuPFRyYW5zYWN0aW9uPn0gcXVldWVcclxuICogQHByaXZhdGVcclxuICovXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcblJlcG8ucHJvdG90eXBlLmFnZ3JlZ2F0ZVRyYW5zYWN0aW9uUXVldWVzRm9yTm9kZV8gPSBmdW5jdGlvbiAobm9kZSwgcXVldWUpIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICB2YXIgbm9kZVF1ZXVlID0gbm9kZS5nZXRWYWx1ZSgpO1xyXG4gICAgaWYgKG5vZGVRdWV1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZVF1ZXVlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHF1ZXVlLnB1c2gobm9kZVF1ZXVlW2ldKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBub2RlLmZvckVhY2hDaGlsZChmdW5jdGlvbiAoY2hpbGQpIHtcclxuICAgICAgICBfdGhpcy5hZ2dyZWdhdGVUcmFuc2FjdGlvblF1ZXVlc0Zvck5vZGVfKGNoaWxkLCBxdWV1ZSk7XHJcbiAgICB9KTtcclxufTtcclxuLyoqXHJcbiAqIFJlbW92ZSBDT01QTEVURUQgdHJhbnNhY3Rpb25zIGF0IG9yIGJlbG93IHRoaXMgbm9kZSBpbiB0aGUgdHJhbnNhY3Rpb25RdWV1ZVRyZWVfLlxyXG4gKlxyXG4gKiBAcGFyYW0geyFUcmVlLjxBcnJheS48IVRyYW5zYWN0aW9uPj59IG5vZGVcclxuICogQHByaXZhdGVcclxuICovXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcblJlcG8ucHJvdG90eXBlLnBydW5lQ29tcGxldGVkVHJhbnNhY3Rpb25zQmVsb3dOb2RlXyA9IGZ1bmN0aW9uIChub2RlKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgdmFyIHF1ZXVlID0gbm9kZS5nZXRWYWx1ZSgpO1xyXG4gICAgaWYgKHF1ZXVlKSB7XHJcbiAgICAgICAgdmFyIHRvID0gMDtcclxuICAgICAgICBmb3IgKHZhciBmcm9tID0gMDsgZnJvbSA8IHF1ZXVlLmxlbmd0aDsgZnJvbSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChxdWV1ZVtmcm9tXS5zdGF0dXMgIT09IFRyYW5zYWN0aW9uU3RhdHVzLkNPTVBMRVRFRCkge1xyXG4gICAgICAgICAgICAgICAgcXVldWVbdG9dID0gcXVldWVbZnJvbV07XHJcbiAgICAgICAgICAgICAgICB0bysrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHF1ZXVlLmxlbmd0aCA9IHRvO1xyXG4gICAgICAgIG5vZGUuc2V0VmFsdWUocXVldWUubGVuZ3RoID4gMCA/IHF1ZXVlIDogbnVsbCk7XHJcbiAgICB9XHJcbiAgICBub2RlLmZvckVhY2hDaGlsZChmdW5jdGlvbiAoY2hpbGROb2RlKSB7XHJcbiAgICAgICAgX3RoaXMucHJ1bmVDb21wbGV0ZWRUcmFuc2FjdGlvbnNCZWxvd05vZGVfKGNoaWxkTm9kZSk7XHJcbiAgICB9KTtcclxufTtcclxuLyoqXHJcbiAqIEFib3J0cyBhbGwgdHJhbnNhY3Rpb25zIG9uIGFuY2VzdG9ycyBvciBkZXNjZW5kYW50cyBvZiB0aGUgc3BlY2lmaWVkIHBhdGguICBDYWxsZWQgd2hlbiBkb2luZyBhIHNldCgpIG9yIHVwZGF0ZSgpXHJcbiAqIHNpbmNlIHdlIGNvbnNpZGVyIHRoZW0gaW5jb21wYXRpYmxlIHdpdGggdHJhbnNhY3Rpb25zLlxyXG4gKlxyXG4gKiBAcGFyYW0geyFQYXRofSBwYXRoIFBhdGggZm9yIHdoaWNoIHdlIHdhbnQgdG8gYWJvcnQgcmVsYXRlZCB0cmFuc2FjdGlvbnMuXHJcbiAqIEByZXR1cm4geyFQYXRofVxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuUmVwby5wcm90b3R5cGUuYWJvcnRUcmFuc2FjdGlvbnNfID0gZnVuY3Rpb24gKHBhdGgpIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICB2YXIgYWZmZWN0ZWRQYXRoID0gdGhpcy5nZXRBbmNlc3RvclRyYW5zYWN0aW9uTm9kZV8ocGF0aCkucGF0aCgpO1xyXG4gICAgdmFyIHRyYW5zYWN0aW9uTm9kZSA9IHRoaXMudHJhbnNhY3Rpb25RdWV1ZVRyZWVfLnN1YlRyZWUocGF0aCk7XHJcbiAgICB0cmFuc2FjdGlvbk5vZGUuZm9yRWFjaEFuY2VzdG9yKGZ1bmN0aW9uIChub2RlKSB7XHJcbiAgICAgICAgX3RoaXMuYWJvcnRUcmFuc2FjdGlvbnNPbk5vZGVfKG5vZGUpO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLmFib3J0VHJhbnNhY3Rpb25zT25Ob2RlXyh0cmFuc2FjdGlvbk5vZGUpO1xyXG4gICAgdHJhbnNhY3Rpb25Ob2RlLmZvckVhY2hEZXNjZW5kYW50KGZ1bmN0aW9uIChub2RlKSB7XHJcbiAgICAgICAgX3RoaXMuYWJvcnRUcmFuc2FjdGlvbnNPbk5vZGVfKG5vZGUpO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gYWZmZWN0ZWRQYXRoO1xyXG59O1xyXG4vKipcclxuICogQWJvcnQgdHJhbnNhY3Rpb25zIHN0b3JlZCBpbiB0aGlzIHRyYW5zYWN0aW9uIHF1ZXVlIG5vZGUuXHJcbiAqXHJcbiAqIEBwYXJhbSB7IVRyZWUuPEFycmF5LjxUcmFuc2FjdGlvbj4+fSBub2RlIE5vZGUgdG8gYWJvcnQgdHJhbnNhY3Rpb25zIGZvci5cclxuICogQHByaXZhdGVcclxuICovXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcblJlcG8ucHJvdG90eXBlLmFib3J0VHJhbnNhY3Rpb25zT25Ob2RlXyA9IGZ1bmN0aW9uIChub2RlKSB7XHJcbiAgICB2YXIgcXVldWUgPSBub2RlLmdldFZhbHVlKCk7XHJcbiAgICBpZiAocXVldWUgIT09IG51bGwpIHtcclxuICAgICAgICAvLyBRdWV1ZSB1cCB0aGUgY2FsbGJhY2tzIGFuZCBmaXJlIHRoZW0gYWZ0ZXIgY2xlYW5pbmcgdXAgYWxsIG9mIG91ciB0cmFuc2FjdGlvbiBzdGF0ZSwgc2luY2VcclxuICAgICAgICAvLyB0aGUgY2FsbGJhY2sgY291bGQgdHJpZ2dlciBtb3JlIHRyYW5zYWN0aW9ucyBvciBzZXRzLlxyXG4gICAgICAgIHZhciBjYWxsYmFja3MgPSBbXTtcclxuICAgICAgICAvLyBHbyB0aHJvdWdoIHF1ZXVlLiAgQW55IGFscmVhZHktc2VudCB0cmFuc2FjdGlvbnMgbXVzdCBiZSBtYXJrZWQgZm9yIGFib3J0LCB3aGlsZSB0aGUgdW5zZW50IG9uZXNcclxuICAgICAgICAvLyBjYW4gYmUgaW1tZWRpYXRlbHkgYWJvcnRlZCBhbmQgcmVtb3ZlZC5cclxuICAgICAgICB2YXIgZXZlbnRzID0gW107XHJcbiAgICAgICAgdmFyIGxhc3RTZW50ID0gLTE7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAocXVldWVbaV0uc3RhdHVzID09PSBUcmFuc2FjdGlvblN0YXR1cy5TRU5UX05FRURTX0FCT1JUKSA7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHF1ZXVlW2ldLnN0YXR1cyA9PT0gVHJhbnNhY3Rpb25TdGF0dXMuU0VOVCkge1xyXG4gICAgICAgICAgICAgICAgYXNzZXJ0KGxhc3RTZW50ID09PSBpIC0gMSwgJ0FsbCBTRU5UIGl0ZW1zIHNob3VsZCBiZSBhdCBiZWdpbm5pbmcgb2YgcXVldWUuJyk7XHJcbiAgICAgICAgICAgICAgICBsYXN0U2VudCA9IGk7XHJcbiAgICAgICAgICAgICAgICAvLyBNYXJrIHRyYW5zYWN0aW9uIGZvciBhYm9ydCB3aGVuIGl0IGNvbWVzIGJhY2suXHJcbiAgICAgICAgICAgICAgICBxdWV1ZVtpXS5zdGF0dXMgPSBUcmFuc2FjdGlvblN0YXR1cy5TRU5UX05FRURTX0FCT1JUO1xyXG4gICAgICAgICAgICAgICAgcXVldWVbaV0uYWJvcnRSZWFzb24gPSAnc2V0JztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGFzc2VydChxdWV1ZVtpXS5zdGF0dXMgPT09IFRyYW5zYWN0aW9uU3RhdHVzLlJVTiwgJ1VuZXhwZWN0ZWQgdHJhbnNhY3Rpb24gc3RhdHVzIGluIGFib3J0Jyk7XHJcbiAgICAgICAgICAgICAgICAvLyBXZSBjYW4gYWJvcnQgaXQgaW1tZWRpYXRlbHkuXHJcbiAgICAgICAgICAgICAgICBxdWV1ZVtpXS51bndhdGNoZXIoKTtcclxuICAgICAgICAgICAgICAgIGV2ZW50cyA9IGV2ZW50cy5jb25jYXQodGhpcy5zZXJ2ZXJTeW5jVHJlZV8uYWNrVXNlcldyaXRlKHF1ZXVlW2ldLmN1cnJlbnRXcml0ZUlkLCB0cnVlKSk7XHJcbiAgICAgICAgICAgICAgICBpZiAocXVldWVbaV0ub25Db21wbGV0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzbmFwc2hvdCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzLnB1c2gocXVldWVbaV0ub25Db21wbGV0ZS5iaW5kKG51bGwsIG5ldyBFcnJvcignc2V0JyksIGZhbHNlLCBzbmFwc2hvdCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsYXN0U2VudCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgLy8gV2UncmUgbm90IHdhaXRpbmcgZm9yIGFueSBzZW50IHRyYW5zYWN0aW9ucy4gIFdlIGNhbiBjbGVhciB0aGUgcXVldWUuXHJcbiAgICAgICAgICAgIG5vZGUuc2V0VmFsdWUobnVsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBSZW1vdmUgdGhlIHRyYW5zYWN0aW9ucyB3ZSBhYm9ydGVkLlxyXG4gICAgICAgICAgICBxdWV1ZS5sZW5ndGggPSBsYXN0U2VudCArIDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIE5vdyBmaXJlIHRoZSBjYWxsYmFja3MuXHJcbiAgICAgICAgdGhpcy5ldmVudFF1ZXVlXy5yYWlzZUV2ZW50c0ZvckNoYW5nZWRQYXRoKG5vZGUucGF0aCgpLCBldmVudHMpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGV4Y2VwdGlvbkd1YXJkKGNhbGxiYWNrc1tpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59O1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQWJzdHJhY3Rpb24gYXJvdW5kIEZpcmViYXNlQXBwJ3MgdG9rZW4gZmV0Y2hpbmcgY2FwYWJpbGl0aWVzLlxyXG4gKi9cclxudmFyIEZpcmViYXNlQXV0aFRva2VuUHJvdmlkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBGaXJlYmFzZUF1dGhUb2tlblByb3ZpZGVyKGFwcF8sIGF1dGhQcm92aWRlcl8pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuYXBwXyA9IGFwcF87XHJcbiAgICAgICAgdGhpcy5hdXRoUHJvdmlkZXJfID0gYXV0aFByb3ZpZGVyXztcclxuICAgICAgICB0aGlzLmF1dGhfID0gbnVsbDtcclxuICAgICAgICB0aGlzLmF1dGhfID0gYXV0aFByb3ZpZGVyXy5nZXRJbW1lZGlhdGUoeyBvcHRpb25hbDogdHJ1ZSB9KTtcclxuICAgICAgICBpZiAoIXRoaXMuYXV0aF8pIHtcclxuICAgICAgICAgICAgYXV0aFByb3ZpZGVyXy5nZXQoKS50aGVuKGZ1bmN0aW9uIChhdXRoKSB7IHJldHVybiAoX3RoaXMuYXV0aF8gPSBhdXRoKTsgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGZvcmNlUmVmcmVzaFxyXG4gICAgICogQHJldHVybiB7IVByb21pc2U8RmlyZWJhc2VBdXRoVG9rZW5EYXRhPn1cclxuICAgICAqL1xyXG4gICAgRmlyZWJhc2VBdXRoVG9rZW5Qcm92aWRlci5wcm90b3R5cGUuZ2V0VG9rZW4gPSBmdW5jdGlvbiAoZm9yY2VSZWZyZXNoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmF1dGhfKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmF1dGhfLmdldFRva2VuKGZvcmNlUmVmcmVzaCkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgIC8vIFRPRE86IE5lZWQgdG8gZmlndXJlIG91dCBhbGwgdGhlIGNhc2VzIHRoaXMgaXMgcmFpc2VkIGFuZCB3aGV0aGVyXHJcbiAgICAgICAgICAgIC8vIHRoaXMgbWFrZXMgc2Vuc2UuXHJcbiAgICAgICAgICAgIGlmIChlcnJvciAmJiBlcnJvci5jb2RlID09PSAnYXV0aC90b2tlbi1ub3QtaW5pdGlhbGl6ZWQnKSB7XHJcbiAgICAgICAgICAgICAgICBsb2coJ0dvdCBhdXRoL3Rva2VuLW5vdC1pbml0aWFsaXplZCBlcnJvci4gIFRyZWF0aW5nIGFzIG51bGwgdG9rZW4uJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBGaXJlYmFzZUF1dGhUb2tlblByb3ZpZGVyLnByb3RvdHlwZS5hZGRUb2tlbkNoYW5nZUxpc3RlbmVyID0gZnVuY3Rpb24gKGxpc3RlbmVyKSB7XHJcbiAgICAgICAgLy8gVE9ETzogV2UgbWlnaHQgd2FudCB0byB3cmFwIHRoZSBsaXN0ZW5lciBhbmQgY2FsbCBpdCB3aXRoIG5vIGFyZ3MgdG9cclxuICAgICAgICAvLyBhdm9pZCBhIGxlYWt5IGFic3RyYWN0aW9uLCBidXQgdGhhdCBtYWtlcyByZW1vdmluZyB0aGUgbGlzdGVuZXIgaGFyZGVyLlxyXG4gICAgICAgIGlmICh0aGlzLmF1dGhfKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXV0aF8uYWRkQXV0aFRva2VuTGlzdGVuZXIobGlzdGVuZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBsaXN0ZW5lcihudWxsKTsgfSwgMCk7XHJcbiAgICAgICAgICAgIHRoaXMuYXV0aFByb3ZpZGVyX1xyXG4gICAgICAgICAgICAgICAgLmdldCgpXHJcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoYXV0aCkgeyByZXR1cm4gYXV0aC5hZGRBdXRoVG9rZW5MaXN0ZW5lcihsaXN0ZW5lcik7IH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBGaXJlYmFzZUF1dGhUb2tlblByb3ZpZGVyLnByb3RvdHlwZS5yZW1vdmVUb2tlbkNoYW5nZUxpc3RlbmVyID0gZnVuY3Rpb24gKGxpc3RlbmVyKSB7XHJcbiAgICAgICAgdGhpcy5hdXRoUHJvdmlkZXJfXHJcbiAgICAgICAgICAgIC5nZXQoKVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoYXV0aCkgeyByZXR1cm4gYXV0aC5yZW1vdmVBdXRoVG9rZW5MaXN0ZW5lcihsaXN0ZW5lcik7IH0pO1xyXG4gICAgfTtcclxuICAgIEZpcmViYXNlQXV0aFRva2VuUHJvdmlkZXIucHJvdG90eXBlLm5vdGlmeUZvckludmFsaWRUb2tlbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gJ1Byb3ZpZGVkIGF1dGhlbnRpY2F0aW9uIGNyZWRlbnRpYWxzIGZvciB0aGUgYXBwIG5hbWVkIFwiJyArXHJcbiAgICAgICAgICAgIHRoaXMuYXBwXy5uYW1lICtcclxuICAgICAgICAgICAgJ1wiIGFyZSBpbnZhbGlkLiBUaGlzIHVzdWFsbHkgaW5kaWNhdGVzIHlvdXIgYXBwIHdhcyBub3QgJyArXHJcbiAgICAgICAgICAgICdpbml0aWFsaXplZCBjb3JyZWN0bHkuICc7XHJcbiAgICAgICAgaWYgKCdjcmVkZW50aWFsJyBpbiB0aGlzLmFwcF8ub3B0aW9ucykge1xyXG4gICAgICAgICAgICBlcnJvck1lc3NhZ2UgKz1cclxuICAgICAgICAgICAgICAgICdNYWtlIHN1cmUgdGhlIFwiY3JlZGVudGlhbFwiIHByb3BlcnR5IHByb3ZpZGVkIHRvIGluaXRpYWxpemVBcHAoKSAnICtcclxuICAgICAgICAgICAgICAgICAgICAnaXMgYXV0aG9yaXplZCB0byBhY2Nlc3MgdGhlIHNwZWNpZmllZCBcImRhdGFiYXNlVVJMXCIgYW5kIGlzIGZyb20gdGhlIGNvcnJlY3QgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgJ3Byb2plY3QuJztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoJ3NlcnZpY2VBY2NvdW50JyBpbiB0aGlzLmFwcF8ub3B0aW9ucykge1xyXG4gICAgICAgICAgICBlcnJvck1lc3NhZ2UgKz1cclxuICAgICAgICAgICAgICAgICdNYWtlIHN1cmUgdGhlIFwic2VydmljZUFjY291bnRcIiBwcm9wZXJ0eSBwcm92aWRlZCB0byBpbml0aWFsaXplQXBwKCkgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgJ2lzIGF1dGhvcml6ZWQgdG8gYWNjZXNzIHRoZSBzcGVjaWZpZWQgXCJkYXRhYmFzZVVSTFwiIGFuZCBpcyBmcm9tIHRoZSBjb3JyZWN0ICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICdwcm9qZWN0Lic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBlcnJvck1lc3NhZ2UgKz1cclxuICAgICAgICAgICAgICAgICdNYWtlIHN1cmUgdGhlIFwiYXBpS2V5XCIgYW5kIFwiZGF0YWJhc2VVUkxcIiBwcm9wZXJ0aWVzIHByb3ZpZGVkIHRvICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICdpbml0aWFsaXplQXBwKCkgbWF0Y2ggdGhlIHZhbHVlcyBwcm92aWRlZCBmb3IgeW91ciBhcHAgYXQgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgJ2h0dHBzOi8vY29uc29sZS5maXJlYmFzZS5nb29nbGUuY29tLy4nO1xyXG4gICAgICAgIH1cclxuICAgICAgICB3YXJuKGVycm9yTWVzc2FnZSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEZpcmViYXNlQXV0aFRva2VuUHJvdmlkZXI7XHJcbn0oKSk7XHJcbi8qIEF1dGggdG9rZW4gcHJvdmlkZXIgdGhhdCB0aGUgQWRtaW4gU0RLIHVzZXMgdG8gY29ubmVjdCB0byB0aGUgRW11bGF0b3IuICovXHJcbnZhciBFbXVsYXRvckFkbWluVG9rZW5Qcm92aWRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEVtdWxhdG9yQWRtaW5Ub2tlblByb3ZpZGVyKCkge1xyXG4gICAgfVxyXG4gICAgRW11bGF0b3JBZG1pblRva2VuUHJvdmlkZXIucHJvdG90eXBlLmdldFRva2VuID0gZnVuY3Rpb24gKGZvcmNlUmVmcmVzaCkge1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe1xyXG4gICAgICAgICAgICBhY2Nlc3NUb2tlbjogRW11bGF0b3JBZG1pblRva2VuUHJvdmlkZXIuRU1VTEFUT1JfQVVUSF9UT0tFTlxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEVtdWxhdG9yQWRtaW5Ub2tlblByb3ZpZGVyLnByb3RvdHlwZS5hZGRUb2tlbkNoYW5nZUxpc3RlbmVyID0gZnVuY3Rpb24gKGxpc3RlbmVyKSB7XHJcbiAgICAgICAgLy8gSW52b2tlIHRoZSBsaXN0ZW5lciBpbW1lZGlhdGVseSB0byBtYXRjaCB0aGUgYmVoYXZpb3IgaW4gRmlyZWJhc2UgQXV0aFxyXG4gICAgICAgIC8vIChzZWUgcGFja2FnZXMvYXV0aC9zcmMvYXV0aC5qcyNMMTgwNylcclxuICAgICAgICBsaXN0ZW5lcihFbXVsYXRvckFkbWluVG9rZW5Qcm92aWRlci5FTVVMQVRPUl9BVVRIX1RPS0VOKTtcclxuICAgIH07XHJcbiAgICBFbXVsYXRvckFkbWluVG9rZW5Qcm92aWRlci5wcm90b3R5cGUucmVtb3ZlVG9rZW5DaGFuZ2VMaXN0ZW5lciA9IGZ1bmN0aW9uIChsaXN0ZW5lcikgeyB9O1xyXG4gICAgRW11bGF0b3JBZG1pblRva2VuUHJvdmlkZXIucHJvdG90eXBlLm5vdGlmeUZvckludmFsaWRUb2tlbiA9IGZ1bmN0aW9uICgpIHsgfTtcclxuICAgIEVtdWxhdG9yQWRtaW5Ub2tlblByb3ZpZGVyLkVNVUxBVE9SX0FVVEhfVE9LRU4gPSAnb3duZXInO1xyXG4gICAgcmV0dXJuIEVtdWxhdG9yQWRtaW5Ub2tlblByb3ZpZGVyO1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogVGhpcyB2YXJpYWJsZSBpcyBhbHNvIGRlZmluZWQgaW4gdGhlIGZpcmViYXNlIG5vZGUuanMgYWRtaW4gU0RLLiBCZWZvcmVcclxuICogbW9kaWZ5aW5nIHRoaXMgZGVmaW5pdGlvbiwgY29uc3VsdCB0aGUgZGVmaW5pdGlvbiBpbjpcclxuICpcclxuICogaHR0cHM6Ly9naXRodWIuY29tL2ZpcmViYXNlL2ZpcmViYXNlLWFkbWluLW5vZGVcclxuICpcclxuICogYW5kIG1ha2Ugc3VyZSB0aGUgdHdvIGFyZSBjb25zaXN0ZW50LlxyXG4gKi9cclxudmFyIEZJUkVCQVNFX0RBVEFCQVNFX0VNVUxBVE9SX0hPU1RfVkFSID0gJ0ZJUkVCQVNFX0RBVEFCQVNFX0VNVUxBVE9SX0hPU1QnO1xyXG52YXIgX3N0YXRpY0luc3RhbmNlO1xyXG4vKipcclxuICogQ3JlYXRlcyBhbmQgY2FjaGVzIFJlcG8gaW5zdGFuY2VzLlxyXG4gKi9cclxudmFyIFJlcG9NYW5hZ2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUmVwb01hbmFnZXIoKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHByaXZhdGUgeyFPYmplY3QuPHN0cmluZywgT2JqZWN0PHN0cmluZywgIWZiLmNvcmUuUmVwbz4+fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMucmVwb3NfID0ge307XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSWYgdHJ1ZSwgbmV3IFJlcG9zIHdpbGwgYmUgY3JlYXRlZCB0byB1c2UgUmVhZG9ubHlSZXN0Q2xpZW50IChmb3IgdGVzdGluZyBwdXJwb3NlcykuXHJcbiAgICAgICAgICogQHByaXZhdGUge2Jvb2xlYW59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy51c2VSZXN0Q2xpZW50XyA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgUmVwb01hbmFnZXIuZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCFfc3RhdGljSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgX3N0YXRpY0luc3RhbmNlID0gbmV3IFJlcG9NYW5hZ2VyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBfc3RhdGljSW5zdGFuY2U7XHJcbiAgICB9O1xyXG4gICAgLy8gVE9ETyhrb3NzKTogUmVtb3ZlIHRoZXNlIGZ1bmN0aW9ucyB1bmxlc3MgdXNlZCBpbiB0ZXN0cz9cclxuICAgIFJlcG9NYW5hZ2VyLnByb3RvdHlwZS5pbnRlcnJ1cHQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGVfMSwgX2EsIGVfMiwgX2I7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgZm9yICh2YXIgX2MgPSBfX3ZhbHVlcyhPYmplY3Qua2V5cyh0aGlzLnJlcG9zXykpLCBfZCA9IF9jLm5leHQoKTsgIV9kLmRvbmU7IF9kID0gX2MubmV4dCgpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXBwTmFtZSA9IF9kLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfZSA9IChlXzIgPSB2b2lkIDAsIF9fdmFsdWVzKE9iamVjdC5rZXlzKHRoaXMucmVwb3NfW2FwcE5hbWVdKSkpLCBfZiA9IF9lLm5leHQoKTsgIV9mLmRvbmU7IF9mID0gX2UubmV4dCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYlVybCA9IF9mLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcG9zX1thcHBOYW1lXVtkYlVybF0uaW50ZXJydXB0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVfMl8xKSB7IGVfMiA9IHsgZXJyb3I6IGVfMl8xIH07IH1cclxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZiAmJiAhX2YuZG9uZSAmJiAoX2IgPSBfZS5yZXR1cm4pKSBfYi5jYWxsKF9lKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzIpIHRocm93IGVfMi5lcnJvcjsgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XHJcbiAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoX2QgJiYgIV9kLmRvbmUgJiYgKF9hID0gX2MucmV0dXJuKSkgX2EuY2FsbChfYyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBSZXBvTWFuYWdlci5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBlXzMsIF9hLCBlXzQsIF9iO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9jID0gX192YWx1ZXMoT2JqZWN0LmtleXModGhpcy5yZXBvc18pKSwgX2QgPSBfYy5uZXh0KCk7ICFfZC5kb25lOyBfZCA9IF9jLm5leHQoKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFwcE5hbWUgPSBfZC52YWx1ZTtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2UgPSAoZV80ID0gdm9pZCAwLCBfX3ZhbHVlcyhPYmplY3Qua2V5cyh0aGlzLnJlcG9zX1thcHBOYW1lXSkpKSwgX2YgPSBfZS5uZXh0KCk7ICFfZi5kb25lOyBfZiA9IF9lLm5leHQoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGJVcmwgPSBfZi52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXBvc19bYXBwTmFtZV1bZGJVcmxdLnJlc3VtZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlXzRfMSkgeyBlXzQgPSB7IGVycm9yOiBlXzRfMSB9OyB9XHJcbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2YgJiYgIV9mLmRvbmUgJiYgKF9iID0gX2UucmV0dXJuKSkgX2IuY2FsbChfZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV80KSB0aHJvdyBlXzQuZXJyb3I7IH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZV8zXzEpIHsgZV8zID0geyBlcnJvcjogZV8zXzEgfTsgfVxyXG4gICAgICAgIGZpbmFsbHkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgaWYgKF9kICYmICFfZC5kb25lICYmIChfYSA9IF9jLnJldHVybikpIF9hLmNhbGwoX2MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8zKSB0aHJvdyBlXzMuZXJyb3I7IH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGUgYW4gZXhpc3RpbmcgcmVwbyBpbiBwbGFjZSB0byBwb2ludCB0byBhIG5ldyBob3N0L3BvcnQuXHJcbiAgICAgKi9cclxuICAgIFJlcG9NYW5hZ2VyLnByb3RvdHlwZS5hcHBseUVtdWxhdG9yU2V0dGluZ3MgPSBmdW5jdGlvbiAocmVwbywgaG9zdCwgcG9ydCkge1xyXG4gICAgICAgIHJlcG8ucmVwb0luZm9fID0gbmV3IFJlcG9JbmZvKGhvc3QgKyBcIjpcIiArIHBvcnQsIFxyXG4gICAgICAgIC8qIHNlY3VyZT0gKi8gZmFsc2UsIHJlcG8ucmVwb0luZm9fLm5hbWVzcGFjZSwgcmVwby5yZXBvSW5mb18ud2ViU29ja2V0T25seSwgcmVwby5yZXBvSW5mb18ubm9kZUFkbWluLCByZXBvLnJlcG9JbmZvXy5wZXJzaXN0ZW5jZUtleSwgcmVwby5yZXBvSW5mb18uaW5jbHVkZU5hbWVzcGFjZUluUXVlcnlQYXJhbXMpO1xyXG4gICAgICAgIGlmIChyZXBvLnJlcG9JbmZvXy5ub2RlQWRtaW4pIHtcclxuICAgICAgICAgICAgcmVwby5hdXRoVG9rZW5Qcm92aWRlcl8gPSBuZXcgRW11bGF0b3JBZG1pblRva2VuUHJvdmlkZXIoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHNob3VsZCBvbmx5IGV2ZXIgYmUgY2FsbGVkIHRvIENSRUFURSBhIG5ldyBkYXRhYmFzZSBpbnN0YW5jZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFGaXJlYmFzZUFwcH0gYXBwXHJcbiAgICAgKiBAcmV0dXJuIHshRGF0YWJhc2V9XHJcbiAgICAgKi9cclxuICAgIFJlcG9NYW5hZ2VyLnByb3RvdHlwZS5kYXRhYmFzZUZyb21BcHAgPSBmdW5jdGlvbiAoYXBwLCBhdXRoUHJvdmlkZXIsIHVybCwgbm9kZUFkbWluKSB7XHJcbiAgICAgICAgdmFyIGRiVXJsID0gdXJsIHx8IGFwcC5vcHRpb25zLmRhdGFiYXNlVVJMO1xyXG4gICAgICAgIGlmIChkYlVybCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGlmICghYXBwLm9wdGlvbnMucHJvamVjdElkKSB7XHJcbiAgICAgICAgICAgICAgICBmYXRhbChcIkNhbid0IGRldGVybWluZSBGaXJlYmFzZSBEYXRhYmFzZSBVUkwuIEJlIHN1cmUgdG8gaW5jbHVkZSBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgJyBhIFByb2plY3QgSUQgd2hlbiBjYWxsaW5nIGZpcmViYXNlLmluaXRpYWxpemVBcHAoKS4nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsb2coJ1VzaW5nIGRlZmF1bHQgaG9zdCBmb3IgcHJvamVjdCAnLCBhcHAub3B0aW9ucy5wcm9qZWN0SWQpO1xyXG4gICAgICAgICAgICBkYlVybCA9IGFwcC5vcHRpb25zLnByb2plY3RJZCArIFwiLWRlZmF1bHQtcnRkYi5maXJlYmFzZWlvLmNvbVwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcGFyc2VkVXJsID0gcGFyc2VSZXBvSW5mbyhkYlVybCwgbm9kZUFkbWluKTtcclxuICAgICAgICB2YXIgcmVwb0luZm8gPSBwYXJzZWRVcmwucmVwb0luZm87XHJcbiAgICAgICAgdmFyIGlzRW11bGF0b3I7XHJcbiAgICAgICAgdmFyIGRiRW11bGF0b3JIb3N0ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgZGJFbXVsYXRvckhvc3QgPSBwcm9jZXNzLmVudltGSVJFQkFTRV9EQVRBQkFTRV9FTVVMQVRPUl9IT1NUX1ZBUl07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChkYkVtdWxhdG9ySG9zdCkge1xyXG4gICAgICAgICAgICBpc0VtdWxhdG9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgZGJVcmwgPSBcImh0dHA6Ly9cIiArIGRiRW11bGF0b3JIb3N0ICsgXCI/bnM9XCIgKyByZXBvSW5mby5uYW1lc3BhY2U7XHJcbiAgICAgICAgICAgIHBhcnNlZFVybCA9IHBhcnNlUmVwb0luZm8oZGJVcmwsIG5vZGVBZG1pbik7XHJcbiAgICAgICAgICAgIHJlcG9JbmZvID0gcGFyc2VkVXJsLnJlcG9JbmZvO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaXNFbXVsYXRvciA9ICFwYXJzZWRVcmwucmVwb0luZm8uc2VjdXJlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgYXV0aFRva2VuUHJvdmlkZXIgPSBub2RlQWRtaW4gJiYgaXNFbXVsYXRvclxyXG4gICAgICAgICAgICA/IG5ldyBFbXVsYXRvckFkbWluVG9rZW5Qcm92aWRlcigpXHJcbiAgICAgICAgICAgIDogbmV3IEZpcmViYXNlQXV0aFRva2VuUHJvdmlkZXIoYXBwLCBhdXRoUHJvdmlkZXIpO1xyXG4gICAgICAgIHZhbGlkYXRlVXJsKCdJbnZhbGlkIEZpcmViYXNlIERhdGFiYXNlIFVSTCcsIDEsIHBhcnNlZFVybCk7XHJcbiAgICAgICAgaWYgKCFwYXJzZWRVcmwucGF0aC5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgZmF0YWwoJ0RhdGFiYXNlIFVSTCBtdXN0IHBvaW50IHRvIHRoZSByb290IG9mIGEgRmlyZWJhc2UgRGF0YWJhc2UgJyArXHJcbiAgICAgICAgICAgICAgICAnKG5vdCBpbmNsdWRpbmcgYSBjaGlsZCBwYXRoKS4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHJlcG8gPSB0aGlzLmNyZWF0ZVJlcG8ocmVwb0luZm8sIGFwcCwgYXV0aFRva2VuUHJvdmlkZXIpO1xyXG4gICAgICAgIHJldHVybiByZXBvLmRhdGFiYXNlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlIHRoZSByZXBvIGFuZCBtYWtlIHN1cmUgaXQgaXMgZGlzY29ubmVjdGVkLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7IVJlcG99IHJlcG9cclxuICAgICAqL1xyXG4gICAgUmVwb01hbmFnZXIucHJvdG90eXBlLmRlbGV0ZVJlcG8gPSBmdW5jdGlvbiAocmVwbykge1xyXG4gICAgICAgIHZhciBhcHBSZXBvcyA9IHNhZmVHZXQodGhpcy5yZXBvc18sIHJlcG8uYXBwLm5hbWUpO1xyXG4gICAgICAgIC8vIFRoaXMgc2hvdWxkIG5ldmVyIGhhcHBlbi4uLlxyXG4gICAgICAgIGlmICghYXBwUmVwb3MgfHwgc2FmZUdldChhcHBSZXBvcywgcmVwby5rZXkpICE9PSByZXBvKSB7XHJcbiAgICAgICAgICAgIGZhdGFsKFwiRGF0YWJhc2UgXCIgKyByZXBvLmFwcC5uYW1lICsgXCIoXCIgKyByZXBvLnJlcG9JbmZvXyArIFwiKSBoYXMgYWxyZWFkeSBiZWVuIGRlbGV0ZWQuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXBvLmludGVycnVwdCgpO1xyXG4gICAgICAgIGRlbGV0ZSBhcHBSZXBvc1tyZXBvLmtleV07XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBFbnN1cmVzIGEgcmVwbyBkb2Vzbid0IGFscmVhZHkgZXhpc3QgYW5kIHRoZW4gY3JlYXRlcyBvbmUgdXNpbmcgdGhlXHJcbiAgICAgKiBwcm92aWRlZCBhcHAuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHshUmVwb0luZm99IHJlcG9JbmZvIFRoZSBtZXRhZGF0YSBhYm91dCB0aGUgUmVwb1xyXG4gICAgICogQHBhcmFtIHshRmlyZWJhc2VBcHB9IGFwcFxyXG4gICAgICogQHJldHVybiB7IVJlcG99IFRoZSBSZXBvIG9iamVjdCBmb3IgdGhlIHNwZWNpZmllZCBzZXJ2ZXIgLyByZXBvTmFtZS5cclxuICAgICAqL1xyXG4gICAgUmVwb01hbmFnZXIucHJvdG90eXBlLmNyZWF0ZVJlcG8gPSBmdW5jdGlvbiAocmVwb0luZm8sIGFwcCwgYXV0aFRva2VuUHJvdmlkZXIpIHtcclxuICAgICAgICB2YXIgYXBwUmVwb3MgPSBzYWZlR2V0KHRoaXMucmVwb3NfLCBhcHAubmFtZSk7XHJcbiAgICAgICAgaWYgKCFhcHBSZXBvcykge1xyXG4gICAgICAgICAgICBhcHBSZXBvcyA9IHt9O1xyXG4gICAgICAgICAgICB0aGlzLnJlcG9zX1thcHAubmFtZV0gPSBhcHBSZXBvcztcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHJlcG8gPSBzYWZlR2V0KGFwcFJlcG9zLCByZXBvSW5mby50b1VSTFN0cmluZygpKTtcclxuICAgICAgICBpZiAocmVwbykge1xyXG4gICAgICAgICAgICBmYXRhbCgnRGF0YWJhc2UgaW5pdGlhbGl6ZWQgbXVsdGlwbGUgdGltZXMuIFBsZWFzZSBtYWtlIHN1cmUgdGhlIGZvcm1hdCBvZiB0aGUgZGF0YWJhc2UgVVJMIG1hdGNoZXMgd2l0aCBlYWNoIGRhdGFiYXNlKCkgY2FsbC4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVwbyA9IG5ldyBSZXBvKHJlcG9JbmZvLCB0aGlzLnVzZVJlc3RDbGllbnRfLCBhcHAsIGF1dGhUb2tlblByb3ZpZGVyKTtcclxuICAgICAgICBhcHBSZXBvc1tyZXBvSW5mby50b1VSTFN0cmluZygpXSA9IHJlcG87XHJcbiAgICAgICAgcmV0dXJuIHJlcG87XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBGb3JjZXMgdXMgdG8gdXNlIFJlYWRvbmx5UmVzdENsaWVudCBpbnN0ZWFkIG9mIFBlcnNpc3RlbnRDb25uZWN0aW9uIGZvciBuZXcgUmVwb3MuXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGZvcmNlUmVzdENsaWVudFxyXG4gICAgICovXHJcbiAgICBSZXBvTWFuYWdlci5wcm90b3R5cGUuZm9yY2VSZXN0Q2xpZW50ID0gZnVuY3Rpb24gKGZvcmNlUmVzdENsaWVudCkge1xyXG4gICAgICAgIHRoaXMudXNlUmVzdENsaWVudF8gPSBmb3JjZVJlc3RDbGllbnQ7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFJlcG9NYW5hZ2VyO1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgZmlyZWJhc2UgZGF0YWJhc2UuXHJcbiAqIEBpbXBsZW1lbnRzIHtGaXJlYmFzZVNlcnZpY2V9XHJcbiAqL1xyXG52YXIgRGF0YWJhc2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBjb25zdHJ1Y3RvciBzaG91bGQgbm90IGJlIGNhbGxlZCBieSB1c2VycyBvZiBvdXIgcHVibGljIEFQSS5cclxuICAgICAqIEBwYXJhbSB7IVJlcG99IHJlcG9JbnRlcm5hbF9cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gRGF0YWJhc2UocmVwb0ludGVybmFsXykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5yZXBvSW50ZXJuYWxfID0gcmVwb0ludGVybmFsXztcclxuICAgICAgICAvKiogVHJhY2sgaWYgdGhlIGluc3RhbmNlIGhhcyBiZWVuIHVzZWQgKHJvb3Qgb3IgcmVwbyBhY2Nlc3NlZCkgKi9cclxuICAgICAgICB0aGlzLmluc3RhbmNlU3RhcnRlZF8gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLklOVEVSTkFMID0ge1xyXG4gICAgICAgICAgICBkZWxldGU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9fYXdhaXRlcihfdGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrRGVsZXRlZF8oJ2RlbGV0ZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIFJlcG9NYW5hZ2VyLmdldEluc3RhbmNlKCkuZGVsZXRlUmVwbyh0aGlzLnJlcG9fKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcG9JbnRlcm5hbF8gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucm9vdEludGVybmFsXyA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pOyB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAoIShyZXBvSW50ZXJuYWxfIGluc3RhbmNlb2YgUmVwbykpIHtcclxuICAgICAgICAgICAgZmF0YWwoXCJEb24ndCBjYWxsIG5ldyBEYXRhYmFzZSgpIGRpcmVjdGx5IC0gcGxlYXNlIHVzZSBmaXJlYmFzZS5kYXRhYmFzZSgpLlwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRGF0YWJhc2UucHJvdG90eXBlLCBcInJlcG9fXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmluc3RhbmNlU3RhcnRlZF8pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVwb0ludGVybmFsXy5zdGFydCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbnN0YW5jZVN0YXJ0ZWRfID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXBvSW50ZXJuYWxfO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEYXRhYmFzZS5wcm90b3R5cGUsIFwicm9vdF9cIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMucm9vdEludGVybmFsXykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yb290SW50ZXJuYWxfID0gbmV3IFJlZmVyZW5jZSh0aGlzLnJlcG9fLCBQYXRoLkVtcHR5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yb290SW50ZXJuYWxfO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEYXRhYmFzZS5wcm90b3R5cGUsIFwiYXBwXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVwb18uYXBwO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIC8qKlxyXG4gICAgICogTW9kaWZ5IHRoaXMgaW5zdGFuY2UgdG8gY29tbXVuaWNhdGUgd2l0aCB0aGUgUmVhbHRpbWUgRGF0YWJhc2UgZW11bGF0b3IuXHJcbiAgICAgKlxyXG4gICAgICogPHA+Tm90ZTogVGhpcyBtZXRob2QgbXVzdCBiZSBjYWxsZWQgYmVmb3JlIHBlcmZvcm1pbmcgYW55IG90aGVyIG9wZXJhdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gaG9zdCB0aGUgZW11bGF0b3IgaG9zdCAoZXg6IGxvY2FsaG9zdClcclxuICAgICAqIEBwYXJhbSBwb3J0IHRoZSBlbXVsYXRvciBwb3J0IChleDogODA4MClcclxuICAgICAqL1xyXG4gICAgRGF0YWJhc2UucHJvdG90eXBlLnVzZUVtdWxhdG9yID0gZnVuY3Rpb24gKGhvc3QsIHBvcnQpIHtcclxuICAgICAgICB0aGlzLmNoZWNrRGVsZXRlZF8oJ3VzZUVtdWxhdG9yJyk7XHJcbiAgICAgICAgaWYgKHRoaXMuaW5zdGFuY2VTdGFydGVkXykge1xyXG4gICAgICAgICAgICBmYXRhbCgnQ2Fubm90IGNhbGwgdXNlRW11bGF0b3IoKSBhZnRlciBpbnN0YW5jZSBoYXMgYWxyZWFkeSBiZWVuIGluaXRpYWxpemVkLicpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIE1vZGlmeSB0aGUgcmVwbyB0byBhcHBseSBlbXVsYXRvciBzZXR0aW5nc1xyXG4gICAgICAgIFJlcG9NYW5hZ2VyLmdldEluc3RhbmNlKCkuYXBwbHlFbXVsYXRvclNldHRpbmdzKHRoaXMucmVwb0ludGVybmFsXywgaG9zdCwgcG9ydCk7XHJcbiAgICB9O1xyXG4gICAgRGF0YWJhc2UucHJvdG90eXBlLnJlZiA9IGZ1bmN0aW9uIChwYXRoKSB7XHJcbiAgICAgICAgdGhpcy5jaGVja0RlbGV0ZWRfKCdyZWYnKTtcclxuICAgICAgICB2YWxpZGF0ZUFyZ0NvdW50KCdkYXRhYmFzZS5yZWYnLCAwLCAxLCBhcmd1bWVudHMubGVuZ3RoKTtcclxuICAgICAgICBpZiAocGF0aCBpbnN0YW5jZW9mIFJlZmVyZW5jZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZWZGcm9tVVJMKHBhdGgudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwYXRoICE9PSB1bmRlZmluZWQgPyB0aGlzLnJvb3RfLmNoaWxkKHBhdGgpIDogdGhpcy5yb290XztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSByZWZlcmVuY2UgdG8gdGhlIHJvb3Qgb3IgdGhlIHBhdGggc3BlY2lmaWVkIGluIHVybC5cclxuICAgICAqIFdlIHRocm93IGEgZXhjZXB0aW9uIGlmIHRoZSB1cmwgaXMgbm90IGluIHRoZSBzYW1lIGRvbWFpbiBhcyB0aGVcclxuICAgICAqIGN1cnJlbnQgcmVwby5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcclxuICAgICAqIEByZXR1cm4geyFSZWZlcmVuY2V9IEZpcmViYXNlIHJlZmVyZW5jZS5cclxuICAgICAqL1xyXG4gICAgRGF0YWJhc2UucHJvdG90eXBlLnJlZkZyb21VUkwgPSBmdW5jdGlvbiAodXJsKSB7XHJcbiAgICAgICAgLyoqIEBjb25zdCB7c3RyaW5nfSAqL1xyXG4gICAgICAgIHZhciBhcGlOYW1lID0gJ2RhdGFiYXNlLnJlZkZyb21VUkwnO1xyXG4gICAgICAgIHRoaXMuY2hlY2tEZWxldGVkXyhhcGlOYW1lKTtcclxuICAgICAgICB2YWxpZGF0ZUFyZ0NvdW50KGFwaU5hbWUsIDEsIDEsIGFyZ3VtZW50cy5sZW5ndGgpO1xyXG4gICAgICAgIHZhciBwYXJzZWRVUkwgPSBwYXJzZVJlcG9JbmZvKHVybCwgdGhpcy5yZXBvXy5yZXBvSW5mb18ubm9kZUFkbWluKTtcclxuICAgICAgICB2YWxpZGF0ZVVybChhcGlOYW1lLCAxLCBwYXJzZWRVUkwpO1xyXG4gICAgICAgIHZhciByZXBvSW5mbyA9IHBhcnNlZFVSTC5yZXBvSW5mbztcclxuICAgICAgICBpZiAoIXJlcG9JbmZvLmlzQ3VzdG9tSG9zdCgpICYmIHJlcG9JbmZvLmhvc3QgIT09IHRoaXMucmVwb18ucmVwb0luZm9fLmhvc3QpIHtcclxuICAgICAgICAgICAgZmF0YWwoYXBpTmFtZSArXHJcbiAgICAgICAgICAgICAgICAnOiBIb3N0IG5hbWUgZG9lcyBub3QgbWF0Y2ggdGhlIGN1cnJlbnQgZGF0YWJhc2U6ICcgK1xyXG4gICAgICAgICAgICAgICAgJyhmb3VuZCAnICtcclxuICAgICAgICAgICAgICAgIHJlcG9JbmZvLmhvc3QgK1xyXG4gICAgICAgICAgICAgICAgJyBidXQgZXhwZWN0ZWQgJyArXHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlcG9fLnJlcG9JbmZvXy5ob3N0ICtcclxuICAgICAgICAgICAgICAgICcpJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLnJlZihwYXJzZWRVUkwucGF0aC50b1N0cmluZygpKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhcGlOYW1lXHJcbiAgICAgKi9cclxuICAgIERhdGFiYXNlLnByb3RvdHlwZS5jaGVja0RlbGV0ZWRfID0gZnVuY3Rpb24gKGFwaU5hbWUpIHtcclxuICAgICAgICBpZiAodGhpcy5yZXBvSW50ZXJuYWxfID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGZhdGFsKCdDYW5ub3QgY2FsbCAnICsgYXBpTmFtZSArICcgb24gYSBkZWxldGVkIGRhdGFiYXNlLicpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvLyBNYWtlIGluZGl2aWR1YWwgcmVwbyBnbyBvZmZsaW5lLlxyXG4gICAgRGF0YWJhc2UucHJvdG90eXBlLmdvT2ZmbGluZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YWxpZGF0ZUFyZ0NvdW50KCdkYXRhYmFzZS5nb09mZmxpbmUnLCAwLCAwLCBhcmd1bWVudHMubGVuZ3RoKTtcclxuICAgICAgICB0aGlzLmNoZWNrRGVsZXRlZF8oJ2dvT2ZmbGluZScpO1xyXG4gICAgICAgIHRoaXMucmVwb18uaW50ZXJydXB0KCk7XHJcbiAgICB9O1xyXG4gICAgRGF0YWJhc2UucHJvdG90eXBlLmdvT25saW5lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhbGlkYXRlQXJnQ291bnQoJ2RhdGFiYXNlLmdvT25saW5lJywgMCwgMCwgYXJndW1lbnRzLmxlbmd0aCk7XHJcbiAgICAgICAgdGhpcy5jaGVja0RlbGV0ZWRfKCdnb09ubGluZScpO1xyXG4gICAgICAgIHRoaXMucmVwb18ucmVzdW1lKCk7XHJcbiAgICB9O1xyXG4gICAgRGF0YWJhc2UuU2VydmVyVmFsdWUgPSB7XHJcbiAgICAgICAgVElNRVNUQU1QOiB7XHJcbiAgICAgICAgICAgICcuc3YnOiAndGltZXN0YW1wJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaW5jcmVtZW50OiBmdW5jdGlvbiAoZGVsdGEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICcuc3YnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2luY3JlbWVudCc6IGRlbHRhXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBEYXRhYmFzZTtcclxufSgpKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIElOVEVSTkFMIG1ldGhvZHMgZm9yIGludGVybmFsLXVzZSBvbmx5ICh0ZXN0cywgZXRjLikuXHJcbiAqXHJcbiAqIEN1c3RvbWVycyBzaG91bGRuJ3QgdXNlIHRoZXNlIG9yIGVsc2Ugc2hvdWxkIGJlIGF3YXJlIHRoYXQgdGhleSBjb3VsZCBicmVhayBhdCBhbnkgdGltZS5cclxuICpcclxuICogQGNvbnN0XHJcbiAqL1xyXG52YXIgZm9yY2VMb25nUG9sbGluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIFdlYlNvY2tldENvbm5lY3Rpb24uZm9yY2VEaXNhbGxvdygpO1xyXG4gICAgQnJvd3NlclBvbGxDb25uZWN0aW9uLmZvcmNlQWxsb3coKTtcclxufTtcclxudmFyIGZvcmNlV2ViU29ja2V0cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIEJyb3dzZXJQb2xsQ29ubmVjdGlvbi5mb3JjZURpc2FsbG93KCk7XHJcbn07XHJcbi8qIFVzZWQgYnkgQXBwIE1hbmFnZXIgKi9cclxudmFyIGlzV2ViU29ja2V0c0F2YWlsYWJsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiBXZWJTb2NrZXRDb25uZWN0aW9uWydpc0F2YWlsYWJsZSddKCk7XHJcbn07XHJcbnZhciBzZXRTZWN1cml0eURlYnVnQ2FsbGJhY2sgPSBmdW5jdGlvbiAocmVmLCBjYWxsYmFjaykge1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgIHJlZi5yZXBvLnBlcnNpc3RlbnRDb25uZWN0aW9uXy5zZWN1cml0eURlYnVnQ2FsbGJhY2tfID0gY2FsbGJhY2s7XHJcbn07XHJcbnZhciBzdGF0cyA9IGZ1bmN0aW9uIChyZWYsIHNob3dEZWx0YSkge1xyXG4gICAgcmVmLnJlcG8uc3RhdHMoc2hvd0RlbHRhKTtcclxufTtcclxudmFyIHN0YXRzSW5jcmVtZW50Q291bnRlciA9IGZ1bmN0aW9uIChyZWYsIG1ldHJpYykge1xyXG4gICAgcmVmLnJlcG8uc3RhdHNJbmNyZW1lbnRDb3VudGVyKG1ldHJpYyk7XHJcbn07XHJcbnZhciBkYXRhVXBkYXRlQ291bnQgPSBmdW5jdGlvbiAocmVmKSB7XHJcbiAgICByZXR1cm4gcmVmLnJlcG8uZGF0YVVwZGF0ZUNvdW50O1xyXG59O1xyXG52YXIgaW50ZXJjZXB0U2VydmVyRGF0YSA9IGZ1bmN0aW9uIChyZWYsIGNhbGxiYWNrKSB7XHJcbiAgICByZXR1cm4gcmVmLnJlcG8uaW50ZXJjZXB0U2VydmVyRGF0YV8oY2FsbGJhY2spO1xyXG59O1xyXG4vKipcclxuICogVXNlZCBieSBjb25zb2xlIHRvIGNyZWF0ZSBhIGRhdGFiYXNlIGJhc2VkIG9uIHRoZSBhcHAsXHJcbiAqIHBhc3NlZCBkYXRhYmFzZSBVUkwgYW5kIGEgY3VzdG9tIGF1dGggaW1wbGVtZW50YXRpb24uXHJcbiAqXHJcbiAqIEBwYXJhbSBhcHAgQSB2YWxpZCBGaXJlYmFzZUFwcC1saWtlIG9iamVjdFxyXG4gKiBAcGFyYW0gdXJsIEEgdmFsaWQgRmlyZWJhc2UgZGF0YWJhc2VVUkxcclxuICogQHBhcmFtIHZlcnNpb24gY3VzdG9tIHZlcnNpb24gZS5nLiBmaXJlYmFzZS1hZG1pbiB2ZXJzaW9uXHJcbiAqIEBwYXJhbSBjdXN0b21BdXRoSW1wbCBjdXN0b20gYXV0aCBpbXBsZW1lbnRhdGlvblxyXG4gKi9cclxuZnVuY3Rpb24gaW5pdFN0YW5kYWxvbmUoX2EpIHtcclxuICAgIHZhciBhcHAgPSBfYS5hcHAsIHVybCA9IF9hLnVybCwgdmVyc2lvbiA9IF9hLnZlcnNpb24sIGN1c3RvbUF1dGhJbXBsID0gX2EuY3VzdG9tQXV0aEltcGwsIG5hbWVzcGFjZSA9IF9hLm5hbWVzcGFjZSwgX2IgPSBfYS5ub2RlQWRtaW4sIG5vZGVBZG1pbiA9IF9iID09PSB2b2lkIDAgPyBmYWxzZSA6IF9iO1xyXG4gICAgc2V0U0RLVmVyc2lvbih2ZXJzaW9uKTtcclxuICAgIC8qKlxyXG4gICAgICogQ29tcG9uZW50Q29udGFpbmVyKCdkYXRhYmFzZS1zdGFuZGFsb25lJykgaXMganVzdCBhIHBsYWNlaG9sZGVyIHRoYXQgZG9lc24ndCBwZXJmb3JtXHJcbiAgICAgKiBhbnkgYWN0dWFsIGZ1bmN0aW9uLlxyXG4gICAgICovXHJcbiAgICB2YXIgYXV0aFByb3ZpZGVyID0gbmV3IFByb3ZpZGVyKCdhdXRoLWludGVybmFsJywgbmV3IENvbXBvbmVudENvbnRhaW5lcignZGF0YWJhc2Utc3RhbmRhbG9uZScpKTtcclxuICAgIGF1dGhQcm92aWRlci5zZXRDb21wb25lbnQobmV3IENvbXBvbmVudCgnYXV0aC1pbnRlcm5hbCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGN1c3RvbUF1dGhJbXBsOyB9LCBcIlBSSVZBVEVcIiAvKiBQUklWQVRFICovKSk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGluc3RhbmNlOiBSZXBvTWFuYWdlci5nZXRJbnN0YW5jZSgpLmRhdGFiYXNlRnJvbUFwcChhcHAsIGF1dGhQcm92aWRlciwgdXJsLCBub2RlQWRtaW4pLFxyXG4gICAgICAgIG5hbWVzcGFjZTogbmFtZXNwYWNlXHJcbiAgICB9O1xyXG59XG5cbnZhciBJTlRFUk5BTCA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgX19wcm90b19fOiBudWxsLFxuICBmb3JjZUxvbmdQb2xsaW5nOiBmb3JjZUxvbmdQb2xsaW5nLFxuICBmb3JjZVdlYlNvY2tldHM6IGZvcmNlV2ViU29ja2V0cyxcbiAgaXNXZWJTb2NrZXRzQXZhaWxhYmxlOiBpc1dlYlNvY2tldHNBdmFpbGFibGUsXG4gIHNldFNlY3VyaXR5RGVidWdDYWxsYmFjazogc2V0U2VjdXJpdHlEZWJ1Z0NhbGxiYWNrLFxuICBzdGF0czogc3RhdHMsXG4gIHN0YXRzSW5jcmVtZW50Q291bnRlcjogc3RhdHNJbmNyZW1lbnRDb3VudGVyLFxuICBkYXRhVXBkYXRlQ291bnQ6IGRhdGFVcGRhdGVDb3VudCxcbiAgaW50ZXJjZXB0U2VydmVyRGF0YTogaW50ZXJjZXB0U2VydmVyRGF0YSxcbiAgaW5pdFN0YW5kYWxvbmU6IGluaXRTdGFuZGFsb25lXG59KTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIERhdGFDb25uZWN0aW9uID0gUGVyc2lzdGVudENvbm5lY3Rpb247XHJcbi8qKlxyXG4gKiBAcGFyYW0geyFzdHJpbmd9IHBhdGhTdHJpbmdcclxuICogQHBhcmFtIHtmdW5jdGlvbigqKX0gb25Db21wbGV0ZVxyXG4gKi9cclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuUGVyc2lzdGVudENvbm5lY3Rpb24ucHJvdG90eXBlLnNpbXBsZUxpc3RlbiA9IGZ1bmN0aW9uIChwYXRoU3RyaW5nLCBvbkNvbXBsZXRlKSB7XHJcbiAgICB0aGlzLnNlbmRSZXF1ZXN0KCdxJywgeyBwOiBwYXRoU3RyaW5nIH0sIG9uQ29tcGxldGUpO1xyXG59O1xyXG4vKipcclxuICogQHBhcmFtIHsqfSBkYXRhXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKil9IG9uRWNob1xyXG4gKi9cclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuUGVyc2lzdGVudENvbm5lY3Rpb24ucHJvdG90eXBlLmVjaG8gPSBmdW5jdGlvbiAoZGF0YSwgb25FY2hvKSB7XHJcbiAgICB0aGlzLnNlbmRSZXF1ZXN0KCdlY2hvJywgeyBkOiBkYXRhIH0sIG9uRWNobyk7XHJcbn07XHJcbi8vIFJlYWxUaW1lQ29ubmVjdGlvbiBwcm9wZXJ0aWVzIHRoYXQgd2UgdXNlIGluIHRlc3RzLlxyXG52YXIgUmVhbFRpbWVDb25uZWN0aW9uID0gQ29ubmVjdGlvbjtcclxuLyoqXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKTogc3RyaW5nfSBuZXdIYXNoXHJcbiAqIEByZXR1cm4ge2Z1bmN0aW9uKCl9XHJcbiAqL1xyXG52YXIgaGlqYWNrSGFzaCA9IGZ1bmN0aW9uIChuZXdIYXNoKSB7XHJcbiAgICB2YXIgb2xkUHV0ID0gUGVyc2lzdGVudENvbm5lY3Rpb24ucHJvdG90eXBlLnB1dDtcclxuICAgIFBlcnNpc3RlbnRDb25uZWN0aW9uLnByb3RvdHlwZS5wdXQgPSBmdW5jdGlvbiAocGF0aFN0cmluZywgZGF0YSwgb25Db21wbGV0ZSwgaGFzaCkge1xyXG4gICAgICAgIGlmIChoYXNoICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaGFzaCA9IG5ld0hhc2goKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgb2xkUHV0LmNhbGwodGhpcywgcGF0aFN0cmluZywgZGF0YSwgb25Db21wbGV0ZSwgaGFzaCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBQZXJzaXN0ZW50Q29ubmVjdGlvbi5wcm90b3R5cGUucHV0ID0gb2xkUHV0O1xyXG4gICAgfTtcclxufTtcclxuLyoqXHJcbiAqIEB0eXBlIHtmdW5jdGlvbihuZXc6UmVwb0luZm8sICFzdHJpbmcsIGJvb2xlYW4sICFzdHJpbmcsIGJvb2xlYW4pOiB1bmRlZmluZWR9XHJcbiAqL1xyXG52YXIgQ29ubmVjdGlvblRhcmdldCA9IFJlcG9JbmZvO1xyXG4vKipcclxuICogQHBhcmFtIHshUXVlcnl9IHF1ZXJ5XHJcbiAqIEByZXR1cm4geyFzdHJpbmd9XHJcbiAqL1xyXG52YXIgcXVlcnlJZGVudGlmaWVyID0gZnVuY3Rpb24gKHF1ZXJ5KSB7XHJcbiAgICByZXR1cm4gcXVlcnkucXVlcnlJZGVudGlmaWVyKCk7XHJcbn07XHJcbi8qKlxyXG4gKiBGb3JjZXMgdGhlIFJlcG9NYW5hZ2VyIHRvIGNyZWF0ZSBSZXBvcyB0aGF0IHVzZSBSZWFkb25seVJlc3RDbGllbnQgaW5zdGVhZCBvZiBQZXJzaXN0ZW50Q29ubmVjdGlvbi5cclxuICpcclxuICogQHBhcmFtIHtib29sZWFufSBmb3JjZVJlc3RDbGllbnRcclxuICovXHJcbnZhciBmb3JjZVJlc3RDbGllbnQgPSBmdW5jdGlvbiAoZm9yY2VSZXN0Q2xpZW50KSB7XHJcbiAgICBSZXBvTWFuYWdlci5nZXRJbnN0YW5jZSgpLmZvcmNlUmVzdENsaWVudChmb3JjZVJlc3RDbGllbnQpO1xyXG59O1xuXG52YXIgVEVTVF9BQ0NFU1MgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgRGF0YUNvbm5lY3Rpb246IERhdGFDb25uZWN0aW9uLFxuICBSZWFsVGltZUNvbm5lY3Rpb246IFJlYWxUaW1lQ29ubmVjdGlvbixcbiAgaGlqYWNrSGFzaDogaGlqYWNrSGFzaCxcbiAgQ29ubmVjdGlvblRhcmdldDogQ29ubmVjdGlvblRhcmdldCxcbiAgcXVlcnlJZGVudGlmaWVyOiBxdWVyeUlkZW50aWZpZXIsXG4gIGZvcmNlUmVzdENsaWVudDogZm9yY2VSZXN0Q2xpZW50XG59KTtcblxudmFyIG5hbWUgPSBcIkBmaXJlYmFzZS9kYXRhYmFzZVwiO1xudmFyIHZlcnNpb24gPSBcIjAuNy4xXCI7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBTZXJ2ZXJWYWx1ZSA9IERhdGFiYXNlLlNlcnZlclZhbHVlO1xyXG5mdW5jdGlvbiByZWdpc3RlckRhdGFiYXNlKGluc3RhbmNlKSB7XHJcbiAgICAvLyBzZXQgU0RLX1ZFUlNJT05cclxuICAgIHNldFNES1ZlcnNpb24oaW5zdGFuY2UuU0RLX1ZFUlNJT04pO1xyXG4gICAgLy8gUmVnaXN0ZXIgdGhlIERhdGFiYXNlIFNlcnZpY2Ugd2l0aCB0aGUgJ2ZpcmViYXNlJyBuYW1lc3BhY2UuXHJcbiAgICB2YXIgbmFtZXNwYWNlID0gaW5zdGFuY2UuSU5URVJOQUwucmVnaXN0ZXJDb21wb25lbnQobmV3IENvbXBvbmVudCgnZGF0YWJhc2UnLCBmdW5jdGlvbiAoY29udGFpbmVyLCB1cmwpIHtcclxuICAgICAgICAvKiBEZXBlbmRlbmNpZXMgKi9cclxuICAgICAgICAvLyBnZXRJbW1lZGlhdGUgZm9yIEZpcmViYXNlQXBwIHdpbGwgYWx3YXlzIHN1Y2NlZWRcclxuICAgICAgICB2YXIgYXBwID0gY29udGFpbmVyLmdldFByb3ZpZGVyKCdhcHAnKS5nZXRJbW1lZGlhdGUoKTtcclxuICAgICAgICB2YXIgYXV0aFByb3ZpZGVyID0gY29udGFpbmVyLmdldFByb3ZpZGVyKCdhdXRoLWludGVybmFsJyk7XHJcbiAgICAgICAgcmV0dXJuIFJlcG9NYW5hZ2VyLmdldEluc3RhbmNlKCkuZGF0YWJhc2VGcm9tQXBwKGFwcCwgYXV0aFByb3ZpZGVyLCB1cmwpO1xyXG4gICAgfSwgXCJQVUJMSUNcIiAvKiBQVUJMSUMgKi8pXHJcbiAgICAgICAgLnNldFNlcnZpY2VQcm9wcyhcclxuICAgIC8vIGZpcmViYXNlLmRhdGFiYXNlIG5hbWVzcGFjZSBwcm9wZXJ0aWVzXHJcbiAgICB7XHJcbiAgICAgICAgUmVmZXJlbmNlOiBSZWZlcmVuY2UsXHJcbiAgICAgICAgUXVlcnk6IFF1ZXJ5LFxyXG4gICAgICAgIERhdGFiYXNlOiBEYXRhYmFzZSxcclxuICAgICAgICBEYXRhU25hcHNob3Q6IERhdGFTbmFwc2hvdCxcclxuICAgICAgICBlbmFibGVMb2dnaW5nOiBlbmFibGVMb2dnaW5nLFxyXG4gICAgICAgIElOVEVSTkFMOiBJTlRFUk5BTCxcclxuICAgICAgICBTZXJ2ZXJWYWx1ZTogU2VydmVyVmFsdWUsXHJcbiAgICAgICAgVEVTVF9BQ0NFU1M6IFRFU1RfQUNDRVNTXHJcbiAgICB9KVxyXG4gICAgICAgIC5zZXRNdWx0aXBsZUluc3RhbmNlcyh0cnVlKSk7XHJcbiAgICBpbnN0YW5jZS5yZWdpc3RlclZlcnNpb24obmFtZSwgdmVyc2lvbik7XHJcbiAgICBpZiAoaXNOb2RlU2RrKCkpIHtcclxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IG5hbWVzcGFjZTtcclxuICAgIH1cclxufVxyXG5yZWdpc3RlckRhdGFiYXNlKGZpcmViYXNlKTtcblxuZXhwb3J0IHsgRGF0YVNuYXBzaG90LCBEYXRhYmFzZSwgT25EaXNjb25uZWN0LCBRdWVyeSwgUmVmZXJlbmNlLCBTZXJ2ZXJWYWx1ZSwgZW5hYmxlTG9nZ2luZywgcmVnaXN0ZXJEYXRhYmFzZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXNtLmpzLm1hcFxuIiwiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcclxudGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcclxuTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblRISVMgQ09ERSBJUyBQUk9WSURFRCBPTiBBTiAqQVMgSVMqIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcclxuS0lORCwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIFdJVEhPVVQgTElNSVRBVElPTiBBTlkgSU1QTElFRFxyXG5XQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgVElUTEUsIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLFxyXG5NRVJDSEFOVEFCTElUWSBPUiBOT04tSU5GUklOR0VNRU5ULlxyXG5cclxuU2VlIHRoZSBBcGFjaGUgVmVyc2lvbiAyLjAgTGljZW5zZSBmb3Igc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXHJcbmFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuXHJcbmZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xyXG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXHJcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gICAgcmV0dXJuIHI7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIF9hO1xyXG4vKipcclxuICogQSBjb250YWluZXIgZm9yIGFsbCBvZiB0aGUgTG9nZ2VyIGluc3RhbmNlc1xyXG4gKi9cclxudmFyIGluc3RhbmNlcyA9IFtdO1xyXG4vKipcclxuICogVGhlIEpTIFNESyBzdXBwb3J0cyA1IGxvZyBsZXZlbHMgYW5kIGFsc28gYWxsb3dzIGEgdXNlciB0aGUgYWJpbGl0eSB0b1xyXG4gKiBzaWxlbmNlIHRoZSBsb2dzIGFsdG9nZXRoZXIuXHJcbiAqXHJcbiAqIFRoZSBvcmRlciBpcyBhIGZvbGxvd3M6XHJcbiAqIERFQlVHIDwgVkVSQk9TRSA8IElORk8gPCBXQVJOIDwgRVJST1JcclxuICpcclxuICogQWxsIG9mIHRoZSBsb2cgdHlwZXMgYWJvdmUgdGhlIGN1cnJlbnQgbG9nIGxldmVsIHdpbGwgYmUgY2FwdHVyZWQgKGkuZS4gaWZcclxuICogeW91IHNldCB0aGUgbG9nIGxldmVsIHRvIGBJTkZPYCwgZXJyb3JzIHdpbGwgc3RpbGwgYmUgbG9nZ2VkLCBidXQgYERFQlVHYCBhbmRcclxuICogYFZFUkJPU0VgIGxvZ3Mgd2lsbCBub3QpXHJcbiAqL1xyXG52YXIgTG9nTGV2ZWw7XHJcbihmdW5jdGlvbiAoTG9nTGV2ZWwpIHtcclxuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiREVCVUdcIl0gPSAwXSA9IFwiREVCVUdcIjtcclxuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiVkVSQk9TRVwiXSA9IDFdID0gXCJWRVJCT1NFXCI7XHJcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIklORk9cIl0gPSAyXSA9IFwiSU5GT1wiO1xyXG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJXQVJOXCJdID0gM10gPSBcIldBUk5cIjtcclxuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiRVJST1JcIl0gPSA0XSA9IFwiRVJST1JcIjtcclxuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiU0lMRU5UXCJdID0gNV0gPSBcIlNJTEVOVFwiO1xyXG59KShMb2dMZXZlbCB8fCAoTG9nTGV2ZWwgPSB7fSkpO1xyXG52YXIgbGV2ZWxTdHJpbmdUb0VudW0gPSB7XHJcbiAgICAnZGVidWcnOiBMb2dMZXZlbC5ERUJVRyxcclxuICAgICd2ZXJib3NlJzogTG9nTGV2ZWwuVkVSQk9TRSxcclxuICAgICdpbmZvJzogTG9nTGV2ZWwuSU5GTyxcclxuICAgICd3YXJuJzogTG9nTGV2ZWwuV0FSTixcclxuICAgICdlcnJvcic6IExvZ0xldmVsLkVSUk9SLFxyXG4gICAgJ3NpbGVudCc6IExvZ0xldmVsLlNJTEVOVFxyXG59O1xyXG4vKipcclxuICogVGhlIGRlZmF1bHQgbG9nIGxldmVsXHJcbiAqL1xyXG52YXIgZGVmYXVsdExvZ0xldmVsID0gTG9nTGV2ZWwuSU5GTztcclxuLyoqXHJcbiAqIEJ5IGRlZmF1bHQsIGBjb25zb2xlLmRlYnVnYCBpcyBub3QgZGlzcGxheWVkIGluIHRoZSBkZXZlbG9wZXIgY29uc29sZSAoaW5cclxuICogY2hyb21lKS4gVG8gYXZvaWQgZm9yY2luZyB1c2VycyB0byBoYXZlIHRvIG9wdC1pbiB0byB0aGVzZSBsb2dzIHR3aWNlXHJcbiAqIChpLmUuIG9uY2UgZm9yIGZpcmViYXNlLCBhbmQgb25jZSBpbiB0aGUgY29uc29sZSksIHdlIGFyZSBzZW5kaW5nIGBERUJVR2BcclxuICogbG9ncyB0byB0aGUgYGNvbnNvbGUubG9nYCBmdW5jdGlvbi5cclxuICovXHJcbnZhciBDb25zb2xlTWV0aG9kID0gKF9hID0ge30sXHJcbiAgICBfYVtMb2dMZXZlbC5ERUJVR10gPSAnbG9nJyxcclxuICAgIF9hW0xvZ0xldmVsLlZFUkJPU0VdID0gJ2xvZycsXHJcbiAgICBfYVtMb2dMZXZlbC5JTkZPXSA9ICdpbmZvJyxcclxuICAgIF9hW0xvZ0xldmVsLldBUk5dID0gJ3dhcm4nLFxyXG4gICAgX2FbTG9nTGV2ZWwuRVJST1JdID0gJ2Vycm9yJyxcclxuICAgIF9hKTtcclxuLyoqXHJcbiAqIFRoZSBkZWZhdWx0IGxvZyBoYW5kbGVyIHdpbGwgZm9yd2FyZCBERUJVRywgVkVSQk9TRSwgSU5GTywgV0FSTiwgYW5kIEVSUk9SXHJcbiAqIG1lc3NhZ2VzIG9uIHRvIHRoZWlyIGNvcnJlc3BvbmRpbmcgY29uc29sZSBjb3VudGVycGFydHMgKGlmIHRoZSBsb2cgbWV0aG9kXHJcbiAqIGlzIHN1cHBvcnRlZCBieSB0aGUgY3VycmVudCBsb2cgbGV2ZWwpXHJcbiAqL1xyXG52YXIgZGVmYXVsdExvZ0hhbmRsZXIgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIGxvZ1R5cGUpIHtcclxuICAgIHZhciBhcmdzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDI7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIGFyZ3NbX2kgLSAyXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICBpZiAobG9nVHlwZSA8IGluc3RhbmNlLmxvZ0xldmVsKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdmFyIG5vdyA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcclxuICAgIHZhciBtZXRob2QgPSBDb25zb2xlTWV0aG9kW2xvZ1R5cGVdO1xyXG4gICAgaWYgKG1ldGhvZCkge1xyXG4gICAgICAgIGNvbnNvbGVbbWV0aG9kXS5hcHBseShjb25zb2xlLCBfX3NwcmVhZEFycmF5cyhbXCJbXCIgKyBub3cgKyBcIl0gIFwiICsgaW5zdGFuY2UubmFtZSArIFwiOlwiXSwgYXJncykpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXR0ZW1wdGVkIHRvIGxvZyBhIG1lc3NhZ2Ugd2l0aCBhbiBpbnZhbGlkIGxvZ1R5cGUgKHZhbHVlOiBcIiArIGxvZ1R5cGUgKyBcIilcIik7XHJcbiAgICB9XHJcbn07XHJcbnZhciBMb2dnZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIEdpdmVzIHlvdSBhbiBpbnN0YW5jZSBvZiBhIExvZ2dlciB0byBjYXB0dXJlIG1lc3NhZ2VzIGFjY29yZGluZyB0b1xyXG4gICAgICogRmlyZWJhc2UncyBsb2dnaW5nIHNjaGVtZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbmFtZSBUaGUgbmFtZSB0aGF0IHRoZSBsb2dzIHdpbGwgYmUgYXNzb2NpYXRlZCB3aXRoXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIExvZ2dlcihuYW1lKSB7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgbG9nIGxldmVsIG9mIHRoZSBnaXZlbiBMb2dnZXIgaW5zdGFuY2UuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5fbG9nTGV2ZWwgPSBkZWZhdWx0TG9nTGV2ZWw7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG1haW4gKGludGVybmFsKSBsb2cgaGFuZGxlciBmb3IgdGhlIExvZ2dlciBpbnN0YW5jZS5cclxuICAgICAgICAgKiBDYW4gYmUgc2V0IHRvIGEgbmV3IGZ1bmN0aW9uIGluIGludGVybmFsIHBhY2thZ2UgY29kZSBidXQgbm90IGJ5IHVzZXIuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5fbG9nSGFuZGxlciA9IGRlZmF1bHRMb2dIYW5kbGVyO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBvcHRpb25hbCwgYWRkaXRpb25hbCwgdXNlci1kZWZpbmVkIGxvZyBoYW5kbGVyIGZvciB0aGUgTG9nZ2VyIGluc3RhbmNlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuX3VzZXJMb2dIYW5kbGVyID0gbnVsbDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDYXB0dXJlIHRoZSBjdXJyZW50IGluc3RhbmNlIGZvciBsYXRlciB1c2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBpbnN0YW5jZXMucHVzaCh0aGlzKTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShMb2dnZXIucHJvdG90eXBlLCBcImxvZ0xldmVsXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xvZ0xldmVsO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgICAgICAgIGlmICghKHZhbCBpbiBMb2dMZXZlbCkpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIHZhbHVlIFxcXCJcIiArIHZhbCArIFwiXFxcIiBhc3NpZ25lZCB0byBgbG9nTGV2ZWxgXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX2xvZ0xldmVsID0gdmFsO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIC8vIFdvcmthcm91bmQgZm9yIHNldHRlci9nZXR0ZXIgaGF2aW5nIHRvIGJlIHRoZSBzYW1lIHR5cGUuXHJcbiAgICBMb2dnZXIucHJvdG90eXBlLnNldExvZ0xldmVsID0gZnVuY3Rpb24gKHZhbCkge1xyXG4gICAgICAgIHRoaXMuX2xvZ0xldmVsID0gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgPyBsZXZlbFN0cmluZ1RvRW51bVt2YWxdIDogdmFsO1xyXG4gICAgfTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShMb2dnZXIucHJvdG90eXBlLCBcImxvZ0hhbmRsZXJcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9nSGFuZGxlcjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbCAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVmFsdWUgYXNzaWduZWQgdG8gYGxvZ0hhbmRsZXJgIG11c3QgYmUgYSBmdW5jdGlvbicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX2xvZ0hhbmRsZXIgPSB2YWw7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KExvZ2dlci5wcm90b3R5cGUsIFwidXNlckxvZ0hhbmRsZXJcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdXNlckxvZ0hhbmRsZXI7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICAgICAgdGhpcy5fdXNlckxvZ0hhbmRsZXIgPSB2YWw7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgZnVuY3Rpb25zIGJlbG93IGFyZSBhbGwgYmFzZWQgb24gdGhlIGBjb25zb2xlYCBpbnRlcmZhY2VcclxuICAgICAqL1xyXG4gICAgTG9nZ2VyLnByb3RvdHlwZS5kZWJ1ZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fdXNlckxvZ0hhbmRsZXIgJiYgdGhpcy5fdXNlckxvZ0hhbmRsZXIuYXBwbHkodGhpcywgX19zcHJlYWRBcnJheXMoW3RoaXMsIExvZ0xldmVsLkRFQlVHXSwgYXJncykpO1xyXG4gICAgICAgIHRoaXMuX2xvZ0hhbmRsZXIuYXBwbHkodGhpcywgX19zcHJlYWRBcnJheXMoW3RoaXMsIExvZ0xldmVsLkRFQlVHXSwgYXJncykpO1xyXG4gICAgfTtcclxuICAgIExvZ2dlci5wcm90b3R5cGUubG9nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl91c2VyTG9nSGFuZGxlciAmJiB0aGlzLl91c2VyTG9nSGFuZGxlci5hcHBseSh0aGlzLCBfX3NwcmVhZEFycmF5cyhbdGhpcywgTG9nTGV2ZWwuVkVSQk9TRV0sIGFyZ3MpKTtcclxuICAgICAgICB0aGlzLl9sb2dIYW5kbGVyLmFwcGx5KHRoaXMsIF9fc3ByZWFkQXJyYXlzKFt0aGlzLCBMb2dMZXZlbC5WRVJCT1NFXSwgYXJncykpO1xyXG4gICAgfTtcclxuICAgIExvZ2dlci5wcm90b3R5cGUuaW5mbyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fdXNlckxvZ0hhbmRsZXIgJiYgdGhpcy5fdXNlckxvZ0hhbmRsZXIuYXBwbHkodGhpcywgX19zcHJlYWRBcnJheXMoW3RoaXMsIExvZ0xldmVsLklORk9dLCBhcmdzKSk7XHJcbiAgICAgICAgdGhpcy5fbG9nSGFuZGxlci5hcHBseSh0aGlzLCBfX3NwcmVhZEFycmF5cyhbdGhpcywgTG9nTGV2ZWwuSU5GT10sIGFyZ3MpKTtcclxuICAgIH07XHJcbiAgICBMb2dnZXIucHJvdG90eXBlLndhcm4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3VzZXJMb2dIYW5kbGVyICYmIHRoaXMuX3VzZXJMb2dIYW5kbGVyLmFwcGx5KHRoaXMsIF9fc3ByZWFkQXJyYXlzKFt0aGlzLCBMb2dMZXZlbC5XQVJOXSwgYXJncykpO1xyXG4gICAgICAgIHRoaXMuX2xvZ0hhbmRsZXIuYXBwbHkodGhpcywgX19zcHJlYWRBcnJheXMoW3RoaXMsIExvZ0xldmVsLldBUk5dLCBhcmdzKSk7XHJcbiAgICB9O1xyXG4gICAgTG9nZ2VyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fdXNlckxvZ0hhbmRsZXIgJiYgdGhpcy5fdXNlckxvZ0hhbmRsZXIuYXBwbHkodGhpcywgX19zcHJlYWRBcnJheXMoW3RoaXMsIExvZ0xldmVsLkVSUk9SXSwgYXJncykpO1xyXG4gICAgICAgIHRoaXMuX2xvZ0hhbmRsZXIuYXBwbHkodGhpcywgX19zcHJlYWRBcnJheXMoW3RoaXMsIExvZ0xldmVsLkVSUk9SXSwgYXJncykpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBMb2dnZXI7XHJcbn0oKSk7XHJcbmZ1bmN0aW9uIHNldExvZ0xldmVsKGxldmVsKSB7XHJcbiAgICBpbnN0YW5jZXMuZm9yRWFjaChmdW5jdGlvbiAoaW5zdCkge1xyXG4gICAgICAgIGluc3Quc2V0TG9nTGV2ZWwobGV2ZWwpO1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gc2V0VXNlckxvZ0hhbmRsZXIobG9nQ2FsbGJhY2ssIG9wdGlvbnMpIHtcclxuICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XHJcbiAgICAgICAgdmFyIGN1c3RvbUxvZ0xldmVsID0gbnVsbDtcclxuICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmxldmVsKSB7XHJcbiAgICAgICAgICAgIGN1c3RvbUxvZ0xldmVsID0gbGV2ZWxTdHJpbmdUb0VudW1bb3B0aW9ucy5sZXZlbF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsb2dDYWxsYmFjayA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS51c2VyTG9nSGFuZGxlciA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS51c2VyTG9nSGFuZGxlciA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgbGV2ZWwpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDI7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGFyZ3NbX2kgLSAyXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IGFyZ3NcclxuICAgICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChhcmcpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXJnID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8IHR5cGVvZiBhcmcgPT09ICdib29sZWFuJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJnLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGFyZyBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmcubWVzc2FnZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoaWdub3JlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGFyZykgeyByZXR1cm4gYXJnOyB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5qb2luKCcgJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAobGV2ZWwgPj0gKGN1c3RvbUxvZ0xldmVsICE9PSBudWxsICYmIGN1c3RvbUxvZ0xldmVsICE9PSB2b2lkIDAgPyBjdXN0b21Mb2dMZXZlbCA6IGluc3RhbmNlLmxvZ0xldmVsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvZ0NhbGxiYWNrKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV2ZWw6IExvZ0xldmVsW2xldmVsXS50b0xvd2VyQ2FzZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzOiBhcmdzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBpbnN0YW5jZS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGZvciAodmFyIF9pID0gMCwgaW5zdGFuY2VzXzEgPSBpbnN0YW5jZXM7IF9pIDwgaW5zdGFuY2VzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyIGluc3RhbmNlID0gaW5zdGFuY2VzXzFbX2ldO1xyXG4gICAgICAgIF9sb29wXzEoaW5zdGFuY2UpO1xyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IExvZ0xldmVsLCBMb2dnZXIsIHNldExvZ0xldmVsLCBzZXRVc2VyTG9nSGFuZGxlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXNtLmpzLm1hcFxuIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSAndHNsaWInO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQGZpbGVvdmVydmlldyBGaXJlYmFzZSBjb25zdGFudHMuICBTb21lIG9mIHRoZXNlIChAZGVmaW5lcykgY2FuIGJlIG92ZXJyaWRkZW4gYXQgY29tcGlsZS10aW1lLlxyXG4gKi9cclxudmFyIENPTlNUQU5UUyA9IHtcclxuICAgIC8qKlxyXG4gICAgICogQGRlZmluZSB7Ym9vbGVhbn0gV2hldGhlciB0aGlzIGlzIHRoZSBjbGllbnQgTm9kZS5qcyBTREsuXHJcbiAgICAgKi9cclxuICAgIE5PREVfQ0xJRU5UOiBmYWxzZSxcclxuICAgIC8qKlxyXG4gICAgICogQGRlZmluZSB7Ym9vbGVhbn0gV2hldGhlciB0aGlzIGlzIHRoZSBBZG1pbiBOb2RlLmpzIFNESy5cclxuICAgICAqL1xyXG4gICAgTk9ERV9BRE1JTjogZmFsc2UsXHJcbiAgICAvKipcclxuICAgICAqIEZpcmViYXNlIFNESyBWZXJzaW9uXHJcbiAgICAgKi9cclxuICAgIFNES19WRVJTSU9OOiAnJHtKU0NPUkVfVkVSU0lPTn0nXHJcbn07XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBUaHJvd3MgYW4gZXJyb3IgaWYgdGhlIHByb3ZpZGVkIGFzc2VydGlvbiBpcyBmYWxzeVxyXG4gKi9cclxudmFyIGFzc2VydCA9IGZ1bmN0aW9uIChhc3NlcnRpb24sIG1lc3NhZ2UpIHtcclxuICAgIGlmICghYXNzZXJ0aW9uKSB7XHJcbiAgICAgICAgdGhyb3cgYXNzZXJ0aW9uRXJyb3IobWVzc2FnZSk7XHJcbiAgICB9XHJcbn07XHJcbi8qKlxyXG4gKiBSZXR1cm5zIGFuIEVycm9yIG9iamVjdCBzdWl0YWJsZSBmb3IgdGhyb3dpbmcuXHJcbiAqL1xyXG52YXIgYXNzZXJ0aW9uRXJyb3IgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xyXG4gICAgcmV0dXJuIG5ldyBFcnJvcignRmlyZWJhc2UgRGF0YWJhc2UgKCcgK1xyXG4gICAgICAgIENPTlNUQU5UUy5TREtfVkVSU0lPTiArXHJcbiAgICAgICAgJykgSU5URVJOQUwgQVNTRVJUIEZBSUxFRDogJyArXHJcbiAgICAgICAgbWVzc2FnZSk7XHJcbn07XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBzdHJpbmdUb0J5dGVBcnJheSA9IGZ1bmN0aW9uIChzdHIpIHtcclxuICAgIC8vIFRPRE8odXNlcik6IFVzZSBuYXRpdmUgaW1wbGVtZW50YXRpb25zIGlmL3doZW4gYXZhaWxhYmxlXHJcbiAgICB2YXIgb3V0ID0gW107XHJcbiAgICB2YXIgcCA9IDA7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSk7XHJcbiAgICAgICAgaWYgKGMgPCAxMjgpIHtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSBjO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjIDwgMjA0OCkge1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjID4+IDYpIHwgMTkyO1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICgoYyAmIDB4ZmMwMCkgPT09IDB4ZDgwMCAmJlxyXG4gICAgICAgICAgICBpICsgMSA8IHN0ci5sZW5ndGggJiZcclxuICAgICAgICAgICAgKHN0ci5jaGFyQ29kZUF0KGkgKyAxKSAmIDB4ZmMwMCkgPT09IDB4ZGMwMCkge1xyXG4gICAgICAgICAgICAvLyBTdXJyb2dhdGUgUGFpclxyXG4gICAgICAgICAgICBjID0gMHgxMDAwMCArICgoYyAmIDB4MDNmZikgPDwgMTApICsgKHN0ci5jaGFyQ29kZUF0KCsraSkgJiAweDAzZmYpO1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjID4+IDE4KSB8IDI0MDtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoKGMgPj4gMTIpICYgNjMpIHwgMTI4O1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9ICgoYyA+PiA2KSAmIDYzKSB8IDEyODtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyAmIDYzKSB8IDEyODtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgPj4gMTIpIHwgMjI0O1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9ICgoYyA+PiA2KSAmIDYzKSB8IDEyODtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyAmIDYzKSB8IDEyODtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb3V0O1xyXG59O1xyXG4vKipcclxuICogVHVybnMgYW4gYXJyYXkgb2YgbnVtYmVycyBpbnRvIHRoZSBzdHJpbmcgZ2l2ZW4gYnkgdGhlIGNvbmNhdGVuYXRpb24gb2YgdGhlXHJcbiAqIGNoYXJhY3RlcnMgdG8gd2hpY2ggdGhlIG51bWJlcnMgY29ycmVzcG9uZC5cclxuICogQHBhcmFtIGJ5dGVzIEFycmF5IG9mIG51bWJlcnMgcmVwcmVzZW50aW5nIGNoYXJhY3RlcnMuXHJcbiAqIEByZXR1cm4gU3RyaW5naWZpY2F0aW9uIG9mIHRoZSBhcnJheS5cclxuICovXHJcbnZhciBieXRlQXJyYXlUb1N0cmluZyA9IGZ1bmN0aW9uIChieXRlcykge1xyXG4gICAgLy8gVE9ETyh1c2VyKTogVXNlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbnMgaWYvd2hlbiBhdmFpbGFibGVcclxuICAgIHZhciBvdXQgPSBbXTtcclxuICAgIHZhciBwb3MgPSAwLCBjID0gMDtcclxuICAgIHdoaWxlIChwb3MgPCBieXRlcy5sZW5ndGgpIHtcclxuICAgICAgICB2YXIgYzEgPSBieXRlc1twb3MrK107XHJcbiAgICAgICAgaWYgKGMxIDwgMTI4KSB7XHJcbiAgICAgICAgICAgIG91dFtjKytdID0gU3RyaW5nLmZyb21DaGFyQ29kZShjMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGMxID4gMTkxICYmIGMxIDwgMjI0KSB7XHJcbiAgICAgICAgICAgIHZhciBjMiA9IGJ5dGVzW3BvcysrXTtcclxuICAgICAgICAgICAgb3V0W2MrK10gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCgoYzEgJiAzMSkgPDwgNikgfCAoYzIgJiA2MykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjMSA+IDIzOSAmJiBjMSA8IDM2NSkge1xyXG4gICAgICAgICAgICAvLyBTdXJyb2dhdGUgUGFpclxyXG4gICAgICAgICAgICB2YXIgYzIgPSBieXRlc1twb3MrK107XHJcbiAgICAgICAgICAgIHZhciBjMyA9IGJ5dGVzW3BvcysrXTtcclxuICAgICAgICAgICAgdmFyIGM0ID0gYnl0ZXNbcG9zKytdO1xyXG4gICAgICAgICAgICB2YXIgdSA9ICgoKGMxICYgNykgPDwgMTgpIHwgKChjMiAmIDYzKSA8PCAxMikgfCAoKGMzICYgNjMpIDw8IDYpIHwgKGM0ICYgNjMpKSAtXHJcbiAgICAgICAgICAgICAgICAweDEwMDAwO1xyXG4gICAgICAgICAgICBvdXRbYysrXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhkODAwICsgKHUgPj4gMTApKTtcclxuICAgICAgICAgICAgb3V0W2MrK10gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4ZGMwMCArICh1ICYgMTAyMykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGMyID0gYnl0ZXNbcG9zKytdO1xyXG4gICAgICAgICAgICB2YXIgYzMgPSBieXRlc1twb3MrK107XHJcbiAgICAgICAgICAgIG91dFtjKytdID0gU3RyaW5nLmZyb21DaGFyQ29kZSgoKGMxICYgMTUpIDw8IDEyKSB8ICgoYzIgJiA2MykgPDwgNikgfCAoYzMgJiA2MykpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBvdXQuam9pbignJyk7XHJcbn07XHJcbi8vIFdlIGRlZmluZSBpdCBhcyBhbiBvYmplY3QgbGl0ZXJhbCBpbnN0ZWFkIG9mIGEgY2xhc3MgYmVjYXVzZSBhIGNsYXNzIGNvbXBpbGVkIGRvd24gdG8gZXM1IGNhbid0XHJcbi8vIGJlIHRyZWVzaGFrZWQuIGh0dHBzOi8vZ2l0aHViLmNvbS9yb2xsdXAvcm9sbHVwL2lzc3Vlcy8xNjkxXHJcbi8vIFN0YXRpYyBsb29rdXAgbWFwcywgbGF6aWx5IHBvcHVsYXRlZCBieSBpbml0XygpXHJcbnZhciBiYXNlNjQgPSB7XHJcbiAgICAvKipcclxuICAgICAqIE1hcHMgYnl0ZXMgdG8gY2hhcmFjdGVycy5cclxuICAgICAqL1xyXG4gICAgYnl0ZVRvQ2hhck1hcF86IG51bGwsXHJcbiAgICAvKipcclxuICAgICAqIE1hcHMgY2hhcmFjdGVycyB0byBieXRlcy5cclxuICAgICAqL1xyXG4gICAgY2hhclRvQnl0ZU1hcF86IG51bGwsXHJcbiAgICAvKipcclxuICAgICAqIE1hcHMgYnl0ZXMgdG8gd2Vic2FmZSBjaGFyYWN0ZXJzLlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgYnl0ZVRvQ2hhck1hcFdlYlNhZmVfOiBudWxsLFxyXG4gICAgLyoqXHJcbiAgICAgKiBNYXBzIHdlYnNhZmUgY2hhcmFjdGVycyB0byBieXRlcy5cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGNoYXJUb0J5dGVNYXBXZWJTYWZlXzogbnVsbCxcclxuICAgIC8qKlxyXG4gICAgICogT3VyIGRlZmF1bHQgYWxwaGFiZXQsIHNoYXJlZCBiZXR3ZWVuXHJcbiAgICAgKiBFTkNPREVEX1ZBTFMgYW5kIEVOQ09ERURfVkFMU19XRUJTQUZFXHJcbiAgICAgKi9cclxuICAgIEVOQ09ERURfVkFMU19CQVNFOiAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVonICsgJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6JyArICcwMTIzNDU2Nzg5JyxcclxuICAgIC8qKlxyXG4gICAgICogT3VyIGRlZmF1bHQgYWxwaGFiZXQuIFZhbHVlIDY0ICg9KSBpcyBzcGVjaWFsOyBpdCBtZWFucyBcIm5vdGhpbmcuXCJcclxuICAgICAqL1xyXG4gICAgZ2V0IEVOQ09ERURfVkFMUygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5FTkNPREVEX1ZBTFNfQkFTRSArICcrLz0nO1xyXG4gICAgfSxcclxuICAgIC8qKlxyXG4gICAgICogT3VyIHdlYnNhZmUgYWxwaGFiZXQuXHJcbiAgICAgKi9cclxuICAgIGdldCBFTkNPREVEX1ZBTFNfV0VCU0FGRSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5FTkNPREVEX1ZBTFNfQkFTRSArICctXy4nO1xyXG4gICAgfSxcclxuICAgIC8qKlxyXG4gICAgICogV2hldGhlciB0aGlzIGJyb3dzZXIgc3VwcG9ydHMgdGhlIGF0b2IgYW5kIGJ0b2EgZnVuY3Rpb25zLiBUaGlzIGV4dGVuc2lvblxyXG4gICAgICogc3RhcnRlZCBhdCBNb3ppbGxhIGJ1dCBpcyBub3cgaW1wbGVtZW50ZWQgYnkgbWFueSBicm93c2Vycy4gV2UgdXNlIHRoZVxyXG4gICAgICogQVNTVU1FXyogdmFyaWFibGVzIHRvIGF2b2lkIHB1bGxpbmcgaW4gdGhlIGZ1bGwgdXNlcmFnZW50IGRldGVjdGlvbiBsaWJyYXJ5XHJcbiAgICAgKiBidXQgc3RpbGwgYWxsb3dpbmcgdGhlIHN0YW5kYXJkIHBlci1icm93c2VyIGNvbXBpbGF0aW9ucy5cclxuICAgICAqXHJcbiAgICAgKi9cclxuICAgIEhBU19OQVRJVkVfU1VQUE9SVDogdHlwZW9mIGF0b2IgPT09ICdmdW5jdGlvbicsXHJcbiAgICAvKipcclxuICAgICAqIEJhc2U2NC1lbmNvZGUgYW4gYXJyYXkgb2YgYnl0ZXMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGlucHV0IEFuIGFycmF5IG9mIGJ5dGVzIChudW1iZXJzIHdpdGhcclxuICAgICAqICAgICB2YWx1ZSBpbiBbMCwgMjU1XSkgdG8gZW5jb2RlLlxyXG4gICAgICogQHBhcmFtIHdlYlNhZmUgQm9vbGVhbiBpbmRpY2F0aW5nIHdlIHNob3VsZCB1c2UgdGhlXHJcbiAgICAgKiAgICAgYWx0ZXJuYXRpdmUgYWxwaGFiZXQuXHJcbiAgICAgKiBAcmV0dXJuIFRoZSBiYXNlNjQgZW5jb2RlZCBzdHJpbmcuXHJcbiAgICAgKi9cclxuICAgIGVuY29kZUJ5dGVBcnJheTogZnVuY3Rpb24gKGlucHV0LCB3ZWJTYWZlKSB7XHJcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGlucHV0KSkge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignZW5jb2RlQnl0ZUFycmF5IHRha2VzIGFuIGFycmF5IGFzIGEgcGFyYW1ldGVyJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaW5pdF8oKTtcclxuICAgICAgICB2YXIgYnl0ZVRvQ2hhck1hcCA9IHdlYlNhZmVcclxuICAgICAgICAgICAgPyB0aGlzLmJ5dGVUb0NoYXJNYXBXZWJTYWZlX1xyXG4gICAgICAgICAgICA6IHRoaXMuYnl0ZVRvQ2hhck1hcF87XHJcbiAgICAgICAgdmFyIG91dHB1dCA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpICs9IDMpIHtcclxuICAgICAgICAgICAgdmFyIGJ5dGUxID0gaW5wdXRbaV07XHJcbiAgICAgICAgICAgIHZhciBoYXZlQnl0ZTIgPSBpICsgMSA8IGlucHV0Lmxlbmd0aDtcclxuICAgICAgICAgICAgdmFyIGJ5dGUyID0gaGF2ZUJ5dGUyID8gaW5wdXRbaSArIDFdIDogMDtcclxuICAgICAgICAgICAgdmFyIGhhdmVCeXRlMyA9IGkgKyAyIDwgaW5wdXQubGVuZ3RoO1xyXG4gICAgICAgICAgICB2YXIgYnl0ZTMgPSBoYXZlQnl0ZTMgPyBpbnB1dFtpICsgMl0gOiAwO1xyXG4gICAgICAgICAgICB2YXIgb3V0Qnl0ZTEgPSBieXRlMSA+PiAyO1xyXG4gICAgICAgICAgICB2YXIgb3V0Qnl0ZTIgPSAoKGJ5dGUxICYgMHgwMykgPDwgNCkgfCAoYnl0ZTIgPj4gNCk7XHJcbiAgICAgICAgICAgIHZhciBvdXRCeXRlMyA9ICgoYnl0ZTIgJiAweDBmKSA8PCAyKSB8IChieXRlMyA+PiA2KTtcclxuICAgICAgICAgICAgdmFyIG91dEJ5dGU0ID0gYnl0ZTMgJiAweDNmO1xyXG4gICAgICAgICAgICBpZiAoIWhhdmVCeXRlMykge1xyXG4gICAgICAgICAgICAgICAgb3V0Qnl0ZTQgPSA2NDtcclxuICAgICAgICAgICAgICAgIGlmICghaGF2ZUJ5dGUyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3V0Qnl0ZTMgPSA2NDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvdXRwdXQucHVzaChieXRlVG9DaGFyTWFwW291dEJ5dGUxXSwgYnl0ZVRvQ2hhck1hcFtvdXRCeXRlMl0sIGJ5dGVUb0NoYXJNYXBbb3V0Qnl0ZTNdLCBieXRlVG9DaGFyTWFwW291dEJ5dGU0XSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvdXRwdXQuam9pbignJyk7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBCYXNlNjQtZW5jb2RlIGEgc3RyaW5nLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBpbnB1dCBBIHN0cmluZyB0byBlbmNvZGUuXHJcbiAgICAgKiBAcGFyYW0gd2ViU2FmZSBJZiB0cnVlLCB3ZSBzaG91bGQgdXNlIHRoZVxyXG4gICAgICogICAgIGFsdGVybmF0aXZlIGFscGhhYmV0LlxyXG4gICAgICogQHJldHVybiBUaGUgYmFzZTY0IGVuY29kZWQgc3RyaW5nLlxyXG4gICAgICovXHJcbiAgICBlbmNvZGVTdHJpbmc6IGZ1bmN0aW9uIChpbnB1dCwgd2ViU2FmZSkge1xyXG4gICAgICAgIC8vIFNob3J0Y3V0IGZvciBNb3ppbGxhIGJyb3dzZXJzIHRoYXQgaW1wbGVtZW50XHJcbiAgICAgICAgLy8gYSBuYXRpdmUgYmFzZTY0IGVuY29kZXIgaW4gdGhlIGZvcm0gb2YgXCJidG9hL2F0b2JcIlxyXG4gICAgICAgIGlmICh0aGlzLkhBU19OQVRJVkVfU1VQUE9SVCAmJiAhd2ViU2FmZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gYnRvYShpbnB1dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmVuY29kZUJ5dGVBcnJheShzdHJpbmdUb0J5dGVBcnJheShpbnB1dCksIHdlYlNhZmUpO1xyXG4gICAgfSxcclxuICAgIC8qKlxyXG4gICAgICogQmFzZTY0LWRlY29kZSBhIHN0cmluZy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gaW5wdXQgdG8gZGVjb2RlLlxyXG4gICAgICogQHBhcmFtIHdlYlNhZmUgVHJ1ZSBpZiB3ZSBzaG91bGQgdXNlIHRoZVxyXG4gICAgICogICAgIGFsdGVybmF0aXZlIGFscGhhYmV0LlxyXG4gICAgICogQHJldHVybiBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBkZWNvZGVkIHZhbHVlLlxyXG4gICAgICovXHJcbiAgICBkZWNvZGVTdHJpbmc6IGZ1bmN0aW9uIChpbnB1dCwgd2ViU2FmZSkge1xyXG4gICAgICAgIC8vIFNob3J0Y3V0IGZvciBNb3ppbGxhIGJyb3dzZXJzIHRoYXQgaW1wbGVtZW50XHJcbiAgICAgICAgLy8gYSBuYXRpdmUgYmFzZTY0IGVuY29kZXIgaW4gdGhlIGZvcm0gb2YgXCJidG9hL2F0b2JcIlxyXG4gICAgICAgIGlmICh0aGlzLkhBU19OQVRJVkVfU1VQUE9SVCAmJiAhd2ViU2FmZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gYXRvYihpbnB1dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBieXRlQXJyYXlUb1N0cmluZyh0aGlzLmRlY29kZVN0cmluZ1RvQnl0ZUFycmF5KGlucHV0LCB3ZWJTYWZlKSk7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBCYXNlNjQtZGVjb2RlIGEgc3RyaW5nLlxyXG4gICAgICpcclxuICAgICAqIEluIGJhc2UtNjQgZGVjb2RpbmcsIGdyb3VwcyBvZiBmb3VyIGNoYXJhY3RlcnMgYXJlIGNvbnZlcnRlZCBpbnRvIHRocmVlXHJcbiAgICAgKiBieXRlcy4gIElmIHRoZSBlbmNvZGVyIGRpZCBub3QgYXBwbHkgcGFkZGluZywgdGhlIGlucHV0IGxlbmd0aCBtYXkgbm90XHJcbiAgICAgKiBiZSBhIG11bHRpcGxlIG9mIDQuXHJcbiAgICAgKlxyXG4gICAgICogSW4gdGhpcyBjYXNlLCB0aGUgbGFzdCBncm91cCB3aWxsIGhhdmUgZmV3ZXIgdGhhbiA0IGNoYXJhY3RlcnMsIGFuZFxyXG4gICAgICogcGFkZGluZyB3aWxsIGJlIGluZmVycmVkLiAgSWYgdGhlIGdyb3VwIGhhcyBvbmUgb3IgdHdvIGNoYXJhY3RlcnMsIGl0IGRlY29kZXNcclxuICAgICAqIHRvIG9uZSBieXRlLiAgSWYgdGhlIGdyb3VwIGhhcyB0aHJlZSBjaGFyYWN0ZXJzLCBpdCBkZWNvZGVzIHRvIHR3byBieXRlcy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gaW5wdXQgSW5wdXQgdG8gZGVjb2RlLlxyXG4gICAgICogQHBhcmFtIHdlYlNhZmUgVHJ1ZSBpZiB3ZSBzaG91bGQgdXNlIHRoZSB3ZWItc2FmZSBhbHBoYWJldC5cclxuICAgICAqIEByZXR1cm4gYnl0ZXMgcmVwcmVzZW50aW5nIHRoZSBkZWNvZGVkIHZhbHVlLlxyXG4gICAgICovXHJcbiAgICBkZWNvZGVTdHJpbmdUb0J5dGVBcnJheTogZnVuY3Rpb24gKGlucHV0LCB3ZWJTYWZlKSB7XHJcbiAgICAgICAgdGhpcy5pbml0XygpO1xyXG4gICAgICAgIHZhciBjaGFyVG9CeXRlTWFwID0gd2ViU2FmZVxyXG4gICAgICAgICAgICA/IHRoaXMuY2hhclRvQnl0ZU1hcFdlYlNhZmVfXHJcbiAgICAgICAgICAgIDogdGhpcy5jaGFyVG9CeXRlTWFwXztcclxuICAgICAgICB2YXIgb3V0cHV0ID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7KSB7XHJcbiAgICAgICAgICAgIHZhciBieXRlMSA9IGNoYXJUb0J5dGVNYXBbaW5wdXQuY2hhckF0KGkrKyldO1xyXG4gICAgICAgICAgICB2YXIgaGF2ZUJ5dGUyID0gaSA8IGlucHV0Lmxlbmd0aDtcclxuICAgICAgICAgICAgdmFyIGJ5dGUyID0gaGF2ZUJ5dGUyID8gY2hhclRvQnl0ZU1hcFtpbnB1dC5jaGFyQXQoaSldIDogMDtcclxuICAgICAgICAgICAgKytpO1xyXG4gICAgICAgICAgICB2YXIgaGF2ZUJ5dGUzID0gaSA8IGlucHV0Lmxlbmd0aDtcclxuICAgICAgICAgICAgdmFyIGJ5dGUzID0gaGF2ZUJ5dGUzID8gY2hhclRvQnl0ZU1hcFtpbnB1dC5jaGFyQXQoaSldIDogNjQ7XHJcbiAgICAgICAgICAgICsraTtcclxuICAgICAgICAgICAgdmFyIGhhdmVCeXRlNCA9IGkgPCBpbnB1dC5sZW5ndGg7XHJcbiAgICAgICAgICAgIHZhciBieXRlNCA9IGhhdmVCeXRlNCA/IGNoYXJUb0J5dGVNYXBbaW5wdXQuY2hhckF0KGkpXSA6IDY0O1xyXG4gICAgICAgICAgICArK2k7XHJcbiAgICAgICAgICAgIGlmIChieXRlMSA9PSBudWxsIHx8IGJ5dGUyID09IG51bGwgfHwgYnl0ZTMgPT0gbnVsbCB8fCBieXRlNCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBvdXRCeXRlMSA9IChieXRlMSA8PCAyKSB8IChieXRlMiA+PiA0KTtcclxuICAgICAgICAgICAgb3V0cHV0LnB1c2gob3V0Qnl0ZTEpO1xyXG4gICAgICAgICAgICBpZiAoYnl0ZTMgIT09IDY0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgb3V0Qnl0ZTIgPSAoKGJ5dGUyIDw8IDQpICYgMHhmMCkgfCAoYnl0ZTMgPj4gMik7XHJcbiAgICAgICAgICAgICAgICBvdXRwdXQucHVzaChvdXRCeXRlMik7XHJcbiAgICAgICAgICAgICAgICBpZiAoYnl0ZTQgIT09IDY0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG91dEJ5dGUzID0gKChieXRlMyA8PCA2KSAmIDB4YzApIHwgYnl0ZTQ7XHJcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0LnB1c2gob3V0Qnl0ZTMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBMYXp5IHN0YXRpYyBpbml0aWFsaXphdGlvbiBmdW5jdGlvbi4gQ2FsbGVkIGJlZm9yZVxyXG4gICAgICogYWNjZXNzaW5nIGFueSBvZiB0aGUgc3RhdGljIG1hcCB2YXJpYWJsZXMuXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBpbml0XzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5ieXRlVG9DaGFyTWFwXykge1xyXG4gICAgICAgICAgICB0aGlzLmJ5dGVUb0NoYXJNYXBfID0ge307XHJcbiAgICAgICAgICAgIHRoaXMuY2hhclRvQnl0ZU1hcF8gPSB7fTtcclxuICAgICAgICAgICAgdGhpcy5ieXRlVG9DaGFyTWFwV2ViU2FmZV8gPSB7fTtcclxuICAgICAgICAgICAgdGhpcy5jaGFyVG9CeXRlTWFwV2ViU2FmZV8gPSB7fTtcclxuICAgICAgICAgICAgLy8gV2Ugd2FudCBxdWljayBtYXBwaW5ncyBiYWNrIGFuZCBmb3J0aCwgc28gd2UgcHJlY29tcHV0ZSB0d28gbWFwcy5cclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLkVOQ09ERURfVkFMUy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ieXRlVG9DaGFyTWFwX1tpXSA9IHRoaXMuRU5DT0RFRF9WQUxTLmNoYXJBdChpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hhclRvQnl0ZU1hcF9bdGhpcy5ieXRlVG9DaGFyTWFwX1tpXV0gPSBpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ieXRlVG9DaGFyTWFwV2ViU2FmZV9baV0gPSB0aGlzLkVOQ09ERURfVkFMU19XRUJTQUZFLmNoYXJBdChpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hhclRvQnl0ZU1hcFdlYlNhZmVfW3RoaXMuYnl0ZVRvQ2hhck1hcFdlYlNhZmVfW2ldXSA9IGk7XHJcbiAgICAgICAgICAgICAgICAvLyBCZSBmb3JnaXZpbmcgd2hlbiBkZWNvZGluZyBhbmQgY29ycmVjdGx5IGRlY29kZSBib3RoIGVuY29kaW5ncy5cclxuICAgICAgICAgICAgICAgIGlmIChpID49IHRoaXMuRU5DT0RFRF9WQUxTX0JBU0UubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFyVG9CeXRlTWFwX1t0aGlzLkVOQ09ERURfVkFMU19XRUJTQUZFLmNoYXJBdChpKV0gPSBpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhclRvQnl0ZU1hcFdlYlNhZmVfW3RoaXMuRU5DT0RFRF9WQUxTLmNoYXJBdChpKV0gPSBpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59O1xyXG4vKipcclxuICogVVJMLXNhZmUgYmFzZTY0IGVuY29kaW5nXHJcbiAqL1xyXG52YXIgYmFzZTY0RW5jb2RlID0gZnVuY3Rpb24gKHN0cikge1xyXG4gICAgdmFyIHV0ZjhCeXRlcyA9IHN0cmluZ1RvQnl0ZUFycmF5KHN0cik7XHJcbiAgICByZXR1cm4gYmFzZTY0LmVuY29kZUJ5dGVBcnJheSh1dGY4Qnl0ZXMsIHRydWUpO1xyXG59O1xyXG4vKipcclxuICogVVJMLXNhZmUgYmFzZTY0IGRlY29kaW5nXHJcbiAqXHJcbiAqIE5PVEU6IERPIE5PVCB1c2UgdGhlIGdsb2JhbCBhdG9iKCkgZnVuY3Rpb24gLSBpdCBkb2VzIE5PVCBzdXBwb3J0IHRoZVxyXG4gKiBiYXNlNjRVcmwgdmFyaWFudCBlbmNvZGluZy5cclxuICpcclxuICogQHBhcmFtIHN0ciBUbyBiZSBkZWNvZGVkXHJcbiAqIEByZXR1cm4gRGVjb2RlZCByZXN1bHQsIGlmIHBvc3NpYmxlXHJcbiAqL1xyXG52YXIgYmFzZTY0RGVjb2RlID0gZnVuY3Rpb24gKHN0cikge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICByZXR1cm4gYmFzZTY0LmRlY29kZVN0cmluZyhzdHIsIHRydWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdiYXNlNjREZWNvZGUgZmFpbGVkOiAnLCBlKTtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59O1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogRG8gYSBkZWVwLWNvcHkgb2YgYmFzaWMgSmF2YVNjcmlwdCBPYmplY3RzIG9yIEFycmF5cy5cclxuICovXHJcbmZ1bmN0aW9uIGRlZXBDb3B5KHZhbHVlKSB7XHJcbiAgICByZXR1cm4gZGVlcEV4dGVuZCh1bmRlZmluZWQsIHZhbHVlKTtcclxufVxyXG4vKipcclxuICogQ29weSBwcm9wZXJ0aWVzIGZyb20gc291cmNlIHRvIHRhcmdldCAocmVjdXJzaXZlbHkgYWxsb3dzIGV4dGVuc2lvblxyXG4gKiBvZiBPYmplY3RzIGFuZCBBcnJheXMpLiAgU2NhbGFyIHZhbHVlcyBpbiB0aGUgdGFyZ2V0IGFyZSBvdmVyLXdyaXR0ZW4uXHJcbiAqIElmIHRhcmdldCBpcyB1bmRlZmluZWQsIGFuIG9iamVjdCBvZiB0aGUgYXBwcm9wcmlhdGUgdHlwZSB3aWxsIGJlIGNyZWF0ZWRcclxuICogKGFuZCByZXR1cm5lZCkuXHJcbiAqXHJcbiAqIFdlIHJlY3Vyc2l2ZWx5IGNvcHkgYWxsIGNoaWxkIHByb3BlcnRpZXMgb2YgcGxhaW4gT2JqZWN0cyBpbiB0aGUgc291cmNlLSBzb1xyXG4gKiB0aGF0IG5hbWVzcGFjZS0gbGlrZSBkaWN0aW9uYXJpZXMgYXJlIG1lcmdlZC5cclxuICpcclxuICogTm90ZSB0aGF0IHRoZSB0YXJnZXQgY2FuIGJlIGEgZnVuY3Rpb24sIGluIHdoaWNoIGNhc2UgdGhlIHByb3BlcnRpZXMgaW5cclxuICogdGhlIHNvdXJjZSBPYmplY3QgYXJlIGNvcGllZCBvbnRvIGl0IGFzIHN0YXRpYyBwcm9wZXJ0aWVzIG9mIHRoZSBGdW5jdGlvbi5cclxuICpcclxuICogTm90ZTogd2UgZG9uJ3QgbWVyZ2UgX19wcm90b19fIHRvIHByZXZlbnQgcHJvdG90eXBlIHBvbGx1dGlvblxyXG4gKi9cclxuZnVuY3Rpb24gZGVlcEV4dGVuZCh0YXJnZXQsIHNvdXJjZSkge1xyXG4gICAgaWYgKCEoc291cmNlIGluc3RhbmNlb2YgT2JqZWN0KSkge1xyXG4gICAgICAgIHJldHVybiBzb3VyY2U7XHJcbiAgICB9XHJcbiAgICBzd2l0Y2ggKHNvdXJjZS5jb25zdHJ1Y3Rvcikge1xyXG4gICAgICAgIGNhc2UgRGF0ZTpcclxuICAgICAgICAgICAgLy8gVHJlYXQgRGF0ZXMgbGlrZSBzY2FsYXJzOyBpZiB0aGUgdGFyZ2V0IGRhdGUgb2JqZWN0IGhhZCBhbnkgY2hpbGRcclxuICAgICAgICAgICAgLy8gcHJvcGVydGllcyAtIHRoZXkgd2lsbCBiZSBsb3N0IVxyXG4gICAgICAgICAgICB2YXIgZGF0ZVZhbHVlID0gc291cmNlO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoZGF0ZVZhbHVlLmdldFRpbWUoKSk7XHJcbiAgICAgICAgY2FzZSBPYmplY3Q6XHJcbiAgICAgICAgICAgIGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0ge307XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBBcnJheTpcclxuICAgICAgICAgICAgLy8gQWx3YXlzIGNvcHkgdGhlIGFycmF5IHNvdXJjZSBhbmQgb3ZlcndyaXRlIHRoZSB0YXJnZXQuXHJcbiAgICAgICAgICAgIHRhcmdldCA9IFtdO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAvLyBOb3QgYSBwbGFpbiBPYmplY3QgLSB0cmVhdCBpdCBhcyBhIHNjYWxhci5cclxuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZTtcclxuICAgIH1cclxuICAgIGZvciAodmFyIHByb3AgaW4gc291cmNlKSB7XHJcbiAgICAgICAgLy8gdXNlIGlzVmFsaWRLZXkgdG8gZ3VhcmQgYWdhaW5zdCBwcm90b3R5cGUgcG9sbHV0aW9uLiBTZWUgaHR0cHM6Ly9zbnlrLmlvL3Z1bG4vU05ZSy1KUy1MT0RBU0gtNDUwMjAyXHJcbiAgICAgICAgaWYgKCFzb3VyY2UuaGFzT3duUHJvcGVydHkocHJvcCkgfHwgIWlzVmFsaWRLZXkocHJvcCkpIHtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRhcmdldFtwcm9wXSA9IGRlZXBFeHRlbmQodGFyZ2V0W3Byb3BdLCBzb3VyY2VbcHJvcF0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRhcmdldDtcclxufVxyXG5mdW5jdGlvbiBpc1ZhbGlkS2V5KGtleSkge1xyXG4gICAgcmV0dXJuIGtleSAhPT0gJ19fcHJvdG9fXyc7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxudmFyIERlZmVycmVkID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRGVmZXJyZWQoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLnJlamVjdCA9IGZ1bmN0aW9uICgpIHsgfTtcclxuICAgICAgICB0aGlzLnJlc29sdmUgPSBmdW5jdGlvbiAoKSB7IH07XHJcbiAgICAgICAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICBfdGhpcy5yZXNvbHZlID0gcmVzb2x2ZTtcclxuICAgICAgICAgICAgX3RoaXMucmVqZWN0ID0gcmVqZWN0O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBPdXIgQVBJIGludGVybmFscyBhcmUgbm90IHByb21pc2VpZmllZCBhbmQgY2Fubm90IGJlY2F1c2Ugb3VyIGNhbGxiYWNrIEFQSXMgaGF2ZSBzdWJ0bGUgZXhwZWN0YXRpb25zIGFyb3VuZFxyXG4gICAgICogaW52b2tpbmcgcHJvbWlzZXMgaW5saW5lLCB3aGljaCBQcm9taXNlcyBhcmUgZm9yYmlkZGVuIHRvIGRvLiBUaGlzIG1ldGhvZCBhY2NlcHRzIGFuIG9wdGlvbmFsIG5vZGUtc3R5bGUgY2FsbGJhY2tcclxuICAgICAqIGFuZCByZXR1cm5zIGEgbm9kZS1zdHlsZSBjYWxsYmFjayB3aGljaCB3aWxsIHJlc29sdmUgb3IgcmVqZWN0IHRoZSBEZWZlcnJlZCdzIHByb21pc2UuXHJcbiAgICAgKi9cclxuICAgIERlZmVycmVkLnByb3RvdHlwZS53cmFwQ2FsbGJhY2sgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZXJyb3IsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMucmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLnJlc29sdmUodmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIC8vIEF0dGFjaGluZyBub29wIGhhbmRsZXIganVzdCBpbiBjYXNlIGRldmVsb3BlciB3YXNuJ3QgZXhwZWN0aW5nXHJcbiAgICAgICAgICAgICAgICAvLyBwcm9taXNlc1xyXG4gICAgICAgICAgICAgICAgX3RoaXMucHJvbWlzZS5jYXRjaChmdW5jdGlvbiAoKSB7IH0pO1xyXG4gICAgICAgICAgICAgICAgLy8gU29tZSBvZiBvdXIgY2FsbGJhY2tzIGRvbid0IGV4cGVjdCBhIHZhbHVlIGFuZCBvdXIgb3duIHRlc3RzXHJcbiAgICAgICAgICAgICAgICAvLyBhc3NlcnQgdGhhdCB0aGUgcGFyYW1ldGVyIGxlbmd0aCBpcyAxXHJcbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2subGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyb3IsIHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIERlZmVycmVkO1xyXG59KCkpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogUmV0dXJucyBuYXZpZ2F0b3IudXNlckFnZW50IHN0cmluZyBvciAnJyBpZiBpdCdzIG5vdCBkZWZpbmVkLlxyXG4gKiBAcmV0dXJuIHVzZXIgYWdlbnQgc3RyaW5nXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRVQSgpIHtcclxuICAgIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJlxyXG4gICAgICAgIHR5cGVvZiBuYXZpZ2F0b3JbJ3VzZXJBZ2VudCddID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIHJldHVybiBuYXZpZ2F0b3JbJ3VzZXJBZ2VudCddO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBEZXRlY3QgQ29yZG92YSAvIFBob25lR2FwIC8gSW9uaWMgZnJhbWV3b3JrcyBvbiBhIG1vYmlsZSBkZXZpY2UuXHJcbiAqXHJcbiAqIERlbGliZXJhdGVseSBkb2VzIG5vdCByZWx5IG9uIGNoZWNraW5nIGBmaWxlOi8vYCBVUkxzIChhcyB0aGlzIGZhaWxzIFBob25lR2FwXHJcbiAqIGluIHRoZSBSaXBwbGUgZW11bGF0b3IpIG5vciBDb3Jkb3ZhIGBvbkRldmljZVJlYWR5YCwgd2hpY2ggd291bGQgbm9ybWFsbHlcclxuICogd2FpdCBmb3IgYSBjYWxsYmFjay5cclxuICovXHJcbmZ1bmN0aW9uIGlzTW9iaWxlQ29yZG92YSgpIHtcclxuICAgIHJldHVybiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcclxuICAgICAgICAvLyBAdHMtaWdub3JlIFNldHRpbmcgdXAgYW4gYnJvYWRseSBhcHBsaWNhYmxlIGluZGV4IHNpZ25hdHVyZSBmb3IgV2luZG93XHJcbiAgICAgICAgLy8ganVzdCB0byBkZWFsIHdpdGggdGhpcyBjYXNlIHdvdWxkIHByb2JhYmx5IGJlIGEgYmFkIGlkZWEuXHJcbiAgICAgICAgISEod2luZG93Wydjb3Jkb3ZhJ10gfHwgd2luZG93WydwaG9uZWdhcCddIHx8IHdpbmRvd1snUGhvbmVHYXAnXSkgJiZcclxuICAgICAgICAvaW9zfGlwaG9uZXxpcG9kfGlwYWR8YW5kcm9pZHxibGFja2JlcnJ5fGllbW9iaWxlL2kudGVzdChnZXRVQSgpKSk7XHJcbn1cclxuLyoqXHJcbiAqIERldGVjdCBOb2RlLmpzLlxyXG4gKlxyXG4gKiBAcmV0dXJuIHRydWUgaWYgTm9kZS5qcyBlbnZpcm9ubWVudCBpcyBkZXRlY3RlZC5cclxuICovXHJcbi8vIE5vZGUgZGV0ZWN0aW9uIGxvZ2ljIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9pbGlha2FuL2RldGVjdC1ub2RlL1xyXG5mdW5jdGlvbiBpc05vZGUoKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGdsb2JhbC5wcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBEZXRlY3QgQnJvd3NlciBFbnZpcm9ubWVudFxyXG4gKi9cclxuZnVuY3Rpb24gaXNCcm93c2VyKCkge1xyXG4gICAgcmV0dXJuIHR5cGVvZiBzZWxmID09PSAnb2JqZWN0JyAmJiBzZWxmLnNlbGYgPT09IHNlbGY7XHJcbn1cclxuZnVuY3Rpb24gaXNCcm93c2VyRXh0ZW5zaW9uKCkge1xyXG4gICAgdmFyIHJ1bnRpbWUgPSB0eXBlb2YgY2hyb21lID09PSAnb2JqZWN0J1xyXG4gICAgICAgID8gY2hyb21lLnJ1bnRpbWVcclxuICAgICAgICA6IHR5cGVvZiBicm93c2VyID09PSAnb2JqZWN0J1xyXG4gICAgICAgICAgICA/IGJyb3dzZXIucnVudGltZVxyXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcclxuICAgIHJldHVybiB0eXBlb2YgcnVudGltZSA9PT0gJ29iamVjdCcgJiYgcnVudGltZS5pZCAhPT0gdW5kZWZpbmVkO1xyXG59XHJcbi8qKlxyXG4gKiBEZXRlY3QgUmVhY3QgTmF0aXZlLlxyXG4gKlxyXG4gKiBAcmV0dXJuIHRydWUgaWYgUmVhY3ROYXRpdmUgZW52aXJvbm1lbnQgaXMgZGV0ZWN0ZWQuXHJcbiAqL1xyXG5mdW5jdGlvbiBpc1JlYWN0TmF0aXZlKCkge1xyXG4gICAgcmV0dXJuICh0eXBlb2YgbmF2aWdhdG9yID09PSAnb2JqZWN0JyAmJiBuYXZpZ2F0b3JbJ3Byb2R1Y3QnXSA9PT0gJ1JlYWN0TmF0aXZlJyk7XHJcbn1cclxuLyoqIERldGVjdHMgRWxlY3Ryb24gYXBwcy4gKi9cclxuZnVuY3Rpb24gaXNFbGVjdHJvbigpIHtcclxuICAgIHJldHVybiBnZXRVQSgpLmluZGV4T2YoJ0VsZWN0cm9uLycpID49IDA7XHJcbn1cclxuLyoqIERldGVjdHMgSW50ZXJuZXQgRXhwbG9yZXIuICovXHJcbmZ1bmN0aW9uIGlzSUUoKSB7XHJcbiAgICB2YXIgdWEgPSBnZXRVQSgpO1xyXG4gICAgcmV0dXJuIHVhLmluZGV4T2YoJ01TSUUgJykgPj0gMCB8fCB1YS5pbmRleE9mKCdUcmlkZW50LycpID49IDA7XHJcbn1cclxuLyoqIERldGVjdHMgVW5pdmVyc2FsIFdpbmRvd3MgUGxhdGZvcm0gYXBwcy4gKi9cclxuZnVuY3Rpb24gaXNVV1AoKSB7XHJcbiAgICByZXR1cm4gZ2V0VUEoKS5pbmRleE9mKCdNU0FwcEhvc3QvJykgPj0gMDtcclxufVxyXG4vKipcclxuICogRGV0ZWN0IHdoZXRoZXIgdGhlIGN1cnJlbnQgU0RLIGJ1aWxkIGlzIHRoZSBOb2RlIHZlcnNpb24uXHJcbiAqXHJcbiAqIEByZXR1cm4gdHJ1ZSBpZiBpdCdzIHRoZSBOb2RlIFNESyBidWlsZC5cclxuICovXHJcbmZ1bmN0aW9uIGlzTm9kZVNkaygpIHtcclxuICAgIHJldHVybiBDT05TVEFOVFMuTk9ERV9DTElFTlQgPT09IHRydWUgfHwgQ09OU1RBTlRTLk5PREVfQURNSU4gPT09IHRydWU7XHJcbn1cclxuLyoqIFJldHVybnMgdHJ1ZSBpZiB3ZSBhcmUgcnVubmluZyBpbiBTYWZhcmkuICovXHJcbmZ1bmN0aW9uIGlzU2FmYXJpKCkge1xyXG4gICAgcmV0dXJuICghaXNOb2RlKCkgJiZcclxuICAgICAgICBuYXZpZ2F0b3IudXNlckFnZW50LmluY2x1ZGVzKCdTYWZhcmknKSAmJlxyXG4gICAgICAgICFuYXZpZ2F0b3IudXNlckFnZW50LmluY2x1ZGVzKCdDaHJvbWUnKSk7XHJcbn1cclxuLyoqXHJcbiAqIFRoaXMgbWV0aG9kIGNoZWNrcyBpZiBpbmRleGVkREIgaXMgc3VwcG9ydGVkIGJ5IGN1cnJlbnQgYnJvd3Nlci9zZXJ2aWNlIHdvcmtlciBjb250ZXh0XHJcbiAqIEByZXR1cm4gdHJ1ZSBpZiBpbmRleGVkREIgaXMgc3VwcG9ydGVkIGJ5IGN1cnJlbnQgYnJvd3Nlci9zZXJ2aWNlIHdvcmtlciBjb250ZXh0XHJcbiAqL1xyXG5mdW5jdGlvbiBpc0luZGV4ZWREQkF2YWlsYWJsZSgpIHtcclxuICAgIHJldHVybiAnaW5kZXhlZERCJyBpbiBzZWxmICYmIGluZGV4ZWREQiAhPSBudWxsO1xyXG59XHJcbi8qKlxyXG4gKiBUaGlzIG1ldGhvZCB2YWxpZGF0ZXMgYnJvd3NlciBjb250ZXh0IGZvciBpbmRleGVkREIgYnkgb3BlbmluZyBhIGR1bW15IGluZGV4ZWREQiBkYXRhYmFzZSBhbmQgcmVqZWN0XHJcbiAqIGlmIGVycm9ycyBvY2N1ciBkdXJpbmcgdGhlIGRhdGFiYXNlIG9wZW4gb3BlcmF0aW9uLlxyXG4gKi9cclxuZnVuY3Rpb24gdmFsaWRhdGVJbmRleGVkREJPcGVuYWJsZSgpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdmFyIHByZUV4aXN0XzEgPSB0cnVlO1xyXG4gICAgICAgICAgICB2YXIgREJfQ0hFQ0tfTkFNRV8xID0gJ3ZhbGlkYXRlLWJyb3dzZXItY29udGV4dC1mb3ItaW5kZXhlZGRiLWFuYWx5dGljcy1tb2R1bGUnO1xyXG4gICAgICAgICAgICB2YXIgcmVxdWVzdF8xID0gd2luZG93LmluZGV4ZWREQi5vcGVuKERCX0NIRUNLX05BTUVfMSk7XHJcbiAgICAgICAgICAgIHJlcXVlc3RfMS5vbnN1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0XzEucmVzdWx0LmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAvLyBkZWxldGUgZGF0YWJhc2Ugb25seSB3aGVuIGl0IGRvZXNuJ3QgcHJlLWV4aXN0XHJcbiAgICAgICAgICAgICAgICBpZiAoIXByZUV4aXN0XzEpIHtcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuaW5kZXhlZERCLmRlbGV0ZURhdGFiYXNlKERCX0NIRUNLX05BTUVfMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKHRydWUpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICByZXF1ZXN0XzEub251cGdyYWRlbmVlZGVkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcHJlRXhpc3RfMSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICByZXF1ZXN0XzEub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBfYTtcclxuICAgICAgICAgICAgICAgIHJlamVjdCgoKF9hID0gcmVxdWVzdF8xLmVycm9yKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubWVzc2FnZSkgfHwgJycpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG4vKipcclxuICpcclxuICogVGhpcyBtZXRob2QgY2hlY2tzIHdoZXRoZXIgY29va2llIGlzIGVuYWJsZWQgd2l0aGluIGN1cnJlbnQgYnJvd3NlclxyXG4gKiBAcmV0dXJuIHRydWUgaWYgY29va2llIGlzIGVuYWJsZWQgd2l0aGluIGN1cnJlbnQgYnJvd3NlclxyXG4gKi9cclxuZnVuY3Rpb24gYXJlQ29va2llc0VuYWJsZWQoKSB7XHJcbiAgICBpZiAoIW5hdmlnYXRvciB8fCAhbmF2aWdhdG9yLmNvb2tpZUVuYWJsZWQpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgRVJST1JfTkFNRSA9ICdGaXJlYmFzZUVycm9yJztcclxuLy8gQmFzZWQgb24gY29kZSBmcm9tOlxyXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9FcnJvciNDdXN0b21fRXJyb3JfVHlwZXNcclxudmFyIEZpcmViYXNlRXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoRmlyZWJhc2VFcnJvciwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIEZpcmViYXNlRXJyb3IoY29kZSwgbWVzc2FnZSwgY3VzdG9tRGF0YSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG1lc3NhZ2UpIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMuY29kZSA9IGNvZGU7XHJcbiAgICAgICAgX3RoaXMuY3VzdG9tRGF0YSA9IGN1c3RvbURhdGE7XHJcbiAgICAgICAgX3RoaXMubmFtZSA9IEVSUk9SX05BTUU7XHJcbiAgICAgICAgLy8gRml4IEZvciBFUzVcclxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L1R5cGVTY3JpcHQtd2lraS9ibG9iL21hc3Rlci9CcmVha2luZy1DaGFuZ2VzLm1kI2V4dGVuZGluZy1idWlsdC1pbnMtbGlrZS1lcnJvci1hcnJheS1hbmQtbWFwLW1heS1uby1sb25nZXItd29ya1xyXG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihfdGhpcywgRmlyZWJhc2VFcnJvci5wcm90b3R5cGUpO1xyXG4gICAgICAgIC8vIE1haW50YWlucyBwcm9wZXIgc3RhY2sgdHJhY2UgZm9yIHdoZXJlIG91ciBlcnJvciB3YXMgdGhyb3duLlxyXG4gICAgICAgIC8vIE9ubHkgYXZhaWxhYmxlIG9uIFY4LlxyXG4gICAgICAgIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xyXG4gICAgICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZShfdGhpcywgRXJyb3JGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRmlyZWJhc2VFcnJvcjtcclxufShFcnJvcikpO1xyXG52YXIgRXJyb3JGYWN0b3J5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRXJyb3JGYWN0b3J5KHNlcnZpY2UsIHNlcnZpY2VOYW1lLCBlcnJvcnMpIHtcclxuICAgICAgICB0aGlzLnNlcnZpY2UgPSBzZXJ2aWNlO1xyXG4gICAgICAgIHRoaXMuc2VydmljZU5hbWUgPSBzZXJ2aWNlTmFtZTtcclxuICAgICAgICB0aGlzLmVycm9ycyA9IGVycm9ycztcclxuICAgIH1cclxuICAgIEVycm9yRmFjdG9yeS5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gKGNvZGUpIHtcclxuICAgICAgICB2YXIgZGF0YSA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGRhdGFbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBjdXN0b21EYXRhID0gZGF0YVswXSB8fCB7fTtcclxuICAgICAgICB2YXIgZnVsbENvZGUgPSB0aGlzLnNlcnZpY2UgKyBcIi9cIiArIGNvZGU7XHJcbiAgICAgICAgdmFyIHRlbXBsYXRlID0gdGhpcy5lcnJvcnNbY29kZV07XHJcbiAgICAgICAgdmFyIG1lc3NhZ2UgPSB0ZW1wbGF0ZSA/IHJlcGxhY2VUZW1wbGF0ZSh0ZW1wbGF0ZSwgY3VzdG9tRGF0YSkgOiAnRXJyb3InO1xyXG4gICAgICAgIC8vIFNlcnZpY2UgTmFtZTogRXJyb3IgbWVzc2FnZSAoc2VydmljZS9jb2RlKS5cclxuICAgICAgICB2YXIgZnVsbE1lc3NhZ2UgPSB0aGlzLnNlcnZpY2VOYW1lICsgXCI6IFwiICsgbWVzc2FnZSArIFwiIChcIiArIGZ1bGxDb2RlICsgXCIpLlwiO1xyXG4gICAgICAgIHZhciBlcnJvciA9IG5ldyBGaXJlYmFzZUVycm9yKGZ1bGxDb2RlLCBmdWxsTWVzc2FnZSwgY3VzdG9tRGF0YSk7XHJcbiAgICAgICAgcmV0dXJuIGVycm9yO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBFcnJvckZhY3Rvcnk7XHJcbn0oKSk7XHJcbmZ1bmN0aW9uIHJlcGxhY2VUZW1wbGF0ZSh0ZW1wbGF0ZSwgZGF0YSkge1xyXG4gICAgcmV0dXJuIHRlbXBsYXRlLnJlcGxhY2UoUEFUVEVSTiwgZnVuY3Rpb24gKF8sIGtleSkge1xyXG4gICAgICAgIHZhciB2YWx1ZSA9IGRhdGFba2V5XTtcclxuICAgICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCA/IFN0cmluZyh2YWx1ZSkgOiBcIjxcIiArIGtleSArIFwiPz5cIjtcclxuICAgIH0pO1xyXG59XHJcbnZhciBQQVRURVJOID0gL1xce1xcJChbXn1dKyl9L2c7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBFdmFsdWF0ZXMgYSBKU09OIHN0cmluZyBpbnRvIGEgamF2YXNjcmlwdCBvYmplY3QuXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgQSBzdHJpbmcgY29udGFpbmluZyBKU09OLlxyXG4gKiBAcmV0dXJuIHsqfSBUaGUgamF2YXNjcmlwdCBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBzcGVjaWZpZWQgSlNPTi5cclxuICovXHJcbmZ1bmN0aW9uIGpzb25FdmFsKHN0cikge1xyXG4gICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyKTtcclxufVxyXG4vKipcclxuICogUmV0dXJucyBKU09OIHJlcHJlc2VudGluZyBhIGphdmFzY3JpcHQgb2JqZWN0LlxyXG4gKiBAcGFyYW0geyp9IGRhdGEgSmF2YXNjcmlwdCBvYmplY3QgdG8gYmUgc3RyaW5naWZpZWQuXHJcbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIEpTT04gY29udGVudHMgb2YgdGhlIG9iamVjdC5cclxuICovXHJcbmZ1bmN0aW9uIHN0cmluZ2lmeShkYXRhKSB7XHJcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIERlY29kZXMgYSBGaXJlYmFzZSBhdXRoLiB0b2tlbiBpbnRvIGNvbnN0aXR1ZW50IHBhcnRzLlxyXG4gKlxyXG4gKiBOb3RlczpcclxuICogLSBNYXkgcmV0dXJuIHdpdGggaW52YWxpZCAvIGluY29tcGxldGUgY2xhaW1zIGlmIHRoZXJlJ3Mgbm8gbmF0aXZlIGJhc2U2NCBkZWNvZGluZyBzdXBwb3J0LlxyXG4gKiAtIERvZXNuJ3QgY2hlY2sgaWYgdGhlIHRva2VuIGlzIGFjdHVhbGx5IHZhbGlkLlxyXG4gKi9cclxudmFyIGRlY29kZSA9IGZ1bmN0aW9uICh0b2tlbikge1xyXG4gICAgdmFyIGhlYWRlciA9IHt9LCBjbGFpbXMgPSB7fSwgZGF0YSA9IHt9LCBzaWduYXR1cmUgPSAnJztcclxuICAgIHRyeSB7XHJcbiAgICAgICAgdmFyIHBhcnRzID0gdG9rZW4uc3BsaXQoJy4nKTtcclxuICAgICAgICBoZWFkZXIgPSBqc29uRXZhbChiYXNlNjREZWNvZGUocGFydHNbMF0pIHx8ICcnKTtcclxuICAgICAgICBjbGFpbXMgPSBqc29uRXZhbChiYXNlNjREZWNvZGUocGFydHNbMV0pIHx8ICcnKTtcclxuICAgICAgICBzaWduYXR1cmUgPSBwYXJ0c1syXTtcclxuICAgICAgICBkYXRhID0gY2xhaW1zWydkJ10gfHwge307XHJcbiAgICAgICAgZGVsZXRlIGNsYWltc1snZCddO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHsgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBoZWFkZXI6IGhlYWRlcixcclxuICAgICAgICBjbGFpbXM6IGNsYWltcyxcclxuICAgICAgICBkYXRhOiBkYXRhLFxyXG4gICAgICAgIHNpZ25hdHVyZTogc2lnbmF0dXJlXHJcbiAgICB9O1xyXG59O1xyXG4vKipcclxuICogRGVjb2RlcyBhIEZpcmViYXNlIGF1dGguIHRva2VuIGFuZCBjaGVja3MgdGhlIHZhbGlkaXR5IG9mIGl0cyB0aW1lLWJhc2VkIGNsYWltcy4gV2lsbCByZXR1cm4gdHJ1ZSBpZiB0aGVcclxuICogdG9rZW4gaXMgd2l0aGluIHRoZSB0aW1lIHdpbmRvdyBhdXRob3JpemVkIGJ5IHRoZSAnbmJmJyAobm90LWJlZm9yZSkgYW5kICdpYXQnIChpc3N1ZWQtYXQpIGNsYWltcy5cclxuICpcclxuICogTm90ZXM6XHJcbiAqIC0gTWF5IHJldHVybiBhIGZhbHNlIG5lZ2F0aXZlIGlmIHRoZXJlJ3Mgbm8gbmF0aXZlIGJhc2U2NCBkZWNvZGluZyBzdXBwb3J0LlxyXG4gKiAtIERvZXNuJ3QgY2hlY2sgaWYgdGhlIHRva2VuIGlzIGFjdHVhbGx5IHZhbGlkLlxyXG4gKi9cclxudmFyIGlzVmFsaWRUaW1lc3RhbXAgPSBmdW5jdGlvbiAodG9rZW4pIHtcclxuICAgIHZhciBjbGFpbXMgPSBkZWNvZGUodG9rZW4pLmNsYWltcztcclxuICAgIHZhciBub3cgPSBNYXRoLmZsb29yKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC8gMTAwMCk7XHJcbiAgICB2YXIgdmFsaWRTaW5jZSA9IDAsIHZhbGlkVW50aWwgPSAwO1xyXG4gICAgaWYgKHR5cGVvZiBjbGFpbXMgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgaWYgKGNsYWltcy5oYXNPd25Qcm9wZXJ0eSgnbmJmJykpIHtcclxuICAgICAgICAgICAgdmFsaWRTaW5jZSA9IGNsYWltc1snbmJmJ107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGNsYWltcy5oYXNPd25Qcm9wZXJ0eSgnaWF0JykpIHtcclxuICAgICAgICAgICAgdmFsaWRTaW5jZSA9IGNsYWltc1snaWF0J107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjbGFpbXMuaGFzT3duUHJvcGVydHkoJ2V4cCcpKSB7XHJcbiAgICAgICAgICAgIHZhbGlkVW50aWwgPSBjbGFpbXNbJ2V4cCddO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gdG9rZW4gd2lsbCBleHBpcmUgYWZ0ZXIgMjRoIGJ5IGRlZmF1bHRcclxuICAgICAgICAgICAgdmFsaWRVbnRpbCA9IHZhbGlkU2luY2UgKyA4NjQwMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gKCEhbm93ICYmXHJcbiAgICAgICAgISF2YWxpZFNpbmNlICYmXHJcbiAgICAgICAgISF2YWxpZFVudGlsICYmXHJcbiAgICAgICAgbm93ID49IHZhbGlkU2luY2UgJiZcclxuICAgICAgICBub3cgPD0gdmFsaWRVbnRpbCk7XHJcbn07XHJcbi8qKlxyXG4gKiBEZWNvZGVzIGEgRmlyZWJhc2UgYXV0aC4gdG9rZW4gYW5kIHJldHVybnMgaXRzIGlzc3VlZCBhdCB0aW1lIGlmIHZhbGlkLCBudWxsIG90aGVyd2lzZS5cclxuICpcclxuICogTm90ZXM6XHJcbiAqIC0gTWF5IHJldHVybiBudWxsIGlmIHRoZXJlJ3Mgbm8gbmF0aXZlIGJhc2U2NCBkZWNvZGluZyBzdXBwb3J0LlxyXG4gKiAtIERvZXNuJ3QgY2hlY2sgaWYgdGhlIHRva2VuIGlzIGFjdHVhbGx5IHZhbGlkLlxyXG4gKi9cclxudmFyIGlzc3VlZEF0VGltZSA9IGZ1bmN0aW9uICh0b2tlbikge1xyXG4gICAgdmFyIGNsYWltcyA9IGRlY29kZSh0b2tlbikuY2xhaW1zO1xyXG4gICAgaWYgKHR5cGVvZiBjbGFpbXMgPT09ICdvYmplY3QnICYmIGNsYWltcy5oYXNPd25Qcm9wZXJ0eSgnaWF0JykpIHtcclxuICAgICAgICByZXR1cm4gY2xhaW1zWydpYXQnXTtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59O1xyXG4vKipcclxuICogRGVjb2RlcyBhIEZpcmViYXNlIGF1dGguIHRva2VuIGFuZCBjaGVja3MgdGhlIHZhbGlkaXR5IG9mIGl0cyBmb3JtYXQuIEV4cGVjdHMgYSB2YWxpZCBpc3N1ZWQtYXQgdGltZS5cclxuICpcclxuICogTm90ZXM6XHJcbiAqIC0gTWF5IHJldHVybiBhIGZhbHNlIG5lZ2F0aXZlIGlmIHRoZXJlJ3Mgbm8gbmF0aXZlIGJhc2U2NCBkZWNvZGluZyBzdXBwb3J0LlxyXG4gKiAtIERvZXNuJ3QgY2hlY2sgaWYgdGhlIHRva2VuIGlzIGFjdHVhbGx5IHZhbGlkLlxyXG4gKi9cclxudmFyIGlzVmFsaWRGb3JtYXQgPSBmdW5jdGlvbiAodG9rZW4pIHtcclxuICAgIHZhciBkZWNvZGVkID0gZGVjb2RlKHRva2VuKSwgY2xhaW1zID0gZGVjb2RlZC5jbGFpbXM7XHJcbiAgICByZXR1cm4gISFjbGFpbXMgJiYgdHlwZW9mIGNsYWltcyA9PT0gJ29iamVjdCcgJiYgY2xhaW1zLmhhc093blByb3BlcnR5KCdpYXQnKTtcclxufTtcclxuLyoqXHJcbiAqIEF0dGVtcHRzIHRvIHBlZXIgaW50byBhbiBhdXRoIHRva2VuIGFuZCBkZXRlcm1pbmUgaWYgaXQncyBhbiBhZG1pbiBhdXRoIHRva2VuIGJ5IGxvb2tpbmcgYXQgdGhlIGNsYWltcyBwb3J0aW9uLlxyXG4gKlxyXG4gKiBOb3RlczpcclxuICogLSBNYXkgcmV0dXJuIGEgZmFsc2UgbmVnYXRpdmUgaWYgdGhlcmUncyBubyBuYXRpdmUgYmFzZTY0IGRlY29kaW5nIHN1cHBvcnQuXHJcbiAqIC0gRG9lc24ndCBjaGVjayBpZiB0aGUgdG9rZW4gaXMgYWN0dWFsbHkgdmFsaWQuXHJcbiAqL1xyXG52YXIgaXNBZG1pbiA9IGZ1bmN0aW9uICh0b2tlbikge1xyXG4gICAgdmFyIGNsYWltcyA9IGRlY29kZSh0b2tlbikuY2xhaW1zO1xyXG4gICAgcmV0dXJuIHR5cGVvZiBjbGFpbXMgPT09ICdvYmplY3QnICYmIGNsYWltc1snYWRtaW4nXSA9PT0gdHJ1ZTtcclxufTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gY29udGFpbnMob2JqLCBrZXkpIHtcclxuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpO1xyXG59XHJcbmZ1bmN0aW9uIHNhZmVHZXQob2JqLCBrZXkpIHtcclxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XHJcbiAgICAgICAgcmV0dXJuIG9ialtrZXldO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBpc0VtcHR5KG9iaikge1xyXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xyXG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG5mdW5jdGlvbiBtYXAob2JqLCBmbiwgY29udGV4dE9iaikge1xyXG4gICAgdmFyIHJlcyA9IHt9O1xyXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xyXG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XHJcbiAgICAgICAgICAgIHJlc1trZXldID0gZm4uY2FsbChjb250ZXh0T2JqLCBvYmpba2V5XSwga2V5LCBvYmopO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFJldHVybnMgYSBxdWVyeXN0cmluZy1mb3JtYXR0ZWQgc3RyaW5nIChlLmcuICZhcmc9dmFsJmFyZzI9dmFsMikgZnJvbSBhXHJcbiAqIHBhcmFtcyBvYmplY3QgKGUuZy4ge2FyZzogJ3ZhbCcsIGFyZzI6ICd2YWwyJ30pXHJcbiAqIE5vdGU6IFlvdSBtdXN0IHByZXBlbmQgaXQgd2l0aCA/IHdoZW4gYWRkaW5nIGl0IHRvIGEgVVJMLlxyXG4gKi9cclxuZnVuY3Rpb24gcXVlcnlzdHJpbmcocXVlcnlzdHJpbmdQYXJhbXMpIHtcclxuICAgIHZhciBwYXJhbXMgPSBbXTtcclxuICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbiAoYXJyYXlWYWwpIHtcclxuICAgICAgICAgICAgICAgIHBhcmFtcy5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChrZXkpICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGFycmF5VmFsKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcGFyYW1zLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KGtleSkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IE9iamVjdC5lbnRyaWVzKHF1ZXJ5c3RyaW5nUGFyYW1zKTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICB2YXIgX2IgPSBfYVtfaV0sIGtleSA9IF9iWzBdLCB2YWx1ZSA9IF9iWzFdO1xyXG4gICAgICAgIF9sb29wXzEoa2V5LCB2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcGFyYW1zLmxlbmd0aCA/ICcmJyArIHBhcmFtcy5qb2luKCcmJykgOiAnJztcclxufVxyXG4vKipcclxuICogRGVjb2RlcyBhIHF1ZXJ5c3RyaW5nIChlLmcuID9hcmc9dmFsJmFyZzI9dmFsMikgaW50byBhIHBhcmFtcyBvYmplY3RcclxuICogKGUuZy4ge2FyZzogJ3ZhbCcsIGFyZzI6ICd2YWwyJ30pXHJcbiAqL1xyXG5mdW5jdGlvbiBxdWVyeXN0cmluZ0RlY29kZShxdWVyeXN0cmluZykge1xyXG4gICAgdmFyIG9iaiA9IHt9O1xyXG4gICAgdmFyIHRva2VucyA9IHF1ZXJ5c3RyaW5nLnJlcGxhY2UoL15cXD8vLCAnJykuc3BsaXQoJyYnKTtcclxuICAgIHRva2Vucy5mb3JFYWNoKGZ1bmN0aW9uICh0b2tlbikge1xyXG4gICAgICAgIGlmICh0b2tlbikge1xyXG4gICAgICAgICAgICB2YXIga2V5ID0gdG9rZW4uc3BsaXQoJz0nKTtcclxuICAgICAgICAgICAgb2JqW2tleVswXV0gPSBrZXlbMV07XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gb2JqO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBAZmlsZW92ZXJ2aWV3IFNIQS0xIGNyeXB0b2dyYXBoaWMgaGFzaC5cclxuICogVmFyaWFibGUgbmFtZXMgZm9sbG93IHRoZSBub3RhdGlvbiBpbiBGSVBTIFBVQiAxODAtMzpcclxuICogaHR0cDovL2NzcmMubmlzdC5nb3YvcHVibGljYXRpb25zL2ZpcHMvZmlwczE4MC0zL2ZpcHMxODAtM19maW5hbC5wZGYuXHJcbiAqXHJcbiAqIFVzYWdlOlxyXG4gKiAgIHZhciBzaGExID0gbmV3IHNoYTEoKTtcclxuICogICBzaGExLnVwZGF0ZShieXRlcyk7XHJcbiAqICAgdmFyIGhhc2ggPSBzaGExLmRpZ2VzdCgpO1xyXG4gKlxyXG4gKiBQZXJmb3JtYW5jZTpcclxuICogICBDaHJvbWUgMjM6ICAgfjQwMCBNYml0L3NcclxuICogICBGaXJlZm94IDE2OiAgfjI1MCBNYml0L3NcclxuICpcclxuICovXHJcbi8qKlxyXG4gKiBTSEEtMSBjcnlwdG9ncmFwaGljIGhhc2ggY29uc3RydWN0b3IuXHJcbiAqXHJcbiAqIFRoZSBwcm9wZXJ0aWVzIGRlY2xhcmVkIGhlcmUgYXJlIGRpc2N1c3NlZCBpbiB0aGUgYWJvdmUgYWxnb3JpdGhtIGRvY3VtZW50LlxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQGZpbmFsXHJcbiAqIEBzdHJ1Y3RcclxuICovXHJcbnZhciBTaGExID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gU2hhMSgpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBIb2xkcyB0aGUgcHJldmlvdXMgdmFsdWVzIG9mIGFjY3VtdWxhdGVkIHZhcmlhYmxlcyBhLWUgaW4gdGhlIGNvbXByZXNzX1xyXG4gICAgICAgICAqIGZ1bmN0aW9uLlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5jaGFpbl8gPSBbXTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIGJ1ZmZlciBob2xkaW5nIHRoZSBwYXJ0aWFsbHkgY29tcHV0ZWQgaGFzaCByZXN1bHQuXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmJ1Zl8gPSBbXTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBbiBhcnJheSBvZiA4MCBieXRlcywgZWFjaCBhIHBhcnQgb2YgdGhlIG1lc3NhZ2UgdG8gYmUgaGFzaGVkLiAgUmVmZXJyZWQgdG9cclxuICAgICAgICAgKiBhcyB0aGUgbWVzc2FnZSBzY2hlZHVsZSBpbiB0aGUgZG9jcy5cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuV18gPSBbXTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDb250YWlucyBkYXRhIG5lZWRlZCB0byBwYWQgbWVzc2FnZXMgbGVzcyB0aGFuIDY0IGJ5dGVzLlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5wYWRfID0gW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHByaXZhdGUge251bWJlcn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmluYnVmXyA9IDA7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHByaXZhdGUge251bWJlcn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnRvdGFsXyA9IDA7XHJcbiAgICAgICAgdGhpcy5ibG9ja1NpemUgPSA1MTIgLyA4O1xyXG4gICAgICAgIHRoaXMucGFkX1swXSA9IDEyODtcclxuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IHRoaXMuYmxvY2tTaXplOyArK2kpIHtcclxuICAgICAgICAgICAgdGhpcy5wYWRfW2ldID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5yZXNldCgpO1xyXG4gICAgfVxyXG4gICAgU2hhMS5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bMF0gPSAweDY3NDUyMzAxO1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzFdID0gMHhlZmNkYWI4OTtcclxuICAgICAgICB0aGlzLmNoYWluX1syXSA9IDB4OThiYWRjZmU7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bM10gPSAweDEwMzI1NDc2O1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzRdID0gMHhjM2QyZTFmMDtcclxuICAgICAgICB0aGlzLmluYnVmXyA9IDA7XHJcbiAgICAgICAgdGhpcy50b3RhbF8gPSAwO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogSW50ZXJuYWwgY29tcHJlc3MgaGVscGVyIGZ1bmN0aW9uLlxyXG4gICAgICogQHBhcmFtIGJ1ZiBCbG9jayB0byBjb21wcmVzcy5cclxuICAgICAqIEBwYXJhbSBvZmZzZXQgT2Zmc2V0IG9mIHRoZSBibG9jayBpbiB0aGUgYnVmZmVyLlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgU2hhMS5wcm90b3R5cGUuY29tcHJlc3NfID0gZnVuY3Rpb24gKGJ1Ziwgb2Zmc2V0KSB7XHJcbiAgICAgICAgaWYgKCFvZmZzZXQpIHtcclxuICAgICAgICAgICAgb2Zmc2V0ID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIFcgPSB0aGlzLldfO1xyXG4gICAgICAgIC8vIGdldCAxNiBiaWcgZW5kaWFuIHdvcmRzXHJcbiAgICAgICAgaWYgKHR5cGVvZiBidWYgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgLy8gVE9ETyh1c2VyKTogW2J1ZyA4MTQwMTIyXSBSZWNlbnQgdmVyc2lvbnMgb2YgU2FmYXJpIGZvciBNYWMgT1MgYW5kIGlPU1xyXG4gICAgICAgICAgICAgICAgLy8gaGF2ZSBhIGJ1ZyB0aGF0IHR1cm5zIHRoZSBwb3N0LWluY3JlbWVudCArKyBvcGVyYXRvciBpbnRvIHByZS1pbmNyZW1lbnRcclxuICAgICAgICAgICAgICAgIC8vIGR1cmluZyBKSVQgY29tcGlsYXRpb24uICBXZSBoYXZlIGNvZGUgdGhhdCBkZXBlbmRzIGhlYXZpbHkgb24gU0hBLTEgZm9yXHJcbiAgICAgICAgICAgICAgICAvLyBjb3JyZWN0bmVzcyBhbmQgd2hpY2ggaXMgYWZmZWN0ZWQgYnkgdGhpcyBidWcsIHNvIEkndmUgcmVtb3ZlZCBhbGwgdXNlc1xyXG4gICAgICAgICAgICAgICAgLy8gb2YgcG9zdC1pbmNyZW1lbnQgKysgaW4gd2hpY2ggdGhlIHJlc3VsdCB2YWx1ZSBpcyB1c2VkLiAgV2UgY2FuIHJldmVydFxyXG4gICAgICAgICAgICAgICAgLy8gdGhpcyBjaGFuZ2Ugb25jZSB0aGUgU2FmYXJpIGJ1Z1xyXG4gICAgICAgICAgICAgICAgLy8gKGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMDkwMzYpIGhhcyBiZWVuIGZpeGVkIGFuZFxyXG4gICAgICAgICAgICAgICAgLy8gbW9zdCBjbGllbnRzIGhhdmUgYmVlbiB1cGRhdGVkLlxyXG4gICAgICAgICAgICAgICAgV1tpXSA9XHJcbiAgICAgICAgICAgICAgICAgICAgKGJ1Zi5jaGFyQ29kZUF0KG9mZnNldCkgPDwgMjQpIHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKGJ1Zi5jaGFyQ29kZUF0KG9mZnNldCArIDEpIDw8IDE2KSB8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChidWYuY2hhckNvZGVBdChvZmZzZXQgKyAyKSA8PCA4KSB8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1Zi5jaGFyQ29kZUF0KG9mZnNldCArIDMpO1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IDQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgV1tpXSA9XHJcbiAgICAgICAgICAgICAgICAgICAgKGJ1ZltvZmZzZXRdIDw8IDI0KSB8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChidWZbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKGJ1ZltvZmZzZXQgKyAyXSA8PCA4KSB8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZltvZmZzZXQgKyAzXTtcclxuICAgICAgICAgICAgICAgIG9mZnNldCArPSA0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGV4cGFuZCB0byA4MCB3b3Jkc1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAxNjsgaSA8IDgwOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIHQgPSBXW2kgLSAzXSBeIFdbaSAtIDhdIF4gV1tpIC0gMTRdIF4gV1tpIC0gMTZdO1xyXG4gICAgICAgICAgICBXW2ldID0gKCh0IDw8IDEpIHwgKHQgPj4+IDMxKSkgJiAweGZmZmZmZmZmO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgYSA9IHRoaXMuY2hhaW5fWzBdO1xyXG4gICAgICAgIHZhciBiID0gdGhpcy5jaGFpbl9bMV07XHJcbiAgICAgICAgdmFyIGMgPSB0aGlzLmNoYWluX1syXTtcclxuICAgICAgICB2YXIgZCA9IHRoaXMuY2hhaW5fWzNdO1xyXG4gICAgICAgIHZhciBlID0gdGhpcy5jaGFpbl9bNF07XHJcbiAgICAgICAgdmFyIGYsIGs7XHJcbiAgICAgICAgLy8gVE9ETyh1c2VyKTogVHJ5IHRvIHVucm9sbCB0aGlzIGxvb3AgdG8gc3BlZWQgdXAgdGhlIGNvbXB1dGF0aW9uLlxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgODA7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoaSA8IDQwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA8IDIwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZiA9IGQgXiAoYiAmIChjIF4gZCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGsgPSAweDVhODI3OTk5O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZiA9IGIgXiBjIF4gZDtcclxuICAgICAgICAgICAgICAgICAgICBrID0gMHg2ZWQ5ZWJhMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChpIDwgNjApIHtcclxuICAgICAgICAgICAgICAgICAgICBmID0gKGIgJiBjKSB8IChkICYgKGIgfCBjKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgayA9IDB4OGYxYmJjZGM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBmID0gYiBeIGMgXiBkO1xyXG4gICAgICAgICAgICAgICAgICAgIGsgPSAweGNhNjJjMWQ2O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciB0ID0gKCgoYSA8PCA1KSB8IChhID4+PiAyNykpICsgZiArIGUgKyBrICsgV1tpXSkgJiAweGZmZmZmZmZmO1xyXG4gICAgICAgICAgICBlID0gZDtcclxuICAgICAgICAgICAgZCA9IGM7XHJcbiAgICAgICAgICAgIGMgPSAoKGIgPDwgMzApIHwgKGIgPj4+IDIpKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICAgICAgICAgIGIgPSBhO1xyXG4gICAgICAgICAgICBhID0gdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bMF0gPSAodGhpcy5jaGFpbl9bMF0gKyBhKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bMV0gPSAodGhpcy5jaGFpbl9bMV0gKyBiKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bMl0gPSAodGhpcy5jaGFpbl9bMl0gKyBjKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bM10gPSAodGhpcy5jaGFpbl9bM10gKyBkKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bNF0gPSAodGhpcy5jaGFpbl9bNF0gKyBlKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICB9O1xyXG4gICAgU2hhMS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGJ5dGVzLCBsZW5ndGgpIHtcclxuICAgICAgICAvLyBUT0RPKGpvaG5sZW56KTogdGlnaHRlbiB0aGUgZnVuY3Rpb24gc2lnbmF0dXJlIGFuZCByZW1vdmUgdGhpcyBjaGVja1xyXG4gICAgICAgIGlmIChieXRlcyA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGxlbmd0aCA9IGJ5dGVzLmxlbmd0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGxlbmd0aE1pbnVzQmxvY2sgPSBsZW5ndGggLSB0aGlzLmJsb2NrU2l6ZTtcclxuICAgICAgICB2YXIgbiA9IDA7XHJcbiAgICAgICAgLy8gVXNpbmcgbG9jYWwgaW5zdGVhZCBvZiBtZW1iZXIgdmFyaWFibGVzIGdpdmVzIH41JSBzcGVlZHVwIG9uIEZpcmVmb3ggMTYuXHJcbiAgICAgICAgdmFyIGJ1ZiA9IHRoaXMuYnVmXztcclxuICAgICAgICB2YXIgaW5idWYgPSB0aGlzLmluYnVmXztcclxuICAgICAgICAvLyBUaGUgb3V0ZXIgd2hpbGUgbG9vcCBzaG91bGQgZXhlY3V0ZSBhdCBtb3N0IHR3aWNlLlxyXG4gICAgICAgIHdoaWxlIChuIDwgbGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgaGF2ZSBubyBkYXRhIGluIHRoZSBibG9jayB0byB0b3AgdXAsIHdlIGNhbiBkaXJlY3RseSBwcm9jZXNzIHRoZVxyXG4gICAgICAgICAgICAvLyBpbnB1dCBidWZmZXIgKGFzc3VtaW5nIGl0IGNvbnRhaW5zIHN1ZmZpY2llbnQgZGF0YSkuIFRoaXMgZ2l2ZXMgfjI1JVxyXG4gICAgICAgICAgICAvLyBzcGVlZHVwIG9uIENocm9tZSAyMyBhbmQgfjE1JSBzcGVlZHVwIG9uIEZpcmVmb3ggMTYsIGJ1dCByZXF1aXJlcyB0aGF0XHJcbiAgICAgICAgICAgIC8vIHRoZSBkYXRhIGlzIHByb3ZpZGVkIGluIGxhcmdlIGNodW5rcyAob3IgaW4gbXVsdGlwbGVzIG9mIDY0IGJ5dGVzKS5cclxuICAgICAgICAgICAgaWYgKGluYnVmID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAobiA8PSBsZW5ndGhNaW51c0Jsb2NrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wcmVzc18oYnl0ZXMsIG4pO1xyXG4gICAgICAgICAgICAgICAgICAgIG4gKz0gdGhpcy5ibG9ja1NpemU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBieXRlcyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChuIDwgbGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnVmW2luYnVmXSA9IGJ5dGVzLmNoYXJDb2RlQXQobik7XHJcbiAgICAgICAgICAgICAgICAgICAgKytpbmJ1ZjtcclxuICAgICAgICAgICAgICAgICAgICArK247XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluYnVmID09PSB0aGlzLmJsb2NrU2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXByZXNzXyhidWYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmJ1ZiA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEp1bXAgdG8gdGhlIG91dGVyIGxvb3Agc28gd2UgdXNlIHRoZSBmdWxsLWJsb2NrIG9wdGltaXphdGlvbi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKG4gPCBsZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBidWZbaW5idWZdID0gYnl0ZXNbbl07XHJcbiAgICAgICAgICAgICAgICAgICAgKytpbmJ1ZjtcclxuICAgICAgICAgICAgICAgICAgICArK247XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluYnVmID09PSB0aGlzLmJsb2NrU2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXByZXNzXyhidWYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmJ1ZiA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEp1bXAgdG8gdGhlIG91dGVyIGxvb3Agc28gd2UgdXNlIHRoZSBmdWxsLWJsb2NrIG9wdGltaXphdGlvbi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaW5idWZfID0gaW5idWY7XHJcbiAgICAgICAgdGhpcy50b3RhbF8gKz0gbGVuZ3RoO1xyXG4gICAgfTtcclxuICAgIC8qKiBAb3ZlcnJpZGUgKi9cclxuICAgIFNoYTEucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZGlnZXN0ID0gW107XHJcbiAgICAgICAgdmFyIHRvdGFsQml0cyA9IHRoaXMudG90YWxfICogODtcclxuICAgICAgICAvLyBBZGQgcGFkIDB4ODAgMHgwMCouXHJcbiAgICAgICAgaWYgKHRoaXMuaW5idWZfIDwgNTYpIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGUodGhpcy5wYWRfLCA1NiAtIHRoaXMuaW5idWZfKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKHRoaXMucGFkXywgdGhpcy5ibG9ja1NpemUgLSAodGhpcy5pbmJ1Zl8gLSA1NikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBBZGQgIyBiaXRzLlxyXG4gICAgICAgIGZvciAodmFyIGkgPSB0aGlzLmJsb2NrU2l6ZSAtIDE7IGkgPj0gNTY7IGktLSkge1xyXG4gICAgICAgICAgICB0aGlzLmJ1Zl9baV0gPSB0b3RhbEJpdHMgJiAyNTU7XHJcbiAgICAgICAgICAgIHRvdGFsQml0cyAvPSAyNTY7IC8vIERvbid0IHVzZSBiaXQtc2hpZnRpbmcgaGVyZSFcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb21wcmVzc18odGhpcy5idWZfKTtcclxuICAgICAgICB2YXIgbiA9IDA7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA1OyBpKyspIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDI0OyBqID49IDA7IGogLT0gOCkge1xyXG4gICAgICAgICAgICAgICAgZGlnZXN0W25dID0gKHRoaXMuY2hhaW5fW2ldID4+IGopICYgMjU1O1xyXG4gICAgICAgICAgICAgICAgKytuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkaWdlc3Q7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFNoYTE7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBIZWxwZXIgdG8gbWFrZSBhIFN1YnNjcmliZSBmdW5jdGlvbiAoanVzdCBsaWtlIFByb21pc2UgaGVscHMgbWFrZSBhXHJcbiAqIFRoZW5hYmxlKS5cclxuICpcclxuICogQHBhcmFtIGV4ZWN1dG9yIEZ1bmN0aW9uIHdoaWNoIGNhbiBtYWtlIGNhbGxzIHRvIGEgc2luZ2xlIE9ic2VydmVyXHJcbiAqICAgICBhcyBhIHByb3h5LlxyXG4gKiBAcGFyYW0gb25Ob09ic2VydmVycyBDYWxsYmFjayB3aGVuIGNvdW50IG9mIE9ic2VydmVycyBnb2VzIHRvIHplcm8uXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVTdWJzY3JpYmUoZXhlY3V0b3IsIG9uTm9PYnNlcnZlcnMpIHtcclxuICAgIHZhciBwcm94eSA9IG5ldyBPYnNlcnZlclByb3h5KGV4ZWN1dG9yLCBvbk5vT2JzZXJ2ZXJzKTtcclxuICAgIHJldHVybiBwcm94eS5zdWJzY3JpYmUuYmluZChwcm94eSk7XHJcbn1cclxuLyoqXHJcbiAqIEltcGxlbWVudCBmYW4tb3V0IGZvciBhbnkgbnVtYmVyIG9mIE9ic2VydmVycyBhdHRhY2hlZCB2aWEgYSBzdWJzY3JpYmVcclxuICogZnVuY3Rpb24uXHJcbiAqL1xyXG52YXIgT2JzZXJ2ZXJQcm94eSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIGV4ZWN1dG9yIEZ1bmN0aW9uIHdoaWNoIGNhbiBtYWtlIGNhbGxzIHRvIGEgc2luZ2xlIE9ic2VydmVyXHJcbiAgICAgKiAgICAgYXMgYSBwcm94eS5cclxuICAgICAqIEBwYXJhbSBvbk5vT2JzZXJ2ZXJzIENhbGxiYWNrIHdoZW4gY291bnQgb2YgT2JzZXJ2ZXJzIGdvZXMgdG8gemVyby5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gT2JzZXJ2ZXJQcm94eShleGVjdXRvciwgb25Ob09ic2VydmVycykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZlcnMgPSBbXTtcclxuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXJDb3VudCA9IDA7XHJcbiAgICAgICAgLy8gTWljcm8tdGFzayBzY2hlZHVsaW5nIGJ5IGNhbGxpbmcgdGFzay50aGVuKCkuXHJcbiAgICAgICAgdGhpcy50YXNrID0gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgdGhpcy5maW5hbGl6ZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLm9uTm9PYnNlcnZlcnMgPSBvbk5vT2JzZXJ2ZXJzO1xyXG4gICAgICAgIC8vIENhbGwgdGhlIGV4ZWN1dG9yIGFzeW5jaHJvbm91c2x5IHNvIHN1YnNjcmliZXJzIHRoYXQgYXJlIGNhbGxlZFxyXG4gICAgICAgIC8vIHN5bmNocm9ub3VzbHkgYWZ0ZXIgdGhlIGNyZWF0aW9uIG9mIHRoZSBzdWJzY3JpYmUgZnVuY3Rpb25cclxuICAgICAgICAvLyBjYW4gc3RpbGwgcmVjZWl2ZSB0aGUgdmVyeSBmaXJzdCB2YWx1ZSBnZW5lcmF0ZWQgaW4gdGhlIGV4ZWN1dG9yLlxyXG4gICAgICAgIHRoaXMudGFza1xyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGV4ZWN1dG9yKF90aGlzKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgX3RoaXMuZXJyb3IoZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBPYnNlcnZlclByb3h5LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5mb3JFYWNoT2JzZXJ2ZXIoZnVuY3Rpb24gKG9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQodmFsdWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIE9ic2VydmVyUHJveHkucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgdGhpcy5mb3JFYWNoT2JzZXJ2ZXIoZnVuY3Rpb24gKG9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKGVycm9yKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmNsb3NlKGVycm9yKTtcclxuICAgIH07XHJcbiAgICBPYnNlcnZlclByb3h5LnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLmZvckVhY2hPYnNlcnZlcihmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTdWJzY3JpYmUgZnVuY3Rpb24gdGhhdCBjYW4gYmUgdXNlZCB0byBhZGQgYW4gT2JzZXJ2ZXIgdG8gdGhlIGZhbi1vdXQgbGlzdC5cclxuICAgICAqXHJcbiAgICAgKiAtIFdlIHJlcXVpcmUgdGhhdCBubyBldmVudCBpcyBzZW50IHRvIGEgc3Vic2NyaWJlciBzeWNocm9ub3VzbHkgdG8gdGhlaXJcclxuICAgICAqICAgY2FsbCB0byBzdWJzY3JpYmUoKS5cclxuICAgICAqL1xyXG4gICAgT2JzZXJ2ZXJQcm94eS5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKG5leHRPck9ic2VydmVyLCBlcnJvciwgY29tcGxldGUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBvYnNlcnZlcjtcclxuICAgICAgICBpZiAobmV4dE9yT2JzZXJ2ZXIgPT09IHVuZGVmaW5lZCAmJlxyXG4gICAgICAgICAgICBlcnJvciA9PT0gdW5kZWZpbmVkICYmXHJcbiAgICAgICAgICAgIGNvbXBsZXRlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIE9ic2VydmVyLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBBc3NlbWJsZSBhbiBPYnNlcnZlciBvYmplY3Qgd2hlbiBwYXNzZWQgYXMgY2FsbGJhY2sgZnVuY3Rpb25zLlxyXG4gICAgICAgIGlmIChpbXBsZW1lbnRzQW55TWV0aG9kcyhuZXh0T3JPYnNlcnZlciwgW1xyXG4gICAgICAgICAgICAnbmV4dCcsXHJcbiAgICAgICAgICAgICdlcnJvcicsXHJcbiAgICAgICAgICAgICdjb21wbGV0ZSdcclxuICAgICAgICBdKSkge1xyXG4gICAgICAgICAgICBvYnNlcnZlciA9IG5leHRPck9ic2VydmVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIgPSB7XHJcbiAgICAgICAgICAgICAgICBuZXh0OiBuZXh0T3JPYnNlcnZlcixcclxuICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvcixcclxuICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBjb21wbGV0ZVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob2JzZXJ2ZXIubmV4dCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQgPSBub29wO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob2JzZXJ2ZXIuZXJyb3IgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBvYnNlcnZlci5lcnJvciA9IG5vb3A7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvYnNlcnZlci5jb21wbGV0ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlID0gbm9vcDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHVuc3ViID0gdGhpcy51bnN1YnNjcmliZU9uZS5iaW5kKHRoaXMsIHRoaXMub2JzZXJ2ZXJzLmxlbmd0aCk7XHJcbiAgICAgICAgLy8gQXR0ZW1wdCB0byBzdWJzY3JpYmUgdG8gYSB0ZXJtaW5hdGVkIE9ic2VydmFibGUgLSB3ZVxyXG4gICAgICAgIC8vIGp1c3QgcmVzcG9uZCB0byB0aGUgT2JzZXJ2ZXIgd2l0aCB0aGUgZmluYWwgZXJyb3Igb3IgY29tcGxldGVcclxuICAgICAgICAvLyBldmVudC5cclxuICAgICAgICBpZiAodGhpcy5maW5hbGl6ZWQpIHtcclxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1mbG9hdGluZy1wcm9taXNlc1xyXG4gICAgICAgICAgICB0aGlzLnRhc2sudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5maW5hbEVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKF90aGlzLmZpbmFsRXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIG5vdGhpbmdcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzLnB1c2gob2JzZXJ2ZXIpO1xyXG4gICAgICAgIHJldHVybiB1bnN1YjtcclxuICAgIH07XHJcbiAgICAvLyBVbnN1YnNjcmliZSBpcyBzeW5jaHJvbm91cyAtIHdlIGd1YXJhbnRlZSB0aGF0IG5vIGV2ZW50cyBhcmUgc2VudCB0b1xyXG4gICAgLy8gYW55IHVuc3Vic2NyaWJlZCBPYnNlcnZlci5cclxuICAgIE9ic2VydmVyUHJveHkucHJvdG90eXBlLnVuc3Vic2NyaWJlT25lID0gZnVuY3Rpb24gKGkpIHtcclxuICAgICAgICBpZiAodGhpcy5vYnNlcnZlcnMgPT09IHVuZGVmaW5lZCB8fCB0aGlzLm9ic2VydmVyc1tpXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZGVsZXRlIHRoaXMub2JzZXJ2ZXJzW2ldO1xyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXJDb3VudCAtPSAxO1xyXG4gICAgICAgIGlmICh0aGlzLm9ic2VydmVyQ291bnQgPT09IDAgJiYgdGhpcy5vbk5vT2JzZXJ2ZXJzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5vbk5vT2JzZXJ2ZXJzKHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBPYnNlcnZlclByb3h5LnByb3RvdHlwZS5mb3JFYWNoT2JzZXJ2ZXIgPSBmdW5jdGlvbiAoZm4pIHtcclxuICAgICAgICBpZiAodGhpcy5maW5hbGl6ZWQpIHtcclxuICAgICAgICAgICAgLy8gQWxyZWFkeSBjbG9zZWQgYnkgcHJldmlvdXMgZXZlbnQuLi4uanVzdCBlYXQgdGhlIGFkZGl0aW9uYWwgdmFsdWVzLlxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFNpbmNlIHNlbmRPbmUgY2FsbHMgYXN5bmNocm9ub3VzbHkgLSB0aGVyZSBpcyBubyBjaGFuY2UgdGhhdFxyXG4gICAgICAgIC8vIHRoaXMub2JzZXJ2ZXJzIHdpbGwgYmVjb21lIHVuZGVmaW5lZC5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMub2JzZXJ2ZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VuZE9uZShpLCBmbik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8vIENhbGwgdGhlIE9ic2VydmVyIHZpYSBvbmUgb2YgaXQncyBjYWxsYmFjayBmdW5jdGlvbi4gV2UgYXJlIGNhcmVmdWwgdG9cclxuICAgIC8vIGNvbmZpcm0gdGhhdCB0aGUgb2JzZXJ2ZSBoYXMgbm90IGJlZW4gdW5zdWJzY3JpYmVkIHNpbmNlIHRoaXMgYXN5bmNocm9ub3VzXHJcbiAgICAvLyBmdW5jdGlvbiBoYWQgYmVlbiBxdWV1ZWQuXHJcbiAgICBPYnNlcnZlclByb3h5LnByb3RvdHlwZS5zZW5kT25lID0gZnVuY3Rpb24gKGksIGZuKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAvLyBFeGVjdXRlIHRoZSBjYWxsYmFjayBhc3luY2hyb25vdXNseVxyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcclxuICAgICAgICB0aGlzLnRhc2sudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChfdGhpcy5vYnNlcnZlcnMgIT09IHVuZGVmaW5lZCAmJiBfdGhpcy5vYnNlcnZlcnNbaV0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBmbihfdGhpcy5vYnNlcnZlcnNbaV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBJZ25vcmUgZXhjZXB0aW9ucyByYWlzZWQgaW4gT2JzZXJ2ZXJzIG9yIG1pc3NpbmcgbWV0aG9kcyBvZiBhblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIE9ic2VydmVyLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIExvZyBlcnJvciB0byBjb25zb2xlLiBiLzMxNDA0ODA2XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiBjb25zb2xlLmVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgT2JzZXJ2ZXJQcm94eS5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAodGhpcy5maW5hbGl6ZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmZpbmFsaXplZCA9IHRydWU7XHJcbiAgICAgICAgaWYgKGVyciAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmluYWxFcnJvciA9IGVycjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gUHJveHkgaXMgbm8gbG9uZ2VyIG5lZWRlZCAtIGdhcmJhZ2UgY29sbGVjdCByZWZlcmVuY2VzXHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1mbG9hdGluZy1wcm9taXNlc1xyXG4gICAgICAgIHRoaXMudGFzay50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMub2JzZXJ2ZXJzID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICBfdGhpcy5vbk5vT2JzZXJ2ZXJzID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBPYnNlcnZlclByb3h5O1xyXG59KCkpO1xyXG4vKiogVHVybiBzeW5jaHJvbm91cyBmdW5jdGlvbiBpbnRvIG9uZSBjYWxsZWQgYXN5bmNocm9ub3VzbHkuICovXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzXHJcbmZ1bmN0aW9uIGFzeW5jKGZuLCBvbkVycm9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICBQcm9taXNlLnJlc29sdmUodHJ1ZSlcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBmbi5hcHBseSh2b2lkIDAsIGFyZ3MpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgaWYgKG9uRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIG9uRXJyb3IoZXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgb2JqZWN0IHBhc3NlZCBpbiBpbXBsZW1lbnRzIGFueSBvZiB0aGUgbmFtZWQgbWV0aG9kcy5cclxuICovXHJcbmZ1bmN0aW9uIGltcGxlbWVudHNBbnlNZXRob2RzKG9iaiwgbWV0aG9kcykge1xyXG4gICAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGZvciAodmFyIF9pID0gMCwgbWV0aG9kc18xID0gbWV0aG9kczsgX2kgPCBtZXRob2RzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyIG1ldGhvZCA9IG1ldGhvZHNfMVtfaV07XHJcbiAgICAgICAgaWYgKG1ldGhvZCBpbiBvYmogJiYgdHlwZW9mIG9ialttZXRob2RdID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5mdW5jdGlvbiBub29wKCkge1xyXG4gICAgLy8gZG8gbm90aGluZ1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBDaGVjayB0byBtYWtlIHN1cmUgdGhlIGFwcHJvcHJpYXRlIG51bWJlciBvZiBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIGZvciBhIHB1YmxpYyBmdW5jdGlvbi5cclxuICogVGhyb3dzIGFuIGVycm9yIGlmIGl0IGZhaWxzLlxyXG4gKlxyXG4gKiBAcGFyYW0gZm5OYW1lIFRoZSBmdW5jdGlvbiBuYW1lXHJcbiAqIEBwYXJhbSBtaW5Db3VudCBUaGUgbWluaW11bSBudW1iZXIgb2YgYXJndW1lbnRzIHRvIGFsbG93IGZvciB0aGUgZnVuY3Rpb24gY2FsbFxyXG4gKiBAcGFyYW0gbWF4Q291bnQgVGhlIG1heGltdW0gbnVtYmVyIG9mIGFyZ3VtZW50IHRvIGFsbG93IGZvciB0aGUgZnVuY3Rpb24gY2FsbFxyXG4gKiBAcGFyYW0gYXJnQ291bnQgVGhlIGFjdHVhbCBudW1iZXIgb2YgYXJndW1lbnRzIHByb3ZpZGVkLlxyXG4gKi9cclxudmFyIHZhbGlkYXRlQXJnQ291bnQgPSBmdW5jdGlvbiAoZm5OYW1lLCBtaW5Db3VudCwgbWF4Q291bnQsIGFyZ0NvdW50KSB7XHJcbiAgICB2YXIgYXJnRXJyb3I7XHJcbiAgICBpZiAoYXJnQ291bnQgPCBtaW5Db3VudCkge1xyXG4gICAgICAgIGFyZ0Vycm9yID0gJ2F0IGxlYXN0ICcgKyBtaW5Db3VudDtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGFyZ0NvdW50ID4gbWF4Q291bnQpIHtcclxuICAgICAgICBhcmdFcnJvciA9IG1heENvdW50ID09PSAwID8gJ25vbmUnIDogJ25vIG1vcmUgdGhhbiAnICsgbWF4Q291bnQ7XHJcbiAgICB9XHJcbiAgICBpZiAoYXJnRXJyb3IpIHtcclxuICAgICAgICB2YXIgZXJyb3IgPSBmbk5hbWUgK1xyXG4gICAgICAgICAgICAnIGZhaWxlZDogV2FzIGNhbGxlZCB3aXRoICcgK1xyXG4gICAgICAgICAgICBhcmdDb3VudCArXHJcbiAgICAgICAgICAgIChhcmdDb3VudCA9PT0gMSA/ICcgYXJndW1lbnQuJyA6ICcgYXJndW1lbnRzLicpICtcclxuICAgICAgICAgICAgJyBFeHBlY3RzICcgK1xyXG4gICAgICAgICAgICBhcmdFcnJvciArXHJcbiAgICAgICAgICAgICcuJztcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IpO1xyXG4gICAgfVxyXG59O1xyXG4vKipcclxuICogR2VuZXJhdGVzIGEgc3RyaW5nIHRvIHByZWZpeCBhbiBlcnJvciBtZXNzYWdlIGFib3V0IGZhaWxlZCBhcmd1bWVudCB2YWxpZGF0aW9uXHJcbiAqXHJcbiAqIEBwYXJhbSBmbk5hbWUgVGhlIGZ1bmN0aW9uIG5hbWVcclxuICogQHBhcmFtIGFyZ3VtZW50TnVtYmVyIFRoZSBpbmRleCBvZiB0aGUgYXJndW1lbnRcclxuICogQHBhcmFtIG9wdGlvbmFsIFdoZXRoZXIgb3Igbm90IHRoZSBhcmd1bWVudCBpcyBvcHRpb25hbFxyXG4gKiBAcmV0dXJuIFRoZSBwcmVmaXggdG8gYWRkIHRvIHRoZSBlcnJvciB0aHJvd24gZm9yIHZhbGlkYXRpb24uXHJcbiAqL1xyXG5mdW5jdGlvbiBlcnJvclByZWZpeChmbk5hbWUsIGFyZ3VtZW50TnVtYmVyLCBvcHRpb25hbCkge1xyXG4gICAgdmFyIGFyZ05hbWUgPSAnJztcclxuICAgIHN3aXRjaCAoYXJndW1lbnROdW1iZXIpIHtcclxuICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgIGFyZ05hbWUgPSBvcHRpb25hbCA/ICdmaXJzdCcgOiAnRmlyc3QnO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgIGFyZ05hbWUgPSBvcHRpb25hbCA/ICdzZWNvbmQnIDogJ1NlY29uZCc7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgYXJnTmFtZSA9IG9wdGlvbmFsID8gJ3RoaXJkJyA6ICdUaGlyZCc7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgYXJnTmFtZSA9IG9wdGlvbmFsID8gJ2ZvdXJ0aCcgOiAnRm91cnRoJztcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdlcnJvclByZWZpeCBjYWxsZWQgd2l0aCBhcmd1bWVudE51bWJlciA+IDQuICBOZWVkIHRvIHVwZGF0ZSBpdD8nKTtcclxuICAgIH1cclxuICAgIHZhciBlcnJvciA9IGZuTmFtZSArICcgZmFpbGVkOiAnO1xyXG4gICAgZXJyb3IgKz0gYXJnTmFtZSArICcgYXJndW1lbnQgJztcclxuICAgIHJldHVybiBlcnJvcjtcclxufVxyXG4vKipcclxuICogQHBhcmFtIGZuTmFtZVxyXG4gKiBAcGFyYW0gYXJndW1lbnROdW1iZXJcclxuICogQHBhcmFtIG5hbWVzcGFjZVxyXG4gKiBAcGFyYW0gb3B0aW9uYWxcclxuICovXHJcbmZ1bmN0aW9uIHZhbGlkYXRlTmFtZXNwYWNlKGZuTmFtZSwgYXJndW1lbnROdW1iZXIsIG5hbWVzcGFjZSwgb3B0aW9uYWwpIHtcclxuICAgIGlmIChvcHRpb25hbCAmJiAhbmFtZXNwYWNlKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBuYW1lc3BhY2UgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgLy9UT0RPOiBJIHNob3VsZCBkbyBtb3JlIHZhbGlkYXRpb24gaGVyZS4gV2Ugb25seSBhbGxvdyBjZXJ0YWluIGNoYXJzIGluIG5hbWVzcGFjZXMuXHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yUHJlZml4KGZuTmFtZSwgYXJndW1lbnROdW1iZXIsIG9wdGlvbmFsKSArXHJcbiAgICAgICAgICAgICdtdXN0IGJlIGEgdmFsaWQgZmlyZWJhc2UgbmFtZXNwYWNlLicpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHZhbGlkYXRlQ2FsbGJhY2soZm5OYW1lLCBhcmd1bWVudE51bWJlciwgXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzXHJcbmNhbGxiYWNrLCBvcHRpb25hbCkge1xyXG4gICAgaWYgKG9wdGlvbmFsICYmICFjYWxsYmFjaykge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JQcmVmaXgoZm5OYW1lLCBhcmd1bWVudE51bWJlciwgb3B0aW9uYWwpICtcclxuICAgICAgICAgICAgJ211c3QgYmUgYSB2YWxpZCBmdW5jdGlvbi4nKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiB2YWxpZGF0ZUNvbnRleHRPYmplY3QoZm5OYW1lLCBhcmd1bWVudE51bWJlciwgY29udGV4dCwgb3B0aW9uYWwpIHtcclxuICAgIGlmIChvcHRpb25hbCAmJiAhY29udGV4dCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgY29udGV4dCAhPT0gJ29iamVjdCcgfHwgY29udGV4dCA9PT0gbnVsbCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclByZWZpeChmbk5hbWUsIGFyZ3VtZW50TnVtYmVyLCBvcHRpb25hbCkgK1xyXG4gICAgICAgICAgICAnbXVzdCBiZSBhIHZhbGlkIGNvbnRleHQgb2JqZWN0LicpO1xyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8vIENvZGUgb3JpZ2luYWxseSBjYW1lIGZyb20gZ29vZy5jcnlwdC5zdHJpbmdUb1V0ZjhCeXRlQXJyYXksIGJ1dCBmb3Igc29tZSByZWFzb24gdGhleVxyXG4vLyBhdXRvbWF0aWNhbGx5IHJlcGxhY2VkICdcXHJcXG4nIHdpdGggJ1xcbicsIGFuZCB0aGV5IGRpZG4ndCBoYW5kbGUgc3Vycm9nYXRlIHBhaXJzLFxyXG4vLyBzbyBpdCdzIGJlZW4gbW9kaWZpZWQuXHJcbi8vIE5vdGUgdGhhdCBub3QgYWxsIFVuaWNvZGUgY2hhcmFjdGVycyBhcHBlYXIgYXMgc2luZ2xlIGNoYXJhY3RlcnMgaW4gSmF2YVNjcmlwdCBzdHJpbmdzLlxyXG4vLyBmcm9tQ2hhckNvZGUgcmV0dXJucyB0aGUgVVRGLTE2IGVuY29kaW5nIG9mIGEgY2hhcmFjdGVyIC0gc28gc29tZSBVbmljb2RlIGNoYXJhY3RlcnNcclxuLy8gdXNlIDIgY2hhcmFjdGVycyBpbiBKYXZhc2NyaXB0LiAgQWxsIDQtYnl0ZSBVVEYtOCBjaGFyYWN0ZXJzIGJlZ2luIHdpdGggYSBmaXJzdFxyXG4vLyBjaGFyYWN0ZXIgaW4gdGhlIHJhbmdlIDB4RDgwMCAtIDB4REJGRiAodGhlIGZpcnN0IGNoYXJhY3RlciBvZiBhIHNvLWNhbGxlZCBzdXJyb2dhdGVcclxuLy8gcGFpcikuXHJcbi8vIFNlZSBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNS4xLyNzZWMtMTUuMS4zXHJcbi8qKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXHJcbiAqIEByZXR1cm4ge0FycmF5fVxyXG4gKi9cclxudmFyIHN0cmluZ1RvQnl0ZUFycmF5JDEgPSBmdW5jdGlvbiAoc3RyKSB7XHJcbiAgICB2YXIgb3V0ID0gW107XHJcbiAgICB2YXIgcCA9IDA7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSk7XHJcbiAgICAgICAgLy8gSXMgdGhpcyB0aGUgbGVhZCBzdXJyb2dhdGUgaW4gYSBzdXJyb2dhdGUgcGFpcj9cclxuICAgICAgICBpZiAoYyA+PSAweGQ4MDAgJiYgYyA8PSAweGRiZmYpIHtcclxuICAgICAgICAgICAgdmFyIGhpZ2ggPSBjIC0gMHhkODAwOyAvLyB0aGUgaGlnaCAxMCBiaXRzLlxyXG4gICAgICAgICAgICBpKys7XHJcbiAgICAgICAgICAgIGFzc2VydChpIDwgc3RyLmxlbmd0aCwgJ1N1cnJvZ2F0ZSBwYWlyIG1pc3NpbmcgdHJhaWwgc3Vycm9nYXRlLicpO1xyXG4gICAgICAgICAgICB2YXIgbG93ID0gc3RyLmNoYXJDb2RlQXQoaSkgLSAweGRjMDA7IC8vIHRoZSBsb3cgMTAgYml0cy5cclxuICAgICAgICAgICAgYyA9IDB4MTAwMDAgKyAoaGlnaCA8PCAxMCkgKyBsb3c7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjIDwgMTI4KSB7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gYztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYyA8IDIwNDgpIHtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyA+PiA2KSB8IDE5MjtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyAmIDYzKSB8IDEyODtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYyA8IDY1NTM2KSB7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgPj4gMTIpIHwgMjI0O1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9ICgoYyA+PiA2KSAmIDYzKSB8IDEyODtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyAmIDYzKSB8IDEyODtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgPj4gMTgpIHwgMjQwO1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9ICgoYyA+PiAxMikgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKChjID4+IDYpICYgNjMpIHwgMTI4O1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBvdXQ7XHJcbn07XHJcbi8qKlxyXG4gKiBDYWxjdWxhdGUgbGVuZ3RoIHdpdGhvdXQgYWN0dWFsbHkgY29udmVydGluZzsgdXNlZnVsIGZvciBkb2luZyBjaGVhcGVyIHZhbGlkYXRpb24uXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcclxuICogQHJldHVybiB7bnVtYmVyfVxyXG4gKi9cclxudmFyIHN0cmluZ0xlbmd0aCA9IGZ1bmN0aW9uIChzdHIpIHtcclxuICAgIHZhciBwID0gMDtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmFyIGMgPSBzdHIuY2hhckNvZGVBdChpKTtcclxuICAgICAgICBpZiAoYyA8IDEyOCkge1xyXG4gICAgICAgICAgICBwKys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGMgPCAyMDQ4KSB7XHJcbiAgICAgICAgICAgIHAgKz0gMjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYyA+PSAweGQ4MDAgJiYgYyA8PSAweGRiZmYpIHtcclxuICAgICAgICAgICAgLy8gTGVhZCBzdXJyb2dhdGUgb2YgYSBzdXJyb2dhdGUgcGFpci4gIFRoZSBwYWlyIHRvZ2V0aGVyIHdpbGwgdGFrZSA0IGJ5dGVzIHRvIHJlcHJlc2VudC5cclxuICAgICAgICAgICAgcCArPSA0O1xyXG4gICAgICAgICAgICBpKys7IC8vIHNraXAgdHJhaWwgc3Vycm9nYXRlLlxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcCArPSAzO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBwO1xyXG59O1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogVGhlIGFtb3VudCBvZiBtaWxsaXNlY29uZHMgdG8gZXhwb25lbnRpYWxseSBpbmNyZWFzZS5cclxuICovXHJcbnZhciBERUZBVUxUX0lOVEVSVkFMX01JTExJUyA9IDEwMDA7XHJcbi8qKlxyXG4gKiBUaGUgZmFjdG9yIHRvIGJhY2tvZmYgYnkuXHJcbiAqIFNob3VsZCBiZSBhIG51bWJlciBncmVhdGVyIHRoYW4gMS5cclxuICovXHJcbnZhciBERUZBVUxUX0JBQ0tPRkZfRkFDVE9SID0gMjtcclxuLyoqXHJcbiAqIFRoZSBtYXhpbXVtIG1pbGxpc2Vjb25kcyB0byBpbmNyZWFzZSB0by5cclxuICpcclxuICogPHA+VmlzaWJsZSBmb3IgdGVzdGluZ1xyXG4gKi9cclxudmFyIE1BWF9WQUxVRV9NSUxMSVMgPSA0ICogNjAgKiA2MCAqIDEwMDA7IC8vIEZvdXIgaG91cnMsIGxpa2UgaU9TIGFuZCBBbmRyb2lkLlxyXG4vKipcclxuICogVGhlIHBlcmNlbnRhZ2Ugb2YgYmFja29mZiB0aW1lIHRvIHJhbmRvbWl6ZSBieS5cclxuICogU2VlXHJcbiAqIGh0dHA6Ly9nby9zYWZlLWNsaWVudC1iZWhhdmlvciNzdGVwLTEtZGV0ZXJtaW5lLXRoZS1hcHByb3ByaWF0ZS1yZXRyeS1pbnRlcnZhbC10by1oYW5kbGUtc3Bpa2UtdHJhZmZpY1xyXG4gKiBmb3IgY29udGV4dC5cclxuICpcclxuICogPHA+VmlzaWJsZSBmb3IgdGVzdGluZ1xyXG4gKi9cclxudmFyIFJBTkRPTV9GQUNUT1IgPSAwLjU7XHJcbi8qKlxyXG4gKiBCYXNlZCBvbiB0aGUgYmFja29mZiBtZXRob2QgZnJvbVxyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL2Nsb3N1cmUtbGlicmFyeS9ibG9iL21hc3Rlci9jbG9zdXJlL2dvb2cvbWF0aC9leHBvbmVudGlhbGJhY2tvZmYuanMuXHJcbiAqIEV4dHJhY3RlZCBoZXJlIHNvIHdlIGRvbid0IG5lZWQgdG8gcGFzcyBtZXRhZGF0YSBhbmQgYSBzdGF0ZWZ1bCBFeHBvbmVudGlhbEJhY2tvZmYgb2JqZWN0IGFyb3VuZC5cclxuICovXHJcbmZ1bmN0aW9uIGNhbGN1bGF0ZUJhY2tvZmZNaWxsaXMoYmFja29mZkNvdW50LCBpbnRlcnZhbE1pbGxpcywgYmFja29mZkZhY3Rvcikge1xyXG4gICAgaWYgKGludGVydmFsTWlsbGlzID09PSB2b2lkIDApIHsgaW50ZXJ2YWxNaWxsaXMgPSBERUZBVUxUX0lOVEVSVkFMX01JTExJUzsgfVxyXG4gICAgaWYgKGJhY2tvZmZGYWN0b3IgPT09IHZvaWQgMCkgeyBiYWNrb2ZmRmFjdG9yID0gREVGQVVMVF9CQUNLT0ZGX0ZBQ1RPUjsgfVxyXG4gICAgLy8gQ2FsY3VsYXRlcyBhbiBleHBvbmVudGlhbGx5IGluY3JlYXNpbmcgdmFsdWUuXHJcbiAgICAvLyBEZXZpYXRpb246IGNhbGN1bGF0ZXMgdmFsdWUgZnJvbSBjb3VudCBhbmQgYSBjb25zdGFudCBpbnRlcnZhbCwgc28gd2Ugb25seSBuZWVkIHRvIHNhdmUgdmFsdWVcclxuICAgIC8vIGFuZCBjb3VudCB0byByZXN0b3JlIHN0YXRlLlxyXG4gICAgdmFyIGN1cnJCYXNlVmFsdWUgPSBpbnRlcnZhbE1pbGxpcyAqIE1hdGgucG93KGJhY2tvZmZGYWN0b3IsIGJhY2tvZmZDb3VudCk7XHJcbiAgICAvLyBBIHJhbmRvbSBcImZ1enpcIiB0byBhdm9pZCB3YXZlcyBvZiByZXRyaWVzLlxyXG4gICAgLy8gRGV2aWF0aW9uOiByYW5kb21GYWN0b3IgaXMgcmVxdWlyZWQuXHJcbiAgICB2YXIgcmFuZG9tV2FpdCA9IE1hdGgucm91bmQoXHJcbiAgICAvLyBBIGZyYWN0aW9uIG9mIHRoZSBiYWNrb2ZmIHZhbHVlIHRvIGFkZC9zdWJ0cmFjdC5cclxuICAgIC8vIERldmlhdGlvbjogY2hhbmdlcyBtdWx0aXBsaWNhdGlvbiBvcmRlciB0byBpbXByb3ZlIHJlYWRhYmlsaXR5LlxyXG4gICAgUkFORE9NX0ZBQ1RPUiAqXHJcbiAgICAgICAgY3VyckJhc2VWYWx1ZSAqXHJcbiAgICAgICAgLy8gQSByYW5kb20gZmxvYXQgKHJvdW5kZWQgdG8gaW50IGJ5IE1hdGgucm91bmQgYWJvdmUpIGluIHRoZSByYW5nZSBbLTEsIDFdLiBEZXRlcm1pbmVzXHJcbiAgICAgICAgLy8gaWYgd2UgYWRkIG9yIHN1YnRyYWN0LlxyXG4gICAgICAgIChNYXRoLnJhbmRvbSgpIC0gMC41KSAqXHJcbiAgICAgICAgMik7XHJcbiAgICAvLyBMaW1pdHMgYmFja29mZiB0byBtYXggdG8gYXZvaWQgZWZmZWN0aXZlbHkgcGVybWFuZW50IGJhY2tvZmYuXHJcbiAgICByZXR1cm4gTWF0aC5taW4oTUFYX1ZBTFVFX01JTExJUywgY3VyckJhc2VWYWx1ZSArIHJhbmRvbVdhaXQpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBQcm92aWRlIEVuZ2xpc2ggb3JkaW5hbCBsZXR0ZXJzIGFmdGVyIGEgbnVtYmVyXHJcbiAqL1xyXG5mdW5jdGlvbiBvcmRpbmFsKGkpIHtcclxuICAgIGlmICghTnVtYmVyLmlzRmluaXRlKGkpKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiXCIgKyBpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGkgKyBpbmRpY2F0b3IoaSk7XHJcbn1cclxuZnVuY3Rpb24gaW5kaWNhdG9yKGkpIHtcclxuICAgIGkgPSBNYXRoLmFicyhpKTtcclxuICAgIHZhciBjZW50ID0gaSAlIDEwMDtcclxuICAgIGlmIChjZW50ID49IDEwICYmIGNlbnQgPD0gMjApIHtcclxuICAgICAgICByZXR1cm4gJ3RoJztcclxuICAgIH1cclxuICAgIHZhciBkZWMgPSBpICUgMTA7XHJcbiAgICBpZiAoZGVjID09PSAxKSB7XHJcbiAgICAgICAgcmV0dXJuICdzdCc7XHJcbiAgICB9XHJcbiAgICBpZiAoZGVjID09PSAyKSB7XHJcbiAgICAgICAgcmV0dXJuICduZCc7XHJcbiAgICB9XHJcbiAgICBpZiAoZGVjID09PSAzKSB7XHJcbiAgICAgICAgcmV0dXJuICdyZCc7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gJ3RoJztcclxufVxuXG5leHBvcnQgeyBDT05TVEFOVFMsIERlZmVycmVkLCBFcnJvckZhY3RvcnksIEZpcmViYXNlRXJyb3IsIE1BWF9WQUxVRV9NSUxMSVMsIFJBTkRPTV9GQUNUT1IsIFNoYTEsIGFyZUNvb2tpZXNFbmFibGVkLCBhc3NlcnQsIGFzc2VydGlvbkVycm9yLCBhc3luYywgYmFzZTY0LCBiYXNlNjREZWNvZGUsIGJhc2U2NEVuY29kZSwgY2FsY3VsYXRlQmFja29mZk1pbGxpcywgY29udGFpbnMsIGNyZWF0ZVN1YnNjcmliZSwgZGVjb2RlLCBkZWVwQ29weSwgZGVlcEV4dGVuZCwgZXJyb3JQcmVmaXgsIGdldFVBLCBpc0FkbWluLCBpc0Jyb3dzZXIsIGlzQnJvd3NlckV4dGVuc2lvbiwgaXNFbGVjdHJvbiwgaXNFbXB0eSwgaXNJRSwgaXNJbmRleGVkREJBdmFpbGFibGUsIGlzTW9iaWxlQ29yZG92YSwgaXNOb2RlLCBpc05vZGVTZGssIGlzUmVhY3ROYXRpdmUsIGlzU2FmYXJpLCBpc1VXUCwgaXNWYWxpZEZvcm1hdCwgaXNWYWxpZFRpbWVzdGFtcCwgaXNzdWVkQXRUaW1lLCBqc29uRXZhbCwgbWFwLCBvcmRpbmFsLCBxdWVyeXN0cmluZywgcXVlcnlzdHJpbmdEZWNvZGUsIHNhZmVHZXQsIHN0cmluZ0xlbmd0aCwgc3RyaW5nVG9CeXRlQXJyYXkkMSBhcyBzdHJpbmdUb0J5dGVBcnJheSwgc3RyaW5naWZ5LCB2YWxpZGF0ZUFyZ0NvdW50LCB2YWxpZGF0ZUNhbGxiYWNrLCB2YWxpZGF0ZUNvbnRleHRPYmplY3QsIHZhbGlkYXRlSW5kZXhlZERCT3BlbmFibGUsIHZhbGlkYXRlTmFtZXNwYWNlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lc20uanMubWFwXG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBydW50aW1lID0gKGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgZnVuY3Rpb24gZGVmaW5lKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIG9ialtrZXldO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gSUUgOCBoYXMgYSBicm9rZW4gT2JqZWN0LmRlZmluZVByb3BlcnR5IHRoYXQgb25seSB3b3JrcyBvbiBET00gb2JqZWN0cy5cbiAgICBkZWZpbmUoe30sIFwiXCIpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBkZWZpbmUgPSBmdW5jdGlvbihvYmosIGtleSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBvYmpba2V5XSA9IHZhbHVlO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IGRlZmluZShcbiAgICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSxcbiAgICB0b1N0cmluZ1RhZ1N5bWJvbCxcbiAgICBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgKTtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBkZWZpbmUocHJvdG90eXBlLCBtZXRob2QsIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBkZWZpbmUoZ2VuRnVuLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JGdW5jdGlvblwiKTtcbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgZXhwb3J0cy5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yLCBQcm9taXNlSW1wbCkge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlSW1wbChmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIEFzeW5jSXRlcmF0b3IucHJvdG90eXBlW2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBleHBvcnRzLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBleHBvcnRzLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QsIFByb21pc2VJbXBsKSB7XG4gICAgaWYgKFByb21pc2VJbXBsID09PSB2b2lkIDApIFByb21pc2VJbXBsID0gUHJvbWlzZTtcblxuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSxcbiAgICAgIFByb21pc2VJbXBsXG4gICAgKTtcblxuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAvLyBOb3RlOiBbXCJyZXR1cm5cIl0gbXVzdCBiZSB1c2VkIGZvciBFUzMgcGFyc2luZyBjb21wYXRpYmlsaXR5LlxuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBkZWZpbmUoR3AsIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvclwiKTtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiA/IG1vZHVsZS5leHBvcnRzIDoge31cbikpO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgLy8gVGhpcyBtb2R1bGUgc2hvdWxkIG5vdCBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLCBzbyB0aGUgYWJvdmVcbiAgLy8gYXNzaWdubWVudCBzaG91bGQgYWx3YXlzIHdvcmsgdW5sZXNzIHNvbWV0aGluZyBpcyBtaXNjb25maWd1cmVkLiBKdXN0XG4gIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgd2UgY2FuIGVzY2FwZVxuICAvLyBzdHJpY3QgbW9kZSB1c2luZyBhIGdsb2JhbCBGdW5jdGlvbiBjYWxsLiBUaGlzIGNvdWxkIGNvbmNlaXZhYmx5IGZhaWxcbiAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gIC8vIHRoZSBwcm9wZXIgc29sdXRpb24gaXMgdG8gZml4IHRoZSBhY2NpZGVudGFsIHN0cmljdCBtb2RlIHByb2JsZW0uIElmXG4gIC8vIHlvdSd2ZSBtaXNjb25maWd1cmVkIHlvdXIgYnVuZGxlciB0byBmb3JjZSBzdHJpY3QgbW9kZSBhbmQgYXBwbGllZCBhXG4gIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAvLyBwcm9ibGVtcywgcGxlYXNlIGRldGFpbCB5b3VyIHVuaXF1ZSBwcmVkaWNhbWVudCBpbiBhIEdpdEh1YiBpc3N1ZS5cbiAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbn1cbiIsIi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NyZWF0ZUJpbmRpbmcobywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgZXhwb3J0cykge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX192YWx1ZXMobykge1xyXG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcclxuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xyXG4gICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xyXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcclxuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xyXG4gICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxyXG4gICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxyXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcclxuICAgIHJldHVybiByO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xyXG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxyXG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XHJcbiAgICB2YXIgaSwgcDtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBuID09PSBcInJldHVyblwiIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0U3Rhcihtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgcmVzdWx0W2tdID0gbW9kW2tdO1xyXG4gICAgcmVzdWx0LmRlZmF1bHQgPSBtb2Q7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHByaXZhdGVNYXApIHtcclxuICAgIGlmICghcHJpdmF0ZU1hcC5oYXMocmVjZWl2ZXIpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBnZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcHJpdmF0ZU1hcC5nZXQocmVjZWl2ZXIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgcHJpdmF0ZU1hcCwgdmFsdWUpIHtcclxuICAgIGlmICghcHJpdmF0ZU1hcC5oYXMocmVjZWl2ZXIpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBzZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlTWFwLnNldChyZWNlaXZlciwgdmFsdWUpO1xyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG59XHJcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdGlmKF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0pIHtcblx0XHRyZXR1cm4gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHRsb2FkZWQ6IGZhbHNlLFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcblx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiBtb2R1bGVbJ2RlZmF1bHQnXSA6XG5cdFx0KCkgPT4gbW9kdWxlO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmhtZCA9IChtb2R1bGUpID0+IHtcblx0bW9kdWxlID0gT2JqZWN0LmNyZWF0ZShtb2R1bGUpO1xuXHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsICdleHBvcnRzJywge1xuXHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0c2V0OiAoKSA9PiB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0VTIE1vZHVsZXMgbWF5IG5vdCBhc3NpZ24gbW9kdWxlLmV4cG9ydHMgb3IgZXhwb3J0cy4qLCBVc2UgRVNNIGV4cG9ydCBzeW50YXgsIGluc3RlYWQ6ICcgKyBtb2R1bGUuaWQpO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBtb2R1bGU7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApIiwiaW1wb3J0IGZpcmViYXNlIGZyb20gJ0BmaXJlYmFzZS9hcHAnO1xuZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJ0BmaXJlYmFzZS9hcHAnO1xuXG52YXIgbmFtZSA9IFwiZmlyZWJhc2VcIjtcbnZhciB2ZXJzaW9uID0gXCI4LjAuMVwiO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5maXJlYmFzZS5yZWdpc3RlclZlcnNpb24obmFtZSwgdmVyc2lvbiwgJ2FwcCcpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXNtLmpzLm1hcFxuIiwiXHJcbi8vaW1wb3J0IGZpcmViYXNlIGZyb20gJ2ZpcmViYXNlL2FwcCc7XHJcblxyXG5jb25zb2xlLmxvZyhcIltlbWFpbF0gRW5naW5lIGxvYWRpbmcgLi4uXCIpO1xyXG5cclxuLy9XQVJOSU5HOiBGb2xsb3dpbmcgd29ya3MgdXQgd2lsbCBpbmNsdWRlIGFsbCB0aGUgZGVwZW5kZW5jaWVzXHJcblxyXG4vL2xldCBmaXJlYmFzZSA9IHJlcXVpcmUoJ2ZpcmViYXNlL2FwcCcpO1xyXG4vL3JlcXVpcmUoJ2ZpcmViYXNlL2RhdGFiYXNlJyk7XHJcbmltcG9ydCBmaXJlYmFzZSBmcm9tICdmaXJlYmFzZS9hcHAnXHJcbmltcG9ydCAnZmlyZWJhc2UvZGF0YWJhc2UnXHJcblxyXG4vKnJlcXVpcmUoJ2ZpcmViYXNlL2F1dGgnKTtcclxucmVxdWlyZSgnZmlyZWJhc2UvZGF0YWJhc2UnKTsqL1xyXG52YXIgYXBwID0gZmlyZWJhc2UuaW5pdGlhbGl6ZUFwcCh7XHJcbiAgICBhcGlLZXk6IFwiQUl6YVN5QTd5YW9aQ3hja29peXM0c3hKZkZzX3Zrc0lNUFlRVW4wXCIsXHJcbiAgICBhdXRoRG9tYWluOiBcIm5haW9zb2Z0NjkuZmlyZWJhc2VhcHAuY29tXCIsXHJcbiAgICBkYXRhYmFzZVVSTDogXCJodHRwczovL25haW9zb2Z0NjkuZmlyZWJhc2Vpby5jb21cIixcclxuICAgIHByb2plY3RJZDogXCJuYWlvc29mdDY5XCIsXHJcbiAgICBzdG9yYWdlQnVja2V0OiBcIm5haW9zb2Z0NjkuYXBwc3BvdC5jb21cIixcclxuICAgIG1lc3NhZ2luZ1NlbmRlcklkOiBcIjkxMTc2NzAxNDA3N1wiLFxyXG4gICAgYXBwSWQ6IFwiMTo5MTE3NjcwMTQwNzc6d2ViOmM3MGY1YTE0YWMxMTFlYmY2MzQ1ZDRcIixcclxuICAgIG1lYXN1cmVtZW50SWQ6IFwiRy1CQzI2TTlGS1g2XCJcclxuICB9KTtcclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGdldExvY2F0aW9uKCl7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZT0+e1xyXG4gICAgICAgIHJldHVybiByZXNvbHZlKG51bGwpO1xyXG4gICAgICAgIGlmICghd2luZG93Lm5hdmlnYXRvci5nZW9sb2NhdGlvbikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnLi4uIGxvY2F0aW9uIGRhdGEgbm90IGF2YWlsYWJsZScpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgd2luZG93Lm5hdmlnYXRvci5nZW9sb2NhdGlvbi5nZXRDdXJyZW50UG9zaXRpb24oKGRhdGEpPT57XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCcuLi4gbG9jYXRpb24gZGF0YSByZXRpZXZlZCcpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcclxuICAgICAgICAgICAgcmVzb2x2ZShkYXRhKTtcclxuICAgICAgICB9LCAoZXJyKT0+e1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICAgICAgICAgIHJlc29sdmUobnVsbCk7XHJcbiAgICAgICAgfSlcclxuICAgIH0pXHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGFkZFVzZXIoZW1haWwsIGNhbGxiYWNrKSB7XHJcbiAgICB2YXIgdXNlcklkID0gYXBwLmRhdGFiYXNlKCkucmVmKCkuY2hpbGQoJ3Bvc3RzJykucHVzaCgpLmtleVxyXG4gICAgdmFyIGRhdGEgPSB7fTtcclxuICAgIGNvbnNvbGUubG9nKCdSZXRyaWV2aW5nIGxvY2F0aW9uIGRhdGEgb2YgYXZhaWxhYmxlLi4uJyk7XHJcbiAgICBsZXQgbG9jYXRpb24gPSBhd2FpdCBnZXRMb2NhdGlvbigpO1xyXG4gICAgY29uc29sZS5sb2coJ1B1c2hpbmcgdGhlIGRhdGEgdG8gdGhlIHNlcnZlci4uLicpO1xyXG4gICAgZGF0YVsnL3VzZXJzLycgKyB1c2VySWRdID0ge1xyXG4gICAgICAgIGVtYWlsOiBlbWFpbCxcclxuICAgICAgICByZWdpc3RlcmVkOiBuZXcgRGF0ZSgpLFxyXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxyXG4gICAgfTtcclxuICAgIC8vYXBwLmRhdGFiYXNlKCkucmVmKCd1c2Vycy8nICsgdXNlcklkKS5zZXQoe1xyXG4gICAgY29uc29sZS5sb2coYFJlZ2lzdGVyaW5nIGVtYWlsIFwiJHtlbWFpbH1cIiBhcyBpZCBcIiR7dXNlcklkfVwiLi4uYCk7XHJcbiAgICBhcHAuZGF0YWJhc2UoKS5yZWYoKS51cGRhdGUoZGF0YSwgY2FsbGJhY2spO1xyXG59XHJcblxyXG5cclxuc2VsZi5hZGRFdmVudExpc3RlbmVyKFxyXG4gICAgXCJtZXNzYWdlXCIsXHJcbiAgICBldmVudCA9PiB7XHJcbiAgICAgICAgbGV0IGlkID0gZXZlbnQuZGF0YS5pZDtcclxuICAgICAgICBsZXQgbXNnID0gZXZlbnQuZGF0YS5kYXRhO1xyXG4gICAgICBzd2l0Y2ggKG1zZy5jbWQpIHtcclxuICAgICAgICBjYXNlIFwiYWRkVXNlclwiOlxyXG4gICAgICAgICAgICBhZGRVc2VyKG1zZy5kYXRhLCAoZXJyb3IpPT57XHJcbiAgICAgICAgICAgICAgICBzZWxmLnBvc3RNZXNzYWdlKHtpZDogaWQsIGRhdGE6IGVycm9yfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBVbm1hbmFnZWQgbWVzc2FnZSBcIiR7bXNnLmNtZH1cImApO1xyXG4gICAgICAgICAgICBkZWJ1Z2dlcjtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=